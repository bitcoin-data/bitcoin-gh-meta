[
   {
      "author_association" : "MEMBER",
      "body" : "Another observation by @roconnor-blockstream: it seems `memcmp(...) <= 0` is not affected, while `memcmp(...) < 0`.",
      "created_at" : "2020-09-23T18:36:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-697857319",
      "id" : 697857319,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5Nzg1NzMxOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-23T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697857319",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Technically my claim was, from my very limited understanding, the bug can only change non-zero results from memcpy to zero results.  Still, even in this case if the result of `memcmp(x,y)` is changed from a `1` to a `0`, the value of `memcmp(...) <= 0` will change from false to true.",
      "created_at" : "2020-09-23T20:49:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-697965176",
      "id" : 697965176,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5Nzk2NTE3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-23T20:49:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697965176",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/21371712?v=4",
         "events_url" : "https://api.github.com/users/roconnor-blockstream/events{/privacy}",
         "followers_url" : "https://api.github.com/users/roconnor-blockstream/followers",
         "following_url" : "https://api.github.com/users/roconnor-blockstream/following{/other_user}",
         "gists_url" : "https://api.github.com/users/roconnor-blockstream/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/roconnor-blockstream",
         "id" : 21371712,
         "login" : "roconnor-blockstream",
         "node_id" : "MDQ6VXNlcjIxMzcxNzEy",
         "organizations_url" : "https://api.github.com/users/roconnor-blockstream/orgs",
         "received_events_url" : "https://api.github.com/users/roconnor-blockstream/received_events",
         "repos_url" : "https://api.github.com/users/roconnor-blockstream/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/roconnor-blockstream/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/roconnor-blockstream/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/roconnor-blockstream"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Here is the example of the bug appearing when using the `>` operator on 2 arrays: https://godbolt.org/z/j5en9d\r\nHere it appears with `std::lexicographical_compare`: https://godbolt.org/z/a6scYK\r\n\r\n`-fno-builtin-memcmp` Doesn't do anything for either of these (as they didn't call `memcmp`)",
      "created_at" : "2020-09-24T20:28:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-698571650",
      "id" : 698571650,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODU3MTY1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-24T21:25:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698571650",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@elichai Great find. That's... unfortunate.\r\n\r\nIt appears that code paths that use memcmp for (in)equality checks (e.g. memcmp(...) == 0) are unaffected. I suspect this means that automatically generated operator== on simple classes/structs aren't affected either. @real-or-random also found evidence for this in the bug's code.\r\n\r\nHowever, @elichai's finding means that `-fno-builtin-memcmp` is not enough, as there are C++ headers that directly invoke `__builtin_memcmp`. Some possibilities (we're not restricted to just one of them, though):\r\n* Outlaw compiling with affected compilers entirely (by introducing a sanity check, and a unit test)\r\n* Figure out exactly which GCC `-f...` optimization flag controls the presence of the bug, and disabled that (always, or selectively on known-bad compilers)\r\n* Find the subset of affected C++ headers, and remove them from the codebase (replace them with my_memcmp where needed or so).",
      "created_at" : "2020-09-24T20:58:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-698584843",
      "id" : 698584843,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODU4NDg0Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-24T20:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698584843",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Another worth mentioning is that `arith_uint256` managed to dodge this: https://github.com/bitcoin/bitcoin/blob/master/src/arith_uint256.h#L217-L222\r\n\r\nwhile manually going over all the `-O2` flags in my GCC 10.2 I found that disabling these 5 flags make the bug disappear:\r\n`-fno-tree-dce -fno-tree-dominator-opts -fno-tree-fre -fno-tree-pre -fno-code-hoisting`\r\n\r\nquickly reading the description of these they don't sound like something we'd like to disable that quickly :(",
      "created_at" : "2020-09-24T21:26:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-698597260",
      "id" : 698597260,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODU5NzI2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-24T21:28:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698597260",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This is a patch against the broken GCC versions that emits a warning when the bug could be triggered:\r\nhttps://gist.github.com/real-or-random/1548239059158370416dfdc6a866329a\r\n\r\nWhen I compile the project with this patch, I don't get any warning. That's good news. But unfortunately, this is not perfeclty sound. It catches all known examples but it fails to catch the `std::lexicographical_compare` example in this thread.... Maybe the reason is buried somewhere in this function but I don't know. https://gcc.gnu.org/onlinedocs/gcc-10.2.0/libstdc++/api/a00596_source.html#l01592",
      "created_at" : "2020-09-25T18:14:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-699078122",
      "id" : 699078122,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5OTA3ODEyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-25T18:14:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699078122",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1071625?v=4",
         "events_url" : "https://api.github.com/users/real-or-random/events{/privacy}",
         "followers_url" : "https://api.github.com/users/real-or-random/followers",
         "following_url" : "https://api.github.com/users/real-or-random/following{/other_user}",
         "gists_url" : "https://api.github.com/users/real-or-random/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/real-or-random",
         "id" : 1071625,
         "login" : "real-or-random",
         "node_id" : "MDQ6VXNlcjEwNzE2MjU=",
         "organizations_url" : "https://api.github.com/users/real-or-random/orgs",
         "received_events_url" : "https://api.github.com/users/real-or-random/received_events",
         "repos_url" : "https://api.github.com/users/real-or-random/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/real-or-random/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/real-or-random"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "With\r\n```\r\n               location_t loc = EXPR_HAS_LOCATION(exp) ? EXPR_LOCATION (exp) : UNKNOWN_LOCATION;\r\n               expanded_location s = expand_location (loc);\r\n               fnotice(stderr, \"%s:%d: Potentially miscompiled memcmp\\n\", s.file, s.line);\r\n```\r\nI get a not so usefully located message, but a message none the less:\r\n```\r\n/nix/store/034wplfrxzhmljmajhmyya2ahg4z0nbl-gcc-9.3.0/include/c++/9.3.0/bits/stl_algobase.h:940: Potentially miscompiled memcmp\r\n```",
      "created_at" : "2020-09-25T22:25:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-699186791",
      "id" : 699186791,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5OTE4Njc5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-25T22:25:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699186791",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/21371712?v=4",
         "events_url" : "https://api.github.com/users/roconnor-blockstream/events{/privacy}",
         "followers_url" : "https://api.github.com/users/roconnor-blockstream/followers",
         "following_url" : "https://api.github.com/users/roconnor-blockstream/following{/other_user}",
         "gists_url" : "https://api.github.com/users/roconnor-blockstream/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/roconnor-blockstream",
         "id" : 21371712,
         "login" : "roconnor-blockstream",
         "node_id" : "MDQ6VXNlcjIxMzcxNzEy",
         "organizations_url" : "https://api.github.com/users/roconnor-blockstream/orgs",
         "received_events_url" : "https://api.github.com/users/roconnor-blockstream/received_events",
         "repos_url" : "https://api.github.com/users/roconnor-blockstream/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/roconnor-blockstream/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/roconnor-blockstream/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/roconnor-blockstream"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Okay, I think I've cracked the puzzle:\r\n```\r\n               location_t loc = EXPR_HAS_LOCATION(exp) ? EXPR_LOCATION (exp) : UNKNOWN_LOCATION;\r\n               loc = expansion_point_location_if_in_system_header(loc);\r\n               emit_diagnostic(DK_DEBUG, loc, 0, \"Potentially miscompiled memcmp\");\r\n```\r\n```\r\nIn file included from /nix/store/23rhjr5qzbvf4kr0nwb5q3lkbxxl62jq-gcc-9.3.0/include/c++/9.3.0/algorithm:61,\r\n                 from test4.cpp:1:\r\n/nix/store/23rhjr5qzbvf4kr0nwb5q3lkbxxl62jq-gcc-9.3.0/include/c++/9.3.0/bits/stl_algobase.h: In function âint square(std::array<unsigned char, 3>)â:\r\n/nix/store/23rhjr5qzbvf4kr0nwb5q3lkbxxl62jq-gcc-9.3.0/include/c++/9.3.0/bits/stl_algobase.h:940:41: debug: Potentially miscompiled memcmp\r\n  940 |      if (int __result = __builtin_memcmp(__first1, __first2, __len))\r\n      |   \r\n```\r\n\r\n`expansion_point_location_if_in_system_header` probably doesn't play a role, but maybe it doesn't hurt either.",
      "created_at" : "2020-09-26T02:27:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-699278130",
      "id" : 699278130,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5OTI3ODEzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-26T02:27:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699278130",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/21371712?v=4",
         "events_url" : "https://api.github.com/users/roconnor-blockstream/events{/privacy}",
         "followers_url" : "https://api.github.com/users/roconnor-blockstream/followers",
         "following_url" : "https://api.github.com/users/roconnor-blockstream/following{/other_user}",
         "gists_url" : "https://api.github.com/users/roconnor-blockstream/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/roconnor-blockstream",
         "id" : 21371712,
         "login" : "roconnor-blockstream",
         "node_id" : "MDQ6VXNlcjIxMzcxNzEy",
         "organizations_url" : "https://api.github.com/users/roconnor-blockstream/orgs",
         "received_events_url" : "https://api.github.com/users/roconnor-blockstream/received_events",
         "repos_url" : "https://api.github.com/users/roconnor-blockstream/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/roconnor-blockstream/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/roconnor-blockstream/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/roconnor-blockstream"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I rebuilt bitcoin-0.20.1 (including libsecp256k1) using `emit_diagnostic`, and I also did not get any `miscompiled memcmp` messages.",
      "created_at" : "2020-09-26T03:52:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-699335627",
      "id" : 699335627,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5OTMzNTYyNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-26T03:52:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699335627",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/21371712?v=4",
         "events_url" : "https://api.github.com/users/roconnor-blockstream/events{/privacy}",
         "followers_url" : "https://api.github.com/users/roconnor-blockstream/followers",
         "following_url" : "https://api.github.com/users/roconnor-blockstream/following{/other_user}",
         "gists_url" : "https://api.github.com/users/roconnor-blockstream/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/roconnor-blockstream",
         "id" : 21371712,
         "login" : "roconnor-blockstream",
         "node_id" : "MDQ6VXNlcjIxMzcxNzEy",
         "organizations_url" : "https://api.github.com/users/roconnor-blockstream/orgs",
         "received_events_url" : "https://api.github.com/users/roconnor-blockstream/received_events",
         "repos_url" : "https://api.github.com/users/roconnor-blockstream/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/roconnor-blockstream/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/roconnor-blockstream/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/roconnor-blockstream"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I was curious to see how much work it would be to work around this, so I hacked up (and vendored) my libstdc++ headers in order to add detection for the guilty functions, and started a branch of workarounds.\r\n\r\nThe guilty v9 headers (which call ```__builtin_memcmp``` themselves) are:\r\n- bits/char_traits.h\r\n- bits/stl_algobase.h\r\n\r\nv10 adds:\r\n- array (I haven't looked into this one yet)\r\n\r\nThe workarounds mostly involve creating comparators for containers to avoid the default ```lexicographical_compare``` and getting rid of some ```std::equal``` usage. Those are pretty straightforward. But then I discovered that many of the boost string parsing functions end up being guilty.\r\n\r\nFor example:\r\n```boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));``` ends up internally calling `std::__equal<true>::equal()`.\r\n\r\nAnd while this might be a good excuse to get rid of some of boost usage, I'm afraid that the boost libs themselves are going to be a problem. And I don't think we want to be patching boost to fix this.\r\n\r\nEven worse than boost, glibc and libstdc++ _themselves_ are likely affected as well (for different reasons).\r\n\r\nI can push up my partial work if anyone is interested, but it's not looking like this is a good way forward.",
      "created_at" : "2020-09-30T00:26:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-701064633",
      "id" : 701064633,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMTA2NDYzMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-30T00:26:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701064633",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I suspect this means that automatically generated operator== on simple classes/structs aren't affected either.\r\n\r\nThat seems to be the case from what I've seen so far, but we do end up in ```__builtin_memcmp``` when using a map/set of an array/vector of bytes, as those will use ```std::lexicographical_compare``` by default for comparison. There are lots of these in psbt.h, for example.\r\n\r\nThankfully there's an easy way to specify our own comparator:\r\n```c++\r\nstruct VecByteComp {\r\n    bool operator()(const std::vector<unsigned char>& lhs, const std::vector<unsigned char>& rhs) const {\r\n        //TODO: fill in\r\n        return true;\r\n    }\r\n};\r\n\r\n...\r\n\r\n-        std::set<std::vector<unsigned char>> key_lookup;\r\n+        std::set<std::vector<unsigned char>, VecByteComp> key_lookup;\r\n```\r\n\r\nBut as I mentioned above, working around those doesn't get us very far :(",
      "created_at" : "2020-09-30T00:38:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-701081937",
      "id" : 701081937,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMTA4MTkzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-30T00:38:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701081937",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "According to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189#c33, this has been fixed in GCC 10.3.0, which we currently use to build releases. The relevant backported commit, on the [releases/gcc-10](https://github.com/gcc-mirror/gcc/tree/releases/gcc-10) branch, is https://github.com/gcc-mirror/gcc/commit/e4c9aac98611f63847ef6c57916808d9a2d7abcb.\r\n\r\nSo the fix is in GCC master, 12, 11 and 10 branches. Currently we support GCC 8.1+.",
      "created_at" : "2022-08-04T13:33:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-1205264613",
      "id" : 1205264613,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "IC_kwDOABII585H1uDl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1205264613/reactions"
      },
      "updated_at" : "2022-08-04T13:33:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1205264613",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Does anyone have an opinion on what we should do here going forward? We can just wait until we bump out minimum required GCC to 10.3.0+ (unclear if that'd happen for 25.x), and then mark this as resolved. We could introduce a new compiler bug unit test, something like https://github.com/fanquake/bitcoin/commit/f6e62c6314c5707da8236a30efa7f9a44cf1eaef, which will fail when someone is using a broken GCC, but that's hard to do while we are still supporting / testing older compilers in CI. Or we can just continue to leave this open as a known (potential) problem?",
      "created_at" : "2022-08-31T10:05:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-1232735472",
      "id" : 1232735472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "IC_kwDOABII585Jegzw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232735472/reactions"
      },
      "updated_at" : "2022-08-31T10:05:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232735472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> We could introduce a new compiler bug unit test, something like [fanquake@f6e62c6](https://github.com/fanquake/bitcoin/commit/f6e62c6314c5707da8236a30efa7f9a44cf1eaef), which will fail when someone is using a broken GCC, but that's hard to do while we are still supporting / testing older compilers in CI.\r\n\r\nCould add the test but make it pass if `IGNORE_GCC_BUG_95189` environment variable is set, and set the environment variable in relevant CI variants. That seems like a way to resolve the issue.",
      "created_at" : "2022-08-31T10:28:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-1232758304",
      "id" : 1232758304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "IC_kwDOABII585JemYg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232758304/reactions"
      },
      "updated_at" : "2022-08-31T10:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232758304",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Instead of setting `IGNORE_GCC_BUG_95189` in the CI, the CI could be patched to assert when the bug is hit in real code",
      "created_at" : "2022-08-31T10:47:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-1232776827",
      "id" : 1232776827,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "IC_kwDOABII585Jeq57",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232776827/reactions"
      },
      "updated_at" : "2022-08-31T10:47:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232776827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I worked up a clang AST query that can be used to detect the test-case. I'm not sure if it's perfect though as I don't know _exactly_ what gcc will screw up (copies of pointers, de-references, etc.). If this is useful, it'd be trivial to hook it up to a clang-tidy check, or even a compiler plugin to make it easier to check depends as well.\r\n\r\n#### memcmp.cpp\r\n(exact test-case taken from gcc bug report):\r\n```c++\r\nusing size_t = decltype(sizeof(0));\r\nint memcmp(const void *s1, const void *s2, size_t n);\r\n\r\nstatic const float z[1] = {0};\r\nint f(float x)\r\n{\r\n    return memcmp(&x, z, sizeof(x));\r\n}\r\n```\r\n#### In action:\r\n```\r\n$ clang-query ../memcmp.cpp -- -std=c++17\r\nclang-query> m callExpr(hasAnyArgument(ignoringImpCasts(declRefExpr(to(varDecl(hasType(qualType(constantArrayType(),isConstQualified())),hasDescendant(integerLiteral(equals(0)))))))),callee(functionDecl(hasName(\"memcmp\"))))\r\n\r\nMatch #1:\r\n\r\n/home/cory/dev/bitcoin-tidy-experiments/build/../memcmp.cpp:7:12: note: \"root\" binds here\r\n    return memcmp(&x, z, sizeof(x));\r\n           ^~~~~~~~~~~~~~~~~~~~~~~~\r\n1 match.\r\n```\r\n#### The query:\r\n```\r\ncallExpr(\r\n    hasAnyArgument(ignoringImpCasts(\r\n        declRefExpr(to(varDecl(\r\n            hasType(qualType(\r\n                constantArrayType(),\r\n                isConstQualified()\r\n            )),\r\n            hasDescendant(integerLiteral(equals(0)))\r\n        ))))\r\n    ),\r\n    callee(functionDecl(hasName(\"memcmp\")))\r\n)\r\n```\r\n![also indentation](https://user-images.githubusercontent.com/417043/187763142-ad9b2d43-a7b7-434b-9d8e-796dd241b663.jpg)\r\n",
      "created_at" : "2022-08-31T19:19:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-1233328929",
      "id" : 1233328929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "IC_kwDOABII585Jgxsh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1233328929/reactions"
      },
      "updated_at" : "2022-08-31T19:23:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1233328929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Particularly for C++ code, I don't think the clang query is going to be that useful because indirect calls to memcmp can also be problematic.  We searched for problematic code by instrumenting GCC itself and I don't think anything else would be particularly reliable.  (See <https://blog.cri.epita.fr/post/2020-12-05-a-gcc-bug-tracking-affected-software/>)",
      "created_at" : "2022-09-01T14:28:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-1234360774",
      "id" : 1234360774,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "IC_kwDOABII585JktnG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1234360774/reactions"
      },
      "updated_at" : "2022-09-01T14:28:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1234360774",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/21371712?v=4",
         "events_url" : "https://api.github.com/users/roconnor-blockstream/events{/privacy}",
         "followers_url" : "https://api.github.com/users/roconnor-blockstream/followers",
         "following_url" : "https://api.github.com/users/roconnor-blockstream/following{/other_user}",
         "gists_url" : "https://api.github.com/users/roconnor-blockstream/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/roconnor-blockstream",
         "id" : 21371712,
         "login" : "roconnor-blockstream",
         "node_id" : "MDQ6VXNlcjIxMzcxNzEy",
         "organizations_url" : "https://api.github.com/users/roconnor-blockstream/orgs",
         "received_events_url" : "https://api.github.com/users/roconnor-blockstream/received_events",
         "repos_url" : "https://api.github.com/users/roconnor-blockstream/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/roconnor-blockstream/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/roconnor-blockstream/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/roconnor-blockstream"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@roconnor-blockstream Yep, makes perfect sense to use a patched GCC instead. I also hadn't considered implicit or self-generated calls to memcmp, which I assume may be created like for memcpy.\r\n\r\nI took a quick look at some of the offenders, many of which are comparisons against string literals like this one: https://github.com/xiph/flac/blob/f764434a39e8a8715d5871bb263189e5a7298280/src/flac/decode.c#L1310\r\n\r\nWhich indeed the above query doesn't catch. I won't bother with this any further as hacking on gcc clearly makes more sense. Thanks for that work!",
      "created_at" : "2022-09-01T21:27:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20005#issuecomment-1234801922",
      "id" : 1234801922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20005",
      "node_id" : "IC_kwDOABII585JmZUC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1234801922/reactions"
      },
      "updated_at" : "2022-09-01T21:27:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1234801922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
