[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18418 (wallet: Increase OUTPUT_GROUP_MAX_ENTRIES to 100 by fjahr)\n* #17526 (Use Single Random Draw In addition to knapsack as coin selection fallback by achow101)\n* #17355 (gui: grey out used address in address book by za-kk)\n* #17331 (Use effective values throughout coin selection by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-09-30T00:18:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-701061868",
      "id" : 701061868,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20040",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMTA2MTg2OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-03T05:30:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701061868",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498830108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498830108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "musing: this constructor only seems useful for tests",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T13:43:54Z",
      "diff_hunk" : "@@ -610,8 +610,16 @@ struct CoinSelectionParams\n     size_t tx_noinputs_size = 0;\n     //! Indicate that we are subtracting the fee from outputs\n     bool m_subtract_fee_outputs = false;\n-\n-    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n+    bool m_avoid_partial_spends = false;\n+\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size, bool avoid_partial) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498830108",
      "id" : 498830108,
      "line" : 615,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzMDEwOA==",
      "original_commit_id" : "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "original_line" : 615,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : 8,
      "pull_request_review_id" : 501147294,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498830108",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498839221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498839221"
         }
      },
      "author_association" : "MEMBER",
      "body" : "const",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T13:59:03Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    CAmount ev = output.txout.nValue - coin_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498839221",
      "id" : 498839221,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzOTIyMQ==",
      "original_commit_id" : "4b15eae4fce88704bbae818eb16b0fc263b325b2",
      "original_line" : 306,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 501147294,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498839221",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498839303"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498839303"
         }
      },
      "author_association" : "MEMBER",
      "body" : "const",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T13:59:11Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498839303",
      "id" : 498839303,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzOTMwMw==",
      "original_commit_id" : "4b15eae4fce88704bbae818eb16b0fc263b325b2",
      "original_line" : 305,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 501147294,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498839303",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498844850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498844850"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: annotate the new bool\r\n\r\nAlso why is this being set to true? I thought that we get more *relaxed* as we fail to select with \"nicer\" coin sets? This seems to make it a tighter criteria?",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T14:08:28Z",
      "diff_hunk" : "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498844850",
      "id" : 498844850,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NDg1MA==",
      "original_commit_id" : "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "original_line" : 2492,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 501147294,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498844850",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498844979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498844979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: annotate the new bool",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T14:08:40Z",
      "diff_hunk" : "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498844979",
      "id" : 498844979,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NDk3OQ==",
      "original_commit_id" : "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "original_line" : 2493,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 501147294,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498844979",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498845092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498845092"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yet?",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T14:08:53Z",
      "diff_hunk" : "@@ -4235,9 +4235,9 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     if (!single_coin) {\n         for (auto& it : gmap) {\n             auto& group = it.second;\n-            if (full_groups.count(it.first) > 0) {\n-                // Make this unattractive as we want coin selection to avoid it if possible\n-                group.m_ancestors = max_ancestors - 1;\n+            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n+                // Don't include partial groups if we don't want them yet",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498845092",
      "id" : 498845092,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NTA5Mg==",
      "original_commit_id" : "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "original_line" : 4239,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 501147294,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498845092",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498927088"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498927088"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, it's less restrictive. When it is false, we won't include partial groups. When is true, we do. At least that is the intended behavior.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T16:32:06Z",
      "diff_hunk" : "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498927088",
      "id" : 498927088,
      "in_reply_to_id" : 498844850,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNzA4OA==",
      "original_commit_id" : "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "original_line" : 2492,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 501282076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498927088",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498928313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498928313"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ahhhh, I had \"avoid partial\" in my head for this.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T16:34:33Z",
      "diff_hunk" : "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498928313",
      "id" : 498928313,
      "in_reply_to_id" : 498844850,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODMxMw==",
      "original_commit_id" : "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "original_line" : 2492,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 501283713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498928313",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498928438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498928438"
         }
      },
      "author_association" : "MEMBER",
      "body" : "so yes, annotation is :ok_hand: because it would have fixed my thought here",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T16:34:51Z",
      "diff_hunk" : "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498928438",
      "id" : 498928438,
      "in_reply_to_id" : 498844850,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODQzOA==",
      "original_commit_id" : "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "original_line" : 2492,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 501283899,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498928438",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962378"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T17:45:25Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    CAmount ev = output.txout.nValue - coin_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962378",
      "id" : 498962378,
      "in_reply_to_id" : 498839221,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjM3OA==",
      "original_commit_id" : "4b15eae4fce88704bbae818eb16b0fc263b325b2",
      "original_line" : 306,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 501329653,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962378",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962401"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T17:45:29Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962401",
      "id" : 498962401,
      "in_reply_to_id" : 498839303,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjQwMQ==",
      "original_commit_id" : "4b15eae4fce88704bbae818eb16b0fc263b325b2",
      "original_line" : 305,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 501329697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962401",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962440"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Annotated",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T17:45:35Z",
      "diff_hunk" : "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962440",
      "id" : 498962440,
      "in_reply_to_id" : 498844850,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjQ0MA==",
      "original_commit_id" : "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "original_line" : 2492,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 501329746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962440",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962489"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T17:45:41Z",
      "diff_hunk" : "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962489",
      "id" : 498962489,
      "in_reply_to_id" : 498844979,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjQ4OQ==",
      "original_commit_id" : "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "original_line" : 2493,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 501329804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962489",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962524"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962524"
         }
      },
      "author_association" : "MEMBER",
      "body" : "removed",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-10-02T17:45:46Z",
      "diff_hunk" : "@@ -4235,9 +4235,9 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     if (!single_coin) {\n         for (auto& it : gmap) {\n             auto& group = it.second;\n-            if (full_groups.count(it.first) > 0) {\n-                // Make this unattractive as we want coin selection to avoid it if possible\n-                group.m_ancestors = max_ancestors - 1;\n+            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n+                // Don't include partial groups if we don't want them yet",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r498962524",
      "id" : 498962524,
      "in_reply_to_id" : 498845092,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MjUyNA==",
      "original_commit_id" : "d4b8b8d25a9d4202ec07dbb59047eca0142153d0",
      "original_line" : 4239,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 501329849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498962524",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK https://github.com/bitcoin/bitcoin/pull/20040/commits/f6b305273910db0e46798d361413a7e878cb45f7",
      "created_at" : "2020-10-02T21:22:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-702964010",
      "id" : 702964010,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20040",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMjk2NDAxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-02T21:22:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702964010",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cc @Xekyo ",
      "created_at" : "2020-10-10T02:22:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-706470625",
      "id" : 706470625,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20040",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNjQ3MDYyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-10T02:22:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706470625",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529927059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529927059"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think I have asked this before, but why can `m_input_bytes` ever be below zero here? Perhaps it would be good to have a comment to explain that.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-24T22:14:14Z",
      "diff_hunk" : "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529927059",
      "id" : 529927059,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNzA1OQ==",
      "original_commit_id" : "99b399aba5d27476b61b4865cc39553d03965d57",
      "original_line" : 306,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 538010853,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529927059",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529935159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529935159"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Wouldn't this mean that if you got a tiny and a large UTXO associated with the same address that you would potentially form a OutputGroup with just the large coin? Shouldn't the group rather be ineligible as a whole to avoid the partial spend?",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-24T22:21:56Z",
      "diff_hunk" : "@@ -4237,8 +4230,10 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 }\n             } else {\n-                groups.emplace_back(effective_feerate, long_term_feerate);\n-                groups.back().Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                // This is for if each output gets it's own OutputGroup\n+                OutputGroup coin(effective_feerate, long_term_feerate);\n+                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                if (coin.EligibleForSpending(filter)) groups.push_back(coin);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529935159",
      "id" : 529935159,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNTE1OQ==",
      "original_commit_id" : "d895e98b594b873f3d34c8ba63e9b55125d51b5a",
      "original_line" : 4236,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 538010853,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529935159",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529937239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529937239"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that this will result in the OutputGroup accepting uneconomic inputs in the case that the recipient is paying the fees. Should we perhaps rather filter by whether the UTXO are uneconomic, but just calculate with the value instead of the effective value for the case of the recipient paying the fees?",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-24T22:23:56Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529937239",
      "id" : 529937239,
      "line" : 306,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNzIzOQ==",
      "original_commit_id" : "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "original_line" : 306,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 8,
      "pull_request_review_id" : 538010853,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529937239",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529952999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529952999"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`m_input_bytes` is initialized to `-1` to indicate that it hasn't been calculated yet.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-24T22:38:47Z",
      "diff_hunk" : "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529952999",
      "id" : 529952999,
      "in_reply_to_id" : 529927059,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1Mjk5OQ==",
      "original_commit_id" : "99b399aba5d27476b61b4865cc39553d03965d57",
      "original_line" : 306,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 538024823,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529952999",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529955040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529955040"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This would make the wallet more vulnerable to dust attacks. An attacker could them lock out a user from their funds by sending dust to an already used address.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-24T22:40:38Z",
      "diff_hunk" : "@@ -4237,8 +4230,10 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 }\n             } else {\n-                groups.emplace_back(effective_feerate, long_term_feerate);\n-                groups.back().Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                // This is for if each output gets it's own OutputGroup\n+                OutputGroup coin(effective_feerate, long_term_feerate);\n+                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                if (coin.EligibleForSpending(filter)) groups.push_back(coin);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529955040",
      "id" : 529955040,
      "in_reply_to_id" : 529935159,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NTA0MA==",
      "original_commit_id" : "d895e98b594b873f3d34c8ba63e9b55125d51b5a",
      "original_line" : 4236,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 538025870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529955040",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529957375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529957375"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "But this is at the point where we calculate the effective value of UTXOs, so we need to know the size. Why would we want to mitigate a missing size here rather than throwing?",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-24T22:42:46Z",
      "diff_hunk" : "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529957375",
      "id" : 529957375,
      "in_reply_to_id" : 529927059,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NzM3NQ==",
      "original_commit_id" : "99b399aba5d27476b61b4865cc39553d03965d57",
      "original_line" : 306,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 538027112,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529957375",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529963849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529963849"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Given that the recipient paying the fees is typically used when sweeping the wallet, I don't think it really matters.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-24T22:49:00Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529963849",
      "id" : 529963849,
      "in_reply_to_id" : 529937239,
      "line" : 306,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2Mzg0OQ==",
      "original_commit_id" : "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "original_line" : 306,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 8,
      "pull_request_review_id" : 538030362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529963849",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529964003"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529964003"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, I guess dust should get ignored altogether, but at higher fee rates this could in the worst-case even affect a small amount and a slightly larger amount, which should be prohibited by the partial spending restriction.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-24T22:49:09Z",
      "diff_hunk" : "@@ -4237,8 +4230,10 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n                     ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 }\n             } else {\n-                groups.emplace_back(effective_feerate, long_term_feerate);\n-                groups.back().Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                // This is for if each output gets it's own OutputGroup\n+                OutputGroup coin(effective_feerate, long_term_feerate);\n+                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                if (coin.EligibleForSpending(filter)) groups.push_back(coin);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r529964003",
      "id" : 529964003,
      "in_reply_to_id" : 529935159,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NDAwMw==",
      "original_commit_id" : "d895e98b594b873f3d34c8ba63e9b55125d51b5a",
      "original_line" : 4236,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 538030433,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/529964003",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r530604074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530604074"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh, I didn't realize that it was just used for that. Wouldn't it be much easier to implement that as a \"send everything\": no coin selection, just sum up everything, deduct fees and pay the recipient address that?",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-25T19:38:47Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r530604074",
      "id" : 530604074,
      "in_reply_to_id" : 529937239,
      "line" : 306,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNDA3NA==",
      "original_commit_id" : "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "original_line" : 306,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 8,
      "pull_request_review_id" : 538799180,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530604074",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r530605164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530605164"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's the most common use case I think, but not the only one.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-25T19:41:03Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r530605164",
      "id" : 530605164,
      "in_reply_to_id" : 529937239,
      "line" : 306,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNTE2NA==",
      "original_commit_id" : "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "original_line" : 306,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 8,
      "pull_request_review_id" : 538800497,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530605164",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r532812179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532812179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since the intention is to not change behavior in this PR, I think I will leave this as is for now.\r\n\r\nAdditionally I don't think it is guaranteed that when we add a `CInputCoin` to an `OutputGroup` that we do know the size. It could be for a preset input or an input not in the wallet (there is a PR for that) where we add those coins to an `OutputGroup` and just don't use the effective value calculation. In those instances, the `m_input_bytes` may not be set.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-11-30T18:32:39Z",
      "diff_hunk" : "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r532812179",
      "id" : 532812179,
      "in_reply_to_id" : 529927059,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxMjE3OQ==",
      "original_commit_id" : "99b399aba5d27476b61b4865cc39553d03965d57",
      "original_line" : 306,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 541183554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532812179",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code Review ACK https://github.com/bitcoin/bitcoin/pull/20040/commits/f6b305273910db0e46798d361413a7e878cb45f7",
      "created_at" : "2020-11-30T21:31:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-736068730",
      "id" : 736068730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20040",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNjA2ODczMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-30T21:31:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736068730",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Disclaimer:\r\n@achow101  has walked me throw the PR, I have reviewed it at least twice. I think that the concept makes sense, but I'm not familiar with the wallet code globally and my C++ is somewhat rusty.",
      "created_at" : "2020-11-30T21:34:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-736070103",
      "id" : 736070103,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20040",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNjA3MDEwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-30T21:34:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736070103",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've added a commit to rewrite `GroupOutputs` based on the comments left in downstream PR review (https://github.com/bitcoin/bitcoin/pull/17331#discussion_r536209337)",
      "created_at" : "2020-12-09T00:23:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#issuecomment-741305599",
      "id" : 741305599,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20040",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTMwNTU5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T00:23:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741305599",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539739259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539739259"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is this an optimization from the outside transferring the knowledge that all coins were received to separate destinations, or is this an instruction not to group coins? Assuming it's the latter, I would suggest `separate_coins: true` or `group_coins: false`.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-12-09T23:59:10Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539739259",
      "id" : 539739259,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczOTI1OQ==",
      "original_commit_id" : "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "original_line" : 4200,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 548714910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539739259",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539751310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539751310"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`groups` â `output_groups_per_spk`",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-12-10T00:28:56Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& groups_pair : groups_map) {\n+        const std::vector<OutputGroup>& groups = groups_pair.second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539751310",
      "id" : 539751310,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1MTMxMA==",
      "original_commit_id" : "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "original_line" : 4262,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 548714910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539751310",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539752992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539752992"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`groups_map` â `spk_to_output_groups_map`",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-12-10T00:33:05Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539752992",
      "id" : 539752992,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1Mjk5Mg==",
      "original_commit_id" : "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "original_line" : 4227,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 548714910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539752992",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539753640"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539753640"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`groups_pair` â `spk_and_output_groups`",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-12-10T00:34:48Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& groups_pair : groups_map) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539753640",
      "id" : 539753640,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1MzY0MA==",
      "original_commit_id" : "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "original_line" : 4261,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 548714910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539753640",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to `separate_coins`",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-12-10T01:21:20Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771115",
      "id" : 539771115,
      "in_reply_to_id" : 539739259,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTExNQ==",
      "original_commit_id" : "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "original_line" : 4200,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 548746483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771115",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771171"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to `groups_per_spk`",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-12-10T01:21:31Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& groups_pair : groups_map) {\n+        const std::vector<OutputGroup>& groups = groups_pair.second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771171",
      "id" : 539771171,
      "in_reply_to_id" : 539751310,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTE3MQ==",
      "original_commit_id" : "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "original_line" : 4262,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 548746543,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771171",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to `spk_to_groups_map`",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-12-10T01:21:45Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771259",
      "id" : 539771259,
      "in_reply_to_id" : 539752992,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTI1OQ==",
      "original_commit_id" : "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "original_line" : 4227,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 548746634,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771259",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771347"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to `spk_and_groups_pair`",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-12-10T01:21:57Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (single_coin) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& groups_pair : groups_map) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539771347",
      "id" : 539771347,
      "in_reply_to_id" : 539753640,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3MTM0Nw==",
      "original_commit_id" : "97256cabb3723dee32dc20aade7d3ae618cff59c",
      "original_line" : 4261,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 548746705,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T01:21:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539771347",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539817251"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539817251"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It may be worth considering an explicit `sweepwallet` rpc since I don't think the expectations for \"recipient pays fees\" and \"empty my wallets and send as much as you can\" necessarily match. Although, maybe in both cases it would be appropriate not to use uneconomic UTXOs. ;)",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2020-12-10T03:27:40Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);\n+    const CAmount ev = output.txout.nValue - coin_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r539817251",
      "id" : 539817251,
      "in_reply_to_id" : 529937239,
      "line" : 306,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxNzI1MQ==",
      "original_commit_id" : "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "original_line" : 306,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 8,
      "pull_request_review_id" : 548791890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-10T03:31:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539817251",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550788340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550788340"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 99b399aba5d27476b61b4865cc39553d03965d57\r\n\r\nnit: Maybe add a similar comment to `Insert` that this updates the fees now if you retouch.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T17:27:10Z",
      "diff_hunk" : "@@ -78,15 +77,20 @@ struct OutputGroup\n     size_t m_descendants{0};\n     CAmount effective_value{0};\n     CAmount fee{0};\n+    CFeeRate m_effective_feerate{0};\n     CAmount long_term_fee{0};\n+    CFeeRate m_long_term_feerate{0};\n \n     OutputGroup() {}\n+    OutputGroup(const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate) :\n+        m_effective_feerate(effective_feerate),\n+        m_long_term_feerate(long_term_feerate)\n+    {}\n+\n     void Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants);\n     std::vector<CInputCoin>::iterator Discard(const CInputCoin& output);\n     bool EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const;\n \n-    //! Update the OutputGroup's fee, long_term_fee, and effective_value based on the given feerates",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550788340",
      "id" : 550788340,
      "line" : 99,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4ODM0MA==",
      "original_commit_id" : "99b399aba5d27476b61b4865cc39553d03965d57",
      "original_line" : 88,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.h",
      "position" : 52,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550788340",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550788976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550788976"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 416d74fb1687ae1d47a58c153d09d9afe0b6dc60\r\n\r\nnit: I think you could skip both intermediary vars (`coin_fee`, `ev`) here and instead set the `coin` members here and use them in the following lines without hurting readability.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T17:36:00Z",
      "diff_hunk" : "@@ -300,16 +300,24 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n  ******************************************************************************/\n \n-void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n+void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants, bool positive_only) {\n+    // Compute the effective value first\n+    const CAmount coin_fee = output.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(output.m_input_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550788976",
      "id" : 550788976,
      "line" : 305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4ODk3Ng==",
      "original_commit_id" : "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "original_line" : 305,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 7,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550788976",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550789643"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550789643"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 416d74fb1687ae1d47a58c153d09d9afe0b6dc60\r\n\r\nnit: maybe make `positive_only` const as well?",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T17:44:25Z",
      "diff_hunk" : "@@ -841,7 +841,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool IsSpentKey(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const size_t max_ancestors, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter) const;\n+    std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const size_t max_ancestors, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550789643",
      "id" : 550789643,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4OTY0Mw==",
      "original_commit_id" : "416d74fb1687ae1d47a58c153d09d9afe0b6dc60",
      "original_line" : 844,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550789643",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550790769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550790769"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in f6b305273910db0e46798d361413a7e878cb45f7\r\n\r\nNow since max_descendants and partial_groups are decoupled it could be discussed if it stays like this or if this coin selection step is split up into one which only tries with the old config (leaving out partial groups) and then one after that adds partial groups. But it can be left for a follow-up if that change is desired.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T17:57:35Z",
      "diff_hunk" : "@@ -2489,8 +2489,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n         (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550790769",
      "id" : 550790769,
      "line" : 2492,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MDc2OQ==",
      "original_commit_id" : "f6b305273910db0e46798d361413a7e878cb45f7",
      "original_line" : 2492,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 83,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550790769",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550791777"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550791777"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nnit: update comment \"Single coin\" => \"Separate coin\"",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T18:10:12Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550791777",
      "id" : 550791777,
      "line" : 4201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTc3Nw==",
      "original_commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_line" : 4201,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 113,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550791777",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550793674"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550793674"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nThere is already the effectively same check in `Insert` so I think the following line is enough (`group.m_outputs.size() > 0`) and this one can safely be removed.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T18:33:44Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550793674",
      "id" : 550793674,
      "line" : 4215,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MzY3NA==",
      "original_commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_line" : 4215,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 147,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550793674",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550807869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550807869"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nwhitespace missing before `=`",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T21:16:17Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> spk_to_groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = spk_to_groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& spk_and_groups_pair: spk_to_groups_map) {\n+        const std::vector<OutputGroup>& groups_per_spk= spk_and_groups_pair.second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550807869",
      "id" : 550807869,
      "line" : 4262,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwNzg2OQ==",
      "original_commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_line" : 4262,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 200,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550807869",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550808110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808110"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nnit: `++group_it`",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T21:18:51Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> spk_to_groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = spk_to_groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& spk_and_groups_pair: spk_to_groups_map) {\n+        const std::vector<OutputGroup>& groups_per_spk= spk_and_groups_pair.second;\n+\n+        // Go through the vector backwards. This allows for the first item we deal with being the partial group.\n+        for (auto group_it = groups_per_spk.rbegin(); group_it != groups_per_spk.rend(); group_it++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550808110",
      "id" : 550808110,
      "line" : 4265,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwODExMA==",
      "original_commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_line" : 4265,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 203,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808110",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550808284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808284"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nsame as above, I think this is not necessary since Insert takes care of this now.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T21:20:37Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> spk_to_groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;\n+\n+        std::vector<OutputGroup>& groups = spk_to_groups_map[spk];\n+\n+        if (groups.size() == 0) {\n+            // No OutputGroups for this scriptPubKey yet, add one\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+        }\n+\n+        // Get the last OutputGroup in the vector so that we can add the CInputCoin to it\n+        // A pointer is used here so that group can be reassigned later if it is full.\n+        OutputGroup* group = &groups.back();\n+\n+        // Check if this OutputGroup is full. We limit to OUTPUT_GROUP_MAX_ENTRIES when using -avoidpartialspends\n+        // to avoid surprising users with very high fees.\n+        if (group->m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+            // The last output group is full, add a new group to the vector and use that group for the insertion\n+            groups.emplace_back(effective_feerate, long_term_feerate);\n+            group = &groups.back();\n+        }\n+\n+        // Add the input_coin to group\n+        group->Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+    }\n+\n+    // Now we go through the entire map and pull out the OutputGroups\n+    for (const auto& spk_and_groups_pair: spk_to_groups_map) {\n+        const std::vector<OutputGroup>& groups_per_spk= spk_and_groups_pair.second;\n+\n+        // Go through the vector backwards. This allows for the first item we deal with being the partial group.\n+        for (auto group_it = groups_per_spk.rbegin(); group_it != groups_per_spk.rend(); group_it++) {\n+            const OutputGroup& group = *group_it;\n+\n+            // Don't include partial groups if there are full groups too and we don't want partial groups\n+            if (group_it == groups_per_spk.rbegin() && groups_per_spk.size() > 1 && !filter.m_include_partial_groups) {\n                 continue;\n             }\n-            // If the OutputGroup is not eligible, don't add it\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n             if (positive_only && group.effective_value <= 0) continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550808284",
      "id" : 550808284,
      "line" : 4274,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwODI4NA==",
      "original_commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_line" : 4274,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 213,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808284",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550808494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808494"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e\r\n\r\nnit: `spk` seems to be only used in the line below so I would drop it.",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T21:23:50Z",
      "diff_hunk" : "@@ -4193,58 +4193,90 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const {\n-    std::vector<OutputGroup> groups;\n-    std::map<CTxDestination, OutputGroup> gmap;\n-    std::set<CTxDestination> full_groups;\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const\n+{\n+    std::vector<OutputGroup> groups_out;\n \n-    for (const auto& output : outputs) {\n-        if (output.fSpendable) {\n-            CTxDestination dst;\n-            CInputCoin input_coin = output.GetInputCoin();\n+    if (separate_coins) {\n+        // Single coin means no grouping. Each COutput gets its own OutputGroup.\n+        for (const COutput& output : outputs) {\n+            // Skip outputs we cannot spend\n+            if (!output.fSpendable) continue;\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n-            if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                auto it = gmap.find(dst);\n-                if (it != gmap.end()) {\n-                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n-                    // number of entries, to protect against inadvertently creating\n-                    // a too-large transaction when using -avoidpartialspends to\n-                    // prevent breaking consensus or surprising users with a very\n-                    // high amount of fees.\n-                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                        groups.push_back(it->second);\n-                        it->second = OutputGroup{effective_feerate, long_term_feerate};\n-                        full_groups.insert(dst);\n-                    }\n-                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                } else {\n-                    auto ins = gmap.emplace(dst, OutputGroup{effective_feerate, long_term_feerate});\n-                    ins.first->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                }\n-            } else {\n-                // This is for if each output gets it's own OutputGroup\n-                OutputGroup coin(effective_feerate, long_term_feerate);\n-                coin.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n-                if (positive_only && coin.effective_value <= 0) continue;\n-                if (coin.m_outputs.size() > 0 && coin.EligibleForSpending(filter)) groups.push_back(coin);\n-            }\n+            CInputCoin input_coin = output.GetInputCoin();\n+\n+            // Make an OutputGroup containing just this output\n+            OutputGroup group{effective_feerate, long_term_feerate};\n+            group.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants, positive_only);\n+\n+            // Check the OutputGroup's eligibility. Only add the eligible ones.\n+            if (positive_only && group.effective_value <= 0) continue;\n+            if (group.m_outputs.size() > 0 && group.EligibleForSpending(filter)) groups_out.push_back(group);\n         }\n+        return groups_out;\n     }\n-    if (!single_coin) {\n-        for (auto& it : gmap) {\n-            auto& group = it.second;\n-            if (full_groups.count(it.first) > 0 && !filter.m_include_partial_groups) {\n-                // Don't include partial groups if we don't want them\n+\n+    // We want to combine COutputs that have the same scriptPubKey into single OutputGroups\n+    // except when there are more than OUTPUT_GROUP_MAX_ENTRIES COutputs grouped in an OutputGroup.\n+    // To do this, we maintain a map where the key is the scriptPubKey and the value is a vector of OutputGroups.\n+    // For each COutput, we check if the scriptPubKey is in the map, and if it is, the COutput's CInputCoin is added\n+    // to the last OutputGroup in the vector for the scriptPubKey. When the last OutputGroup has\n+    // OUTPUT_GROUP_MAX_ENTRIES CInputCoins, a new OutputGroup is added to the end of the vector.\n+    std::map<CScript, std::vector<OutputGroup>> spk_to_groups_map;\n+    for (const auto& output : outputs) {\n+        // Skip outputs we cannot spend\n+        if (!output.fSpendable) continue;\n+\n+        size_t ancestors, descendants;\n+        chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n+        CInputCoin input_coin = output.GetInputCoin();\n+        CScript spk = input_coin.txout.scriptPubKey;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550808494",
      "id" : 550808494,
      "line" : 4235,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwODQ5NA==",
      "original_commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "original_line" : 4235,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 167,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550808494",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550809203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809203"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 6148a8acda5e594bb9b3b2d989056f9e03ddbdbd\r\n\r\nnit: This comment isn't that helpful, I would suggest something like \"Prepare coins in a format that can be passed to SelectCoinsMinConf()\"",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T21:30:23Z",
      "diff_hunk" : "@@ -42,21 +42,19 @@ static void CoinSelection(benchmark::Bench& bench)\n     }\n     addCoin(3 * COIN, wallet, wtxs);\n \n-    // Create groups\n-    std::vector<OutputGroup> groups;\n+    // Create coins",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550809203",
      "id" : 550809203,
      "line" : 45,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwOTIwMw==",
      "original_commit_id" : "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "original_line" : 45,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/bench/coin_selection.cpp",
      "position" : 6,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809203",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550809486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809486"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 6148a8acda5e594bb9b3b2d989056f9e03ddbdbd\r\n\r\nThis line seems to be the same in both if-else blocks so it could be moved to the beginning of the function before the if",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T21:33:57Z",
      "diff_hunk" : "@@ -2381,6 +2381,8 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         temp.m_confirm_target = 1008;\n         CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n+        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, eligibility_filter.max_ancestors);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550809486",
      "id" : 550809486,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwOTQ4Ng==",
      "original_commit_id" : "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "original_line" : 2384,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809486",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550809872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809872"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A comment would still be a good idea :) ",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T21:38:19Z",
      "diff_hunk" : "@@ -302,6 +302,16 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n void OutputGroup::Insert(const CInputCoin& output, int depth, bool from_me, size_t ancestors, size_t descendants) {\n     m_outputs.push_back(output);\n+    CInputCoin& coin = m_outputs.back();\n+    coin.m_fee = coin.m_input_bytes < 0 ? 0 : m_effective_feerate.GetFee(coin.m_input_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550809872",
      "id" : 550809872,
      "in_reply_to_id" : 529927059,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwOTg3Mg==",
      "original_commit_id" : "99b399aba5d27476b61b4865cc39553d03965d57",
      "original_line" : 306,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 560596635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T21:58:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550809872",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550811930"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550811930"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, never mind, it becomes necessary later when the `positive_only` param is added",
      "commit_id" : "5d4597666d589e39354e0d8dd5b2afbe1a5d7d8e",
      "created_at" : "2021-01-01T22:02:59Z",
      "diff_hunk" : "@@ -2381,6 +2381,8 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         temp.m_confirm_target = 1008;\n         CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n \n+        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, eligibility_filter.max_ancestors);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20040#discussion_r550811930",
      "id" : 550811930,
      "in_reply_to_id" : 550809486,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxMTkzMA==",
      "original_commit_id" : "6148a8acda5e594bb9b3b2d989056f9e03ddbdbd",
      "original_line" : 2384,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 560607860,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20040",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-01T22:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550811930",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   }
]
