{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "## Prelude\r\nFrom my reading of past conversations and from a few offline chats, it seems that modularizing our consensus engine is a worthwhile first step towards a more complete isolation of said engine from non-consensus code.\r\n\r\nModularizing our consensus engine means that:\r\n\r\n1. We get clearer visibility into what currently lies in consensus codepaths **and** what depends on our consensus engine\r\n1. We can coalesce duplicate consensus initialization codepaths, mitigating against bugs that arise out of test/non-test initialization inconsistencies\r\n\r\n## De-globalizing `g_chainman`\r\n\r\nIn order to modularize our consensus engine, we need to first de-globalize the global `ChainstateManager` -- namely `g_chainman` -- as it and its dependencies are what makes up the bulk of our consensus engine. A few direct references to `g_chainman` have already been removed in #19927, however, its indirect uses (mainly via `::Chain(state|)Active()`) are numerous in our codebase and often used to avoid obtaining a `ChainstateManager` reference.\r\n\r\nIn a series of PRs, I plan to remove the `g_chainman` global and ensure that codepaths which depend on our consensus engine have a non-global reference to the object they require (be it `ChainstateManger`, `CChainState`, or `BlockManager`).\r\n\r\n### Order of commits\r\n\r\nAfter having reorganized my commits a few times, I've realized that the ordering of commits can drastically influence both the review complexity of each diff and the number of commits needed in total to achieve the same thing. My current approach is basically to \"continuously trim the leaves of the g_chainman call graph\".\r\n\r\nTake, as an example, the following call graph where all of these functions either directly or indirectly reference `g_chainman`/`::Chain(state|)Active()`:\r\n\r\n![ChainmanCall](https://user-images.githubusercontent.com/3445290/94731545-7c270400-0354-11eb-8725-046f53a2bcde.png)\r\n\r\nI can start with `Qux`, and do the following:\r\n1. Does it need all of `ChainstateManger`? Or does it just need a `CChainState`? Or just a `BlockManager`? Or just the `ChainstateManager::ActiveTip()`?\r\n2. If it already has the reference that it needs (as a member of the class it belongs to, as a function parameter, etc.) -> Use it\r\n3. If we're dealing with a function which looks like it should be a member of a class that would have that reference -> Move the function to that class\r\n4. Otherwise, we need to pass the reference to `Qux`.\r\n\r\nWhen we have to invoke the last two options, we propagate the dependency on `g_chainman`/`::Chain(state|)Active()` up to `Wibble` and `Wobble`. In the case of (3), it'll look something like `::ChainstateActive().Qux()`; whereas in the case of (4), it'll look something like `Qux(::ChainstateActive())`. \r\n\r\nThis mean that, for some functions (`LookupBlockIndex` being the main culprit), a resolution of their dependency on the `g_chainman`/`::Chain(state|)Active()` globals results in an increase in apparent references to `g_chainman`/`::Chain(state|)Active()`. However, it is important to note that these are not _new_ dependencies by any means, those dependency were always there -- they was just hidden by `Qux`'s use of the globals. Furthermore, all of these \"new\" apparent references to `g_chainman`/`::Chain(state|)Active()` will be dealt with as we prune the call graph upward.\r\n\r\n### Current status\r\n\r\nRight now, I have a working branch https://github.com/bitcoin/bitcoin/compare/master...dongcarl:2020-09-libbitcoinruntime-v5, which resolves of all the `g_chainman`/`::Chain(state|)Active()` global calls in `validation.{cpp,h}`. I noticed that for resolving these calls in validation, there are 3 somewhat distinct bundles that have a natural ordering:\r\n\r\n1. A bundle of functions that are related to `::LookupBlockIndex` in the call graph\r\n2. A bundle of functions that are mempool-related\r\n\t- This has a dependency on bundle (1) as `MemPoolAccept::PreChecks` calls `::GetSpendHeight`, which is in bundle (1) as it calls `LookupBlockIndex`\r\n3. A bundle of functions which are not related to either\r\n\t-  This has a dependency on bundle (2) as `CChainState::{ActivateBestChainStep,InvalidateBlock}` both call `::UpdateMempoolForReorg` which is in bundle (2)\r\n\r\nI believe this bundling naturally splits up the validation cleanup into 3 pull requests, each touching around 12 functions.\r\n\r\nI'm still organizing the rest the non-validation commits and will be pushing that up when it's ready.\r\n\r\n**Note to reviewers**: At this stage I would very much like to get a sanity check on my approach to make sure that there isn't a better way to organize my commits that I've missed.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20049/comments",
   "created_at" : "2020-09-30T19:37:56Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20049/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/20049",
   "id" : 712225587,
   "labels" : [
      {
         "color" : "E6F6D6",
         "default" : false,
         "description" : null,
         "id" : 135961,
         "name" : "Refactoring",
         "node_id" : "MDU6TGFiZWwxMzU5NjE=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20049/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU3MTIyMjU1ODc=",
   "number" : 20049,
   "performed_via_github_app" : null,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "De-globalizing ChainstateManager",
   "updated_at" : "2020-09-30T19:46:27Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20049",
   "user" : {
      "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
      "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
      "followers_url" : "https://api.github.com/users/dongcarl/followers",
      "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/dongcarl",
      "id" : 3445290,
      "login" : "dongcarl",
      "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
      "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
      "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
      "repos_url" : "https://api.github.com/users/dongcarl/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/dongcarl"
   }
}
