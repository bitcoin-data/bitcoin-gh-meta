[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "One thing that I'd like to see better / more clearly documented is which components have which requirements and what changes as a result of libbitcoinkernel.\r\n\r\nE.g., I recently learned that script/interpreter.* is not allowed to link against threading primitives so the code can be used in ??? environments.\r\n\r\nDoes libbitcoinkernel have similar restrictions on what sorts of things are includable / not includable as a result (other than our own code, like platform stuff)?",
      "created_at" : "2022-02-09T20:54:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1034182668",
      "id" : 1034182668,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849pGAM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034182668/reactions"
      },
      "updated_at" : "2022-02-09T20:54:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034182668",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@JeremyRubin \r\n\r\n> One thing that I'd like to see better / more clearly documented is which components have which requirements and what changes as a result of libbitcoinkernel.\r\n\r\nHmm, I'm not sure what you mean...\r\n\r\n> E.g., I recently learned that script/interpreter.* is not allowed to link against threading primitives so the code can be used in ??? environments.\r\n\r\nWas this a public conversation? Could you link me?",
      "created_at" : "2022-02-09T21:10:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1034195359",
      "id" : 1034195359,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849pJGf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034195359/reactions"
      },
      "updated_at" : "2022-02-09T21:10:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034195359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah this came up when I was implementing lazy caching for CTV using std::call_once that linking pthread from interpreter was a nono https://gnusha.org/bitcoin-core-dev/2022-01-20.log.\r\n\r\nI guess what I mean is it would be good to have a more clear cut boundary for libbitcoinkernel both up the stack on API boundaries but also \"down the stack\" in terms of what libbitcoinkernel can provide v.s. what the host environment should. Maybe this is a malformed question, feel free to chat me and we can flesh out if it's meaningful.",
      "created_at" : "2022-02-09T23:12:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1034296155",
      "id" : 1034296155,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849phtb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034296155/reactions"
      },
      "updated_at" : "2022-02-09T23:12:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034296155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "(ot: I couldn't find \"nono\" in the chat. Mind quoting the exact phrase? I think for your specific implementation `std::call_once` would have been more complicated than the `std::optional` approach you later took.)\r\n\r\nConcept ACK on libbitcoinkernel.",
      "created_at" : "2022-02-10T19:25:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1035386411",
      "id" : 1035386411,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849tr4r",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035386411/reactions"
      },
      "updated_at" : "2022-02-10T19:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035386411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Strongest possible Concept ACK. IMO we should've done this _years_ ago.\r\n\r\nKudos to @dongcarl for taking it on. I'll help in every way I can!",
      "created_at" : "2022-02-10T19:51:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1035421140",
      "id" : 1035421140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849t0XU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035421140/reactions"
      },
      "updated_at" : "2022-02-10T19:51:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035421140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Bindings to other languages (first C, then others) should be introduced.\r\n\r\nNice! That might be handy for iOs too; so far I've no luck with this, see #12557. It seems much easier to include a C project than C++, maybe because Objective C inherits from the former. Bonus points for Swift bindings. An iOs node would need p2p stuff too.  ",
      "created_at" : "2022-02-10T19:58:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1035431540",
      "id" : 1035431540,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849t250",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035431540/reactions"
      },
      "updated_at" : "2022-02-10T19:58:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035431540",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nAs [others](https://uploads.kiwiirc.com/files/f9a8a6e88e0ed1c63f927346339b640f/pasted.txt) have said even if there are occasional consensus leaks from a libbitcoinkernel keeping consensus code siloed for the most part would be great for risk mitigation and review rigor. \r\n\r\nSome initial [discussions](https://gnusha.org/bitcoin-core-dev/2022-02-10.log) in today's IRC meeting.",
      "created_at" : "2022-02-10T20:47:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1035497239",
      "id" : 1035497239,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849uG8X",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035497239/reactions"
      },
      "updated_at" : "2022-02-10T20:47:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035497239",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke the approach I ended up taking is substantially more complicated, perhaps you haven't fully reviewed it (callers must pass in a lambda that contains an interior synchonicity primitive or otherwise guarnatee single threaded executiuon), whereas the call_once approach was correct for all users).\r\n\r\nThe convo spanned a few days, that was just the start, my bad (I searched my local IRC for a date ref). On +1 day https://gnusha.org/bitcoin-core-dev/2022-01-21.log\r\n\r\n```\r\n10:23 < jeremyrubin> hey cfields can you have a look at #21702 build failure?\r\n10:23 <@gribble> https://github.com/bitcoin/bitcoin/issues/21702 | Implement BIP-119 Validation (CheckTemplateVerify) by JeremyRubin Â· Pull Request #21702 Â· bitcoin/bitcoin Â· GitHub\r\n10:23 < jeremyrubin> https://stackoverflow.com/questions/34924083/mingw32-make-error-error-once-flag-in-namespace-std-does-not-name-a-type\r\n10:23 < jeremyrubin> https://github.com/RavenProject/Ravencoin/issues/460\r\n10:24 < jeremyrubin> sort of weird b/c we use once_flag and call_once in other places in the code, so it looks like we're somehow linking with the wrong options?\r\n10:26 < jeremyrubin> looks like laanwj might know whats going on here based on https://github.com/bitcoin/bitcoin/pull/8653\r\n10:27 < sipa> @stick: https://www.96boards.org/product/developerbox/\r\n10:30 < jeremyrubin> specific errors are here https://gist.github.com/JeremyRubin/b3fc2ba910a8e5b6b807df3746e949d9\r\n10:30 < jeremyrubin> impl_pthread not getting linked\r\n11:09 < laanwj> jeremyrubin: that's a 5 year old issue, i'm sure it's no longer relevant? we've been using the posix variant since forever\r\n11:10 < laanwj> jeremyrubin: IIRC libbitcoin_consensus isn't linked against pthread intentionally, it's not supposed to be threaded\r\n11:11 < laanwj> because it could be used from non-threaded C code, or code using some completely different threading model\r\n11:25 < laanwj> i'd agree \"using C++ synchronization primitives\" isn't threading in itself, but apparently it does cause linking to one\r\n11:26 < jeremyrubin> laanwj: ok that makes sense I guess, but it's problematic slightly since the scriptchecks generated are designed to be threadsafe so i wanted to ensure that i had a low cost way to do cache on first use... but it sounds like that's troublesome no matter what I do (mutex, atomic, etc)\r\n11:28 < laanwj> right-even atomic isn't guaranteed, on some platforms it can be done with instructions, but on others it does need support from the OS through a threading library\r\n11:29 < jeremyrubin> i thought c++ requires atomics OR proof no threads are used otherwise things like static init are broken?\r\n11:29 < laanwj> any caching would have to be done at a higher level\r\n11:29 < jeremyrubin> hmm that seems like a boundary violation\r\n11:29 < jeremyrubin> this caching is required for validation to be correct\r\n11:29 < laanwj> not in the consensus code itself, i think it makes sense from the perspective that libbitcoin_consensus is supposed to be stateless too\r\n11:30 < laanwj> wait, no, consensus never should need caching between validations to be correct\r\n11:30 < jeremyrubin> PrecomputedData is required for correctness\r\n11:30 < jeremyrubin> where correctness includes runtime\r\n```\r\n\r\n\r\nBut this seems largely off topic for here other than having a clearer deliniation of what can and cannot be linked within kernel consensus code after this change, because I am unhappy with libbitcoin_consensus preventing the use of std::call_once in a straightforward manner, so thinking about similar issues or expectations would be good!",
      "created_at" : "2022-02-10T20:49:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1035499343",
      "id" : 1035499343,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849uHdP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035499343/reactions"
      },
      "updated_at" : "2022-02-10T20:49:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035499343",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@JeremyRubin \r\n> I guess what I mean is it would be good to have a more clear cut boundary for libbitcoinkernel both up the stack on API boundaries...\r\n\r\nRight, I think we leave the API boundary up the stack until stage 2, so that we \"avoid having to prematurely optimizing for a \"perfect\" boundary or API (tends to be highly subjective, non-obvious, may lead to unproductive bike-shedding before we've even done anything meaningful)\"\r\n\r\n> but also \"down the stack\" in terms of what libbitcoinkernel can provide v.s. what the host environment should. Maybe this is a malformed question, feel free to chat me and we can flesh out if it's meaningful.\r\n\r\nAh I see, yeah I think the libbitcoinkernel case is very different from the libbitcoinconsensus case, since \"it is a stateful library that can spawn threads, do caching, do I/O, and many other things which one may not normally expect from a library\". Right now if you build #24304 with `--enable-shared --enable-experimental-util-chainstate` you will find that the library relies on only the \"expect\" set of runtime libraries:\r\n\r\n```\r\n$ ldd ./src/.libs/libbitcoinkernel.so\r\n        linux-vdso.so.1 (0x00007ffc387c6000)\r\n        libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007faaecf6c000)\r\n        libstdc++.so.6 => /usr/lib/libstdc++.so.6 (0x00007faaecd56000)\r\n        libm.so.6 => /usr/lib/libm.so.6 (0x00007faaecc12000)\r\n        libgcc_s.so.1 => /usr/lib/libgcc_s.so.1 (0x00007faaecbf7000)\r\n        libc.so.6 => /usr/lib/libc.so.6 (0x00007faaeca2b000)\r\n        /usr/lib64/ld-linux-x86-64.so.2 (0x00007faaedc83000)\r\n```\r\n\r\nNow, a good decision to ponder upon is whether or not we should be embedding libraries such as `leveldb`, `crc32c`, and `boost` or whether we should require them as a runtime dependency. Currently, it is embedded: https://github.com/bitcoin/bitcoin/pull/24304/commits/1d9faa8fc7187c61a45764ea2e4c919f02b891d7#diff-4cb884d03ebb901069e4ee5de5d02538c40dd9b39919c615d8eaa9d364bbbd77R826",
      "created_at" : "2022-02-10T20:58:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1035509970",
      "id" : 1035509970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849uKDS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035509970/reactions"
      },
      "updated_at" : "2022-02-10T20:58:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035509970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Sjors \r\n> Nice! That might be handy for iOs too; so far I've no luck with this, see #12557. It seems much easier to include a C project than C++, maybe because Objective C inherits from the former. Bonus points for Swift bindings. An iOs node would need p2p stuff too.\r\n\r\nYup, most languages have FFI support of some kind to C, so once we have a C interface everything else will be easy!",
      "created_at" : "2022-02-10T21:01:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1035512220",
      "id" : 1035512220,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849uKmc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035512220/reactions"
      },
      "updated_at" : "2022-02-10T21:01:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035512220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@theuni \r\n> Strongest possible Concept ACK. IMO we should've done this _years_ ago.\r\n> \r\n> Kudos to @dongcarl for taking it on. I'll help in every way I can!\r\n\r\nThank you for your help behind the scenes so far and thanks in advance for your help in the future! ð ",
      "created_at" : "2022-02-10T21:02:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1035513120",
      "id" : 1035513120,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849uK0g",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035513120/reactions"
      },
      "updated_at" : "2022-02-10T21:02:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035513120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't understand why there isn't a clearer answer about what's in the kernel and what's not in the kernel. If there isn't a clear line that can be drawn, I think it would be best to just treat libbitcoin_kernel as an evolving whitelist of API's that can be called externally, and not move a lot of code around or significantly change source code organization. Otherwise, I would like to know more know more about the statement 'Most of the changes to be made are \"move only\"' because it is not clear to me what code would be moving or where it would be moving to.",
      "created_at" : "2022-02-11T15:51:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1036354680",
      "id" : 1036354680,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII5849xYR4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036354680/reactions"
      },
      "updated_at" : "2022-02-11T15:51:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036354680",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@ryanofsky \r\n\r\n> I don't understand why there isn't a clearer answer about what's in the kernel and what's not in the kernel. \r\n\r\nWhat's included in `libbitcoinknernel` will always be \"everything that is required for the consensus engine to function\".\r\n\r\nAs of #24322, we're only capturing the dependencies **as they are right now**, which unfortunately includes things like `index/*.cpp`, `netaddress.cpp`, etc.\r\n\r\nThroughout stage 1, we will decouple (or in some cases, abstract away) these unnecessary modules from the consensus engine, which will allow us to remove them from `libbitcoinkernel`.\r\n\r\nRight now in my exploration branch, here is the list of files that are still necessary to be linked in:\r\n\r\n```\r\nlibbitcoinkernel_la_SOURCES = \\\r\n  arith_uint256.cpp \\\r\n  chain.cpp \\\r\n  kernel/chainparamsbase.cpp \\\r\n  chainparams.cpp \\\r\n  clientversion.cpp \\\r\n  coins.cpp \\\r\n  compat/glibcxx_sanity.cpp \\\r\n  compressor.cpp \\\r\n  consensus/merkle.cpp \\\r\n  consensus/tx_check.cpp \\\r\n  consensus/tx_verify.cpp \\\r\n  core_read.cpp \\\r\n  dbwrapper.cpp \\\r\n  deploymentinfo.cpp \\\r\n  deploymentstatus.cpp \\\r\n  flatfile.cpp \\\r\n  fs.cpp \\\r\n  hash.cpp \\\r\n  kernel/init/common.cpp \\\r\n  key.cpp \\\r\n  kernel/logging.cpp \\\r\n  node/blockstorage.cpp \\\r\n  node/chainstate.cpp \\\r\n  kernel/node/coinstats.cpp \\\r\n  node/ui_interface.cpp \\\r\n  policy/feerate.cpp \\\r\n  policy/fees.cpp \\\r\n  policy/packages.cpp \\\r\n  policy/policy.cpp \\\r\n  policy/rbf.cpp \\\r\n  policy/settings.cpp \\\r\n  pow.cpp \\\r\n  primitives/block.cpp \\\r\n  primitives/transaction.cpp \\\r\n  pubkey.cpp \\\r\n  random.cpp \\\r\n  randomenv.cpp \\\r\n  scheduler.cpp \\\r\n  script/interpreter.cpp \\\r\n  script/script.cpp \\\r\n  script/script_error.cpp \\\r\n  script/sigcache.cpp \\\r\n  script/standard.cpp \\\r\n  kernel/shutdown.cpp \\\r\n  signet.cpp \\\r\n  support/cleanse.cpp \\\r\n  support/lockedpool.cpp \\\r\n  sync.cpp \\\r\n  kernel/timedata.cpp \\\r\n  txdb.cpp \\\r\n  txmempool.cpp \\\r\n  uint256.cpp \\\r\n  util/bytevectorhash.cpp \\\r\n  util/getuniquepath.cpp \\\r\n  util/hasher.cpp \\\r\n  util/moneystr.cpp \\\r\n  util/rbf.cpp \\\r\n  util/serfloat.cpp \\\r\n  util/settings.cpp \\\r\n  util/strencodings.cpp \\\r\n  util/syscall_sandbox.cpp \\\r\n  util/system.cpp \\\r\n  util/thread.cpp \\\r\n  util/threadnames.cpp \\\r\n  util/time.cpp \\\r\n  validation.cpp \\\r\n  validationinterface.cpp \\\r\n  versionbits.cpp \\\r\n  warnings.cpp\r\n```\r\n\r\nA few modules that we decouple/abstract from:\r\n\r\n1. `netaddress.cpp`\r\n2. Parts of `timedata.cpp`\r\n3. Parts of `init/common.cpp`\r\n4. `ArgsManager` (this one's a doozy)\r\n5. `index/*.cpp`\r\n6. `shutdown.cpp`\r\n7. `logging.cpp`\r\n\r\n\r\nOf course this is still not minimal, but we can make progress on the decoupling a step at a time, and each step is worthwhile because it prevents future re-coupling.\r\n\r\n> If there isn't a clear line that can be drawn, I think it would be best to just treat libbitcoin_kernel as an evolving whitelist of API's that can be called externally, and not move a lot of code around or significantly change source code organization.\r\n\r\nDo you mean that instead of (say) splitting off the consensus-used parts of `init/common.cpp` to `kernel/init/common.cpp`, we just explicitly mark their visibility as default or something?\r\n\r\nI can totally see how that would work, however, I think there's a lot to be gained from a clean split: the functions not existing at all in `libbitcoinkernel` instead of being hidden.\r\n\r\nIn any case, I'd love to avoid significant source code organization changes if I can achieve the same goals, and I know you've thought a lot about it, so let's talk more!\r\n\r\n> Otherwise, I would like to know more know more about the statement 'Most of the changes to be made are \"move only\"' because it is not clear to me what code would be moving or where it would be moving to.\r\n\r\nOh of course! Here's an example: https://github.com/dongcarl/bitcoin/commit/d7cf3f0fc2af24e6d3d38513fb01c2b9d9d48105\r\n\r\nIn the first commit there, we split the parts of `timedata.cpp` not dependent on `netaddress.cpp` and `asmap.cpp` into `kernel/timedata.cpp`, which is \"move-only\" and allows us to eliminate `netaddress.cpp` and `asmap.cpp` from our `_SOURCES`.\r\n\r\nLet me know if you have any other questions or if there's a strictly better/easier to do this that I'm missing!",
      "created_at" : "2022-02-13T19:10:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1038359187",
      "id" : 1038359187,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII58495BqT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1038359187/reactions"
      },
      "updated_at" : "2022-02-13T19:24:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1038359187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Minor edit to main description: replace \"style or style-adjacent comments/reviews\" with \"comments/reviews not pertinent to the main thrust of PRs\"",
      "created_at" : "2022-02-14T19:21:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1039463015",
      "id" : 1039463015,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII58499PJn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039463015/reactions"
      },
      "updated_at" : "2022-02-14T19:21:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039463015",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for posting #24332. Is #24332 your \"exploration branch\" or is that available somewhere else? A lot of things just seem vague to me and I think it would be useful to be concrete.\r\n\r\nIn general, the approach here seems a little different than I what would expect. I would expect most of the work of making the \"consensus engine\" usable as the library to involve getting rid of globals more than moving code around. Like I'd expect step one to be introducing some kind of context for the consensus code to be able to function. Something like a `src/kernel/context.h` file with a struct like:\r\n\r\n```c++\r\nnamespace kernel {\r\nstruct Context {\r\n  std::function<void(const std::string&)> log_fn;\r\n  std::function<std::string(const char*)> translate_fn;\r\n  std::optional<int64_t> adjusted_time;\r\n  std::unique_ptr<RNGState> rng_state;\r\n  Consensus::Params params;\r\n  std::unique_ptr<ChainstateManager> chainman;\r\n  std::unique_ptr<CTxMemPool> mempool;\r\n  ...\r\n};\r\n} // namespace kernel\r\n```\r\n\r\nmeant to replace globals. Getting rid of globals would let you use the kernel library to write a application simulating multiple nodes. Or let you use the library to write an application that uses consensus functionality for something else, and still has unit tests that run in parallel (not forced to run serially because the kernel library has shared global state.)\r\n\r\nMoving code around and changing source code organization could be related to this, but doesn't have to be. I do think if you do want to change source code organization, you should have a clear idea of how the source code should be organized. Right now we already have:\r\n\r\n- `src/node/` and `libbitcoin_node.a`\r\n- `src/consensus/` and `libbitcoin_consensus.a`\r\n\r\nAnd you are proposing to add:\r\n\r\n- `src/kernel/` and `libbitcoin_kernel.a`\r\n\r\nThe current split between _node_ and _consensus_ makes sense to me. _Node_ is for code we consider internal and unstable and don't want to be reused externally. _Consensus_ is for code that is stable and we think is useful to expose. But maybe we should rename _node_ to _kernel_ or rename _consensus_ to _kernel_? Or maybe we should actually go ahead and keep _node_ and _consensus_ and add _kernel_ as a third middle layer. This could make sense if there is a clear idea of what belongs in this middle layer. Right now the kernel library sounds like a \"consensus engine\" or \"consensus support\" library for things that somehow have to do with consensus, but aren't in _consensus_ library.\r\n\r\nThe idea of excluding anything in the _consensus_ library that uses threads does not seem very tenable to me, when a lot of performant code people will want to write is likely to involve parallelization. It might make more sense if the dividing line had something to do with persistent storage. Like maybe `libbitcoin_consensus` would define abstract _mempool_ and _UTXO database_ interfaces, and `libbitcoin_kernel` would provide a `boost::multi_index` implementation of the _mempool_ interface, and a `leveldb` implementation of the _UTXO database_ interface.\r\n\r\nre: https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1038359187\r\n> > I don't understand why there isn't a clearer answer about what's in the kernel and what's not in the kernel.\r\n> \r\n> What's included in `libbitcoinknernel` will always be \"everything that is required for the consensus engine to function\".\r\n\r\nThis doesn't really answer the question, just turns it into \"what things are in the consensus engine?\" or \"why isn't `libbitcoin_consensus.a` the consensus engine?\r\n\r\n> As of #24322, we're only capturing the dependencies **as they are right now**, which unfortunately includes things like `index/*.cpp`, `netaddress.cpp`, etc.\r\n> \r\n> Throughout stage 1, we will decouple (or in some cases, abstract away) these unnecessary modules from the consensus engine, which will allow us to remove them from `libbitcoinkernel`.\r\n> \r\n> Right now in my exploration branch, here is the list of files that are still necessary to be linked in:\r\n>\r\n> ...\r\n>\r\n> A few modules that we decouple/abstract from:\r\n>\r\n> ...\r\n\r\nThis all seems good, but probably the list of things to decouple should be almost as long as the original list, and there should be not very much code to move to `src/kernel/` if we are keeping `src/node/` and `src/consensus/`.\r\n\r\n> Do you mean that instead of (say) splitting off the consensus-used parts of `init/common.cpp` to `kernel/init/common.cpp`, we just explicitly mark their visibility as default or something?\r\n\r\nRight, everything's already public.\r\n\r\n> Oh of course! Here's an example: [dongcarl@d7cf3f0](https://github.com/dongcarl/bitcoin/commit/d7cf3f0fc2af24e6d3d38513fb01c2b9d9d48105)\r\n> \r\n> In the first commit there, we split the parts of `timedata.cpp` not dependent on `netaddress.cpp` and `asmap.cpp` into `kernel/timedata.cpp`, which is \"move-only\" and allows us to eliminate `netaddress.cpp` and `asmap.cpp` from our `_SOURCES`.\r\n> \r\n> Let me know if you have any other questions or if there's a strictly better/easier to do this that I'm missing!\r\n\r\nCan you help me understand why this is an improvement? It seems like there could be benefits for understanding and testing and code reuse getting rid of the `g_timeoffset_mutex` and `nTimeOffset` globals and moving them into a context. But this PR just seems to be moving code from one location to another for some benefit I am unable to discern. Maybe there is some insight about the build system I'm missing, but the logic behind having:\r\n\r\n```\r\nsrc/kernel/timedata.cpp\r\nsrc/kernel/timedata.h\r\nsrc/timedata.cpp\r\nsrc/timedata.h\r\n```\r\n\r\neludes me and I think I don't know what the end state is.",
      "created_at" : "2022-02-14T19:21:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1039463108",
      "id" : 1039463108,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII58499PLE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039463108/reactions"
      },
      "updated_at" : "2022-02-14T19:21:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039463108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> eludes me and I think I don't know what the end state is.\r\n\r\nI figured this out a little better now and made some concrete suggestions in https://github.com/bitcoin/bitcoin/pull/24332#issuecomment-1039562660",
      "created_at" : "2022-02-14T21:15:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1039567523",
      "id" : 1039567523,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII58499oqj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039567523/reactions"
      },
      "updated_at" : "2022-02-14T21:15:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039567523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/24332#issuecomment-1039562660\r\n\r\n> * I still don't understand where the boundary between `libbitcoin_kernel` and `libbitcoin_consensus` is or why these are two different libraries\r\n\r\nTo follow up on this, I talked to Carl and he convinced me with a single word (\"utreexo\") that deciding what goes into `libbitcoinconsensus` is not an easy task, so we need some other library that we can change more flexibly if we are going to expose new functions to outside applications. `libbitcoin_node` exposes too much and was never meant to be a public interface, so introducing `libbitcoin_kernel` makes sense, and while a good deal of `libbitcoin_node` code will move to `libbitcoin_kernel`, it's not immediately important to figure out where the boundary is between them (though it would be nice).\r\n\r\nre: https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1039463108\r\n\r\n> I'd expect step one to be introducing some kind of context for the consensus code to be able to function\r\n\r\nOn the globals vs context struct thing there's a concrete suggestion and discussion in https://github.com/bitcoin/bitcoin/pull/24332#issuecomment-1039562660. I think it is important to create a context struct, because without one new code is forced to use global variables, and it is harder to get rid of globals gradualy without big blunt instrument changes. The libbitcoinkernel branch https://github.com/dongcarl/bitcoin/commits/2022-01-v8-on-new-kirby makes reasonable choices about what to deglobalize and what not to (ArgsManager yes, LogInstance no), but in places where it's easy to add channels to avoid referencing globals more places I do think we should do that.",
      "created_at" : "2022-02-15T14:24:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1040334722",
      "id" : 1040334722,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII584-Aj-C",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1040334722/reactions"
      },
      "updated_at" : "2022-02-15T14:24:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1040334722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "After talking to Ryan, I'm am convinced that adding a `kernel::Context` struct is worthwhile and will make things easier in the long run as it'll at least be a place where people (who may be working on other things that may belong in `kernel`) can put their long-lived vars instead of littering more globals all over the place.\r\n\r\nLogistically, we don't have to de-globalize everything at once (:fearful: logger), but just having a place is better than not.",
      "created_at" : "2022-02-16T19:46:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1042099654",
      "id" : 1042099654,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII584-HS3G",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042099654/reactions"
      },
      "updated_at" : "2022-02-16T19:46:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042099654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept/approach ACK\r\n\r\n> The `libbitcoinkernel` project is a new attempt at extracting out our consensus engine. The `kernel` part of the name highlights one of the key functional differences from `libbitcoinconsensus` and in fact, most libraries: it is a stateful library that can spawn threads, do caching, do I/O, and many other things which one may not normally expect from a library.\r\n\r\nHave you considered naming it something like \"libbitcoin-chainstate\" (matching the new executable name)? \"kernel\", \"util\", \"common\" and \"node\" are all very generic names; would be nice to be more specific if it's at all possible.\r\n\r\nHaving the library focus on managing chain state seems plausible to me: it's distinct from \"node\" which also encompasses mining and p2p and rpc access, and distinct from the current libconsensus which doesn't keep state. To me it would make sense for \"chain state\" to include raw block storage, utxo info for the current tip, the mempool (transactions validated against the current chain state), and perhaps indexes (coinstats, txindex) since they also track the chain...",
      "created_at" : "2022-02-17T13:49:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1042969119",
      "id" : 1042969119,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII584-KnIf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042969119/reactions"
      },
      "updated_at" : "2022-02-17T13:49:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042969119",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Have you considered naming it something like \"libbitcoin-chainstate\" (matching the new executable name)? \"kernel\", \"util\", \"common\" and \"node\" are all very generic names; would be nice to be more specific if it's at all possible.\r\n\r\nOoooof it might be a little late for a name change at this stage since I've been talking about it with so many people under the `libbitcoinkernel` name, but your point is well-taken and I will try to use more specific names in the future!",
      "created_at" : "2022-02-22T21:33:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1048233046",
      "id" : 1048233046,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII584-esRW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048233046/reactions"
      },
      "updated_at" : "2022-02-22T21:33:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048233046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept/approach ACK\r\n\r\n> Personally, I have near-zero experience with library API design and langauge bindings, so I think it would be wise for other contributors to lead this stage. Ideally, they would be able to work with users looking to integrate with libbitcoinkernel who can give an accurate account of the API ergonomics from the library user's point of view.\r\n\r\nOnce we have a mature `libbitcoinkernel`, I can see two types of new Bitcoin applications leveraging the possibilities of a consensus engine, potentially not requiring as much work than yet-another full-node implementation :\r\na) \"hybrid clients\", a node running as a resources-optimized lightclient in normal time, fallbacking to block validation in case of long-fork detection or any other network anomalies since the last hardcoded assume-utxo\r\nb) \"validating second-layer signer\", a signer module releasing transactions signatures in reaction to a chain height or confirmed counterparties transactions, only if the events happen on the most-work valid chain. The consensus engine would run on the trusted zone of the embedded device. [0]\r\n\r\nIf there is interest to develop those applications, they might be sources of feedback to a `libbitcoinkernel` API, at a velocity faster than a full-node. Also for b), it might be a good use-case to also abstract the raw block storage and utxo info to generic interface as they likely won't fit for embedded resources.\r\n\r\n> and perhaps indexes (coinstats, txindex) since they also track the chain\r\n\r\nI think indexes are more server oriented features than validation. A full-node implementation embedding `libbitcoinkernel` do not need them to stay in consensus with a Bitcoin Core node... Of course, it could be argued that's the same with the mempool, though in practice lack of performance benefits brought to you by transaction validation caching might prevent you to stay _effectively_ at chain tip.\r\n\r\n[0] https://gitlab.com/lightning-signer/validating-lightning-signer",
      "created_at" : "2022-03-05T22:16:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1059840219",
      "id" : 1059840219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII584_K-Db",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1059840219/reactions"
      },
      "updated_at" : "2022-03-05T22:16:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1059840219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> **Project Board**: https://github.com/bitcoin/bitcoin/projects/18\r\n> \r\n> This is the main tracking issue for the `libbitcoinkernel` project.\r\n> \r\n> The `libbitcoinkernel` project is a new attempt at extracting out our consensus engine. The `kernel` part of the name highlights one of the key functional differences from `libbitcoinconsensus` and in fact, most libraries: it is a stateful library that can spawn threads, do caching, do I/O, and many other things which one may not normally expect from a library.\r\n> \r\n> This statefulness is necessary for `libbitcoinkernel`'s decidedly incremental approach to extracting our consensus engine. This approach favors:\r\n> \r\n> 1. Reusing existing code\r\n>    ...which allows us to be continually integrated with Bitcoin Core and benefit from our extensive test suite\r\n> 2. Incremental decoupling instead of building from scratch\r\n>    ...which allows us to avoid having to prematurely optimizing for a \"perfect\" boundary or API (tends to be highly subjective, non-obvious, may lead to unproductive bike-shedding before we've even done anything meaningful)\r\n> \r\n> I believe that the work of extracting out our consensus engine into a library and making the API ergonomic is likely to be a multi-release project involving multiple contributors. The incremental approach takes this into account, and respects the sheer size of work (both in writing code and getting it through review) that needs to be undertaken.\r\n> \r\n> ## PRs\r\n> Please see the Project Board: https://github.com/bitcoin/bitcoin/projects/18\r\n> \r\n> ## Project-wide TODOs\r\n> * [x]  Remove `blockfilter.cpp` and `index/blockfilterindex.cpp` from `{bitcoin_chainstate,libbitcoinkernel_la}_SOURCES` after merge of [Improve Indices on pruned nodes via prune blockersÂ #21726](https://github.com/bitcoin/bitcoin/pull/21726)\r\n> * [x]  Place ChainstateManageOpts under `kernel::` namespace: [[kernel 2c/n] Introduce `kernel::Context`, encapsulate global init/teardownÂ #25065 (review)](https://github.com/bitcoin/bitcoin/pull/25065#pullrequestreview-993560535)\r\n> * [ ]  Various followups for [[kernel 2c/n] Introduce `kernel::Context`, encapsulate global init/teardownÂ #25065](https://github.com/bitcoin/bitcoin/pull/25065)\r\n>   \r\n>   * [ ]  Marco's post-merge review comments: [[kernel 2c/n] Introduce `kernel::Context`, encapsulate global init/teardownÂ #25065 (review)](https://github.com/bitcoin/bitcoin/pull/25065#pullrequestreview-996614232)\r\n>   * [ ]  Cory's `kernel::Context` cleanup suggestions: [[kernel 2c/n] Introduce `kernel::Context`, encapsulate global init/teardownÂ #25065 (comment)](https://github.com/bitcoin/bitcoin/pull/25065#discussion_r882182549)\r\n> * [ ]  Ryan's post-merge review comment: [[kernel 2e/n] miner: Make `mempool` optional, stop constructing temporary empty mempoolsÂ #25223 (comment)](https://github.com/bitcoin/bitcoin/pull/25223#discussion_r898164322)\r\n> * [ ]  Various followups for [[kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager`Â #25290](https://github.com/bitcoin/bitcoin/pull/25290)\r\n>   \r\n>   * [ ]  Perform gArgs checking in `ApplyArgsManOptions`: [[kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager`Â #25290 (comment)](https://github.com/bitcoin/bitcoin/pull/25290#discussion_r907535652)\r\n>   * [ ]  Perform `CTxMemPool::Options` checking in `CTxMemPool` constructor: [[kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager`Â #25290 (comment)](https://github.com/bitcoin/bitcoin/pull/25290#discussion_r900272797)\r\n>   * [ ]  Change `CalculateMemPoolAncestors` to take in `CTxMemPool::Limits` instead: [[kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager`Â #25290 (comment)](https://github.com/bitcoin/bitcoin/pull/25290#discussion_r905260891)\r\n> * [ ]  Various followups for [[kernel 3b/n] Decouple `{Dump,Load}Mempool` from `ArgsManager`Â #25487](https://github.com/bitcoin/bitcoin/pull/25487)\r\n>   \r\n>   * [ ]  Improve `DumpMempool`'s mutex: [[kernel 3b/n] Decouple `{Dump,Load}Mempool` from `ArgsManager`Â #25487 (comment)](https://github.com/bitcoin/bitcoin/pull/25487#discussion_r916228022)\r\n>   * [ ]  Change `LoadMempool`'s semantics: [[kernel 3b/n] Decouple `{Dump,Load}Mempool` from `ArgsManager`Â #25487 (comment)](https://github.com/bitcoin/bitcoin/pull/25487#discussion_r916044902)\r\n>   * [ ]  Make LoadMempool less foot-gunny: [[kernel 3b/n] Decouple `{Dump,Load}Mempool` from `ArgsManager`Â #25487 (comment)](https://github.com/bitcoin/bitcoin/pull/25487#discussion_r921234107), [c4249c1](https://github.com/bitcoin/bitcoin/commit/c4249c1243981f42091950d1295c2be6bd4bf118)\r\n> \r\n> ## The Game Plan\r\n> ### Stage 1: Extracting out a usable `libbitcoinkernel.{so,dylib,dll}`\r\n> #### Step 1: Introduce internal `bitcoin-chainstate` and `libbitcoinkernel`\r\n> ##### a.k.a. What `.cpp` files do we need?\r\n> This `bitcoin-chainstate` executable uses our consensus engine and its build system code will reveal the minimal set of files we need to link in to use our consensus engine as-is. It is important to note that this list of files will serve as a guiding \"North Star\" for this first stage of the plan: as we decouple more and more modules of the codebase from our consensus engine, this list will grow shorter and shorter.\r\n> \r\n> This list of files (the `_SOURCES` in `Automake` speak) then serves as the basis for a `libbitcoinkernel`, which `bitcoin-chainstate` will be linked against.\r\n> \r\n> **Key Result:** Any further coupling of our consensus engine with non-consensus modules will result in linker errors, preventing this project from becoming a sisyphean task of battling coupling regressions.\r\n> \r\n> #### Step 2: Decouple most non-consensus code from `libbitcoinkernel`\r\n> ##### a.k.a. Prune the unnecessary `.cpp` files!\r\n> There are many modules which do not logically belong in `libbitcoinkernel` (e.g. `index/*.cpp`, `netaddress.cpp`), but are nevertheless necessary to be included in its `_SOURCES` for `bitcoin-chainstate` to link correctly. This is because Bitcoin Core's existing codebase is full of unnecessary dependencies/couplings that need to be untangled/decoupled/broken up.\r\n> \r\n> This step is where we do the decoupling for:\r\n> \r\n> 1. `netaddress.cpp`\r\n> 2. Parts of `timedata.cpp`\r\n> 3. Parts of `init/common.cpp`\r\n> 4. `ArgsManager` (this one's a doozy)\r\n> 5. `index/*.cpp`\r\n> 6. `shutdown.cpp`\r\n> 7. `logging.cpp`\r\n> \r\n> **Developer Note:** We do not decouple the mempool _yet_ because most users of `libbitcoinkernel` may want to have an embedded mempool with Bitcoin Core's policies and we can decouple it later.\r\n> \r\n> #### Step 3: Introduce an external `bitcoin-chainstate`\r\n> ##### a.k.a. What `.h` files do we need?\r\n> Before this step, `bitcoin-chainstate` has been an internal executable managed by our build system with access to all files and headers. In this step, we add an external `bitcoin-chainstate` with a separate build system to reveal the minimal set of headers we need to ship in order to make the `libbitcoinkernel` library usable.\r\n> \r\n> #### Step 4: Decouple most non-consensus headers from `libbitcoinkernel`\r\n> ##### a.k.a. Prune the unnecessary `.h` files!\r\n> Similar to Step 2, there are lots of small decoupling of the header dependency tree here. A notable piece of this step is to remove `leveldb` includes from our headers to avoid needing to re-ship `leveldb` headers.\r\n> \r\n> ### Stage 2: Polishing the API / Continual De-coupling\r\n> At this point, we have a usable `libbitcoinkernel` that is _somewhat_ minimally linked. However, it has a very idiosyncratic, Bitcoin Core-specific C++ interface. The goal of this stage is to incrementally make the `libbitcoinkernel` API more ergonomic for users outside of Bitcoin Core. Bindings to other languages (first C, then others) should be introduced.\r\n> \r\n> Personally, I have near-zero experience with library API design and langauge bindings, so I think _**it would be wise for other contributors to lead this stage**_. Ideally, they would be able to work with users looking to integrate with `libbitcoinkernel` who can give an accurate account of the API ergonomics from the library user's point of view.\r\n> \r\n> ## Getting `libbitcoinkernel` Through Review\r\n> Most of the changes to be made are \"move only\", but there are a lot of these \"move only\" changes to be made. Of course comments/reviews regarding correctness are always more than welcome, but I want very much to avoid losing momentum on this project because of style or style-adjacent comments/reviews.\r\n> \r\n> I propose the following ground rules to make this process more streamlined for all parties involved and a few things that I can do to help:\r\n> \r\n> 1. Any outstanding comments/reviews not pertinent to the main thrust of PRs should not delay/block the merging of the core functionality of PRs. I will make sure to open a separate issue tracking all the leftover comments/reviews so that they won't be missed and can be addressed one by one.\r\n> 2. Whenever the PR reaches a stage where there are only leftover comments/reviews left, I will make a comment saying so. This might make it easier for maintainers to determine roughly where the PR is at in its lifecycle (ofc don't trust me, verify ð).\r\n> \r\n> ## Action Items\r\n> 1. If you have any questions, please post them below!\r\n> 2. If you plan on reviewing `libbitcoinkernel` or are a maintainer:\r\n>    \r\n>    1. Please make sure you've read the \"Getting `libbitcoinkernel` Through Review\" section above.\r\n>    2. Please let me know if there's anything else I can do to help streamline the review process.\r\n> 3. If you would like to take the lead on \"Stage 2: Polishing the API / Continual De-coupling\", please leave a comment below, I'd love to talk!\r\n\r\nhttps://github.com/bitcoin/bitcoin/issues/24303#issue-1129004032",
      "created_at" : "2022-07-18T01:58:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1186686451",
      "id" : 1186686451,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII585Gu2Xz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186686451/reactions"
      },
      "updated_at" : "2022-07-18T01:58:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186686451",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/109486040?v=4",
         "events_url" : "https://api.github.com/users/Veterangrail/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Veterangrail/followers",
         "following_url" : "https://api.github.com/users/Veterangrail/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Veterangrail/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Veterangrail",
         "id" : 109486040,
         "login" : "Veterangrail",
         "node_id" : "U_kgDOBoaf2A",
         "organizations_url" : "https://api.github.com/users/Veterangrail/orgs",
         "received_events_url" : "https://api.github.com/users/Veterangrail/received_events",
         "repos_url" : "https://api.github.com/users/Veterangrail/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Veterangrail/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Veterangrail/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Veterangrail"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "\r\nhttps://www.wallsolution.xyz/ this worked for my similar issue",
      "created_at" : "2022-07-18T02:00:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24303#issuecomment-1186687034",
      "id" : 1186687034,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24303",
      "node_id" : "IC_kwDOABII585Gu2g6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186687034/reactions"
      },
      "updated_at" : "2022-07-18T02:00:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186687034",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/109486040?v=4",
         "events_url" : "https://api.github.com/users/Veterangrail/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Veterangrail/followers",
         "following_url" : "https://api.github.com/users/Veterangrail/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Veterangrail/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Veterangrail",
         "id" : 109486040,
         "login" : "Veterangrail",
         "node_id" : "U_kgDOBoaf2A",
         "organizations_url" : "https://api.github.com/users/Veterangrail/orgs",
         "received_events_url" : "https://api.github.com/users/Veterangrail/received_events",
         "repos_url" : "https://api.github.com/users/Veterangrail/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Veterangrail/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Veterangrail/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Veterangrail"
      }
   }
]
