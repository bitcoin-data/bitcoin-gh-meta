{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "This PR enables more clang-tidy bugprone checks and fixes issues discovered by enabling them.\r\nHere are the checks now enabled: \r\n[bugprone-argument-comment](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/argument-comment.html)\r\n[bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/assert-side-effect.html) \t \r\n[bugprone-assignment-in-if-condition](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/assignment-in-if-condition.html) \t \r\n[bugprone-bad-signal-to-kill-thread](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/bad-signal-to-kill-thread.html) \t \r\n[bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/bool-pointer-implicit-conversion.html)\r\n[bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/copy-constructor-init.html)\r\n[bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/dangling-handle.html) \t \r\n[bugprone-dynamic-static-initializers](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/dynamic-static-initializers.html) \t \r\n[bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/fold-init-type.html) \t \r\n[bugprone-forward-declaration-namespace](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/forward-declaration-namespace.html) \t \r\n[bugprone-forwarding-reference-overload](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/forwarding-reference-overload.html) \t \r\n[bugprone-inaccurate-erase](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/inaccurate-erase.html)\r\n[bugprone-incorrect-roundings](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/incorrect-roundings.html) \t \r\n[bugprone-infinite-loop](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/infinite-loop.html) \t \r\n[bugprone-macro-repeated-side-effects](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/macro-repeated-side-effects.html) \t \r\n[bugprone-misplaced-operator-in-strlen-in-alloc](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/misplaced-operator-in-strlen-in-alloc.html)\r\n[bugprone-misplaced-pointer-arithmetic-in-alloc](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/misplaced-pointer-arithmetic-in-alloc.html)\r\n[bugprone-move-forwarding-reference](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/move-forwarding-reference.html)\r\n[bugprone-multiple-statement-macro](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/multiple-statement-macro.html) \t \r\n[bugprone-no-escape](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/no-escape.html) \t \r\n[bugprone-not-null-terminated-result](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/not-null-terminated-result.html)\r\n[bugprone-parent-virtual-call](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/parent-virtual-call.html)\r\n[bugprone-posix-return](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/posix-return.html)\r\n[bugprone-redundant-branch-condition](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/redundant-branch-condition.html)\r\n[bugprone-shared-ptr-array-mismatch](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/shared-ptr-array-mismatch.html)\r\n[bugprone-signal-handler](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/signal-handler.html) \t \r\n[bugprone-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/sizeof-container.html) \t \r\n[bugprone-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/sizeof-expression.html) \t \r\n[bugprone-spuriously-wake-up-functions](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/spuriously-wake-up-functions.html) \t \r\n[bugprone-string-constructor](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/string-constructor.html)\r\n[bugprone-string-integer-assignment](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/string-integer-assignment.html)\r\n[bugprone-string-literal-with-embedded-nul](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/string-literal-with-embedded-nul.html) \t \r\n[bugprone-stringview-nullptr](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/stringview-nullptr.html)\r\n[bugprone-suspicious-enum-usage](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-enum-usage.html) \t \r\n[bugprone-suspicious-include](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-include.html) \t \r\n[bugprone-suspicious-memory-comparison](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-memory-comparison.html) \t \r\n[bugprone-suspicious-memset-usage](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-memset-usage.html)\r\n[bugprone-suspicious-missing-comma](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-missing-comma.html) \t \r\n[bugprone-suspicious-semicolon](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-semicolon.html)\r\n[bugprone-suspicious-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/suspicious-string-compare.html)\r\n[bugprone-swapped-arguments](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/swapped-arguments.html)\r\n[bugprone-terminating-continue](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/terminating-continue.html)\r\n[bugprone-throw-keyword-missing](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/throw-keyword-missing.html) \t \r\n[bugprone-too-small-loop-variable](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/too-small-loop-variable.html) \t \r\n[bugprone-unchecked-optional-access](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/unchecked-optional-access.html) \t \r\n[bugprone-undefined-memory-manipulation](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/undefined-memory-manipulation.html) \t \r\n[bugprone-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/undelegated-constructor.html) \t \r\n[bugprone-unhandled-exception-at-new](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/unhandled-exception-at-new.html) \t \r\n[bugprone-unhandled-self-assignment](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/unhandled-self-assignment.html) \t \r\n[bugprone-unused-raii](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/unused-raii.html)\r\n[bugprone-virtual-near-miss](https://clang.llvm.org/extra/clang-tidy/checks/bugprone/virtual-near-miss.html)\r\n\r\nAdding these checks makes the code more secure and helps to catch bugs and errors early. It also avoids reviewers to manually check for these issues during reviews.\r\n\r\nI think we should enable the remaining bugprone-* checks but they require much more refactoring so it may be better to enable them in follow-ups PRs.",
   "closed_at" : "2022-10-12T19:52:31Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
      "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
      "followers_url" : "https://api.github.com/users/aureleoules/followers",
      "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
      "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/aureleoules",
      "id" : 22493292,
      "login" : "aureleoules",
      "node_id" : "MDQ6VXNlcjIyNDkzMjky",
      "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
      "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
      "repos_url" : "https://api.github.com/users/aureleoules/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/aureleoules"
   },
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25780/comments",
   "created_at" : "2022-08-04T14:22:07Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25780/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/25780",
   "id" : 1328714639,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25780/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII5848p5Y-",
   "number" : 25780,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/25780.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25780",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/25780.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25780"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25780/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25780/timeline",
   "title" : "tidy: Enable more clang-tidy bugprone checks",
   "updated_at" : "2022-10-12T19:52:31Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25780",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
      "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
      "followers_url" : "https://api.github.com/users/aureleoules/followers",
      "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
      "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/aureleoules",
      "id" : 22493292,
      "login" : "aureleoules",
      "node_id" : "MDQ6VXNlcjIyNDkzMjky",
      "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
      "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
      "repos_url" : "https://api.github.com/users/aureleoules/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/aureleoules"
   }
}
