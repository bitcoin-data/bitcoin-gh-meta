{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "## Introduction\r\n\r\nIn RESTful APIs, path parameters (e.g. `/some/unique/resource/`) are [typically](https://rapidapi.com/blog/api-glossary/parameters/query/) used to represent resources, and query parameters (e.g. `?sort=asc`) are used to control how these resources are being loaded through e.g. sorting, pagination, filtering, ...\r\n\r\nThe design of the [current REST API endpoints](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md) is quite non-standard in a few ways, I've listed some examples below under \"Undesirable behaviour examples\". Generally, it relies on a number of path (or path-like) parameters that really should be query parameters. Besides being unintuitive for users, I also found the code can be much cleaner when using a generalized interface for query and path parameters. The first work towards this was already done in #24098, but there are still a number of issues outstanding, as e.g. discussed [here](https://github.com/bitcoin/bitcoin/pull/24098#discussion_r790336549) and [here](https://github.com/bitcoin/bitcoin/pull/24098#pullrequestreview-863331148).\r\n\r\n## Suggested changes\r\n\r\nI suggest (and have already prepared the code) to clean up the interface and the code. Besides perhaps the `-deprecatedrest` startup flag, no new user-facing functionality is introduced. Specifically, the relevant proposed changes are:\r\n- introduce a `-deprecatedrest` startup option to allow users to preserve REST endpoint functionality while they upgrade their dependencies, similar to `-deprecatedrpc`\r\n- expand the `HTTPRequest` interface to include easy-to-read functions to access path parameters, like #24098 introduced for query parameters: `HTTPRequest::GetPath()` and `HTTPRequest::GetPathParameter()`. This allows cleaning up the interface quite a bit, including removing the duplicated `strURIpart` that was passed as a third argument to each endpoint (but this is unintuitive and duplicated: the path data is already in the HTTPRequest object).\r\n- further streamline the endpoint URIs:\r\n  - in all endpoints: remove the path-like dot-separated format strings (e.g. `.json`) in favour of a query parameter (`?format=json`), which can default to `json` (especially useful in endpoints that only accept json)\r\n  - use `?from_blockhash=<blockhash>` query parameter instead of a path parameter in `/rest/headers` and `/rest/blockfilterheaders/`, since it is a collection endpoint (multiple resources are returned)\r\n  - deprecate `/rest/block/notxdetails` in favour of a `?txdetails=<true|false>` parameter in `/rest/block`\r\n\r\nThe suggested implementation keeps everything backwards compatible (with the `-deprecatedrest` functions enabled). Even though it means there is a bit more review overhead, I think the tradeoff is acceptable - I did my best to minimize code complexity due to this compatibility.\r\n\r\n\r\n## PRs\r\n\r\nThe suggested changes can largely be separated into 4 small-ish PRs (there are some dependencies, so they build sequentially - but shouldn't be too hard to rebase/reorder/leave things out). I have released the PRs as draft already, just to make it easier to look at the proposed changes.\r\n\r\n1. #25753\r\n1. #25754\r\n1. #25755\r\n1. #25756\r\n\r\n## Discussion questions/notes\r\n\r\nI've already written most of the code, but before fleshing out the PRs I'm first looking to get some feedback on the general concept and approach.\r\n\r\nA couple of notes/things to discuss:\r\n- the LoC change is quite significant, is this a wortwhile upgrade?\r\n- should we maintain backwards compatibility with `-deprecatedrest`, not have backwards compatibility at all, or hide the backwards compatibility from the user?\r\n- `-deprecatedrest` is documented to, like the RPC, operate on a per-endpoint basis. However, since the first PR (format string) affects all endpoints, I thought that would not be user-friendly and instead opted to group them by functional change. Going forward, since we now have a rather extensible interface with the query parameters, I expect we'll use `-deprecatedrest` on a per-endpoint basis indeed.\r\n\r\n\r\n## Undesirable behaviour examples\r\n\r\n- Require the user to explicitly define parameters where only 1 value is allowed anyway. For example, `rest/chaininfo/` only accepts `json` as a format but throws if we do not explicitly define `json` to be the format\r\n- [duplicate `deploymentinto` endpoints required](https://github.com/bitcoin/bitcoin/pull/25412#discussion_r927815259)\r\n- Unnecessary code coupling in [`ParseDataFormat()`](https://github.com/bitcoin/bitcoin/blob/c991132b0437b737502ae1f18480e00f84430b72/src/rest.cpp#L134-L157) where we need one function to get the entire query path and then magically remove the format string (e.g. `.json`) from it and return it separately.\r\n- Two different endpoints to support the [`notxdetails`](https://github.com/bitcoin/bitcoin/blob/master/src/rest.cpp#L944-L945) option in `/rest/block`, this could just be one endpoint with an optional default query parameter\r\n- APIs can now be upgraded in a backwards-compatible way more easily, since query parameters are named and thus do not rely on position and can be optional\r\n\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25752/comments",
   "created_at" : "2022-07-30T20:34:30Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25752/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/25752",
   "id" : 1323281380,
   "labels" : [
      {
         "color" : "0052cc",
         "default" : false,
         "description" : null,
         "id" : 98279177,
         "name" : "RPC/REST/ZMQ",
         "node_id" : "MDU6TGFiZWw5ODI3OTE3Nw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25752/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII585O36vk",
   "number" : 25752,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25752/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25752/timeline",
   "title" : "rest: Further API and code cleanup with query parameters",
   "updated_at" : "2022-07-30T20:50:26Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25752",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
      "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
      "followers_url" : "https://api.github.com/users/stickies-v/followers",
      "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
      "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/stickies-v",
      "id" : 69010457,
      "login" : "stickies-v",
      "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
      "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
      "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
      "repos_url" : "https://api.github.com/users/stickies-v/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/stickies-v"
   }
}
