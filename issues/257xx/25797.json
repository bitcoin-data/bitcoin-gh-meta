{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Here are some benefits of using [CMake](https://cmake.org/) in the Bitcoin Core project:\r\n- an opportunity to drop the `build_msvc` subdirectory from the repo altogether (being a cross-platform tool, CMake is able to [create](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html) input files for a wide range of build systems, including Unix Makefiles and Visual Studio project files)\r\n- no hacks required to build `dll`s for Windows, even with `DEBUG=1` (see https://github.com/bitcoin/bitcoin/issues/19772)\r\n- better maintainability (say _bye_ to global variables)\r\n- easy integration with [Qt 5](https://doc.qt.io/qt-5/cmake-manual.html)\r\n- easy integration with [Qt 6](https://doc.qt.io/qt-6.2/cmake-manual.html) in the nearest future (also see bitcoin/bitcoin#24798 and bitcoin/bitcoin#25191)\r\n\r\nMore Qt-specific details see below.\r\n\r\nAlso there is a non-technical/social benefit. Over time, the Autotools community shrinks, but CMake community grows. New contributors, who join this project in the future, will readily support a CMake-based system rather an Autotools-based one.\r\n\r\n---\r\n\r\n## Native building has been tested on the following OSes:\r\n- Ubuntu 22.04 (`x86_64`, `aarch64`~, backward compatible with Ubuntu Bionic 18.04 using adjusted invocation~)\r\n- macOS Monterey (`x86_64`, `arm64`)\r\n- FreeBSD 12.3\r\n- OpenBSD 7.1\r\n```sh\r\ncmake -S . -B build\r\ncd build\r\nmake\r\nmake check\r\nmake install  # optional\r\n```\r\n\r\n## Native building on Windows (MSVC + vcpkg)\r\n\r\nDependency packages are provided by the [vcpkg](https://vcpkg.io) package manager (\"Mandatory ASLR\" in Windows Security must be disabled to install `qt5-*` packages):\r\n```cmd\r\nvcpkg --triplet=x64-windows-static install pkgconf boost-multi-index boost-process boost-signals2 boost-test libevent berkeleydb sqlite3 miniupnpc zeromq qt5-base qt5-tools\r\n```\r\n\r\nTo build on Windows with Visual Studio, a proper [generator](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#visual-studio-generators) must be specified for a new build tree.\r\nThe following example assumes using of \"Developer Command Prompt for VS 2022\" and CMake v3.21+.\r\n\r\n```cmd\r\ncmake -G \"Visual Studio 17 2022\" -A x64 -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static -S . -B build\r\ncmake --build build --config Release\r\n```\r\n\r\nHINT. To leverage Multi-ToolTask and use `<N>` CPU cores, run\r\n```cmd\r\ncmake --build build --config Release -j <N> -- /p:CL_MPcount=<N>\r\n```\r\n\r\n## Cross building for Windows on Ubuntu 22.04\r\n```sh\r\nmake -C depends HOST=x86_64-w64-mingw32\r\ncmake --toolchain depends/x86_64-w64-mingw32/share/toolchain.cmake -S . -B build\r\ncmake --build build\r\n```\r\n\r\n## Cross building for Windows on Ubuntu 22.04 with `DEBUG=1`, see #19772\r\n```sh\r\nmake -C depends HOST=x86_64-w64-mingw32 DEBUG=1\r\ncmake --toolchain depends/x86_64-w64-mingw32/share/toolchain.cmake -S . -B build\r\ncmake --build build\r\n```\r\n\r\n## Cross building for macOS (Intel) on Ubuntu 22.04\r\n```sh\r\nmake -C depends HOST=x86_64-apple-darwin\r\ncmake --toolchain depends/x86_64-apple-darwin/share/toolchain.cmake -S . -B build\r\ncmake --build build\r\n```\r\n\r\n## Cross building for macOS (Apple Silicon) on Ubuntu 22.04\r\n```sh\r\nmake -C depends HOST=arm64-apple-darwin\r\ncmake --toolchain depends/arm64-apple-darwin/share/toolchain.cmake -S . -B build\r\ncmake --build build\r\n```\r\n## Cross building for Android using [NDK r23 LTS](https://github.com/bitcoin/bitcoin/pull/23677) on Ubuntu 22.04\r\n```sh\r\nexport ANDROID_SDK=/home/hebasto/Android/Sdk\r\nexport ANDROID_NDK=${ANDROID_SDK}/ndk/23.2.8568313\r\nexport ANDROID_API_LEVEL=28\r\nmake -C depends ANDROID_TOOLCHAIN_BIN=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/ HOST=aarch64-linux-android\r\ncmake --toolchain depends/aarch64-linux-android/share/toolchain.cmake -S . -B build\r\ncmake --build build\r\n```\r\n\r\n\r\n\r\nNOTE: Building in the source tree is not supported.\r\n\r\n---\r\n\r\n## Functional Tests\r\n\r\nFunctional tests can be run in exactly the same way as when building with Autotools out of the source tree, i.e.:\r\n```\r\n./build/test/functional/test_runner.py\r\n```\r\n\r\n## [Guix builds](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1312482102)\r\n\r\n## [Cirrus CI -- 16 of 16](https://cirrus-ci.com/build/5822976705167360)\r\n\r\n- [x] lint [jammy]\r\n- [x] tidy [jammy]\r\n- [x] Win64 native [vs2022]\r\n- [x] ARM [unit tests, no functional tests] [bullseye]\r\n- [x] Win64 [unit tests, no gui tests, no boost::process, no functional tests] [jammy]\r\n- [x] 32-bit + dash [gui] [CentOS 8]\r\n- [x] [previous releases, uses qt5 dev package and some depends packages, DEBUG] [unsigned char] [buster]\r\n- [x] [TSan, depends, gui] [jammy]\r\n- [x] [MSan, depends] [focal]\r\n- [x] [ASan + LSan + UBSan + integer, no depends, USDT] [jammy]\r\n- [x] [fuzzer,address,undefined,integer, no depends] [jammy]\r\n- [x] [multiprocess, i686, DEBUG] [focal]\r\n- [x] [no wallet, libbitcoinkernel] [buster]\r\n- [x] macOS 10.15 [gui, no tests] [focal]\r\n- [x] macOS 13 native arm64 [gui, sqlite only] [no depends]\r\n- [x] ARM64 Android APK [jammy]\r\n\r\n---\r\n\r\nAdditional notes.\r\n\r\n1. There is a [branch/PR](https://github.com/hebasto/bitcoin/pull/3) in my repo which includes Qt 6 integration and CMake-specific CI tasks.\r\n2. A similar [PR](https://github.com/bitcoin-core/secp256k1/pull/1113) has been open in https://github.com/bitcoin-core/secp256k1.\r\n\r\n---\r\n\r\nThe plan is to have it in the repo shortly after branching `24.x` off, and make CMake-based build system a drop-in replacement of Autotools-based one during the next ~2 or 3~ release cycle~s~.\r\n\r\n---\r\n\r\n# Qt-specific details\r\n\r\n## What happened before?\r\n\r\n- https://www.qt.io/blog/qt-6-build-system:\r\n> CMake is the build system for Qt 6\r\n\r\n- https://www.qt.io/blog/qt-and-cmake-the-past-the-present-and-the-future:\r\n> We made a big decision to start using CMake to build Qt 6 one and a half years ago.\r\n\r\n- https://doc.qt.io/qt-6/qt6-buildsystem.html:\r\n> The Qt 5 build system was built on top of [qmake](https://doc.qt.io/qt-6.2/qtquick-deployment.html#qmake). In Qt 6, we ported the build system to CMake.\r\n\r\nIt is important to note that CMake has extensive [support](https://cmake.org/cmake/help/latest/manual/cmake-qt.7.html) for Qt, including Qt-specific tools such as MOC, RCC, UIC.\r\n\r\n## Why Qt 6 build system does matter if the Bitcoin Core GUI uses Qt 5?\r\n\r\nFor release builds we use Qt 5.15.5 LTS, the latest Qt 5 version available under a free-software license.\r\n\r\nFor dynamic linking users can use Qt 5.11.3+, which allows them to use packages provided in Debian Buster and Ubuntu Focal.\r\n\r\nOn the other hand, Qt 6 packages are available in the following systems/package managers:\r\n- [Ubuntu Jammy](https://packages.ubuntu.com/jammy/qt6-base-dev)+\r\n- [Debian Bullseye](https://packages.debian.org/bullseye-backports/qt6-base-dev)+\r\n- [Fedora 35](https://packages.fedoraproject.org/pkgs/qt6-qtbase/qt6-qtbase/)+\r\n- [Homebrew](https://formulae.brew.sh/formula/qt)\r\n\r\nAs long as Qt GUI is a part of Bitcoin Core, it is inevitable to embrace Qt 6 support, sooner or later.\r\n\r\n## Can we just adjust our current build system to handle Qt 6?\r\n\r\nThe main problem with integration of Qt 6 into the current build system is lacking of pkg-config `*.pc` files for static builds (please note that a patch from [QTBUG-86080](https://bugreports.qt.io/browse/QTBUG-86080) works for non-static builds only).\r\n\r\nTo handle Qt 6 with our current build system we need to:\r\n- patch Qt, which looks like a non-trivial task, or\r\n- apply some [nasty hacks](https://github.com/bitcoin/bitcoin/pull/24798#discussion_r854001982) to our own build system\r\n- keep in our repo the required `*.pc` files\r\n\r\nAll approaches imply maintaining burden for a long time. And last two are pretty ugly :)\r\n\r\n---\r\n\r\n# Autotools -- CMake Feature Parity Table\r\n\r\nAutotool-based build system (AT) features being listed according to the `./configure --help` output. \r\n\r\n| AT feature | CM feature |\r\n|---|---|\r\n| `--prefix` | `-DCMAKE_INSTALL_PREFIX` |\r\n| `--enable-c++20` | `-DCXX20` |\r\n| `--enable-shared` | `-DBUILD_SHARED` |\r\n| `--enable-static` | `-DBUILD_STATIC` |\r\n| `--disable-wallet` | `-DENABLE_WALLET` |\r\n| `--enable-usdt` | `-DWITH_USDT` |\r\n| `--enable-upnp-default` | `-DENABLE_UPNP_DEFAULT` |\r\n| `--enable-natpmp-default` | `-DENABLE_NATPMP_DEFAULT` |\r\n| `--disable-tests` | `-DBUILD_TESTS` |\r\n| `--disable-gui-tests` | TBD |\r\n| `--disable-bench` | `-DBUILD_BENCH` |\r\n| `--enable-extended-functional-tests` | TBD |\r\n| `--enable-fuzz` | `-DFUZZ` |\r\n| `--enable-fuzz-binary` | `-DBUILD_FUZZ_BINARY` |\r\n| `--disable-hardening` | `-DHARDENING` |\r\n| `--enable-reduce-exports` | `-DREDUCE_EXPORTS` |\r\n| `--disable-ccache` | `-DCCACHE` |\r\n| `--enable-suppress-external-warnings` | N/A |\r\n| `--enable-lcov` | TBD |\r\n| `--enable-lcov-branch-coverage` | TBD |\r\n| `--enable-threadlocal` | TBD |\r\n| `--disable-asm` | `-DASM` |\r\n| `--disable-zmq` | `-DWITH_ZMQ` |\r\n| `--enable-multiprocess` | `-DMULTIPROCESS` |\r\n| `--disable-man` | `-DINSTALL_MAN` |\r\n| `--enable-debug` | `-DCMAKE_BUILD_TYPE=Debug` |\r\n| `--enable-gprof` | TBD |\r\n| `--enable-werror` | `-DWERROR` |\r\n| `--enable-external-signer` | `-DWITH_EXTERNAL_SIGNER` |\r\n| `--enable-lto` | TBD |\r\n| `--enable-util-cli` | `-DBUILD_CLI` |\r\n| `--enable-util-tx` | `-DBUILD_TX` |\r\n| `--enable-util-wallet` | `-DBUILD_WALLET_TOOL` |\r\n| `--enable-util-util` | `-DBUILD_UTIL` |\r\n| `--enable-experimental-util-chainstate` | `-DBUILD_UTIL_CHAINSTATE` |\r\n| `--with-seccomp` | `-DWITH_SECCOMP` |\r\n| `--with-sqlite` | `-DWITH_SQLITE` |\r\n| `--without-bdb` | `-DWITH_BDB` |\r\n| `--with-miniupnpc` | `-DWITH_MINIUPNPC` |\r\n| `--with-natpmp` | `-DWITH_NATPMP` |\r\n| `--with-qrencode` | `-DWITH_QRENCODE` |\r\n| `--with-libmultiprocess` | N/A |\r\n| `--with-mpgen` | `-DMPGEN_PREFIX` |\r\n| `--with-sanitizers` | `-DSANITIZERS` |\r\n| `--with-utils` | individual options |\r\n| `--with-libs` | individual options |\r\n| `--with-experimental-kernel-lib` | `-DBUILD_BITCOINKERNEL_LIB` |\r\n| `--with-daemon` | `-DBUILD_DAEMON` |\r\n| `--with-gui` | `-DWITH_GUI` |\r\n\r\n---\r\n\r\nIRC meeting discussions:\r\n- https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2022-08-18#844420;",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 106,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797/comments",
   "created_at" : "2022-08-07T11:15:55Z",
   "draft" : true,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797",
   "id" : 1330985812,
   "labels" : [
      {
         "color" : "5319e7",
         "default" : false,
         "description" : null,
         "id" : 61889416,
         "name" : "Build system",
         "node_id" : "MDU6TGFiZWw2MTg4OTQxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system"
      },
      {
         "color" : "cccccc",
         "default" : false,
         "description" : "",
         "id" : 955867938,
         "name" : "Needs rebase",
         "node_id" : "MDU6TGFiZWw5NTU4Njc5Mzg=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII5848xLg6",
   "number" : 25797,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/25797.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25797",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/25797.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25797"
   },
   "reactions" : {
      "+1" : 2,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 5,
      "hooray" : 8,
      "laugh" : 0,
      "rocket" : 6,
      "total_count" : 21,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797/timeline",
   "title" : "build: Add CMake-based build system",
   "updated_at" : "2023-05-10T11:23:14Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25797",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
      "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
      "followers_url" : "https://api.github.com/users/hebasto/followers",
      "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/hebasto",
      "id" : 32963518,
      "login" : "hebasto",
      "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
      "organizations_url" : "https://api.github.com/users/hebasto/orgs",
      "received_events_url" : "https://api.github.com/users/hebasto/received_events",
      "repos_url" : "https://api.github.com/users/hebasto/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/hebasto"
   }
}
