[
   {
      "author_association" : "MEMBER",
      "body" : "concept ack\r\n\r\ntravis fail is due to linting failure:\r\n```\r\nThis diff appears to have added new lines with trailing whitespace.\r\nThe following changes were suspected:\r\ndiff --git a/src/test/dbwrapper_tests.cpp b/src/test/dbwrapper_tests.cpp\r\n@@ -44,0 +45,89 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\r\n+\r\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());\r\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());\r\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString());\r\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);\r\n+        BOOST_CHECK_EQUAL(isInReindexing, res_bool);\r\n+        BOOST_CHECK_EQUAL(lastblock_hash, res);\r\n+        BOOST_CHECK_EQUAL(res_bool, in_file_bool);\r\n^---- failure generated from test/lint/lint-whitespace.sh\r\n```",
      "created_at" : "2018-09-01T09:48:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#issuecomment-417847150",
      "id" : 417847150,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14125",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNzg0NzE1MA==",
      "updated_at" : "2018-09-01T09:48:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/417847150",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r214521826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214521826"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Could drop this comment",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-01T19:48:50Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r214521826",
      "id" : 214521826,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUyMTgyNg==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 9,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 9,
      "pull_request_review_id" : 151602034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-01T19:49:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214521826",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r214521833"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214521833"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Could you comment these bool literal args?",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-01T19:49:21Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r214521833",
      "id" : 214521833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUyMTgzMw==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 10,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 10,
      "pull_request_review_id" : 151602045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-01T19:49:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214521833",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r214522127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214522127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Inlining these constructions is a bit more clear IMO, because the var names are redundant with the comments:\r\n```c++\r\n//Simulate block raw data - \"b + block hash\"\r\nstd::string key_block = \"b\" + InsecureRand256().ToString();\r\n\r\n//Simulate file raw data - \"f + file_number\"\r\nstd::string key_file = strprintf(\"f%04x\", InsecureRand32());\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-01T20:06:37Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r214522127",
      "id" : 214522127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUyMjEyNw==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 22,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 151602370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-01T20:06:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214522127",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r216109400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216109400"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: Could drop this comment",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-07T23:29:18Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r216109400",
      "id" : 216109400,
      "in_reply_to_id" : 214521826,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjEwOTQwMA==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 9,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 9,
      "pull_request_review_id" : 153530242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-07T23:30:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216109400",
      "user" : null
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r216109464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216109464"
         }
      },
      "author_association" : "NONE",
      "body" : "CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate); ",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-07T23:29:39Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r216109464",
      "id" : 216109464,
      "in_reply_to_id" : 214521833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjEwOTQ2NA==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 10,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 10,
      "pull_request_review_id" : 153530242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-07T23:30:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216109464",
      "user" : null
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r216109566"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216109566"
         }
      },
      "author_association" : "NONE",
      "body" : "/Simulate block raw data - \"b + block hash\"\r\nstd::string key_block = \"b\" + InsecureRand256().ToString();\r\n\r\n//Simulate file raw data - \"f + file_number\"\r\nstd::string key_file = strprintf(\"f%04x\", InsecureRand32());",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-07T23:30:23Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r216109566",
      "id" : 216109566,
      "in_reply_to_id" : 214522127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjEwOTU2Ng==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 22,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 153530242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-07T23:30:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216109566",
      "user" : null
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691125"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please remove comment.",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:52:48Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691125",
      "id" : 219691125,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTEyNQ==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 9,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 9,
      "pull_request_review_id" : 157931693,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:53:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691125",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691128"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691128"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:59:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:53:05Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691128",
      "id" : 219691128,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTEyOA==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 18,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 18,
      "pull_request_review_id" : 157931699,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:53:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691128",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691149"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:60:  Should have a space between // and comment  [whitespace/comments] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:54:04Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691149",
      "id" : 219691149,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE0OQ==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 19,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 19,
      "pull_request_review_id" : 157931719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:54:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691149",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691155"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:68:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:54:23Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691155",
      "id" : 219691155,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE1NQ==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 27,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 27,
      "pull_request_review_id" : 157931726,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:54:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691155",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691159"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:70:  Should have a space between // and comment  [whitespace/comments] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:54:34Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691159",
      "id" : 219691159,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE1OQ==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 29,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 29,
      "pull_request_review_id" : 157931729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691159",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691161"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:73:  Missing space after ,  [whitespace/comma] [3]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:54:50Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691161",
      "id" : 219691161,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE2MQ==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 32,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 32,
      "pull_request_review_id" : 157931734,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:54:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691161",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691164"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:80:  Should have a space between // and comment  [whitespace/comments] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:55:05Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691164",
      "id" : 219691164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE2NA==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 39,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 39,
      "pull_request_review_id" : 157931736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:55:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691164",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691169"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:55:20Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691169",
      "id" : 219691169,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE2OQ==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 47,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 47,
      "pull_request_review_id" : 157931740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:55:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691169",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691175"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:90:  Should have a space between // and comment  [whitespace/comments] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:55:34Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691175",
      "id" : 219691175,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE3NQ==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 49,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 49,
      "pull_request_review_id" : 157931746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:55:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691175",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691180"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:98:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:55:44Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691180",
      "id" : 219691180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE4MA==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 57,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 57,
      "pull_request_review_id" : 157931752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:55:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691180",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691187"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:100:  Should have a space between // and comment  [whitespace/comments] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:55:56Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691187",
      "id" : 219691187,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE4Nw==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 59,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 59,
      "pull_request_review_id" : 157931759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:55:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691187",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691193"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691193"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:105:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:56:13Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);  ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691193",
      "id" : 219691193,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTE5Mw==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 64,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 64,
      "pull_request_review_id" : 157931766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:56:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691193",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691201"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:107:  Should have a space between // and comment  [whitespace/comments] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:56:27Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);  \n+\n+        //Simulate Is Reindexing - \"R\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691201",
      "id" : 219691201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTIwMQ==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 66,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 66,
      "pull_request_review_id" : 157931773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:56:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691201",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691206"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691206"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:112:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:56:39Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);  \n+\n+        //Simulate Is Reindexing - \"R\"\n+        char key_IsReindexing = 'R';\n+        bool isInReindexing = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_IsReindexing, isInReindexing));\n+        BOOST_CHECK(dbw.Read(key_IsReindexing, res_bool));\n+        BOOST_CHECK_EQUAL(isInReindexing, res_bool);   ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691206",
      "id" : 219691206,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTIwNg==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 71,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 71,
      "pull_request_review_id" : 157931780,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:56:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691206",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691212"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:114:  Should have a space between // and comment  [whitespace/comments] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:56:52Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);  \n+\n+        //Simulate Is Reindexing - \"R\"\n+        char key_IsReindexing = 'R';\n+        bool isInReindexing = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_IsReindexing, isInReindexing));\n+        BOOST_CHECK(dbw.Read(key_IsReindexing, res_bool));\n+        BOOST_CHECK_EQUAL(isInReindexing, res_bool);   \n+\n+        //Simulate last block hash up to which UXTO covers - 'B'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691212",
      "id" : 219691212,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTIxMg==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 73,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 73,
      "pull_request_review_id" : 157931786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:56:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691212",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691217"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:119:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:57:04Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);  \n+\n+        //Simulate Is Reindexing - \"R\"\n+        char key_IsReindexing = 'R';\n+        bool isInReindexing = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_IsReindexing, isInReindexing));\n+        BOOST_CHECK(dbw.Read(key_IsReindexing, res_bool));\n+        BOOST_CHECK_EQUAL(isInReindexing, res_bool);   \n+\n+        //Simulate last block hash up to which UXTO covers - 'B'\n+        char key_lastblockhash_uxto = 'B';\n+        uint256 lastblock_hash = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_lastblockhash_uxto, lastblock_hash));\n+        BOOST_CHECK(dbw.Read(key_lastblockhash_uxto, res));\n+        BOOST_CHECK_EQUAL(lastblock_hash, res); ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691217",
      "id" : 219691217,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTIxNw==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 78,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 78,
      "pull_request_review_id" : 157931791,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:57:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691217",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691226"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:121:  Should have a space between // and comment  [whitespace/comments] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:57:18Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);  \n+\n+        //Simulate Is Reindexing - \"R\"\n+        char key_IsReindexing = 'R';\n+        bool isInReindexing = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_IsReindexing, isInReindexing));\n+        BOOST_CHECK(dbw.Read(key_IsReindexing, res_bool));\n+        BOOST_CHECK_EQUAL(isInReindexing, res_bool);   \n+\n+        //Simulate last block hash up to which UXTO covers - 'B'\n+        char key_lastblockhash_uxto = 'B';\n+        uint256 lastblock_hash = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_lastblockhash_uxto, lastblock_hash));\n+        BOOST_CHECK(dbw.Read(key_lastblockhash_uxto, res));\n+        BOOST_CHECK_EQUAL(lastblock_hash, res); \n+\n+        //Simulate file raw data - \"F + filename_number + filename\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691226",
      "id" : 219691226,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTIyNg==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 80,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 80,
      "pull_request_review_id" : 157931797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:57:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691226",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691230"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:125:  Missing space after ,  [whitespace/comma] [3]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:57:30Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);  \n+\n+        //Simulate Is Reindexing - \"R\"\n+        char key_IsReindexing = 'R';\n+        bool isInReindexing = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_IsReindexing, isInReindexing));\n+        BOOST_CHECK(dbw.Read(key_IsReindexing, res_bool));\n+        BOOST_CHECK_EQUAL(isInReindexing, res_bool);   \n+\n+        //Simulate last block hash up to which UXTO covers - 'B'\n+        char key_lastblockhash_uxto = 'B';\n+        uint256 lastblock_hash = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_lastblockhash_uxto, lastblock_hash));\n+        BOOST_CHECK(dbw.Read(key_lastblockhash_uxto, res));\n+        BOOST_CHECK_EQUAL(lastblock_hash, res); \n+\n+        //Simulate file raw data - \"F + filename_number + filename\"\n+        std::string file_option_tag = \"F\";\n+        uint8_t filename_length = InsecureRandBits(8);\n+        std::string filename = \"randomfilename\";\n+        std::string key_file_option = strprintf(\"%s%01x%s\", file_option_tag,filename_length,filename);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691230",
      "id" : 219691230,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTIzMA==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 84,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 84,
      "pull_request_review_id" : 157931801,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:57:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691230",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691233"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:13:05 cpplint(pr=14125): src/test/dbwrapper_tests.cpp:130:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-23T07:57:41Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);  \n+\n+        //Simulate Is Reindexing - \"R\"\n+        char key_IsReindexing = 'R';\n+        bool isInReindexing = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_IsReindexing, isInReindexing));\n+        BOOST_CHECK(dbw.Read(key_IsReindexing, res_bool));\n+        BOOST_CHECK_EQUAL(isInReindexing, res_bool);   \n+\n+        //Simulate last block hash up to which UXTO covers - 'B'\n+        char key_lastblockhash_uxto = 'B';\n+        uint256 lastblock_hash = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_lastblockhash_uxto, lastblock_hash));\n+        BOOST_CHECK(dbw.Read(key_lastblockhash_uxto, res));\n+        BOOST_CHECK_EQUAL(lastblock_hash, res); \n+\n+        //Simulate file raw data - \"F + filename_number + filename\"\n+        std::string file_option_tag = \"F\";\n+        uint8_t filename_length = InsecureRandBits(8);\n+        std::string filename = \"randomfilename\";\n+        std::string key_file_option = strprintf(\"%s%01x%s\", file_option_tag,filename_length,filename);\n+\n+        bool in_file_bool = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_file_option, in_file_bool));\n+        BOOST_CHECK(dbw.Read(key_file_option, res_bool));\n+        BOOST_CHECK_EQUAL(res_bool, in_file_bool);                      ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r219691233",
      "id" : 219691233,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTIzMw==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 89,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 89,
      "pull_request_review_id" : 157931804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-23T07:57:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691233",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r220326327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220326327"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-25 20:45:16 clang(pr=14125): test/dbwrapper_tests.cpp:123:35: warning: implicit conversion loses integer precision: 'uint64_t' (aka 'unsigned long') to 'uint8_t' (aka 'unsigned char') [-Wconversion]\r\n```",
      "commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "created_at" : "2018-09-25T19:33:49Z",
      "diff_hunk" : "@@ -42,6 +42,95 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_1\").append(obfuscate ? \"_true\" : \"_false\"));\n+        //CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+ \n+        //Simulate block raw data - \"b + block hash\"\n+        std::string block_tag = \"b\";\n+        uint256 block_hash = InsecureRand256();\n+        std::string key_block = block_tag + block_hash.ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());    \n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string file_tag = \"f\";\n+        uint32_t file_number = InsecureRand32();\n+        std::string key_file = strprintf(\"%s%04x\", file_tag,file_number);\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string transaction_tag = \"t\";\n+        uint256 transaction_hash = InsecureRand256();\n+        std::string key_transaction = transaction_tag + transaction_hash.ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());      \n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string utxo_tag = \"c\";\n+        uint256 utxo_hash = InsecureRand256();\n+        std::string key_utxo = utxo_tag + utxo_hash.ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString()); \n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);  \n+\n+        //Simulate Is Reindexing - \"R\"\n+        char key_IsReindexing = 'R';\n+        bool isInReindexing = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_IsReindexing, isInReindexing));\n+        BOOST_CHECK(dbw.Read(key_IsReindexing, res_bool));\n+        BOOST_CHECK_EQUAL(isInReindexing, res_bool);   \n+\n+        //Simulate last block hash up to which UXTO covers - 'B'\n+        char key_lastblockhash_uxto = 'B';\n+        uint256 lastblock_hash = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_lastblockhash_uxto, lastblock_hash));\n+        BOOST_CHECK(dbw.Read(key_lastblockhash_uxto, res));\n+        BOOST_CHECK_EQUAL(lastblock_hash, res); \n+\n+        //Simulate file raw data - \"F + filename_number + filename\"\n+        std::string file_option_tag = \"F\";\n+        uint8_t filename_length = InsecureRandBits(8);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#discussion_r220326327",
      "id" : 220326327,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyNjMyNw==",
      "original_commit_id" : "9fa2ec8d9542db314eff396a16a3b39acdb70114",
      "original_position" : 82,
      "path" : "src/test/dbwrapper_tests.cpp",
      "position" : 82,
      "pull_request_review_id" : 158709136,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14125",
      "updated_at" : "2018-09-25T19:33:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220326327",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 248 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",
      "created_at" : "2019-05-07T17:06:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14125#issuecomment-490166392",
      "id" : 490166392,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14125",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MDE2NjM5Mg==",
      "updated_at" : "2019-05-07T17:06:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/490166392",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
