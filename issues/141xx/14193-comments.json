[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r216480494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216480494"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `LOCK2(cs_main, ::mempool.cs);`",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-09-10T21:34:05Z",
      "diff_hunk" : "@@ -2686,6 +2686,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n         {\n             LOCK(cs_main);\n+            LOCK(::mempool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r216480494",
      "id" : 216480494,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQ4MDQ5NA==",
      "original_commit_id" : "fa3e0471a81252e333886b97d8d33bb275061d42",
      "original_position" : 31,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 153972481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216480494",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "AppVeyor builds fine, but no Travis checking for this PR. Travis integration broken?",
      "created_at" : "2018-09-10T21:39:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-420070299",
      "id" : 420070299,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMDA3MDI5OQ==",
      "updated_at" : "2018-09-10T21:39:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/420070299",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16273](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16273.html) (refactor: Remove unused includes by practicalswift)\n* [#16194](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16194.html) (refactor: share blockmetadata with BlockManager by jamesob)\n* [#16066](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16066.html) (mempool: Skip estimator if block is older than X by promag)\n* [#15192](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15192.html) (Add missing cs_main locks in ThreadImport(...)/Shutdown(...)/gettxoutsetinfo(...)/InitScriptExecutionCache(). Add missing locking annotations. by practicalswift)\n* [#13949](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13949.html) (Introduce MempoolObserver interface to break \"policy/fees -> txmempool -> policy/fees\" circular dependency by Empact)\n* [#10443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10443.html) (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-09-10T23:50:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-420098592",
      "id" : 420098592,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMDA5ODU5Mg==",
      "updated_at" : "2019-06-28T23:03:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/420098592",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r217189574"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217189574"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What's the reason for acquiring mempool lock at a broad scope instead of more narrowly where the mempool is actually accessed? Would be nice to have comments in the places where this PR adds locking to indicate purpose of locks and reasoning behind placement.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-09-12T21:07:33Z",
      "diff_hunk" : "@@ -2686,6 +2686,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n         {\n             LOCK(cs_main);\n+            LOCK(::mempool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r217189574",
      "id" : 217189574,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzE4OTU3NA==",
      "original_commit_id" : "fa3e0471a81252e333886b97d8d33bb275061d42",
      "original_position" : 31,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 154844614,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217189574",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is the idea that you're trying to prevent RPC users from having an inconsistent state, like if they call getbestblockhash() and then call getrawmempool(), the latter should be consistent with the former?\r\n\r\nThat may be reasonable, but I think it'd be good to have some documentation (whether a project document or even a gist explaining our thinking) explaining the consistency guarantees for RPC calls with respect to the mempool, validation, and the wallet.  I feel like this kind of thing has come up before in a haphazard way and caused issues when we didn't think things through or missed an implication of a change.\r\n\r\n(Also, I think it would aid RPC users if they knew what our consistency guarantees were.)",
      "created_at" : "2018-09-14T14:26:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-421375559",
      "id" : 421375559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTM3NTU1OQ==",
      "updated_at" : "2018-09-14T14:27:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421375559",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Is the idea that you're trying to prevent RPC users from having an inconsistent state\r\n\r\nFrom the description, I assumed the intent of the PR was to prevent RPCs like `getmempoolentry`, which acquire `mempool.cs` but not `cs_main`, from returning garbage or segfaulting during reorgs because `UpdateMempoolForReorg` and `InvalidateBlock` functions were apparently not acquiring `mempool.cs` while updating the mempool.\r\n\r\nBut actually it seems like in all the places where the mempool is updated, the code already has both `cs_main` and `mempool.cs` locks. So it should be perfectly safe to read the mempool while holding either of the two locks, and trying to acquire both is wasteful.\r\n\r\nSo maybe this PR is not doing what it intended to do, and instead it would be better just to add comments and fix thread safety annotations somehow. Maybe it would be possible to annotate `cs_main` and `mempool.cs` individually as shared locks needed for reading mempool data, and `cs_main`+`mempool.cs` both together as an exclusive lock needed for updating mempool data?",
      "created_at" : "2018-09-14T17:31:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-421429944",
      "id" : 421429944,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTQyOTk0NA==",
      "updated_at" : "2018-09-14T17:31:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421429944",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky With inconsistent I don't mean invalid reads, but rather transactions that are invalid (and still in the process of removal) as of our current block tip.",
      "created_at" : "2018-09-14T17:50:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-421435147",
      "id" : 421435147,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTQzNTE0Nw==",
      "updated_at" : "2018-09-14T17:50:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421435147",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sdaftuar, @ryanofsky: Added a test with comments to illustrate my motivation a bit more.",
      "created_at" : "2018-10-27T15:04:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-433628304",
      "id" : 433628304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMzYyODMwNA==",
      "updated_at" : "2018-10-27T15:04:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/433628304",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233145184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233145184"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: Add missing mempool locks\" (dea5dbf2d5ca0177d3a4be665790288bef40e27e)\r\n\r\nCan you add a comment about what this is for? Do you actually need to hold the lock at the broad scope, or could it be acquired just before calling UpdateMempoolForReorg? Maybe:\r\n\r\n```c++\r\n// Mempool lock for UpdateMempool calls below. (Could be released between calls.)\r\nLOCK(::mempool.cs);\r\n```",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-13T17:27:15Z",
      "diff_hunk" : "@@ -2794,6 +2795,7 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n     AssertLockHeld(cs_main);\n+    LOCK(::mempool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233145184",
      "id" : 233145184,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzE0NTE4NA==",
      "original_commit_id" : "dea5dbf2d5ca0177d3a4be665790288bef40e27e",
      "original_position" : 39,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 174491669,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233145184",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233150812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233150812"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: Add missing mempool locks\" (dea5dbf2d5ca0177d3a4be665790288bef40e27e)\r\n\r\nIt's not clear why the lock is being acquired here instead of before calling ActivateBestChainStep. It's fine to acquire locks at a broad scope, but it's scary to work with code that acquires locks in unexpected places and gives you no clue where or whether the locks are safe to move. Would suggest either moving the lock to where it is more obviously needed or commenting:\r\n\r\n```c++\r\n// Mempool lock for ActivateBestChainStep calls below. (Could be released between calls.)\r\nLOCK(::mempool.cs);\r\n```\r\n\r\nOr else explaining why it's held more broadly.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-13T17:40:11Z",
      "diff_hunk" : "@@ -2686,6 +2686,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n         {\n             LOCK(cs_main);\n+            LOCK(::mempool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233150812",
      "id" : 233150812,
      "in_reply_to_id" : 217189574,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzE1MDgxMg==",
      "original_commit_id" : "fa3e0471a81252e333886b97d8d33bb275061d42",
      "original_position" : 31,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 174491669,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233150812",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233224490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233224490"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: Add missing mempool locks\" (dea5dbf2d5ca0177d3a4be665790288bef40e27e)\r\n\r\nThis is hard to follow. Can you mention this change the commit description? It seems like there is no difference in behavior here except to avoid holding `g_best_block_mutex` while calling `mempool.GetTransactionsUpdated()`? Or am I misinterpreting the diff? If that is the change, it seems good to release the lock, but why is it important do to that now when it wasn't needed before?",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-13T21:16:33Z",
      "diff_hunk" : "@@ -468,21 +468,29 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n-        // Release the wallet and main lock while waiting\n+        // Release lock while waiting",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233224490",
      "id" : 233224490,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzIyNDQ5MA==",
      "original_commit_id" : "dea5dbf2d5ca0177d3a4be665790288bef40e27e",
      "original_position" : 5,
      "path" : "src/rpc/mining.cpp",
      "position" : 5,
      "pull_request_review_id" : 174491669,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233224490",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235229141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235229141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> It seems like there is no difference in behavior here except to avoid holding g_best_block_mutex while calling mempool.GetTransactionsUpdated()?\r\n\r\nThat is indeed the motivation and required to avoid a deadlock. (You should be able to see the deadlock stack by reverting this hunk and running the functional test suite)",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-21T01:41:04Z",
      "diff_hunk" : "@@ -468,21 +468,29 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n-        // Release the wallet and main lock while waiting\n+        // Release lock while waiting",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235229141",
      "id" : 235229141,
      "in_reply_to_id" : 233224490,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTIyOTE0MQ==",
      "original_commit_id" : "dea5dbf2d5ca0177d3a4be665790288bef40e27e",
      "original_position" : 5,
      "path" : "src/rpc/mining.cpp",
      "position" : 5,
      "pull_request_review_id" : 177047493,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235229141",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235230718"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235230718"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It is held just as long as cs_main, because anything shorter would allow other threads (potentially rpc threads) to read from the mempool and get a result that is most likely useless in case we are in the middle of a larger reorg.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-21T01:53:19Z",
      "diff_hunk" : "@@ -2686,6 +2686,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n         {\n             LOCK(cs_main);\n+            LOCK(::mempool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235230718",
      "id" : 235230718,
      "in_reply_to_id" : 217189574,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTIzMDcxOA==",
      "original_commit_id" : "fa3e0471a81252e333886b97d8d33bb275061d42",
      "original_position" : 31,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 177049504,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235230718",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235230815"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235230815"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, and the wallet lock was removed a long time ago, but the comment was never updated.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-21T01:53:57Z",
      "diff_hunk" : "@@ -468,21 +468,29 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n-        // Release the wallet and main lock while waiting\n+        // Release lock while waiting",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235230815",
      "id" : 235230815,
      "in_reply_to_id" : 233224490,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTIzMDgxNQ==",
      "original_commit_id" : "dea5dbf2d5ca0177d3a4be665790288bef40e27e",
      "original_position" : 5,
      "path" : "src/rpc/mining.cpp",
      "position" : 5,
      "pull_request_review_id" : 177049619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235230815",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235233233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235233233"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Calling it right before UpdateMempoolForReorg is too fragile and exactly the issue I want to avoid. (E.g. we `DisconnetTip` and then fail to call `UpdateMempoolForReorg`, because another thread acquired the lock)\r\n\r\nAt the very least the mempool lock should be held as long as disconnectpool sits on the stack.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-21T02:11:20Z",
      "diff_hunk" : "@@ -2794,6 +2795,7 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n     AssertLockHeld(cs_main);\n+    LOCK(::mempool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235233233",
      "id" : 235233233,
      "in_reply_to_id" : 233145184,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTIzMzIzMw==",
      "original_commit_id" : "dea5dbf2d5ca0177d3a4be665790288bef40e27e",
      "original_position" : 39,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 177052609,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235233233",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The test is trivial, but looks scary because of the boilerplate overhead of the cpp unit tests. Pretty much the only thing it is doing is to check that during a reorg a (simulated) rpc thread (e.g. getrawmempool) would either return a consistent mempool as of before the reorg or a consistent mempool as of after the reorg and never something inconsistent in the middle of a reorg.",
      "created_at" : "2018-11-21T02:19:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-440504118",
      "id" : 440504118,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDUwNDExOA==",
      "updated_at" : "2018-11-21T02:19:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440504118",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added a commit with further comments and documentation.",
      "created_at" : "2018-11-28T19:15:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-442569470",
      "id" : 442569470,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MjU2OTQ3MA==",
      "updated_at" : "2018-11-28T19:15:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442569470",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237252285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237252285"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This hunk as-is seems a little overcomplicated to me too if all we want to do is release `g_best_block_mutex` for the mempool operation. This patch (atop `master`) should do:\r\n```patch\r\ndiff --git a/src/rpc/mining.cpp b/src/rpc/mining.cpp\r\nindex c0287ec17..b7f324a97 100644\r\n--- a/src/rpc/mining.cpp\r\n+++ b/src/rpc/mining.cpp\r\n@@ -514,9 +514,14 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\r\n             {\r\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\r\n                 {\r\n-                    // Timeout: Check transactions for update\r\n+                    // Drop the best block mutex while accessing the mempool to avoid deadlock with\r\n+                    // ::mempool.cs.\r\n+                    LEAVE_CRITICAL_SECTION(lock);\r\n+                    // Break if we've seen new transactions after the timeout has elapsed.\r\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\r\n                         break;\r\n+                    ENTER_CRITICAL_SECTION(lock);\r\n+\r\n                     checktxtime += std::chrono::seconds(10);\r\n                 }\r\n             }\r\n```\r\n\r\nEdit: ah wait, this isn't exactly the same behavior since it'd be `LOCK`ish and not `WAIT_LOCK`ish... back to the drawing board.\r\nEdit 2: on second inspection, this *should* work since `ENTER_CRITICAL_SECTION` blocks in the same way `WAIT_LOCK` does.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-28T20:41:44Z",
      "diff_hunk" : "@@ -468,21 +468,29 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n-        // Release the wallet and main lock while waiting\n+        // Release lock while waiting",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237252285",
      "id" : 237252285,
      "in_reply_to_id" : 233224490,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzI1MjI4NQ==",
      "original_commit_id" : "dea5dbf2d5ca0177d3a4be665790288bef40e27e",
      "original_position" : 5,
      "path" : "src/rpc/mining.cpp",
      "position" : 5,
      "pull_request_review_id" : 179506604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237252285",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237546802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237546802"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Here's a diff with some added doc and cosmetics:\r\n```patch\r\ndiff --git a/src/test/validation_block_tests.cpp b/src/test/validation_block_tests.cpp\r\nindex 8c285c7e5..f23e299b1 100644\r\n--- a/src/test/validation_block_tests.cpp\r\n+++ b/src/test/validation_block_tests.cpp\r\n@@ -197,14 +197,29 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\r\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\r\n }\r\n \r\n+/**\r\n+ * Test that mempool updates happen atomically with reorgs.\r\n+ *\r\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\r\n+ * during large reorgs.\r\n+ *\r\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\r\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\r\n+ * invalidating the txns and evicting them from the mempool.\r\n+ *\r\n+ * We verify that the mempool updates atomically by polling it continuously from another thread\r\n+ * during the reorg and checking that its size only changes once.\r\n+ */\r\n BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\r\n {\r\n     auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\r\n-\r\n     bool ignored;\r\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool  {\r\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\r\n+    };\r\n     // Process all mined blocks\r\n-    BOOST_REQUIRE(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), /* fForceProcessing */ true, /* fNewBlock */ &ignored));\r\n-    BOOST_REQUIRE(ProcessNewBlock(Params(), last_mined, /* fForceProcessing */ true, /* fNewBlock */ &ignored));\r\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\r\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\r\n \r\n     // Run the test multiple times\r\n     for (int test_runs = 3; !!test_runs; --test_runs) {\r\n@@ -225,13 +240,13 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\r\n             txs.push_back(MakeTransactionRef(mtx));\r\n \r\n             last_mined = GoodBlock(last_mined->GetHash());\r\n-            BOOST_REQUIRE(ProcessNewBlock(Params(), last_mined, /* fForceProcessing */ true, /* fNewBlock */ &ignored));\r\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\r\n         }\r\n \r\n         // Mature the inputs of the txs\r\n         for (int j = COINBASE_MATURITY; !!j; --j) {\r\n             last_mined = GoodBlock(last_mined->GetHash());\r\n-            BOOST_REQUIRE(ProcessNewBlock(Params(), last_mined, /* fForceProcessing */ true, /* fNewBlock */ &ignored));\r\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\r\n         }\r\n \r\n         // Add the txs to the tx pool\r\n@@ -282,10 +297,10 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\r\n \r\n         // Mine a reorg in this thread to invalidate and remove the txs from the tx pool\r\n         last_mined = GoodBlock(split_hash);\r\n-        ProcessNewBlock(Params(), last_mined, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\r\n+        ProcessBlock(last_mined);\r\n         for (size_t j = COINBASE_MATURITY + txs.size() + 1; j; --j) {\r\n             last_mined = GoodBlock(last_mined->GetHash());\r\n-            ProcessNewBlock(Params(), last_mined, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\r\n+            ProcessBlock(last_mined);\r\n         }\r\n         // Check that the reorg was eventually successful\r\n         BOOST_CHECK_EQUAL(last_mined->GetHash(), ::chainActive.Tip()->GetBlockHash());\r\n```",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-29T15:58:25Z",
      "diff_hunk" : "@@ -181,4 +197,101 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\n }\n \n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237546802",
      "id" : 237546802,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzU0NjgwMg==",
      "original_commit_id" : "fad0712c6e12ccf2a823602c953ccd1af635edbc",
      "original_position" : 61,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 87,
      "pull_request_review_id" : 179871886,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237546802",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> add comments for new lock acquisitions explaining why we're grabbing a seemingly unrelated lock at a coarse grain (in line with what @ryanofsky is saying).\r\n\r\nI think I already did that. Let me know if any of them are still unclear.",
      "created_at" : "2018-11-29T20:17:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-442978333",
      "id" : 442978333,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0Mjk3ODMzMw==",
      "updated_at" : "2018-11-29T20:17:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442978333",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237989280"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237989280"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would it be clearer to just add `LOCK(cs);` to the top of [the function definition](https://github.com/jamesob/bitcoin/blob/81bd349c9c8dd247d32ece1adcc6db1254ef8971/src/txmempool.cpp#L885-L886) instead of this annotation since there's a recursive lock acquisition in `CTxMempool::exists` anyway?",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-30T20:14:01Z",
      "diff_hunk" : "@@ -559,7 +559,7 @@ class CTxMemPool\n      * Check that none of this transactions inputs are in the mempool, and thus\n      * the tx is not dependent on other mempool transactions to be included in a block.\n      */\n-    bool HasNoInputsOf(const CTransaction& tx) const;\n+    bool HasNoInputsOf(const CTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237989280",
      "id" : 237989280,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzk4OTI4MA==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 5,
      "path" : "src/txmempool.h",
      "position" : 69,
      "pull_request_review_id" : 180431962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237989280",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237990805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237990805"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We require the `pool.cs` lock for the duration of this function (instead of just relying on the lock in `pool.Expire`) because we want to keep the mempool from changing while `pcoinsTip` modifications happen, correct?",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-30T20:19:28Z",
      "diff_hunk" : "@@ -436,7 +436,7 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n+static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) EXCLUSIVE_LOCKS_REQUIRED(pool.cs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237990805",
      "id" : 237990805,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzk5MDgwNQ==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 14,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 180431962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237990805",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r238000878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238000878"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Imo it is clearer to let the caller figure out how long the lock is required to be held. Imagine this is called in a loop, the you, most likely, wouldn't want to release the lock in between each iteration? Also, it happens that all callers already have the lock taken, since this annotation can be added without any other changes.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-30T21:01:02Z",
      "diff_hunk" : "@@ -559,7 +559,7 @@ class CTxMemPool\n      * Check that none of this transactions inputs are in the mempool, and thus\n      * the tx is not dependent on other mempool transactions to be included in a block.\n      */\n-    bool HasNoInputsOf(const CTransaction& tx) const;\n+    bool HasNoInputsOf(const CTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r238000878",
      "id" : 238000878,
      "in_reply_to_id" : 237989280,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAwMDg3OA==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 5,
      "path" : "src/txmempool.h",
      "position" : 69,
      "pull_request_review_id" : 180447452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238000878",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r238001324"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238001324"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, calling `LimitMempoolSize` only makes sense after you have written to the mempool, in which case you already have acquired the lock and can keep it for `LimitMempoolSize`.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-11-30T21:02:57Z",
      "diff_hunk" : "@@ -436,7 +436,7 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n+static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) EXCLUSIVE_LOCKS_REQUIRED(pool.cs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r238001324",
      "id" : 238001324,
      "in_reply_to_id" : 237990805,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAwMTMyNA==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 14,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 180448049,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238001324",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r238439300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238439300"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, makes sense.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-03T21:13:26Z",
      "diff_hunk" : "@@ -559,7 +559,7 @@ class CTxMemPool\n      * Check that none of this transactions inputs are in the mempool, and thus\n      * the tx is not dependent on other mempool transactions to be included in a block.\n      */\n-    bool HasNoInputsOf(const CTransaction& tx) const;\n+    bool HasNoInputsOf(const CTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r238439300",
      "id" : 238439300,
      "in_reply_to_id" : 237989280,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODQzOTMwMA==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 5,
      "path" : "src/txmempool.h",
      "position" : 69,
      "pull_request_review_id" : 180982067,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238439300",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r239493241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239493241"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`ENTER_CRITICAL_SECTION(â¦);` isn't RAII, right?\r\n\r\n~Do we need to explicitly `LEAVE_CRITICAL_SECTION(â¦);` when exiting the loop?~",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-06T15:22:45Z",
      "diff_hunk" : "@@ -478,9 +478,14 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             {\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n-                    // Timeout: Check transactions for update\n+                    // Drop the best block mutex while accessing the mempool to avoid deadlock with\n+                    // ::mempool.cs.\n+                    LEAVE_CRITICAL_SECTION(lock);\n+                    // Break if we've seen new transactions after the timeout has elapsed.\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n+                    ENTER_CRITICAL_SECTION(lock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r239493241",
      "id" : 239493241,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTQ5MzI0MQ==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 20,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 182291568,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239493241",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r239497470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239497470"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nope; the `unlock()`/debug stack pop that `LEAVE_CRITICAL_SECTION(...)` would perform is implicit to the destruction of `lock` when it falls out of scope after the `break`.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-06T15:32:56Z",
      "diff_hunk" : "@@ -478,9 +478,14 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             {\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n-                    // Timeout: Check transactions for update\n+                    // Drop the best block mutex while accessing the mempool to avoid deadlock with\n+                    // ::mempool.cs.\n+                    LEAVE_CRITICAL_SECTION(lock);\n+                    // Break if we've seen new transactions after the timeout has elapsed.\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n+                    ENTER_CRITICAL_SECTION(lock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r239497470",
      "id" : 239497470,
      "in_reply_to_id" : 239493241,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTQ5NzQ3MA==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 20,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 182297013,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239497470",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r239498987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239498987"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@jamesob Makes perfect sense: saw the `WAIT_LOCK(g_best_block_mutex, lock);` now. Thanks.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-06T15:36:36Z",
      "diff_hunk" : "@@ -478,9 +478,14 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             {\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n-                    // Timeout: Check transactions for update\n+                    // Drop the best block mutex while accessing the mempool to avoid deadlock with\n+                    // ::mempool.cs.\n+                    LEAVE_CRITICAL_SECTION(lock);\n+                    // Break if we've seen new transactions after the timeout has elapsed.\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n+                    ENTER_CRITICAL_SECTION(lock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r239498987",
      "id" : 239498987,
      "in_reply_to_id" : 239493241,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTQ5ODk4Nw==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 20,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 182298981,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239498987",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240339698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240339698"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It wasn't clear from reading this why size changing once was a useful thing to check. It would help to add some more explanation from your comment in https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-440504118. Maybe an additional sentence: \"The size changing exactly once indicates that the polling thread's view of the mempool is either consistent with the chain state before reorg, or consistent with the chain state after the reorg, and not just consistent with some intermediate state during the reorg.\r\n\r\n",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-10T19:03:47Z",
      "diff_hunk" : "@@ -181,4 +197,116 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously from another thread\n+ * during the reorg and checking that its size only changes once.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240339698",
      "id" : 240339698,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDMzOTY5OA==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 72,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 183347740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240339698",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240341166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240341166"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe declare `last_mined` below where it is used. It was confusing to see it not used at all in the lambda and then later referenced below.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-10T19:08:12Z",
      "diff_hunk" : "@@ -181,4 +197,116 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously from another thread\n+ * during the reorg and checking that its size only changes once.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240341166",
      "id" : 240341166,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDM0MTE2Ng==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 76,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 183347740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240341166",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240342002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240342002"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why `!!test_runs` everywhere in this PR instead of `test_runs > 0`? This seems strange, and less readable. Also, why count backwards instead of forwards?",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-10T19:10:37Z",
      "diff_hunk" : "@@ -181,4 +197,116 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously from another thread\n+ * during the reorg and checking that its size only changes once.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool  {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; !!test_runs; --test_runs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240342002",
      "id" : 240342002,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDM0MjAwMg==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 86,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 183347740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240342002",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240345505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240345505"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No more !! here? And I was just getting used to it...",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-10T19:20:55Z",
      "diff_hunk" : "@@ -181,4 +197,116 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously from another thread\n+ * during the reorg and checking that its size only changes once.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool  {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; !!test_runs; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::chainActive.Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; !!num_txs; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; !!j; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        const uint256 tip_init{last_mined->GetHash()};\n+        std::thread rpc_thread{[&]() {\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;\n+            }\n+            LOCK(cs_main);\n+            // We are done with the reorg, so the tip must have changed\n+            assert(tip_init != ::chainActive.Tip()->GetBlockHash());\n+        }};\n+\n+        // Mine a reorg in this thread to invalidate and remove the txs from the tx pool\n+        last_mined = GoodBlock(split_hash);\n+        ProcessBlock(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j; --j) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240345505",
      "id" : 240345505,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDM0NTUwNQ==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 162,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 183347740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240345505",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240347801"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240347801"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is actually doing more than checking that \"size only changes once\" as described in the summary comment above. It is checking that the mempool either contains **all** of the transactions invalidated by the reorg, or **none** of them, and not some intermediate amount. Could update the comment above to say this instead.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-10T19:27:34Z",
      "diff_hunk" : "@@ -181,4 +197,116 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously from another thread\n+ * during the reorg and checking that its size only changes once.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool  {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; !!test_runs; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::chainActive.Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; !!num_txs; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; !!j; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        const uint256 tip_init{last_mined->GetHash()};\n+        std::thread rpc_thread{[&]() {\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240347801",
      "id" : 240347801,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDM0NzgwMQ==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 151,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 178,
      "pull_request_review_id" : 183347740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240347801",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240361372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240361372"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems less than ideal. I would guess that we don't actually need `ConnectTip` and `DisconnectTip` be holding on to `mempool.cs` while they wait to notify this RPC. At least would seem more straightforward if `g_best_block_cv` got notified after the fact, when `mempool.cs` was already released.\r\n\r\nI think it would be good to add a TODO to untangle these locks on the future, or a normal comment if mixing these locks has some benefits which are not apparent. The best place to comment would be on the `g_best_block_mutex` variable. It might also be good to add `ACQUIRED_AFTER` annotations there to prevent another deadlock like this.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-10T20:06:13Z",
      "diff_hunk" : "@@ -478,9 +478,14 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             {\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n-                    // Timeout: Check transactions for update\n+                    // Drop the best block mutex while accessing the mempool to avoid deadlock with\n+                    // ::mempool.cs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240361372",
      "id" : 240361372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDM2MTM3Mg==",
      "original_commit_id" : "d9e6cb497bd540078dbf32536825fa3bfd60df42",
      "original_position" : 15,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 183347740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240361372",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240414928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240414928"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: Add missing mempool locks\" (d9e6cb497bd540078dbf32536825fa3bfd60df42)\r\n\r\nre:https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233150812\r\n\r\n> It's not clear why the lock is being acquired here instead of before calling ActivateBestChainStep.\r\n\r\nThank you for adding the comment. But this is still not clear to me. If this code locked the `mempool.cs` before calling `ActivateBestChainStep` and unlocked it immediately after it returned, would there be a bug? `ActivateBestChainStep` already updates the mempool, so if this code isn't locking to maintain the invariant that views of the mempool are consistent with chainActive, what invariant is it trying to maintain?",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-10T23:01:00Z",
      "diff_hunk" : "@@ -2686,6 +2686,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n \n         {\n             LOCK(cs_main);\n+            LOCK(::mempool.cs); // Lock for at least as long as it takes for connectTrace to be consumed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240414928",
      "id" : 240414928,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDQxNDkyOA==",
      "original_commit_id" : "d9e6cb497bd540078dbf32536825fa3bfd60df42",
      "original_position" : 31,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 183347740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240414928",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240423959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240423959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[test] Add test to check mempool consistency in case of reorgs\" (fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912)\r\n\r\n> Calling it right before UpdateMempoolForReorg is too fragile and exactly the issue I want to avoid. (E.g. we DisconnetTip and then fail to call UpdateMempoolForReorg, because another thread acquired the lock)\r\n\r\nThanks for explaining and adding the comment. It is clear if mempool.cs needs to provide views of the mempool that are consistent with chainActive, then it needs to be locked between the first DisconnectTip call and the final UpdateMempoolForReorg call. But it would seem clearer and safer to lock the mempool right where `disconnectpool` is declared and to unlock it right after UpdateMempoolForReorg returns, instead of continuing to hold it while sending UI notifications.\r\n\r\nAlso it seems like both DisconnectTip and ConnectTip should be annotated with `EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs)`, and for some reason they aren't.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2018-12-10T23:38:19Z",
      "diff_hunk" : "@@ -2794,6 +2795,7 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n     AssertLockHeld(cs_main);\n+    LOCK(::mempool.cs); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnetTip without unlocking in between",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240423959",
      "id" : 240423959,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDQyMzk1OQ==",
      "original_commit_id" : "d9e6cb497bd540078dbf32536825fa3bfd60df42",
      "original_position" : 39,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 183347740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240423959",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm probably missing some context, but what is wrong with a simpler design where you just acquire `cs_main` to get a consistent view of chain state, and `mempool::cs` to get a consistent view of the mempool, and both to get a consistent view of both together?\r\n\r\nThe new unit test and the getrawmempool example both seem very contrived. Why do these cases need to only acquire `mempool::cs` without acquiring `cs_main`? If they need to views of the mempool consistent with the current chain tip, why don't they just acquire both mutexes?",
      "created_at" : "2018-12-11T01:42:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-446040973",
      "id" : 446040973,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NjA0MDk3Mw==",
      "updated_at" : "2018-12-11T01:42:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/446040973",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-12-13T21:54:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-447134515",
      "id" : 447134515,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzEzNDUxNQ==",
      "updated_at" : "2018-12-13T21:54:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447134515",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It looks like #14963 replaces this PR. Perhaps this should be closed, or marked dependent.",
      "created_at" : "2018-12-17T18:51:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-447956395",
      "id" : 447956395,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0Nzk1NjM5NQ==",
      "updated_at" : "2018-12-17T18:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447956395",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-447956395\r\n> It looks like #14963 replaces this PR. Perhaps this should be closed, or marked dependent.\r\n\r\nTurns out #14963 doesn't really replace this PR, it just documents a bug which this PR (which is currently WIP) will fix:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/fa5c346c5a336ccdce8e50befb53746c280f053e/src/txmempool.h#L515-L522\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-446040973\r\n> I'm probably missing some context, but what is wrong with a simpler design where you just acquire cs_main to get a consistent view of chain state, and mempool::cs to get a consistent view of the mempool, and both to get a consistent view of both together?\r\n\r\nResponding to my own question, but answer from conversation seems to be that we want to allow applications that frequently query the mempool to (1) only acquire cs.mempool without cs_main for better performance and (2) not see any missing transactions if they happen to query the mempool in the middle of a reorg.",
      "created_at" : "2019-01-04T18:03:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-451520802",
      "id" : 451520802,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MTUyMDgwMg==",
      "updated_at" : "2019-01-04T18:04:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451520802",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed some of @ryanofsky's feedback",
      "created_at" : "2019-01-15T18:52:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-454507036",
      "id" : 454507036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NDUwNzAzNg==",
      "updated_at" : "2019-01-15T18:52:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454507036",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r255661199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255661199"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does you comment still apply after my latest rebase? Also, `ACQUIRED_AFTER` only works in very limited setttings (e.g. not across translation units or even function bodies). We don't use it anywhere else, so I will leave this as is for now.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-02-11T19:36:08Z",
      "diff_hunk" : "@@ -478,9 +478,14 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             {\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n-                    // Timeout: Check transactions for update\n+                    // Drop the best block mutex while accessing the mempool to avoid deadlock with\n+                    // ::mempool.cs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r255661199",
      "id" : 255661199,
      "in_reply_to_id" : 240361372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTY2MTE5OQ==",
      "original_commit_id" : "d9e6cb497bd540078dbf32536825fa3bfd60df42",
      "original_position" : 15,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 202298204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255661199",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r255661638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255661638"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The test has a ton of comments. Let me know if I need to add anything else to parts where the code is not self-explanatory.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-02-11T19:37:18Z",
      "diff_hunk" : "@@ -181,4 +197,116 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, chainActive.Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously from another thread\n+ * during the reorg and checking that its size only changes once.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool  {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; !!test_runs; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::chainActive.Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; !!num_txs; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; !!j; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        const uint256 tip_init{last_mined->GetHash()};\n+        std::thread rpc_thread{[&]() {\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r255661638",
      "id" : 255661638,
      "in_reply_to_id" : 240347801,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTY2MTYzOA==",
      "original_commit_id" : "fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912",
      "original_position" : 151,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 178,
      "pull_request_review_id" : 202298743,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255661638",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r255661836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255661836"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added locking annotations.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-02-11T19:37:53Z",
      "diff_hunk" : "@@ -2794,6 +2795,7 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n     AssertLockHeld(cs_main);\n+    LOCK(::mempool.cs); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnetTip without unlocking in between",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r255661836",
      "id" : 255661836,
      "in_reply_to_id" : 240423959,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NTY2MTgzNg==",
      "original_commit_id" : "d9e6cb497bd540078dbf32536825fa3bfd60df42",
      "original_position" : 39,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 202299001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/255661836",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Anything left to do here?",
      "created_at" : "2019-02-11T19:38:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-462464862",
      "id" : 462464862,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MjQ2NDg2Mg==",
      "updated_at" : "2019-02-11T19:38:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462464862",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r267433314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267433314"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: Add missing mempool locks\" (fadeeadd93a928c8ececa8c96ad2afa45bd25a29)\r\n\r\nMight be worth keeping text that says why guarantee 2 is useful. James also asked about it here https://github.com/bitcoin/bitcoin/pull/14193#pullrequestreview-179871886, wondering if it might be useful for dandelion.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-03-20T16:33:19Z",
      "diff_hunk" : "@@ -511,15 +511,6 @@ class CTxMemPool\n      * `mempool.cs` whenever adding transactions to the mempool and whenever\n      * changing the chain tip. It's necessary to keep both mutexes locked until\n      * the mempool is consistent with the new chain tip and fully populated.\n-     *\n-     * @par Consistency bug\n-     *\n-     * The second guarantee above is not currently enforced, but\n-     * https://github.com/bitcoin/bitcoin/pull/14193 will fix it. No known code\n-     * in bitcoin currently depends on second guarantee, but it is important to\n-     * fix for third party code that needs be able to frequently poll the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r267433314",
      "id" : 267433314,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NzQzMzMxNA==",
      "original_commit_id" : "fadeeadd93a928c8ececa8c96ad2afa45bd25a29",
      "original_position" : 10,
      "path" : "src/txmempool.h",
      "position" : 36,
      "pull_request_review_id" : 216840225,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267433314",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r267453955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267453955"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure about that. We generally don't update (forget to update) comments when adding new features. So if a feature is added in the far future (e.g. Dandelion has no chance to hit any time soon), the phrase \"No known code in bitcoin currently depends on second guarantee\" might no longer reflect reality.\r\n\r\nI believe the test that I added serves a a nice documentation that if this guarantee is violated, it will fail. The motivation to fix this bug for (enterprise) rpc users that poll the mempool should be enough motivation on its own.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-03-20T17:18:03Z",
      "diff_hunk" : "@@ -511,15 +511,6 @@ class CTxMemPool\n      * `mempool.cs` whenever adding transactions to the mempool and whenever\n      * changing the chain tip. It's necessary to keep both mutexes locked until\n      * the mempool is consistent with the new chain tip and fully populated.\n-     *\n-     * @par Consistency bug\n-     *\n-     * The second guarantee above is not currently enforced, but\n-     * https://github.com/bitcoin/bitcoin/pull/14193 will fix it. No known code\n-     * in bitcoin currently depends on second guarantee, but it is important to\n-     * fix for third party code that needs be able to frequently poll the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r267453955",
      "id" : 267453955,
      "in_reply_to_id" : 267433314,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NzQ1Mzk1NQ==",
      "original_commit_id" : "fadeeadd93a928c8ececa8c96ad2afa45bd25a29",
      "original_position" : 10,
      "path" : "src/txmempool.h",
      "position" : 36,
      "pull_request_review_id" : 216866580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267453955",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r275375166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/275375166"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Should be \"DisconnectTip\" :-)",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-04-15T14:02:17Z",
      "diff_hunk" : "@@ -2793,6 +2794,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         LimitValidationInterfaceQueue();\n \n         LOCK(cs_main);\n+        LOCK(::mempool.cs); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnetTip without unlocking in between",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r275375166",
      "id" : 275375166,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NTM3NTE2Ng==",
      "original_commit_id" : "fa33e8f41fe14cfd136ac7c96e192a9e14f1d0d3",
      "original_position" : 52,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 226664144,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/275375166",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rewritten test now that segwit is always active in unit tests:\r\n\r\n* Add missing call to `GenerateCoinbaseCommitment`\r\n* Mine the reorg before adding txs to mempool, to not include them in the reorg blocks",
      "created_at" : "2019-04-25T17:58:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-486775996",
      "id" : 486775996,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4Njc3NTk5Ng==",
      "updated_at" : "2019-04-25T17:58:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/486775996",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The mining is using CreateNewBlock, which gets txs from the mempool (if available).\r\n\r\nWhy this worked previously, IIRC, was that segwit wasn't active on regtest in unit tests, but non-standard txs would be accepted to the mempool. (See https://github.com/bitcoin/bitcoin/pull/15788/files#diff-01edb0ae76ec7f6061ec6ddbdb18375aL45 and #15891). Since the txs have witness, they wouldn't be mined previously, but now that segwit is always active on regtest, they are.\r\n\r\nIn this test we don't want to mine any txs from the mempool, so we mine the reorg when the mempool is empty and then add the txs to the mempool.",
      "created_at" : "2019-05-07T21:52:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-490268840",
      "id" : 490268840,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MDI2ODg0MA==",
      "updated_at" : "2019-05-07T21:52:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/490268840",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Also, the test is already clear on this: `// Mine a reorg (and hold it back) before adding the txs to the mempool`. If you have specific concerns, please suggest a rewording of that sentence.",
      "created_at" : "2019-05-14T13:51:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-492246200",
      "id" : 492246200,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MjI0NjIwMA==",
      "updated_at" : "2019-05-14T13:51:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/492246200",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r286703079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/286703079"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a pretty weird construction; generally you shouldn't be releasing the lock that protects the state you're waiting to change while inspecting it.\r\n\r\nWhat about making `CTxMemPool::nTransactionsUpdated` an atomic, and making `CTxMemPool::GetTransactionsUpdated` not grap `cs`? Would it still be needed to release `lock` here then?\r\n\r\nWould you be able to write this as `g_best_block_cv.wait_until(lock, checktxtime, [&](){ return g_best_block != hashWatchedChain || !IsRPCRunning() || mempool.GetTransactionsUpdate() != nTransactionsUpdatedLastLP; });`?",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-05-22T21:52:44Z",
      "diff_hunk" : "@@ -479,9 +479,14 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             {\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n-                    // Timeout: Check transactions for update\n+                    // Drop the best block mutex while accessing the mempool to avoid deadlock with\n+                    // ::mempool.cs.\n+                    LEAVE_CRITICAL_SECTION(lock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r286703079",
      "id" : 286703079,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NjcwMzA3OQ==",
      "original_commit_id" : "fa84fdbb1eb3c842e7f9248bceab98e91445ad0d",
      "original_position" : 16,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 240899453,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T09:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/286703079",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r291539216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291539216"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Made it atomic, but I left the refactoring change for a future pull request.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-06-07T10:35:32Z",
      "diff_hunk" : "@@ -479,9 +479,14 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             {\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n-                    // Timeout: Check transactions for update\n+                    // Drop the best block mutex while accessing the mempool to avoid deadlock with\n+                    // ::mempool.cs.\n+                    LEAVE_CRITICAL_SECTION(lock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r291539216",
      "id" : 291539216,
      "in_reply_to_id" : 286703079,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MTUzOTIxNg==",
      "original_commit_id" : "fa84fdbb1eb3c842e7f9248bceab98e91445ad0d",
      "original_position" : 16,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 247025031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-07T10:35:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291539216",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298813180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298813180"
         }
      },
      "author_association" : "MEMBER",
      "body" : ":eyes:",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-06-29T22:55:32Z",
      "diff_hunk" : "@@ -322,8 +322,8 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     assert(int(nSigOpCostWithAncestors) >= 0);\n }\n \n-CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :\n-    nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n+CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n+    : nTransactionsUpdated(0), minerPolicyEstimator(estimator)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298813180",
      "id" : 298813180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODgxMzE4MA==",
      "original_commit_id" : "fa0c9dbf9156d64a4b9bff858da97825369a9134",
      "original_position" : 7,
      "path" : "src/txmempool.cpp",
      "position" : 16,
      "pull_request_review_id" : 256052741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-29T23:08:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298813180",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298813325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298813325"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fa2b083c3feb0522baf652045efa6b73458761a3\r\n\r\nWhy `continue`?",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-06-29T23:07:24Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298813325",
      "id" : 298813325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODgxMzMyNQ==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 179,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 179,
      "pull_request_review_id" : 256052741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-29T23:08:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298813325",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298813327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298813327"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fa2b083c3feb0522baf652045efa6b73458761a3\r\n\r\nI think this is flawless, what guarantees that there's a non-atomic change once `mempool.cs` is released?",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-06-29T23:07:37Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298813327",
      "id" : 298813327,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODgxMzMyNw==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 167,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 167,
      "pull_request_review_id" : 256052741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-29T23:08:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298813327",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298838858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298838858"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The code changes in this pull request should guarantee that this doesn't happen here in the test (you can check it by running the test before the code changes and after), as well as for \"real\" rpc polling threads. Though, I didn't write a functional test for this.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-06-30T15:18:37Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298838858",
      "id" : 298838858,
      "in_reply_to_id" : 298813327,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODgzODg1OA==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 167,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 167,
      "pull_request_review_id" : 256079344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-30T15:18:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298838858",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298838888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298838888"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Because the thread should continue and not exit (for now)",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-06-30T15:19:15Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298838888",
      "id" : 298838888,
      "in_reply_to_id" : 298813325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODgzODg4OA==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 179,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 179,
      "pull_request_review_id" : 256079367,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-06-30T15:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298838888",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299204848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299204848"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why would it exit?",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-07-01T20:28:33Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299204848",
      "id" : 299204848,
      "in_reply_to_id" : 298813325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTIwNDg0OA==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 179,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 179,
      "pull_request_review_id" : 256546009,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-07-01T20:28:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299204848",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299210818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299210818"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would exit when it `break`s. I think this is well documented in the test case and I am not sure what you are asking exactly.\r\n\r\nIf you are asking about cpp syntax, I find cppreference really helpful. E.g. https://en.cppreference.com/w/cpp/language/break\r\n\r\nIf you are asking about this test case logic, please write a more verbose question.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-07-01T20:46:19Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299210818",
      "id" : 299210818,
      "in_reply_to_id" : 298813325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTIxMDgxOA==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 179,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 179,
      "pull_request_review_id" : 256553538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-07-01T20:46:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299210818",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "code review ACK fa2b083c3feb0522baf652045efa6b73458761a3\r\n\r\n@ryanofsky didn't you ack the wrong commit above ? e284e422e75189794e24fe482819d8b1407857c3 (\"Remove getBlockDepth method from Chain::interface\") isn't part of this PR",
      "created_at" : "2019-07-02T14:05:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-507692011",
      "id" : 507692011,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNzY5MjAxMQ==",
      "updated_at" : "2019-07-02T14:05:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/507692011",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299503348"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299503348"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't get this either. If you have a loop, and an unconditional continue is the last statement in the loop, the continue isn't doing anything and could be removed.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/fa2b083c3feb0522baf652045efa6b73458761a3/src/test/validation_block_tests.cpp#L316",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-07-02T14:11:10Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299503348",
      "id" : 299503348,
      "in_reply_to_id" : 298813325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTUwMzM0OA==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 179,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 179,
      "pull_request_review_id" : 256919435,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-07-02T14:11:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299503348",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @ryanofsky didn't you ack the wrong commit above\r\n\r\nSorry, bad copy and paste from the command line. Edited https://github.com/bitcoin/bitcoin/pull/14193#pullrequestreview-255403869 to fix.",
      "created_at" : "2019-07-02T14:20:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-507698546",
      "id" : 507698546,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNzY5ODU0Ng==",
      "updated_at" : "2019-07-02T14:20:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/507698546",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks!",
      "created_at" : "2019-07-02T14:29:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-507702985",
      "id" : 507702985,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14193",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNzcwMjk4NQ==",
      "updated_at" : "2019-07-02T14:29:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/507702985",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299526825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299526825"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, I now I understand that you were asking why I put a *redundant* `continue` there.\r\n\r\nThat was intentional, because I felt it was more clear back when I wrote the test. Happy to remove, but I think we shouldn't spend too much time on style of tests.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-07-02T14:54:57Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299526825",
      "id" : 299526825,
      "in_reply_to_id" : 298813325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTUyNjgyNQ==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 179,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 179,
      "pull_request_review_id" : 256950040,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-07-02T14:54:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299526825",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299531945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299531945"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I didn't mean to discuss style! I honestly though something was wrong because of the pointless `continue`, like missing code or something else.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-07-02T15:04:10Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299531945",
      "id" : 299531945,
      "in_reply_to_id" : 298813325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTUzMTk0NQ==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 179,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 179,
      "pull_request_review_id" : 256956583,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-07-02T15:04:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299531945",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299533826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299533826"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, good point. Sorry for the confusion.",
      "commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "created_at" : "2019-07-02T15:07:49Z",
      "diff_hunk" : "@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299533826",
      "id" : 299533826,
      "in_reply_to_id" : 298813325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTUzMzgyNg==",
      "original_commit_id" : "fa2b083c3feb0522baf652045efa6b73458761a3",
      "original_position" : 179,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : 179,
      "pull_request_review_id" : 256958959,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14193",
      "updated_at" : "2019-07-02T15:07:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299533826",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
