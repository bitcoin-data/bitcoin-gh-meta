[
   {
      "author_association" : "MEMBER",
      "body" : "> However, I think this may also happen in production, so a proper fix would be to protect m_spk_managers with a mutex? If not, it might be sufficient to add a SyncWithValidationInterfaceQueue() somewhere in the test.\r\n\r\nIt is hard for this race to occur in production due to the wallet registering to the validation interface after loading, which means that the legacy spkm exists before any chain event takes place. However, other races may still occur. Furthermore, the spkm maps are guarded by `cs_wallet` in some instances, but not in others.\r\n\r\nThe root cause of this issue is our misuse (and abuse) of the recursive lock. We typically lock the mutex at the beginning of a process, without considering how many times the lock might be relocked internally. Some wallet methods are already depending on it, so they donât lock the mutex (and add the exclusive lock requirement annotation), while others that are used externally lock the mutex.\r\n\r\nTo address this specific test-only issue, the fix can be straightforward: we just need to add the missing `cs_wallet` to the setup function or the lock requirement annotation (and ensure the lock in the caller side) or.. as you said, even call to the sync validation queue at the base wallet test class. However, the long-term solution is more complex. We cannot add the guarded_by annotation to the spkm maps because doing so would unchain a large number of missing locks, which will be difficult to fix without either recurring to lock the mutex recursively or.. create two separate methods: one that locks the mutex internally and one that only executes if the lock has already been acquired.\r\n\r\nWill jump into this rabbit hole in the coming week/s and see how much can be cleaned/reorganized in a first round.",
      "created_at" : "2023-03-31T13:19:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/27354#issuecomment-1491916385",
      "id" : 1491916385,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27354",
      "node_id" : "IC_kwDOABII585Y7NZh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491916385/reactions"
      },
      "updated_at" : "2023-03-31T13:22:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491916385",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   }
]
