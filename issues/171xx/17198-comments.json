[
   {
      "author_association" : "MEMBER",
      "body" : "Also worth checking:\r\n\r\n```\r\n$ git grep -E '^(const|static| )*[A-Za-z:]+ *&+[^=)/<>.]+\\(' -- \"*.cpp\" \"*.h\" \\\r\n      \":(exclude)src/bench/\" \":(exclude)src/leveldb/\" \":(exclude)src/qt/\" \\\r\n      \":(exclude)src/test/\" \":(exclude)src/univalue/\" \":(exclude)src/wallet/\" | \\\r\n      grep -v ' operator'\r\n```",
      "created_at" : "2019-10-20T17:24:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17198#issuecomment-544272769",
      "id" : 544272769,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17198",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDI3Mjc2OQ==",
      "updated_at" : "2019-10-20T17:24:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544272769",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Somewhat related: [Curiously Recurring C++ Bugs at Facebook](https://www.youtube.com/watch?v=lkgszkPnV8g&t=876) (CppCon 2017)",
      "created_at" : "2019-10-20T20:49:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17198#issuecomment-544291221",
      "id" : 544291221,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17198",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDI5MTIyMQ==",
      "updated_at" : "2019-10-20T20:49:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544291221",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hi,\r\n\r\nI created a list from the output of @practicalswift 's command and am now going it through one by one. It's also a good way to learn Bitcoin's APIs. ;)\r\n\r\nFor example:\r\n\r\n```cpp\r\nsrc/util/threadnames.cpp:const std::string& util::ThreadGetInternalName() { return g_thread_name; }\r\n```\r\n\r\nI've checked its references throughout the code and it seems that this string reference never does anything with the data it owns. So, why not converting it into a **string_view**, that is: **boost::string_view**, because currently no C++17 support in Bitcoin, if I am not mistaken.\r\n\r\nHowever, there's the **Logger** class [that deals with strings](https://github.com/brakmic/bitcoin/blob/master/src/logging.cpp#L267).\r\n\r\nAnd this is where I had to stop, because I didn't want to change Logger itself. All other parts of the code where **ThreadGetInternalName()** was used could be changed to string_view without any interference. So, maybe I should have tried to change Logger, because it would make sense for a Logger to never own any data. Would it make sense? I don't know, only speculating.\r\n\r\nI am not saying, that this should be done (the *string_view*, I mean), or that it even makes sense, but in general, when something doesn't do anything with data it points to, then it should not own it. Also, *string_view*s can be passed by value without any performance hit, while references always have a redirection in them.\r\n\r\nLet's see what other functions have to offer. :)\r\n\r\nRegards,",
      "created_at" : "2019-11-29T15:03:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17198#issuecomment-559816953",
      "id" : 559816953,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17198",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTgxNjk1Mw==",
      "updated_at" : "2019-11-29T15:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559816953",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/56779?v=4",
         "events_url" : "https://api.github.com/users/brakmic/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brakmic/followers",
         "following_url" : "https://api.github.com/users/brakmic/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brakmic/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brakmic",
         "id" : 56779,
         "login" : "brakmic",
         "node_id" : "MDQ6VXNlcjU2Nzc5",
         "organizations_url" : "https://api.github.com/users/brakmic/orgs",
         "received_events_url" : "https://api.github.com/users/brakmic/received_events",
         "repos_url" : "https://api.github.com/users/brakmic/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brakmic/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brakmic"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'd doubt this has a performance impact. Might as well return a copy of the string?",
      "created_at" : "2019-12-03T19:28:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17198#issuecomment-561320005",
      "id" : 561320005,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17198",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTMyMDAwNQ==",
      "updated_at" : "2019-12-03T19:28:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561320005",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Performance is not the problem here, but the many owners, that is string-references. A **string_view** never owns a string, it only looks at it. Also, when an existing reference is not used, that is there is no work on data it owns, why have it in the first place? Why not keeping stuff read-only that could work in read-only-mode?\r\n\r\nThis one string from **ThreadGetInternalName** might be unimportant, sure, but in general, why sending around string-refs when a much more safe *string_view* could be sent *by value*? Also, by explicitly declaring a *string_view* one also makes a statement that this object will never be able to change the data it looks at, because it doesn't own it.\r\n\r\nThat was my first question when I looked at Logger's API. *Does it need to own all those strings it's logging?*\r\n\r\n",
      "created_at" : "2019-12-03T19:35:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17198#issuecomment-561322724",
      "id" : 561322724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17198",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTMyMjcyNA==",
      "updated_at" : "2019-12-03T19:35:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561322724",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/56779?v=4",
         "events_url" : "https://api.github.com/users/brakmic/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brakmic/followers",
         "following_url" : "https://api.github.com/users/brakmic/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brakmic/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brakmic",
         "id" : 56779,
         "login" : "brakmic",
         "node_id" : "MDQ6VXNlcjU2Nzc5",
         "organizations_url" : "https://api.github.com/users/brakmic/orgs",
         "received_events_url" : "https://api.github.com/users/brakmic/received_events",
         "repos_url" : "https://api.github.com/users/brakmic/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brakmic/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brakmic"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'd doubt this has a performance impact. Might as well return a copy of the string?\r\n\r\nYes, I've always been confused by that one, the thread name is a short string, it's only queried up to once per log message, returning a reference seems a very premature optimization.\r\n(though I don't think `util::ThreadGetInternalName` has any lifetime issues? it's either a global or a thread-local string,and  in the latter case it's only used in the thread it's associated with)",
      "created_at" : "2019-12-04T13:46:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17198#issuecomment-561652341",
      "id" : 561652341,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17198",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTY1MjM0MQ==",
      "updated_at" : "2019-12-04T13:46:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561652341",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > I'd doubt this has a performance impact. Might as well return a copy of the string?\r\n> \r\n> Yes, I've always been confused by that one, the thread name is a short string, it's only queried up to once per log message, returning a reference seems a very premature optimization.\r\n\r\nAgreed. A lot of these cases listed in the OP feel like classic examples of premature optimization :)\r\n\r\nUnfortunately it is not only a premature optimization but it also unnecessarily introduce sharp edges that might hit us in the form of life-time issues in the future. Issues that would be much much more costly than an extra copy.\r\n\r\nRecommending this talk (again): https://www.youtube.com/watch?v=lkgszkPnV8g&t=876 :)",
      "created_at" : "2019-12-04T14:11:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17198#issuecomment-561662431",
      "id" : 561662431,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17198",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTY2MjQzMQ==",
      "updated_at" : "2019-12-04T14:11:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561662431",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > I'd doubt this has a performance impact. Might as well return a copy of the string?\r\n> \r\n> Yes, I've always been confused by that one, the thread name is a short string, it's only queried up to once per log message, returning a reference seems a very premature optimization.\r\n> (though I don't think `util::ThreadGetInternalName` has any lifetime issues? it's either a global or a thread-local string,and in the latter case it's only used in the thread it's associated with)\r\n\r\nThe problem usually isn't about big copy, but about the call to `new` ie heap allocation.\r\nNot that I'm saying it's not premature optimization, but we do spend a significant amount of time on the `new` operator in benchmarks. avoiding heap allocation when possible is IMHO a good idea, but obviously not in the cost of safety\r\nIn thread names we might be hitting small string optimization anyways (I think clang's impl is 10 chars in 32bit and 22 chars in 64bit or something like that)",
      "created_at" : "2020-03-01T15:19:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17198#issuecomment-593108769",
      "id" : 593108769,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17198",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzEwODc2OQ==",
      "updated_at" : "2020-03-01T15:19:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593108769",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   }
]
