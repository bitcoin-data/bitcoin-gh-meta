{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "When a node receives a `cmpctblock` it has to verify to its check mempool in order to know whether it has all the required transactions to construct that block. If it doesn't, it will send `getblocktxn` to fetch the missing tx{s}. \r\n\r\n`PartiallyDownloadedBlock::InitData` shows we have to iterate the whole mempool in order to get the short id and do the verifications, see:\r\n```cpp\r\nfor (size_t i = 0; i < pool->vTxHashes.size(); i++) {\r\n    uint64_t shortid = cmpctblock.GetShortID(pool->vTxHashes[i].first);\r\n    std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\r\n    if (idit != shorttxids.end()) {\r\n        if (!have_txn[idit->second]) {\r\n            txn_available[idit->second] = pool->vTxHashes[i].second->GetSharedTx();\r\n            have_txn[idit->second]  = true;\r\n            mempool_count++;\r\n        } else {\r\n            // If we find two mempool txn that match the short id, just request it.\r\n            // This should be rare enough that the extra bandwidth doesn't matter,\r\n            // but eating a round-trip due to FillBlock failure would be annoying\r\n            if (txn_available[idit->second]) {\r\n                txn_available[idit->second].reset();\r\n                mempool_count--;\r\n            }\r\n        }\r\n    }\r\n    // Though ideally we'd continue scanning for the two-txn-match-shortid case,\r\n    // the performance win of an early exit here is too good to pass up and worth\r\n    // the extra risk.\r\n    if (mempool_count == shorttxids.size())\r\n        break;\r\n}\r\n```\r\n\r\nThis means that every time we receive a compact block we have to iterate the whole mempool and calculate the \"short id\"s all over again. Couldn't`CTxMemPool` have a hashmap where we could store the transactions' short id right after joining the mempool and remove it once the tx gets confirmed/out of mempool?",
   "closed_at" : "2023-05-22T08:56:02Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 7,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27706/comments",
   "created_at" : "2023-05-20T11:38:09Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27706/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/27706",
   "id" : 1718145240,
   "labels" : [
      {
         "color" : "006688",
         "default" : false,
         "description" : null,
         "id" : 477890092,
         "name" : "Questions and Help",
         "node_id" : "MDU6TGFiZWw0Nzc4OTAwOTI=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Questions%20and%20Help"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27706/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII585maNDY",
   "number" : 27706,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27706/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "state_reason" : "completed",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27706/timeline",
   "title" : "Compute 'short id' when transaction joins mempool",
   "updated_at" : "2023-05-22T08:56:03Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27706",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
      "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
      "followers_url" : "https://api.github.com/users/brunoerg/followers",
      "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/brunoerg",
      "id" : 19480819,
      "login" : "brunoerg",
      "node_id" : "MDQ6VXNlcjE5NDgwODE5",
      "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
      "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
      "repos_url" : "https://api.github.com/users/brunoerg/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/brunoerg"
   }
}
