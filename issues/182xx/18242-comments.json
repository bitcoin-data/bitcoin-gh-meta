[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21000 (fuzz: Add UBSan suppressions needed for fuzz tests to not warn under -fsanitize=integer by practicalswift)\n* #20685 (Add I2P support using I2P SAM by vasild)\n* #20429 (refactor: replace (sizeof(a)/sizeof(a[0])) with C++17 std::size by theStack)\n* #20196 (net: fix GetListenPort() to derive the proper port by vasild)\n* #19064 (refactor: Cleanup thread ctor calls by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-03-02T16:41:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593496115",
      "id" : 593496115,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzQ5NjExNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-25T06:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593496115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-03-02T22:54:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593665514",
      "id" : 593665514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzY2NTUxNA==",
      "updated_at" : "2020-03-02T22:54:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593665514",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept:\r\n\r\nConcept ACK - thanks for working on this!\r\n\r\n---\r\n\r\nImplementation:\r\n\r\nSome comments after first read-through of the implementation:\r\n\r\n**1. Uninitialized read in case of invalid command name**\r\n\r\nIn the \"Invalid command name\" case then a read (and use) of the uninitialized variable `size_or_shortid` will take place on L808:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/73db845771628983c7f288ead73cd3a8793f8c6a/src/net.cpp#L802-L808\r\n\r\n_Shameless plug:_ For those interested in killing the uninitialised read bug class, consider reviewing:\r\n* #17639 â tests: Add `make check-valgrind` to run the unit tests under Valgrind\r\n* #17895 â build: Enable Clang's `-Wconditional-uninitialized` to warn on potential uninitialized reads\r\n\r\n**2. Use of a locale dependent formatting function `itostr(â¦)`**\r\n\r\n`itostr` is used here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/73db845771628983c7f288ead73cd3a8793f8c6a/src/net.cpp#L819-L823\r\n\r\n`itostr` calls `strprintf` which calls `tfm::format` (tinyformat) which uses the standard C++ formatting stringstream interface which is locale dependent.\r\n\r\n_Shameless plug:_ For those interested in permanently killing the locale dependency bug class, consider reviewing:\r\n* #18124 â init: Clarify C and C++ locale assumptions. Add locale sanity checks to verify assumptions at run-time\r\n* #18126 â tests: Add fuzzing harness testing the locale independence of the strencodings.h functions\r\n* #18147 â qt: Kill the locale dependency bug class by not allowing Qt to mess with `LC_NUMERIC`\r\n\r\n**3. `std::exception` vs expected `std::ios_base::failure`**\r\n\r\nA question: I notice that `std::exception` is guarded against instead of the expected `std::ios_base::failure` in case of deserialization errors throughout this PR. Is it intentional? :)\r\n\r\nIt is somewhat related to another deserialization-exception anomaly I mailed you about back in October last year:\r\n\r\n```\r\nWhen fuzzing some deserialization code I noticed that `CExtKey::Unserialize(...)`\r\nand `CExtPubKey::(...)` throw `std::runtime_error` instead of the\r\n`std::ios_base::failure` I expected in case of deserialization errors.\r\n\r\nI saw that this code was written by you originally: do you remember if there\r\nwas a particular reason to go with `std::runtime_error` instead of\r\n`std::ios_base::failure`? If not, do you think it would be safe to change it? :)\r\n\r\nThe commits in question:\r\n*Â https://github.com/bitcoin/bitcoin/commit/07685d1bc1b0b815c00a68a5b7b335ffa0d4d90d\r\n*Â https://github.com/bitcoin/bitcoin/commit/90604f16af63ec066d6561337f476ccd8acec326\r\n```\r\n\r\nThese deviations from the expected`std::ios_base::failure` puzzle me - are they intentional, and if so why? I want to learn :)",
      "created_at" : "2020-03-02T23:22:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593674721",
      "id" : 593674721,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzY3NDcyMQ==",
      "updated_at" : "2020-03-03T11:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593674721",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Very nice to see that the `V2TransportDeserializer` is fuzzed already from birth! I hope that fuzz testing will be as natural as unit testing when introducing security critical code in the future. Kudos for taking care of it here!\r\n\r\nA small comment regarding the fuzzer:\r\n\r\nI think the assertion â¦\r\n\r\n```\r\nassert(msg.m_raw_message_size == CMessageHeader::HEADER_SIZE + msg.m_message_size);\r\n```\r\n\r\nâ¦ in the fuzzing harness is guaranteed to hold for `V1TransportDeserializer` but not for `V2TransportDeserializer`.\r\n\r\nCould that be the case? :)",
      "created_at" : "2020-03-02T23:36:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-593678921",
      "id" : 593678921,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzY3ODkyMQ==",
      "updated_at" : "2020-03-02T23:53:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593678921",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Add \"Waiting for author\" tag? :)",
      "created_at" : "2020-03-21T11:09:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-602028339",
      "id" : 602028339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMjAyODMzOQ==",
      "updated_at" : "2020-03-21T11:09:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602028339",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @practicalswift for the review. I tried to fix the exception handling as well as uninitialised read. I also fixed the invalid fuzzing assertion (for V2).\r\n\r\nI'm unsure about the locale dependent formatting. What would you recommend instead of `itotsr`?",
      "created_at" : "2020-03-27T09:04:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-604891842",
      "id" : 604891842,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNDg5MTg0Mg==",
      "updated_at" : "2020-03-27T09:04:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604891842",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jonasschnelli \r\n\r\n> I'm unsure about the locale dependent formatting. What would you recommend instead of `itotsr`?\r\n\r\nI recommend `ToString(â¦)` (`util/string.h`) :)",
      "created_at" : "2020-03-27T14:08:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-605020188",
      "id" : 605020188,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTAyMDE4OA==",
      "updated_at" : "2020-03-27T14:08:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605020188",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989046"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit remove extra newline \r\n```suggestion\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:38:12Z",
      "diff_hunk" : "@@ -199,3 +199,116 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989046",
      "id" : 401989046,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTA0Ng==",
      "original_commit_id" : "0e9b029fdceafceffe92a66ac08b74748c92d9da",
      "original_line" : 232,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989454"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    // use 32 byte keys with all zeros\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:39:41Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401989454",
      "id" : 401989454,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4OTQ1NA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 325,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401989454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990279"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I could be wrong but style guide seems to say these should be on the same line https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c\r\n```suggestion\r\n    } else {\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:43:06Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990279",
      "id" : 401990279,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDI3OQ==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 337,
      "original_position" : 28,
      "original_start_line" : 336,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990279",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990508"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Proper social distancing should be followed and pre-inc is preferred.\r\n```suggestion\r\n    for (unsigned int i = 0; i < 100; ++i) {\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:43:50Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990508",
      "id" : 401990508,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDUwOA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 342,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990612"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure if this was intended or not, but if it was intended I don't understand why\r\n```suggestion\r\n            // first: read header\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:44:10Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990612",
      "id" : 401990612,
      "line" : 963,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDYxMg==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 963,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 42,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990612",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990710"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n            // second: read the encrypted payload (if required)\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:44:34Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char *)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401990710",
      "id" : 401990710,
      "line" : 967,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MDcxMA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 967,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401990710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991160"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    for (unsigned int i = 0;i < 1000; ++i) { \r\n        vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash()));\r\n    }\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:46:09Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char *)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read((const char *)msg.data.data(), msg.data.size());\n+            if (msg.data.size() > read_bytes && msg.data.size()-read_bytes > 0) read_bytes += deserializer->Read((const char *)msg.data.data()+read_bytes, msg.data.size()-read_bytes);\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size()+serialized_header.size());\n+            // message must be complete\n+            CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+            BOOST_CHECK_EQUAL(msg_deser.m_command, msg.command);\n+            BOOST_CHECK_EQUAL(raw_msg_size, msg_deser.m_message_size);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_v2)\n+{\n+    // create some messages where we perform serialization and deserialization\n+    std::vector<CSerializedNetMsg> test_msgs;\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\n+    CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\n+    std::vector<CInv> vInv;\n+    for (unsigned int i=0;i<1000;i++) { vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash())); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991160",
      "id" : 401991160,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTE2MA==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 380,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991466"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    for (unsigned int i = 0; i < 100; ++i) { \r\n        dummy += \"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\";\r\n    }\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:47:10Z",
      "diff_hunk" : "@@ -319,4 +321,73 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs) {\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2));\n+    }\n+    else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i=0; i<100;i++) {\n+        for(const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char *)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read((const char *)msg.data.data(), msg.data.size());\n+            if (msg.data.size() > read_bytes && msg.data.size()-read_bytes > 0) read_bytes += deserializer->Read((const char *)msg.data.data()+read_bytes, msg.data.size()-read_bytes);\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size()+serialized_header.size());\n+            // message must be complete\n+            CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+            BOOST_CHECK_EQUAL(msg_deser.m_command, msg.command);\n+            BOOST_CHECK_EQUAL(raw_msg_size, msg_deser.m_message_size);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_v2)\n+{\n+    // create some messages where we perform serialization and deserialization\n+    std::vector<CSerializedNetMsg> test_msgs;\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\n+    CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\n+    std::vector<CInv> vInv;\n+    for (unsigned int i=0;i<1000;i++) { vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash())); }\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::INV, vInv));\n+\n+    // add a dummy message\n+    std::string dummy;\n+    for (unsigned int i=0;i<100;i++) { dummy += \"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401991466",
      "id" : 401991466,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTQ2Ng==",
      "original_commit_id" : "500e268eb1d9feefddecba8f47becfbdac2f7e3f",
      "original_line" : 385,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401991466",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992204"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "maybe \r\n```suggestion\r\n    } else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || GetTime() - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:49:50Z",
      "diff_hunk" : "@@ -834,6 +846,30 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     msg.m_message_size = msg.m_recv.size(); //message payload size (excluding command)\n     msg.m_raw_message_size =  CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n \n+    if (m_rekey_flag) {\n+        // make sure we rekey at this point, next message is supposed to be encrypted with the new key\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+        // reset the AEAD context\n+        m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+        LogPrint(BCLog::NET, \"Rekey: new recv keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+        // reset sequence numbers\n+        m_payload_seqnr = 0;\n+        m_aad_seqnr = 0;\n+        m_aad_pos = 0;\n+        m_bytes_decrypted = 0;\n+        m_time_last_rekey = GetTime();\n+    }\n+    else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || GetTime() - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992204",
      "id" : 401992204,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjIwNA==",
      "original_commit_id" : "b2397b06c0b644ca5c0984ed5f17a7c97a4b8844",
      "original_line" : 865,
      "original_position" : 46,
      "original_start_line" : 864,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992204",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992396"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    for (unsigned int i = 0; i <= 76; ++i) {\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:50:40Z",
      "diff_hunk" : "@@ -389,5 +397,78 @@ BOOST_AUTO_TEST_CASE(net_v2)\n     message_serialize_deserialize_test(false, test_msgs);\n }\n \n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));;\n+    std::unique_ptr<TransportDeserializer> deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2, session_id));\n+\n+    ChaCha20Poly1305AEAD test_decryption_aead(k1.data(), k1.size(), k2.data(), k2.size());\n+\n+    for (unsigned int i=0; i<=76;i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992396",
      "id" : 401992396,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjM5Ng==",
      "original_commit_id" : "b2397b06c0b644ca5c0984ed5f17a7c97a4b8844",
      "original_line" : 415,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992502"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    for (unsigned int i = 0; i <= 100; ++i) {\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:51:08Z",
      "diff_hunk" : "@@ -389,5 +397,78 @@ BOOST_AUTO_TEST_CASE(net_v2)\n     message_serialize_deserialize_test(false, test_msgs);\n }\n \n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));;\n+    std::unique_ptr<TransportDeserializer> deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2, session_id));\n+\n+    ChaCha20Poly1305AEAD test_decryption_aead(k1.data(), k1.size(), k2.data(), k2.size());\n+\n+    for (unsigned int i=0; i<=76;i++) {\n+        // encrypt the message without the fast-rekey rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"0\");\n+        std::vector<unsigned char> serialized_header;\n+        serializer->prepareForTransport(test_msg, serialized_header);\n+\n+        // decrypt the message with the fast rekey-rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"1\");\n+        read_message(deserializer, serialized_header, test_msg);\n+        CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+\n+        // make sure we detect the failed rekey\n+        // the 76. message (32kb) must have violated the fast rekey limits\n+        BOOST_CHECK(msg_deser.m_valid_header == (i!=76));\n+    }\n+\n+    // now make sure we are rekeying by checking against a manual aead instance\n+    serializer.reset(new V2TransportSerializer(mutable_k1, mutable_k2, mutable_session_id));\n+    deserializer.reset(new V2TransportDeserializer(Params().MessageStart(), mutable_k1, mutable_k2, mutable_session_id));\n+    uint32_t aad_seqnr = 0;\n+    uint32_t aad_pos = 0;\n+    for (unsigned int i=0; i<=100;i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992502",
      "id" : 401992502,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjUwMg==",
      "original_commit_id" : "b2397b06c0b644ca5c0984ed5f17a7c97a4b8844",
      "original_line" : 436,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992678"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\nvoid test_deserializer(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<uint8_t>& buffer, const int header_size) \r\n{\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-02T00:51:49Z",
      "diff_hunk" : "@@ -17,24 +18,22 @@ void initialize()\n     SelectParams(CBaseChainParams::REGTEST);\n }\n \n-void test_one_input(const std::vector<uint8_t>& buffer)\n-{\n-    V1TransportDeserializer deserializer{Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION};\n+void test_deserializer(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<uint8_t>& buffer, const int header_size) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r401992678",
      "id" : 401992678,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjY3OA==",
      "original_commit_id" : "818b19787a01edf2a043450f5a9bd362d8521cfe",
      "original_line" : 21,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/test/fuzz/p2p_transport_deserializer.cpp",
      "position" : null,
      "pull_request_review_id" : 386040031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401992678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@PastaPastaPasta Worth mentioning for future reviews: we use `clang-format` in the project so the 11 specific whitespace review comments could be simplified to a one general review comment \"Nit: Please use `clang-format-diff.py ` on this diff\" :)",
      "created_at" : "2020-04-02T04:32:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-607614762",
      "id" : 607614762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzYxNDc2Mg==",
      "updated_at" : "2020-04-02T04:32:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607614762",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @PastaPastaPasta and @practicalswift. Applied clang-format now.",
      "created_at" : "2020-04-02T19:23:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-608056625",
      "id" : 608056625,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwODA1NjYyNQ==",
      "updated_at" : "2020-04-02T19:23:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608056625",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407260396"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T22:30:06Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260396",
      "id" : 407260396,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDM5Ng==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 726,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407260396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407260785"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n        const unsigned int copy_bytes = std::min(remaining, bytes);\r\n```\r\n\r\nAlso `#include <algorithm>` header for `std::min()`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T22:34:20Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407260785",
      "id" : 407260785,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MDc4NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 727,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407260785",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261271"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261271"
         }
      },
      "author_association" : "MEMBER",
      "body" : "An explicit type conversion could improve readability:\r\n```suggestion\r\n        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T22:39:59Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261271",
      "id" : 407261271,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTI3MQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 746,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261271",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261365"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is the purpose of `m_message_size` in the log message?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T22:41:29Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261365",
      "id" : 407261365,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTM2NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 748,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\r\n        const unsigned int copy_bytes = std::min(remaining, bytes);\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T22:44:00Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261568",
      "id" : 407261568,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTU2OA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 764,
      "original_position" : 54,
      "original_start_line" : 763,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261568",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261836"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\r\n```\r\n\r\n... and drop the line 762:\r\n```\r\n       const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T22:46:45Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[AAD_LEN + m_data_pos], pch, copy_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407261836",
      "id" : 407261836,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MTgzNg==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 772,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407261836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407262244"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What if `size_or_shortid` is still `== 0` ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T22:50:46Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // count bytes we decrypted including MAC tag + AD\n+        m_bytes_decrypted += vRecv.size();\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid > 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262244",
      "id" : 407262244,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MjI0NA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 859,
      "original_position" : 115,
      "original_start_line" : 809,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407262244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262788"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407262788"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T22:56:44Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407262788",
      "id" : 407262788,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2Mjc4OA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 903,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407262788",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263182"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be combined:\r\n```suggestion\r\n    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:00:42Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263182",
      "id" : 407263182,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MzE4Mg==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 917,
      "original_position" : 193,
      "original_start_line" : 907,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    // append the short-ID or (eventually) the varstr of the command\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:01:07Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263223",
      "id" : 407263223,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MzIyMw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 923,
      "original_position" : 199,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263272"
         }
      },
      "author_association" : "MEMBER",
      "body" : "typo:\r\n```suggestion\r\n    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:02:00Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263272",
      "id" : 407263272,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MzI3Mg==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 934,
      "original_position" : 210,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263272",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263619"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n```suggestion\r\n    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:06:06Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407263619",
      "id" : 407263619,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2MzYxOQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 946,
      "original_position" : 222,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407263619",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407264511"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually, `bit24` is equivalent to `rekey`. Maybe drop `bit24` in lines 934-935 and:\r\n```suggestion\r\n    bool rekey = msg.data[2] & (1U << 7);\r\n    assert(!rekey);\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:15:51Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264511",
      "id" : 407264511,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NDUxMQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 1021,
      "original_position" : 223,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407264511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407264883"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mind using a named constant:\r\n```suggestion\r\n    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\r\n```\r\n?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:19:39Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407264883",
      "id" : 407264883,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NDg4Mw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 939,
      "original_position" : 215,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407264883",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265167"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mind using a named constant:\r\n```suggestion\r\n    m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, msg.data.data(), msg.data.size(), msg.data.data(), msg.data.size() - CHACHA20_POLY1305_AEAD_TAG_LEN, true);\r\n```\r\n?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:22:49Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;\n+    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 10 : REKEY_LIMIT_TIME)) {\n+        LogPrint(BCLog::NET, \"Rekey limits reached, performing rekey.\\n\");\n+        msg.data[2] |= (1u << 7);\n+        rekey = true;\n+    }\n+\n+    // encrypt the payload, ignore return code since it can't fail in this case (controlled buffers, don't check the MAC during encrypting)\n+    m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, msg.data.data(), msg.data.size(), msg.data.data(), msg.data.size() - 16, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265167",
      "id" : 407265167,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTE2Nw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 955,
      "original_position" : 231,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mind moving the member initializer list to next line to improve readability?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:24:30Z",
      "diff_hunk" : "@@ -703,6 +705,68 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey;\n+    uint256 m_session_id;     // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr; // sequence number for the payload\n+    uint64_t m_aad_seqnr;     // sequence number for the packet length (AD)\n+    int m_aad_pos;            // position in the aad keystream\n+    bool m_in_data;           // parsing header (false) or data (true)\n+    uint32_t m_message_size;  // expected message size\n+    CDataStream vRecv;        // received message data\n+    unsigned int m_hdr_pos;   // read pos in header\n+    unsigned int m_data_pos;  // read pos in data\n+    bool m_rekey_flag;        // rekey in message detected\n+\n+public:\n+    V2TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_bytes_decrypted(0), m_time_last_rekey(GetTime()), m_session_id(session_id), m_payload_seqnr(0), m_aad_seqnr(0), m_aad_pos(0), vRecv(SER_NETWORK, INIT_PROTO_VERSION)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265366",
      "id" : 407265366,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTM2Ng==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 737,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265633"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: could be placed into one line or in braces.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:27:29Z",
      "diff_hunk" : "@@ -703,6 +705,68 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey;\n+    uint256 m_session_id;     // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr; // sequence number for the payload\n+    uint64_t m_aad_seqnr;     // sequence number for the packet length (AD)\n+    int m_aad_pos;            // position in the aad keystream\n+    bool m_in_data;           // parsing header (false) or data (true)\n+    uint32_t m_message_size;  // expected message size\n+    CDataStream vRecv;        // received message data\n+    unsigned int m_hdr_pos;   // read pos in header\n+    unsigned int m_data_pos;  // read pos in data\n+    bool m_rekey_flag;        // rekey in message detected\n+\n+public:\n+    V2TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_bytes_decrypted(0), m_time_last_rekey(GetTime()), m_session_id(session_id), m_payload_seqnr(0), m_aad_seqnr(0), m_aad_pos(0), vRecv(SER_NETWORK, INIT_PROTO_VERSION)\n+    {\n+        Reset();\n+    }\n+\n+    void Reset()\n+    {\n+        vRecv.clear();\n+        vRecv.resize(CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        m_in_data = false;\n+        m_hdr_pos = 0;\n+        m_message_size = 0;\n+        m_data_pos = 0;\n+        m_rekey_flag = false;\n+    }\n+    bool Complete() const\n+    {\n+        if (!m_in_data)\n+            return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265633",
      "id" : 407265633,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTYzMw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 865,
      "original_position" : 62,
      "original_start_line" : 754,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265633",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mind moving the member initializer list to next line to improve readability?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:28:46Z",
      "diff_hunk" : "@@ -717,6 +781,27 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for a later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_encrypted = 0; //counter of bytes encrypted with same key\n+    int64_t m_time_last_rekey = 0;\n+    uint256 m_session_id; // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr = 0;\n+    uint64_t m_aad_seqnr = 0;\n+    int m_aad_pos = 0;\n+\n+public:\n+    V2TransportSerializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_session_id(session_id)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265779",
      "id" : 407265779,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTc3OQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 916,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265779",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265968"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Have you consider a `switch` statement as an alternative?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:30:49Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265968",
      "id" : 407265968,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTk2OA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 253,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Have you consider a `switch` statement as an alternative?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:31:04Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)\n+{\n+    if (shortID == NetMsgType::ADDR_SHORT_ID) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407265992",
      "id" : 407265992,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NTk5Mg==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 318,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407265992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407266260"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: hereinafter\r\n```suggestion\r\nconstexpr uint8_t VERSION_SHORT_ID = 38;\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:33:59Z",
      "diff_hunk" : "@@ -71,99 +71,115 @@ namespace NetMsgType {\n  * @see https://bitcoin.org/en/developer-reference#version\n  */\n extern const char *VERSION;\n+const uint8_t VERSION_SHORT_ID = 38;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266260",
      "id" : 407266260,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NjI2MA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 74,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407266260",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407266630"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`MIN_REKEY_TIME` is unused now. Is it added intended on purpose in the future?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-12T23:38:24Z",
      "diff_hunk" : "@@ -703,6 +705,68 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407266630",
      "id" : 407266630,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2NjYzMA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 834,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 391900410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407266630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407715006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407715006"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you explain a bit what you envision the `-netencryptionfastrekey` flag to do? Is it a command line flag for testing purposes?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-13T20:54:12Z",
      "diff_hunk" : "@@ -393,5 +402,79 @@ BOOST_AUTO_TEST_CASE(net_v2)\n     message_serialize_deserialize_test(false, test_msgs);\n }\n \n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));\n+    ;\n+    std::unique_ptr<TransportDeserializer> deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(Params().MessageStart(), k1, k2, session_id));\n+\n+    ChaCha20Poly1305AEAD test_decryption_aead(k1.data(), k1.size(), k2.data(), k2.size());\n+\n+    for (unsigned int i = 0; i <= 76; i++) {\n+        // encrypt the message without the fast-rekey rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"0\");\n+        std::vector<unsigned char> serialized_header;\n+        serializer->prepareForTransport(test_msg, serialized_header);\n+\n+        // decrypt the message with the fast rekey-rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"1\");\n+        read_message(deserializer, serialized_header, test_msg);\n+        CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+\n+        // make sure we detect the failed rekey\n+        // the 76. message (32kb) must have violated the fast rekey limits\n+        BOOST_CHECK(msg_deser.m_valid_header == (i != 76));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407715006",
      "id" : 407715006,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxNTAwNg==",
      "original_commit_id" : "1b2f52af4f85910673ac43be1568e3ad32e878ee",
      "original_line" : 514,
      "original_position" : 94,
      "original_start_line" : 422,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 392431872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407715006",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407726340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407726340"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps I'm mistaken, but it seems like this `pchMessageStartIn` is not needed. I tried compiling with it removed and that seemed to work.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-13T21:16:25Z",
      "diff_hunk" : "@@ -703,6 +705,55 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    uint64_t m_payload_seqnr; // sequence number for the payload\n+    uint64_t m_aad_seqnr;     // sequence number for the packet length (AD)\n+    int m_aad_pos;            // position in the aad keystream\n+    bool m_in_data;           // parsing header (false) or data (true)\n+    uint32_t m_message_size;  // expected message size\n+    CDataStream vRecv;        // received message data\n+    unsigned int m_hdr_pos;   // read pos in header\n+    unsigned int m_data_pos;  // read pos in data\n+\n+    int readHeader(const char* pch, unsigned int nBytes);\n+    int readData(const char* pch, unsigned int nBytes);\n+\n+public:\n+    V2TransportDeserializer(const CMessageHeader::MessageStartChars& pchMessageStartIn, const CPrivKey& k1, const CPrivKey& k2) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_payload_seqnr(0), m_aad_seqnr(0), m_aad_pos(0), vRecv(SER_NETWORK, INIT_PROTO_VERSION)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407726340",
      "id" : 407726340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyNjM0MA==",
      "original_commit_id" : "786ec9bffc09c73d5b94e5056e7396adc0c2eb3d",
      "original_line" : 725,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 392431872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407726340",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407729684"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407729684"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps we could use in-class member initializers to de-clutter the constructor signature",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-13T21:23:14Z",
      "diff_hunk" : "@@ -703,6 +705,55 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    uint64_t m_payload_seqnr; // sequence number for the payload\n+    uint64_t m_aad_seqnr;     // sequence number for the packet length (AD)\n+    int m_aad_pos;            // position in the aad keystream\n+    bool m_in_data;           // parsing header (false) or data (true)\n+    uint32_t m_message_size;  // expected message size\n+    CDataStream vRecv;        // received message data\n+    unsigned int m_hdr_pos;   // read pos in header\n+    unsigned int m_data_pos;  // read pos in data",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407729684",
      "id" : 407729684,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyOTY4NA==",
      "original_commit_id" : "786ec9bffc09c73d5b94e5056e7396adc0c2eb3d",
      "original_line" : 719,
      "original_position" : 26,
      "original_start_line" : 711,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 392431872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407729684",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407741063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407741063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please replace occurrences of \"command\" with something like \"msg_type\" at least in new code. See also #18533 ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-13T21:48:06Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407741063",
      "id" : 407741063,
      "line" : 249,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MTA2Mw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 249,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 110,
      "pull_request_review_id" : 392463471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407741063",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407962780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407962780"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd like to keep it to be consistent with BIP324 (and other bips). Changing it might make it more confusing.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-14T08:37:36Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r407962780",
      "id" : 407962780,
      "in_reply_to_id" : 407741063,
      "line" : 249,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2Mjc4MA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 249,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 110,
      "pull_request_review_id" : 392717158,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407962780",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408000719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408000719"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. I added the check for not violating the `MIN_REKEY_TIME`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-14T09:36:46Z",
      "diff_hunk" : "@@ -703,6 +705,68 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408000719",
      "id" : 408000719,
      "in_reply_to_id" : 407266630,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMDcxOQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 834,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 392762346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408000719",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408001077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you elaborate on the differences? Aren't the compiler differences marginal?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-14T09:37:17Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)\n+{\n+    if (shortID == NetMsgType::ADDR_SHORT_ID) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001077",
      "id" : 408001077,
      "in_reply_to_id" : 407265992,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTA3Nw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 318,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 392762761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408001077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408001745"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It was initially to debug the most significant bit. I'll remove it.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-14T09:38:22Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408001745",
      "id" : 408001745,
      "in_reply_to_id" : 407261365,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTc0NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 748,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 392763565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408001745",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408013698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408013698"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch. Add `0` now to the `unknown` branch.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-14T09:57:00Z",
      "diff_hunk" : "@@ -718,6 +719,163 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int AAD_LEN = CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // count bytes we decrypted including MAC tag + AD\n+        m_bytes_decrypted += vRecv.size();\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid > 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408013698",
      "id" : 408013698,
      "in_reply_to_id" : 407262244,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMzY5OA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 859,
      "original_position" : 115,
      "original_start_line" : 809,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 392777788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408013698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408018775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408018775"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Let's keep it for readability.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-14T10:05:17Z",
      "diff_hunk" : "@@ -731,6 +889,97 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command\n+    std::vector<unsigned char> serialized_header;\n+    // reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    serialized_header.resize(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID (or eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow sepearte buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + 16, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r408018775",
      "id" : 408018775,
      "in_reply_to_id" : 407264511,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxODc3NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 1021,
      "original_position" : 223,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 392783952,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408018775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @hebasto, @dongcarl and @MarcoFalke for the review.\r\nI tried to address all the points. You'r invited to go again through the PR for further findings.\r\n",
      "created_at" : "2020-04-14T10:11:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-613350737",
      "id" : 613350737,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMzM1MDczNw==",
      "updated_at" : "2020-04-14T10:11:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613350737",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-04-17T15:17:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-615303093",
      "id" : 615303093,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNTMwMzA5Mw==",
      "updated_at" : "2020-04-17T15:17:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/615303093",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.",
      "created_at" : "2020-04-17T15:52:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-615322957",
      "id" : 615322957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNTMyMjk1Nw==",
      "updated_at" : "2020-04-17T15:52:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/615322957",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r414820256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414820256"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you explain the fuzzer a bit more? It seems you are reusing the buffer for both deserializers. Assuming that the structure of the buffer for both deserializers should be different, this might cause the fuzz engine to only focus on one of them (the \"easier\" one) and rarely explore paths in the v2 one, no?\r\n\r\nIf so, maybe you can split them up in two targets. See `./src/test/fuzz/deserialize.cpp` on how to do that.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-24T19:43:44Z",
      "diff_hunk" : "@@ -45,3 +45,14 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n     }\n }\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    std::unique_ptr<TransportDeserializer> v1_deserializer = MakeUnique<V1TransportDeserializer>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION);\n+    const CPrivKey k1(32, 0);\n+    const CPrivKey k2(32, 0);\n+    const uint256 session_id;\n+    std::unique_ptr<TransportDeserializer> v2_deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2, session_id));\n+    test_deserializer(v1_deserializer, buffer, CMessageHeader::HEADER_SIZE);\n+    test_deserializer(v2_deserializer, buffer, CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r414820256",
      "id" : 414820256,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMDI1Ng==",
      "original_commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "original_line" : 56,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/fuzz/p2p_transport_deserializer.cpp",
      "position" : null,
      "pull_request_review_id" : 400224123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414820256",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r415674338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415674338"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks!\r\nI switched to the same preprocessor bridge then used in `deserialize.cpp`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-27T09:55:02Z",
      "diff_hunk" : "@@ -45,3 +45,14 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n     }\n }\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    std::unique_ptr<TransportDeserializer> v1_deserializer = MakeUnique<V1TransportDeserializer>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION);\n+    const CPrivKey k1(32, 0);\n+    const CPrivKey k2(32, 0);\n+    const uint256 session_id;\n+    std::unique_ptr<TransportDeserializer> v2_deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2, session_id));\n+    test_deserializer(v1_deserializer, buffer, CMessageHeader::HEADER_SIZE);\n+    test_deserializer(v2_deserializer, buffer, CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r415674338",
      "id" : 415674338,
      "in_reply_to_id" : 414820256,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3NDMzOA==",
      "original_commit_id" : "f9d3052f986ceb583aca47a15bd51a0bdce838ab",
      "original_line" : 56,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/fuzz/p2p_transport_deserializer.cpp",
      "position" : null,
      "pull_request_review_id" : 400799152,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415674338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417787978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417787978"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Alternatively have you considered a translation table, defining a struct \r\n\r\n```\r\nstruct {\r\n           std::string  long_cmd;\r\n           std::string  short_cmd;\r\n} short_id_table\r\n```\r\nYou statically declare an array of such structs, with one element for every pair. And `GetCommandFromShortCommandID` just iter through array until funding a match.\r\n\r\nThat way in the future we may have a parser to load a new table (`bitcoin-cli loadv2mappings`) to enable custom peer-agreement mappings without code modifications. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T06:42:34Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)\n+{\n+    if (shortID == NetMsgType::ADDR_SHORT_ID) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417787978",
      "id" : 417787978,
      "in_reply_to_id" : 407265992,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4Nzk3OA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 318,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417787978",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417797877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417797877"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think here or BIP should lay out what the advantage and example of p2p agreement mapping. I can foresee people willingly to experiment or deploy their own light-clients protocols inside v2, and therefore favor bandwidth-reduction for what make sense for them.\r\n\r\nHowever, I can't see how peer may signal custom mapping or at least agree they are on the default ones. You can agree out-of-band but can't assert peer identity until you succeed an authentication. And authentication protocol success may rely on mappings like COUNTERSIGN_PUBKEY_SHORT_ID = 47.\r\n\r\nYou may want a MAPPING/MAPPINGACK exchanged via a regular command-string. Actually BIP only precise \"The ID/string mapping is a peer to peer arrangement and MAY be negotiated between the initiating and responding peer.\" You may update to say \"Negotiation mechanism is left open to a future specification effort\"",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T07:05:01Z",
      "diff_hunk" : "@@ -216,29 +237,44 @@ extern const char *FEEFILTER;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *SENDCMPCT;\n+constexpr uint8_t SENDCMPCT_SHORT_ID = 34;\n /**\n  * Contains a CBlockHeaderAndShortTxIDs object - providing a header and\n  * list of \"short txids\".\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *CMPCTBLOCK;\n+constexpr uint8_t CMPCTBLOCK_SHORT_ID = 16;\n /**\n  * Contains a BlockTransactionsRequest\n  * Peer should respond with \"blocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *GETBLOCKTXN;\n+constexpr uint8_t GETBLOCKTXN_SHORT_ID = 23;\n /**\n  * Contains a BlockTransactions.\n  * Sent in response to a \"getblocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+constexpr uint8_t BLOCKTXN_SHORT_ID = 15;\n };\n \n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string> &getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417797877",
      "id" : 417797877,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5Nzg3Nw==",
      "original_commit_id" : "caa6c582f415dd7ac2fdd2bafae7c896d4e05239",
      "original_line" : 257,
      "original_position" : 187,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417797877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417801470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417801470"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You may add a reference saying serializer/deserializer are BIP-324 compliant",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T07:12:47Z",
      "diff_hunk" : "@@ -701,6 +703,53 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+class V2TransportDeserializer : public TransportDeserializer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417801470",
      "id" : 417801470,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgwMTQ3MA==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 837,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417801470",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417816870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417816870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You may want to add old_ prefix and precise at first key rotation m_old_aead == m_aead",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T07:42:27Z",
      "diff_hunk" : "@@ -715,6 +764,24 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for a later rekeying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417816870",
      "id" : 417816870,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgxNjg3MA==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 895,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417816870",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417829120"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417829120"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why the encrypted length doesn't get its own MAC to guarantee integrity ? It can decrypt to some garbage and therefore open to manipulating ciphertext-MAC seek in message ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T08:04:45Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417829120",
      "id" : 417829120,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgyOTEyMA==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 784,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417829120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417833895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417833895"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hmmm isn't the spec making the assumption you rely on some ordered transport protocol (TCP) ? If yes I think that's okay because you should be guarantee against network failure and peers may out-of-sync. But BIP should precise message shouldn't be resend with same sequence number?\r\n\r\nNote IIRC Fibre is using UDP.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T08:13:50Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417833895",
      "id" : 417833895,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzMzg5NQ==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 789,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417833895",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417839203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417839203"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`vRecv` doesn't contain also AAD ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T08:22:55Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417839203",
      "id" : 417839203,
      "line" : 821,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgzOTIwMw==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 821,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 69,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417839203",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417842245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417842245"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Even if decryption fails ? Also comment about increasing AAD sequence number is allusive can you precise a unsuccessful decryption still increase sequence number. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T08:27:57Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417842245",
      "id" : 417842245,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0MjI0NQ==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 806,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417842245",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417845830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417845830"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What if len==0? Or is this case can't be hit due to previous Read logic?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T08:33:59Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417845830",
      "id" : 417845830,
      "line" : 835,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0NTgzMA==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 835,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 83,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417845830",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417854354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417854354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think checksum is also not revelant and always true, so comment may be generic for three of them? But generally if this field are always true for v2, a future refactor may just call public methods on messages in `ProcessMessage` like `{Header,Checksum,Netmagic}Valid`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T08:48:35Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    // increase the aad_pos and eventually the sequence number\n+    m_aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_aad_pos = 0;\n+        m_aad_seqnr++;\n+    }\n+    // increase the payload sequence number by 1\n+    m_payload_seqnr++;\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    CNetMessage msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg.m_command = command_name;\n+\n+    // store state about valid header, netmagic and checksum\n+    msg.m_valid_header = valid_header; // not relevant for v2, always pass\n+    msg.m_valid_checksum = valid_checksum;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417854354",
      "id" : 417854354,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NDM1NA==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 865,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417854354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417855756"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417855756"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe it would be better to drop unknown message, or at least as soon as we can to avoid some upstream buffer growing unbounded.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T08:50:56Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417855756",
      "id" : 417855756,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NTc1Ng==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 845,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417855756",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417856950"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417856950"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This line was confusing at first read, precise its size of command we parse or a reference to BIP \"The command field MUST start with a byte that defines the length...\"",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T08:52:50Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417856950",
      "id" : 417856950,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1Njk1MA==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 797,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403241154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417856950",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417959916"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417959916"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think we can make the assumptions that messages are processing in order and that the underlaying transport layer takes care of transmission failures. I don't think we need to add error/out-of-sequence detection in out message transport protocol.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T12:05:09Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417959916",
      "id" : 417959916,
      "in_reply_to_id" : 417833895,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk1OTkxNg==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 789,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403455165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417959916",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417960845"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417960845"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think we should tolerate unknown short IDs the same way as we tolerate unknown string commands (which we currently do for future backward compatibility).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T12:07:09Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r417960845",
      "id" : 417960845,
      "in_reply_to_id" : 417855756,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk2MDg0NQ==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 845,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403456371,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/417960845",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418113575"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418113575"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Can you elaborate on the differences? Aren't the compiler differences marginal?\r\n\r\nIt does seem like a switch statement might be a good alternative to the `if...else ifs` here, to make explicit the nature of the operation (testing a single value against a set of scoped enumerations or array of values) and possibly generate better code with a jump table instead of repeatedly checking individual values.\r\n\r\nA translation table could be an alternative as well.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T15:53:04Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)\n+{\n+    if (shortID == NetMsgType::ADDR_SHORT_ID) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418113575",
      "id" : 418113575,
      "in_reply_to_id" : 407265992,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMzU3NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 318,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 403654504,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418113575",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418204408"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418204408"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree this would be nice.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T18:23:31Z",
      "diff_hunk" : "@@ -717,6 +781,27 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for a later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_encrypted = 0; //counter of bytes encrypted with same key\n+    int64_t m_time_last_rekey = 0;\n+    uint256 m_session_id; // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr = 0;\n+    uint64_t m_aad_seqnr = 0;\n+    int m_aad_pos = 0;\n+\n+public:\n+    V2TransportSerializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_session_id(session_id)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418204408",
      "id" : 418204408,
      "in_reply_to_id" : 407265779,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwNDQwOA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 916,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 403769916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418204408",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418206782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418206782"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9f81125 nit: readability\r\n```diff\r\n-    V2TransportDeserializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_time_last_rekey(GetTime()), m_session_id(session_id), vRecv(SER_NETWORK, INIT_PROTO_VERSION)\r\n+    V2TransportDeserializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) :\r\n+        m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())),\r\n+        m_aead_k1(k1),\r\n+        m_aead_k2(k2),\r\n+        m_time_last_rekey(GetTime()),\r\n+        m_session_id(session_id),\r\n+        vRecv(SER_NETWORK, INIT_PROTO_VERSION)\r\n```",
      "commit_id" : "b1ef92ae52e7df88376dcc63507c50879fa15386",
      "created_at" : "2020-04-30T18:27:48Z",
      "diff_hunk" : "@@ -701,6 +703,69 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;\n+    uint256 m_session_id;           // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr = 0;   // sequence number for the payload\n+    uint64_t m_aad_seqnr = 0;       // sequence number for the packet length (AD)\n+    int m_aad_pos = 0;              // position in the aad keystream\n+    bool m_in_data = false;         // parsing header (false) or data (true)\n+    uint32_t m_message_size = 0;    // expected message size\n+    CDataStream vRecv;              // received message data\n+    unsigned int m_hdr_pos = 0;     // read pos in header\n+    unsigned int m_data_pos = 0;    // read pos in data\n+    bool m_rekey_flag = false;      // rekey in message detected\n+\n+public:\n+    V2TransportDeserializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_time_last_rekey(GetTime()), m_session_id(session_id), vRecv(SER_NETWORK, INIT_PROTO_VERSION)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418206782",
      "id" : 418206782,
      "line" : 778,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwNjc4Mg==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 778,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 45,
      "pull_request_review_id" : 403769916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-12T13:20:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418206782",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418215753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418215753"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think a comment for this conditional branch would be helpful.\r\n```diff\r\n     } else {\r\n+        // Read the message data\r\n         const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T18:44:31Z",
      "diff_hunk" : "@@ -718,6 +720,170 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418215753",
      "id" : 418215753,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxNTc1Mw==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 805,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403769916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418215753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418216979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418216979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9f81125 nit: perhaps start with the truthy branch (that reads the message) e.g. `if (m_in_data) {`",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T18:46:44Z",
      "diff_hunk" : "@@ -718,6 +720,170 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418216979",
      "id" : 418216979,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxNjk3OQ==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 775,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403769916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418216979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418223280"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418223280"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9f81125 could replace the two `-1` fail values returned in `V2TransportDeserializer::Read` (as well as the two in `V1TransportDeserializer::readHeader`) with a static constant whose name could make their meaning explicit, e.g. `static constexpr int MESSAGE_FAILURE = -1;` or similar",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T18:58:10Z",
      "diff_hunk" : "@@ -718,6 +720,170 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418223280",
      "id" : 418223280,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzI4MA==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 796,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 403769916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418223280",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418312693"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418312693"
         }
      },
      "author_association" : "MEMBER",
      "body" : "caa6c58 Could invert the `GetCommandFromShortCommandID` parameter order? This would make it like `read()` and also allow it to have the same first param as `GetShortCommandIDFromCommand`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T21:58:26Z",
      "diff_hunk" : "@@ -216,29 +237,44 @@ extern const char *FEEFILTER;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *SENDCMPCT;\n+constexpr uint8_t SENDCMPCT_SHORT_ID = 34;\n /**\n  * Contains a CBlockHeaderAndShortTxIDs object - providing a header and\n  * list of \"short txids\".\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *CMPCTBLOCK;\n+constexpr uint8_t CMPCTBLOCK_SHORT_ID = 16;\n /**\n  * Contains a BlockTransactionsRequest\n  * Peer should respond with \"blocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *GETBLOCKTXN;\n+constexpr uint8_t GETBLOCKTXN_SHORT_ID = 23;\n /**\n  * Contains a BlockTransactions.\n  * Sent in response to a \"getblocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+constexpr uint8_t BLOCKTXN_SHORT_ID = 15;\n };\n \n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string> &getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement\n+\n+// returns the short command ID for a command\n+// returns 0 if no short command ID has been found\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd);\n+\n+// returns the command (string) from a short command ID\n+// returns an empty string if short command ID has not been found\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418312693",
      "id" : 418312693,
      "line" : 277,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMjY5Mw==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 277,
      "original_position" : 195,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 23,
      "pull_request_review_id" : 403769916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418312693",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418316264"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418316264"
         }
      },
      "author_association" : "MEMBER",
      "body" : "caa6c58 can reference instead of copy?\r\n```diff\r\n-uint8_t GetShortCommandIDFromCommand(const std::string cmd);\r\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd);\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T22:06:56Z",
      "diff_hunk" : "@@ -216,29 +237,44 @@ extern const char *FEEFILTER;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *SENDCMPCT;\n+constexpr uint8_t SENDCMPCT_SHORT_ID = 34;\n /**\n  * Contains a CBlockHeaderAndShortTxIDs object - providing a header and\n  * list of \"short txids\".\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *CMPCTBLOCK;\n+constexpr uint8_t CMPCTBLOCK_SHORT_ID = 16;\n /**\n  * Contains a BlockTransactionsRequest\n  * Peer should respond with \"blocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *GETBLOCKTXN;\n+constexpr uint8_t GETBLOCKTXN_SHORT_ID = 23;\n /**\n  * Contains a BlockTransactions.\n  * Sent in response to a \"getblocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+constexpr uint8_t BLOCKTXN_SHORT_ID = 15;\n };\n \n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string> &getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement\n+\n+// returns the short command ID for a command\n+// returns 0 if no short command ID has been found\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418316264",
      "id" : 418316264,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjI2NA==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 272,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 403769916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418316264",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418316911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418316911"
         }
      },
      "author_association" : "MEMBER",
      "body" : "caa6c58 can reference instead of copy?\r\n```diff\r\n-uint8_t GetShortCommandIDFromCommand(const std::string cmd)\r\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd)\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T22:08:32Z",
      "diff_hunk" : "@@ -204,3 +204,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418316911",
      "id" : 418316911,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjkxMQ==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 209,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 403769916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418316911",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418323240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418323240"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9f81125 could replace the int value of `12` here and line 809 above with an explicit `CMD_MAX_CHARS_SIZE` (or similar) int static constant",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-04-30T22:24:35Z",
      "diff_hunk" : "@@ -731,6 +897,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418323240",
      "id" : 418323240,
      "line" : 896,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMzI0MA==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 896,
      "original_position" : 198,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 144,
      "pull_request_review_id" : 403769916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418323240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418511920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418511920"
         }
      },
      "author_association" : "MEMBER",
      "body" : "e7bed2ed perhaps construct rather than copy?\r\n<details><summary>suggestion</summary>\r\n<p>\r\n\r\n```diff\r\n     // create some messages where we perform serialization and deserialization\r\n     std::vector<CSerializedNetMsg> test_msgs;\r\n-    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\r\n-    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\r\n-    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\r\n+    test_msgs.emplace_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\r\n+    test_msgs.emplace_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\r\n+    test_msgs.emplace_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\r\n     CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);\r\n-    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\r\n+    test_msgs.emplace_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\r\n     std::vector<CInv> vInv;\r\n     for (unsigned int i = 0; i < 1000; i++) {\r\n-        vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash()));\r\n+        vInv.emplace_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash()));\r\n     }\r\n-    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::INV, vInv));\r\n+    test_msgs.emplace_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::INV, vInv));\r\n \r\n     // add a dummy message\r\n     std::string dummy;\r\n     for (unsigned int i = 0; i < 100; i++) {\r\n         dummy += \"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\";\r\n     }\r\n-    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(\"foobar\", dummy));\r\n+    test_msgs.emplace_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(\"foobar\", dummy));\r\n```\r\n</p>\r\n</details>\r\n",
      "commit_id" : "b1ef92ae52e7df88376dcc63507c50879fa15386",
      "created_at" : "2020-05-01T11:49:48Z",
      "diff_hunk" : "@@ -320,4 +322,161 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+size_t read_message(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<unsigned char>& serialized_header, const CSerializedNetMsg& msg)\n+{\n+    size_t read_bytes = 0;\n+    if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char*)serialized_header.data(), serialized_header.size());\n+    //  second: read the encrypted payload (if required)\n+    if (msg.data.size() > 0) read_bytes += deserializer->Read((const char*)msg.data.data(), msg.data.size());\n+    if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) read_bytes += deserializer->Read((const char*)msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+    return read_bytes;\n+}\n+\n+// use 32 bytey keys with all zeros\n+static const CPrivKey k1(32, 0);\n+static const CPrivKey k2(32, 0);\n+static const uint256 session_id;\n+\n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2, session_id));\n+    } else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {\n+        for (const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            size_t read_bytes = read_message(deserializer, serialized_header, msg);\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size() + serialized_header.size());\n+            // message must be complete\n+            CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+            BOOST_CHECK_EQUAL(msg_deser.m_command, msg.command);\n+            BOOST_CHECK_EQUAL(raw_msg_size, msg_deser.m_message_size);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_v2)\n+{\n+    // make sure we use the fast rekey rules\n+    // Setting the netencryptionfastrekey flag results in using a threshold of 64kb / 10 seconds for requiring a rekey\n+    gArgs.SoftSetBoolArg(\"-netencryptionfastrekey\", true);\n+\n+    // create some messages where we perform serialization and deserialization\n+    std::vector<CSerializedNetMsg> test_msgs;\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\n+    CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\n+    std::vector<CInv> vInv;\n+    for (unsigned int i = 0; i < 1000; i++) {\n+        vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash()));\n+    }\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::INV, vInv));\n+\n+    // add a dummy message\n+    std::string dummy;\n+    for (unsigned int i = 0; i < 100; i++) {\n+        dummy += \"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\";\n+    }\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(\"foobar\", dummy));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418511920",
      "id" : 418511920,
      "line" : 397,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMTkyMA==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 397,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 93,
      "pull_request_review_id" : 404120272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-12T13:20:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418511920",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418513786"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418513786"
         }
      },
      "author_association" : "MEMBER",
      "body" : "e04eddb3 this conditional with 2 nested ternary conditionals on one line is pretty hard to read.\r\n\r\n<details>\r\n<summary>Here are two ideas.</summary>\r\n<p>\r\n\r\n```diff\r\n-    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 10 : REKEY_LIMIT_TIME)) {\r\n+    bool fast_rekey = gArgs.GetBoolArg(\"-netencryptionfastrekey\", false);\r\n+    if (m_bytes_encrypted >= (fast_rekey ? 32 * 1024 : REKEY_LIMIT_BYTES) || (now - m_time_last_rekey >= (fast_rekey ? 10 : REKEY_LIMIT_TIME))) {\r\n```\r\nor\r\n\r\n```diff\r\n-    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 10 : REKEY_LIMIT_TIME)) {\r\n+    if (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false)) {\r\n+        if (m_bytes_encrypted >= 32 * 1024 || (now - m_time_last_rekey >= 10)) {\r\n+            rekey = true;\r\n+        }\r\n+    } else {\r\n+        if (m_bytes_encrypted >= REKEY_LIMIT_BYTES || (now - m_time_last_rekey >= REKEY_LIMIT_TIME)) {\r\n+            rekey = true;\r\n+        }\r\n+    }\r\n+    if (rekey) {\r\n         LogPrint(BCLog::NET, \"Rekey limits reached, performing rekey.\\n\");\r\n         msg.data[2] |= (1u << 7);\r\n-        rekey = true;\r\n     }\r\n```\r\n</p>\r\n</details>\r\n\r\nAlso, it would be nice to replace the various magic values with static constexprs that communicate meaning, like you are already doing in this commit for the rekey values in `net.h`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-01T11:57:30Z",
      "diff_hunk" : "@@ -731,6 +897,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;\n+    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 10 : REKEY_LIMIT_TIME)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418513786",
      "id" : 418513786,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMzc4Ng==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 1022,
      "original_position" : 237,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 404120272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418513786",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418517170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418517170"
         }
      },
      "author_association" : "MEMBER",
      "body" : "e04eddb suggestion (like your code at line 983 below). It also clarifies that `m_bytes_decrypted` is a counter of bytes decrypted for the same key.\r\n```diff\r\n             m_aad_pos = 0;\r\n-            m_bytes_decrypted = 0;\r\n+\r\n+            // reset rekey counters\r\n             m_time_last_rekey = now;\r\n+            m_bytes_decrypted = 0;\r\n```\r\n\r\nIn general, there is a fair amount of rekey code duplication in this commit but optimising would be premature at this point. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-01T12:12:19Z",
      "diff_hunk" : "@@ -718,6 +720,170 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // count bytes we decrypted including MAC tag + AD\n+        m_bytes_decrypted += vRecv.size();\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    // increase the aad_pos and eventually the sequence number\n+    m_aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_aad_pos = 0;\n+        m_aad_seqnr++;\n+    }\n+    // increase the payload sequence number by 1\n+    m_payload_seqnr++;\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    CNetMessage msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg.m_command = command_name;\n+\n+    // store state about valid header, netmagic and checksum\n+    msg.m_valid_header = valid_header; // not relevant for v2, always pass\n+    msg.m_valid_checksum = valid_checksum;\n+    msg.m_valid_netmagic = true; // not relevant for v2, always pass\n+\n+    // store command string, payload size, wire message size\n+    msg.m_message_size = msg.m_recv.size();                                                                    //message payload size (excluding command)\n+    msg.m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n+\n+    const int64_t now = GetTime();\n+    if (m_rekey_flag) {\n+        if (!gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) && (m_time_last_rekey + MIN_REKEY_TIME > now)) {\n+            // remote peer was not respecting the mininal rekey time (DoS)\n+            LogPrint(BCLog::NET, \"Invalid rekey (DoS)\\n\");\n+            msg.m_valid_checksum = false;\n+            msg.m_valid_header = false;\n+        } else {\n+            // make sure we rekey at this point, next message is supposed to be encrypted with the new key\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+            // reset the AEAD context\n+            m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+            LogPrint(BCLog::NET, \"Rekey: new recv keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+            // reset sequence numbers\n+            m_payload_seqnr = 0;\n+            m_aad_seqnr = 0;\n+            m_aad_pos = 0;\n+            m_bytes_decrypted = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418517170",
      "id" : 418517170,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNzE3MA==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 945,
      "original_position" : 166,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 404120272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418517170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418520848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418520848"
         }
      },
      "author_association" : "MEMBER",
      "body" : "e04eddb suggested change\r\n```diff\r\n-static constexpr unsigned int MIN_REKEY_TIME = 10;      // minimal rekey time to avoid DOS\r\n+static constexpr unsigned int MIN_REKEY_TIME = 10;      // minimum rekey time in seconds to avoid DOS\r\n```\r\n",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-01T12:26:37Z",
      "diff_hunk" : "@@ -701,6 +703,69 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418520848",
      "id" : 418520848,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyMDg0OA==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 834,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 404120272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418520848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418521589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418521589"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It seems that `GetTime()` is deprecated, see `util/time.h`\r\n```cpp\r\n/**\r\n * DEPRECATED\r\n * Use either GetSystemTimeInSeconds (not mockable) or GetTime<T> (mockable)\r\n */\r\nint64_t GetTime();\r\n```\r\n",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-01T12:29:35Z",
      "diff_hunk" : "@@ -731,6 +897,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418521589",
      "id" : 418521589,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyMTU4OQ==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 1020,
      "original_position" : 235,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 404120272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418521589",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418525037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418525037"
         }
      },
      "author_association" : "MEMBER",
      "body" : "e04eddb what is the difference between `msg.data.size() > read_bytes` and `msg.data.size() - read_bytes > 0`? I'm trying to understand why both checks are needed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-01T12:41:12Z",
      "diff_hunk" : "@@ -320,4 +322,161 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+size_t read_message(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<unsigned char>& serialized_header, const CSerializedNetMsg& msg)\n+{\n+    size_t read_bytes = 0;\n+    if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char*)serialized_header.data(), serialized_header.size());\n+    //  second: read the encrypted payload (if required)\n+    if (msg.data.size() > 0) read_bytes += deserializer->Read((const char*)msg.data.data(), msg.data.size());\n+    if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) read_bytes += deserializer->Read((const char*)msg.data.data() + read_bytes, msg.data.size() - read_bytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418525037",
      "id" : 418525037,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyNTAzNw==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 779,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 404120272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418525037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Fuzzer updates:\r\n\r\nv1. `src/test/fuzz/p2p_v1_transport_deserializer ../qa-assets/fuzz_seed_corpus/` still running after 11 million iterations.\r\n```\r\n#11209522\tREDUCE cov: 1175 ft: 7368 corp: 138/1841Kb exec/s: 170 rss: 806Mb L: 1510/1048576 MS: 4 CMP-CMP-InsertRepeatedBytes-EraseBytes- DE: \"d\\x00\"-\"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x16\"-\r\n#11215383\tREDUCE cov: 1175 ft: 7368 corp: 138/1841Kb exec/s: 170 rss: 806Mb L: 456/1048576 MS: 1 EraseBytes-\r\n#11399712\tREDUCE cov: 1175 ft: 7368 corp: 138/1841Kb exec/s: 170 rss: 806Mb L: 1509/1048576 MS: 4 EraseBytes-ChangeASCIIInt-CMP-CMP- DE: \"\\x00s\\x00\\x00\"-\"\\x00\\x00\\x00v\"-\r\n\r\n```\r\n\r\nv2. `src/test/fuzz/p2p_v2_transport_deserializer` without `qa-assets/fuzz_seed_corpus` crashed after a few million iterations.\r\n```\r\n#1048576\tpulse  cov: 2395 ft: 2701 corp: 15/2571b exec/s: 110 rss: 423Mb\r\n#2097152\tpulse  cov: 2395 ft: 2701 corp: 15/2571b exec/s: 112 rss: 424Mb\r\n#4194304\tpulse  cov: 2395 ft: 2701 corp: 15/2571b exec/s: 117 rss: 426Mb\r\n```\r\n\r\n<details>\r\n<summary>v2 fuzzer crash output</summary>\r\n<p>\r\n\r\n<code>$ src/test/fuzz/p2p_v2_transport_deserializer</code>\r\n\r\n```\r\n#4194304\tpulse  cov: 2395 ft: 2701 corp: 15/2571b exec/s: 117 rss: 426Mb\r\np2p_v2_transport_deserializer: test/fuzz/p2p_transport_deserializer.cpp:37: void test_deserializer(std::unique_ptr<TransportDeserializer> &, const std::vector<uint8_t> &, const int): Assertion `msg.m_raw_message_size == header_size + msg.m_message_size' failed.\r\n==8131== ERROR: libFuzzer: deadly signal\r\n    #0 0x564d8d9e69a7 in __sanitizer_print_stack_trace /tmp/final/llvm.src/projects/compiler-rt/lib/asan/asan_stack.cc:38:3\r\n    #1 0x564d8d924826 in fuzzer::Fuzzer::CrashCallback() /tmp/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:233:5\r\n    #2 0x564d8d9247ef in fuzzer::Fuzzer::StaticCrashSignalCallback() /tmp/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:206:6\r\n    #3 0x7f53564b372f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1272f)\r\n    #4 0x7f5355d107ba in gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x377ba)\r\n    #5 0x7f5355cfb534 in abort (/lib/x86_64-linux-gnu/libc.so.6+0x22534)\r\n    #6 0x7f5355cfb40e in __tls_get_addr (/lib/x86_64-linux-gnu/libc.so.6+0x2240e)\r\n    #7 0x7f5355d09101 in __assert_fail (/lib/x86_64-linux-gnu/libc.so.6+0x30101)\r\n    #8 0x564d8da0ee4f in test_deserializer(std::unique_ptr<TransportDeserializer, std::default_delete<TransportDeserializer> >&, std::vector<unsigned char, std::allocator<unsigned char> > const&, int) /home/jon/projects/bitcoin/bitcoin/src/test/fuzz/p2p_transport_deserializer.cpp:37:13\r\n    #9 0x564d8da0f2ce in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) /home/jon/projects/bitcoin/bitcoin/src/test/fuzz/p2p_transport_deserializer.cpp:59:5\r\n    #10 0x564d8ec5f1af in LLVMFuzzerTestOneInput /home/jon/projects/bitcoin/bitcoin/src/test/fuzz/fuzz.cpp:38:5\r\n    #11 0x564d8d925a7c in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /tmp/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:515:13\r\n    #12 0x564d8d9252db in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /tmp/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:440:3\r\n    #13 0x564d8d926d0d in fuzzer::Fuzzer::MutateAndTestOne() /tmp/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:648:19\r\n    #14 0x564d8d9275c5 in fuzzer::Fuzzer::Loop(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, fuzzer::fuzzer_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /tmp/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:775:5\r\n    #15 0x564d8d91c2d0 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /tmp/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:754:6\r\n    #16 0x564d8d93ded2 in main /tmp/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\r\n    #17 0x7f5355cfd09a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)\r\n    #18 0x564d8d915369 in _start (/home/jon/projects/bitcoin/bitcoin/src/test/fuzz/p2p_v2_transport_deserializer+0x1d28369)\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\nMS: 5 CMP-ChangeBinInt-CopyPart-CopyPart-InsertRepeatedBytes- DE: \"\\x9bG\\x1f\\x00\"-; base unit: 6931e757f50084d7f7e1142dae37b88f384b7c28\r\n0x65,0xb8,0xe0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xf5,0x65,0xb8,0xe0,0xf5,\r\ne\\xb8\\xe0```````````````````````````````````````````````````````````````````````````````````\\xf5e\\xb8\\xe0\\xf5\r\nartifact_prefix='./'; Test unit written to ./crash-7a494e2caeec52213088a24c43216beb0f331a65\r\nBase64: ZbjgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGD1Zbjg9Q==\r\n```\r\n</p>\r\n</details>\r\n\r\nIt appears to be the same crash as the ones I was seeing immediately when running the v2 fuzz test with the qa-assets seeds in https://github.com/bitcoin/bitcoin/pull/18242#pullrequestreview-404120272 above, e.g.\r\n\r\n```\r\nsrc/test/fuzz/p2p_v2_transport_deserializer ../qa-assets/fuzz_seed_corpus/\r\n```",
      "created_at" : "2020-05-02T07:55:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-622825133",
      "id" : 622825133,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMjgyNTEzMw==",
      "updated_at" : "2020-05-02T07:55:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622825133",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418927974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418927974"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah yes, I always forgot that Bitcoin isn't network-byte order, maybe it could be part of the spec as a nice reminder.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T07:57:46Z",
      "diff_hunk" : "@@ -731,6 +897,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418927974",
      "id" : 418927974,
      "line" : 905,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyNzk3NA==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 905,
      "original_position" : 207,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 153,
      "pull_request_review_id" : 404509129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418927974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418928926"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418928926"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't know if std::vector::insert would do preventive reallocation, and that's implementation specific, but do resize first with both header_size + tag_len and then insert would be better?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T08:08:10Z",
      "diff_hunk" : "@@ -731,6 +897,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418928926",
      "id" : 418928926,
      "line" : 926,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyODkyNg==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 926,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 174,
      "pull_request_review_id" : 404509129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418928926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418932056"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418932056"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it would be nice to comment what this test aims to verify. AFAICT it checks for round-trip _correctness_, all others cases like non-encrypted packets, extended packets, shorter packets, zeroed-MAC, garbage MAC are they deferred to fuzzer ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T08:41:50Z",
      "diff_hunk" : "@@ -320,4 +322,77 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418932056",
      "id" : 418932056,
      "line" : 933,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMjA1Ng==",
      "original_commit_id" : "e7bed2ed3288e32ccf85c14413859674f463abf4",
      "original_line" : 933,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 12,
      "pull_request_review_id" : 404509129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418932056",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418932760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418932760"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you mean by \"post-this-message\" in this context? Is this coming from RFC 4253?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T08:49:49Z",
      "diff_hunk" : "@@ -741,6 +741,15 @@ int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n             return -1;\n         }\n \n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418932760",
      "id" : 418932760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMjc2MA==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 816,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 404509129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418932760",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418933231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418933231"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe also log `session_id` or anything to tie a rekeying to a given session/peer?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T08:54:50Z",
      "diff_hunk" : "@@ -741,6 +741,15 @@ int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n             return -1;\n         }\n \n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418933231",
      "id" : 418933231,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMzIzMQ==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 820,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 404509129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418933231",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418933381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418933381"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You should precise in BIP that we account only after a successful decryption. Also the accounting data scope on MAC+AEAD.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T08:56:32Z",
      "diff_hunk" : "@@ -782,6 +791,9 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n         // MAC check was successful\n         valid_checksum = true;\n \n+        // count bytes we decrypted including MAC tag + AD",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418933381",
      "id" : 418933381,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMzM4MQ==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 797,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 404509129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418933381",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418934931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418934931"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You should precise in BIP that a rekey initiator should be conservative but rekey responder liberal in its window acceptance.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T09:14:08Z",
      "diff_hunk" : "@@ -703,21 +703,36 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418934931",
      "id" : 418934931,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNDkzMQ==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 833,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 404509129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418934931",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418936652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418936652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If you want to avoid a syscall in hot path, I think you can fetch time only X messages, its okay to be a bit late, for time responder only check if rekey initiator is too early.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T09:33:40Z",
      "diff_hunk" : "@@ -731,6 +897,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418936652",
      "id" : 418936652,
      "in_reply_to_id" : 418521589,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNjY1Mg==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 1020,
      "original_position" : 235,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 404509129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418936652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418937474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418937474"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't know about relying on timeclock for rekey. I know it comes from SSH recommendation but it's a client-server architecture, where a connection closing due to clock not being synchronized isn't dramatic. \r\n\r\nI'm worried about some clock manipulation to interfere with outbound connections and start some eclipse escalation. Current timedata (bug) logic seems to prevent any exploitation by third-party peers but I wouldn't add that much another assumption on your local clock. NTP attacks have been studied (http://www.cs.bu.edu/~goldbe/papers/NTPattack.pdf), where targeting bitcoin nodes was explicitly quoted...",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T09:42:05Z",
      "diff_hunk" : "@@ -703,21 +703,36 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418937474",
      "id" : 418937474,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNzQ3NA==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 829,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 404509129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418937474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418939510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418939510"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Where do we abort connection based on invalid checksum and header? It's only checked in `ProcessMessages` but doesn't trigger a connection AFAICT?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-02T10:02:52Z",
      "diff_hunk" : "@@ -834,6 +846,37 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     msg.m_message_size = msg.m_recv.size();                                                                    //message payload size (excluding command)\n     msg.m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n \n+    const int64_t now = GetTime();\n+    if (m_rekey_flag) {\n+        if (!gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) && (m_time_last_rekey + MIN_REKEY_TIME > now)) {\n+            // remote peer was not respecting the mininal rekey time (DoS)\n+            LogPrint(BCLog::NET, \"Invalid rekey (DoS)\\n\");\n+            msg.m_valid_checksum = false;\n+            msg.m_valid_header = false;\n+        } else {\n+            // make sure we rekey at this point, next message is supposed to be encrypted with the new key\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+            // reset the AEAD context\n+            m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+            LogPrint(BCLog::NET, \"Rekey: new recv keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+            // reset sequence numbers\n+            m_payload_seqnr = 0;\n+            m_aad_seqnr = 0;\n+            m_aad_pos = 0;\n+            m_bytes_decrypted = 0;\n+            m_time_last_rekey = now;\n+        }\n+    } else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || now - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||\n+               (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) && m_bytes_decrypted > 64 * 1024)) {\n+        // don't further decrypt and therefore abort connection when counterparty failed to respect rekey limits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418939510",
      "id" : 418939510,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTUxMA==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 950,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 404515973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/418939510",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r419076027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419076027"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree that a switch statement is easier to read(and see what's missing if we'll have more `NetMsgType` types)",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-03T09:33:24Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)\n+{\n+    if (shortID == NetMsgType::ADDR_SHORT_ID) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r419076027",
      "id" : 419076027,
      "in_reply_to_id" : 407265992,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA3NjAyNw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 318,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 404599425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419076027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420895865"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420895865"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Seems to be a matter of taste. I'd like to keep it as is.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T15:45:27Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)\n+{\n+    if (shortID == NetMsgType::ADDR_SHORT_ID) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420895865",
      "id" : 420895865,
      "in_reply_to_id" : 407265992,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NTg2NQ==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 318,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 406745702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420895865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420897941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420897941"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is probably a discussion that belong to the BIP rather to the implementation. I guess there are multiple ways how peers want to agree on a mapping (protocol version, dedicated command exchange, versionstring, port, etc.).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T15:48:23Z",
      "diff_hunk" : "@@ -216,29 +237,44 @@ extern const char *FEEFILTER;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *SENDCMPCT;\n+constexpr uint8_t SENDCMPCT_SHORT_ID = 34;\n /**\n  * Contains a CBlockHeaderAndShortTxIDs object - providing a header and\n  * list of \"short txids\".\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *CMPCTBLOCK;\n+constexpr uint8_t CMPCTBLOCK_SHORT_ID = 16;\n /**\n  * Contains a BlockTransactionsRequest\n  * Peer should respond with \"blocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *GETBLOCKTXN;\n+constexpr uint8_t GETBLOCKTXN_SHORT_ID = 23;\n /**\n  * Contains a BlockTransactions.\n  * Sent in response to a \"getblocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+constexpr uint8_t BLOCKTXN_SHORT_ID = 15;\n };\n \n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string> &getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420897941",
      "id" : 420897941,
      "in_reply_to_id" : 417797877,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5Nzk0MQ==",
      "original_commit_id" : "caa6c582f415dd7ac2fdd2bafae7c896d4e05239",
      "original_line" : 257,
      "original_position" : 187,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 406748361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420897941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420900793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420900793"
         }
      },
      "author_association" : "MEMBER",
      "body" : "BIP discussion. The length is covered by the MAC.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T15:52:22Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420900793",
      "id" : 420900793,
      "in_reply_to_id" : 417829120,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwMDc5Mw==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 784,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406752035,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420900793",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420903105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420903105"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is the problem of increasing the sequence number if decryption fails? We detect it and can respond (disconnecting) on the layer above the transport.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T15:55:31Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420903105",
      "id" : 420903105,
      "in_reply_to_id" : 417842245,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwMzEwNQ==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 806,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406754989,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420903105",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420904274"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420904274"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes. `m_aead->Crypt` would fail. This is an additional assertion to make sure the code below survives changes of the crypto system.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T15:56:54Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420904274",
      "id" : 420904274,
      "in_reply_to_id" : 417845830,
      "line" : 835,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwNDI3NA==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 835,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 83,
      "pull_request_review_id" : 406756426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420904274",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420905957"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420905957"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`msg.m_valid_checksum` is a field we should populate to respect the abstract `TransportDeserializer` class.\r\nIn the v2 case, the `checksum` is the MAC. We set the field whenever the MAC has validated. How to deal with it is a matter of the layer above.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T15:59:05Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    // increase the aad_pos and eventually the sequence number\n+    m_aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_aad_pos = 0;\n+        m_aad_seqnr++;\n+    }\n+    // increase the payload sequence number by 1\n+    m_payload_seqnr++;\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    CNetMessage msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg.m_command = command_name;\n+\n+    // store state about valid header, netmagic and checksum\n+    msg.m_valid_header = valid_header; // not relevant for v2, always pass\n+    msg.m_valid_checksum = valid_checksum;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420905957",
      "id" : 420905957,
      "in_reply_to_id" : 417854354,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwNTk1Nw==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 865,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406758586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420905957",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420909099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420909099"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fair point. Added a comment.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T16:03:19Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420909099",
      "id" : 420909099,
      "in_reply_to_id" : 417856950,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwOTA5OQ==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 797,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406762585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420909099",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420909232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420909232"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T16:03:32Z",
      "diff_hunk" : "@@ -701,6 +703,53 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+class V2TransportDeserializer : public TransportDeserializer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420909232",
      "id" : 420909232,
      "in_reply_to_id" : 417801470,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwOTIzMg==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 837,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 406762784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420909232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420909652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420909652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "AFAIK clang-format \"approved\" (not changed) this.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T16:04:05Z",
      "diff_hunk" : "@@ -701,6 +703,69 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;\n+    uint256 m_session_id;           // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr = 0;   // sequence number for the payload\n+    uint64_t m_aad_seqnr = 0;       // sequence number for the packet length (AD)\n+    int m_aad_pos = 0;              // position in the aad keystream\n+    bool m_in_data = false;         // parsing header (false) or data (true)\n+    uint32_t m_message_size = 0;    // expected message size\n+    CDataStream vRecv;              // received message data\n+    unsigned int m_hdr_pos = 0;     // read pos in header\n+    unsigned int m_data_pos = 0;    // read pos in data\n+    bool m_rekey_flag = false;      // rekey in message detected\n+\n+public:\n+    V2TransportDeserializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_time_last_rekey(GetTime()), m_session_id(session_id), vRecv(SER_NETWORK, INIT_PROTO_VERSION)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420909652",
      "id" : 420909652,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwOTY1Mg==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 778,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 406763302,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420909652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420911232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420911232"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I guess this evolved from legacy code with the focus to keep the diff small (V1 deserialiser has the `in_data` boolean). I'd say: lets keep it for consistency (better readability if one compared both deserializers).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T16:06:27Z",
      "diff_hunk" : "@@ -718,6 +720,170 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420911232",
      "id" : 420911232,
      "in_reply_to_id" : 418216979,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMTIzMg==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 775,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406765377,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420911232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420912183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420912183"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. Added.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T16:07:52Z",
      "diff_hunk" : "@@ -718,6 +720,170 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420912183",
      "id" : 420912183,
      "in_reply_to_id" : 418215753,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMjE4Mw==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 805,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406766609,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420912183",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420926437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420926437"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree that this would be a nice cleanup. But it should also be done for the V1 deserializer. I think we should do that after this PR since it contains lines not changes otherwise.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T16:29:03Z",
      "diff_hunk" : "@@ -718,6 +720,170 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420926437",
      "id" : 420926437,
      "in_reply_to_id" : 418223280,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyNjQzNw==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 796,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406784634,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420926437",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420927923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420927923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Absolutely. Changed now.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T16:31:14Z",
      "diff_hunk" : "@@ -216,29 +237,44 @@ extern const char *FEEFILTER;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *SENDCMPCT;\n+constexpr uint8_t SENDCMPCT_SHORT_ID = 34;\n /**\n  * Contains a CBlockHeaderAndShortTxIDs object - providing a header and\n  * list of \"short txids\".\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *CMPCTBLOCK;\n+constexpr uint8_t CMPCTBLOCK_SHORT_ID = 16;\n /**\n  * Contains a BlockTransactionsRequest\n  * Peer should respond with \"blocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *GETBLOCKTXN;\n+constexpr uint8_t GETBLOCKTXN_SHORT_ID = 23;\n /**\n  * Contains a BlockTransactions.\n  * Sent in response to a \"getblocktxn\" message.\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+constexpr uint8_t BLOCKTXN_SHORT_ID = 15;\n };\n \n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string> &getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement\n+\n+// returns the short command ID for a command\n+// returns 0 if no short command ID has been found\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420927923",
      "id" : 420927923,
      "in_reply_to_id" : 418316264,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyNzkyMw==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 272,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 406786472,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420927923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420930331"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420930331"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. Changed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T16:34:38Z",
      "diff_hunk" : "@@ -731,6 +897,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420930331",
      "id" : 420930331,
      "in_reply_to_id" : 418323240,
      "line" : 896,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMDMzMQ==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 896,
      "original_position" : 198,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 144,
      "pull_request_review_id" : 406789477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420930331",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420983720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420983720"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you give me a rational why resize before insert would be better?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T17:56:54Z",
      "diff_hunk" : "@@ -731,6 +897,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420983720",
      "id" : 420983720,
      "in_reply_to_id" : 418928926,
      "line" : 926,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzcyMA==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 926,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 174,
      "pull_request_review_id" : 406855214,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420983720",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420984895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420984895"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be my bad English. What I mean with that comment is that the rekey signals that \"after\" this message (the next message and all following), a new key will be used.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T17:58:42Z",
      "diff_hunk" : "@@ -741,6 +741,15 @@ int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n             return -1;\n         }\n \n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420984895",
      "id" : 420984895,
      "in_reply_to_id" : 418932760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NDg5NQ==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 816,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406856577,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420984895",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420990022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420990022"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a very good point.\r\nI think the BIP is correct about the \"data sent\" (every byte on the wire). But I think the implementation is wrong in the way that it doesn't count messages with invalid headers,... which might be exploitable. I'll work on that.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T18:06:52Z",
      "diff_hunk" : "@@ -782,6 +791,9 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n         // MAC check was successful\n         valid_checksum = true;\n \n+        // count bytes we decrypted including MAC tag + AD",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420990022",
      "id" : 420990022,
      "in_reply_to_id" : 418933381,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MDAyMg==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 797,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406862776,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420990022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420990519"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420990519"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes. That could help.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T18:07:39Z",
      "diff_hunk" : "@@ -703,21 +703,36 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420990519",
      "id" : 420990519,
      "in_reply_to_id" : 418934931,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MDUxOQ==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 833,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 406863406,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420990519",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420991902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420991902"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes. We don't right now as this is currently identical to V1 (where we don't disconnect if a message has an invalid header or an invalid SHA256 checksum).\r\nSee #15206 and #15197.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T18:10:07Z",
      "diff_hunk" : "@@ -834,6 +846,37 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     msg.m_message_size = msg.m_recv.size();                                                                    //message payload size (excluding command)\n     msg.m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n \n+    const int64_t now = GetTime();\n+    if (m_rekey_flag) {\n+        if (!gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) && (m_time_last_rekey + MIN_REKEY_TIME > now)) {\n+            // remote peer was not respecting the mininal rekey time (DoS)\n+            LogPrint(BCLog::NET, \"Invalid rekey (DoS)\\n\");\n+            msg.m_valid_checksum = false;\n+            msg.m_valid_header = false;\n+        } else {\n+            // make sure we rekey at this point, next message is supposed to be encrypted with the new key\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+            // reset the AEAD context\n+            m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+            LogPrint(BCLog::NET, \"Rekey: new recv keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+            // reset sequence numbers\n+            m_payload_seqnr = 0;\n+            m_aad_seqnr = 0;\n+            m_aad_pos = 0;\n+            m_bytes_decrypted = 0;\n+            m_time_last_rekey = now;\n+        }\n+    } else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || now - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||\n+               (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) && m_bytes_decrypted > 64 * 1024)) {\n+        // don't further decrypt and therefore abort connection when counterparty failed to respect rekey limits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420991902",
      "id" : 420991902,
      "in_reply_to_id" : 418939510,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MTkwMg==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 950,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406865133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420991902",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420992578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420992578"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a valid point...\r\nwould you be interested to analyse attack possibilities?\r\nand what would you suggest? Dropping the time based limit?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T18:11:14Z",
      "diff_hunk" : "@@ -703,21 +703,36 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r420992578",
      "id" : 420992578,
      "in_reply_to_id" : 418937474,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MjU3OA==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 829,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 406865939,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420992578",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421027923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421027923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "perhaps \"the counterparty can signal a post-message re-key, e.g. after this message a new key will be used, by setting the\"",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-06T19:09:43Z",
      "diff_hunk" : "@@ -741,6 +741,15 @@ int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n             return -1;\n         }\n \n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421027923",
      "id" : 421027923,
      "in_reply_to_id" : 418932760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyNzkyMw==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 816,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 406908861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421027923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421962534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421962534"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree it's good for now as an assumption. I think in the future there is valid use-cases where you want to send bitcoin traffic over some non-ordered communication channels like headers-over-radio and still benefit of encryption.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-08T06:22:50Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421962534",
      "id" : 421962534,
      "in_reply_to_id" : 417833895,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2MjUzNA==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 789,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 408022623,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421962534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421963177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421963177"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right, decryption failure is fatal, there is no such ban-per-point in this case.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-08T06:24:29Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421963177",
      "id" : 421963177,
      "in_reply_to_id" : 417842245,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2MzE3Nw==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 806,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 408023351,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421963177",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421964401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421964401"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right can we tolerate them, i,e not disconnecting peer and still drop them? We won't be able to process them anyway.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-08T06:27:41Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= 12 && vRecv.size() >= size_or_shortid) {\n+            // string command\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421964401",
      "id" : 421964401,
      "in_reply_to_id" : 417855756,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2NDQwMQ==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 845,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 408024727,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421964401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421968517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421968517"
         }
      },
      "author_association" : "MEMBER",
      "body" : "At `std::vector::insert`, if `msg.data` capacity isn't enough an allocation is realized. Then at `std::vector::resize`, if capacity is too short again, a newer allocation is realized and a memcopy processed. You avoid one memory allocator call which may trigger a syscall in worst-case scenario ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-08T06:37:43Z",
      "diff_hunk" : "@@ -731,6 +897,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= 12);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421968517",
      "id" : 421968517,
      "in_reply_to_id" : 418928926,
      "line" : 926,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2ODUxNw==",
      "original_commit_id" : "d9081b32a36135c4fe10838cbfc181fb410f7a9a",
      "original_line" : 926,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 174,
      "pull_request_review_id" : 408029155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421968517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421969270"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421969270"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Or perhaps \"the counterparty can signal a re-key, after this message a new key will be used, by setting the\"?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-08T06:39:33Z",
      "diff_hunk" : "@@ -741,6 +741,15 @@ int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n             return -1;\n         }\n \n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421969270",
      "id" : 421969270,
      "in_reply_to_id" : 418932760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2OTI3MA==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 816,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 408029978,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421969270",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421970415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421970415"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, will review them with context.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-08T06:42:25Z",
      "diff_hunk" : "@@ -834,6 +846,37 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     msg.m_message_size = msg.m_recv.size();                                                                    //message payload size (excluding command)\n     msg.m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n \n+    const int64_t now = GetTime();\n+    if (m_rekey_flag) {\n+        if (!gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) && (m_time_last_rekey + MIN_REKEY_TIME > now)) {\n+            // remote peer was not respecting the mininal rekey time (DoS)\n+            LogPrint(BCLog::NET, \"Invalid rekey (DoS)\\n\");\n+            msg.m_valid_checksum = false;\n+            msg.m_valid_header = false;\n+        } else {\n+            // make sure we rekey at this point, next message is supposed to be encrypted with the new key\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+            // reset the AEAD context\n+            m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+            LogPrint(BCLog::NET, \"Rekey: new recv keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+            // reset sequence numbers\n+            m_payload_seqnr = 0;\n+            m_aad_seqnr = 0;\n+            m_aad_pos = 0;\n+            m_bytes_decrypted = 0;\n+            m_time_last_rekey = now;\n+        }\n+    } else if (m_bytes_decrypted > REKEY_ABORT_LIMIT_BYTES || now - m_time_last_rekey > REKEY_ABORT_LIMIT_TIME ||\n+               (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) && m_bytes_decrypted > 64 * 1024)) {\n+        // don't further decrypt and therefore abort connection when counterparty failed to respect rekey limits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421970415",
      "id" : 421970415,
      "in_reply_to_id" : 418939510,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3MDQxNQ==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 950,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 408031266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421970415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421977423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421977423"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes actually time-clock attacks has caught my attention while working on other thing so I'm already investigating this. May I come back to you soon on this and if I don't feel free to ping me ?\r\n\r\nAs a robust fix we can't rely on receiver-side tracking, like requiring we sent at least X bytes before a re-keying, I think there is protocol messages to triggering querying from us. And relying on block tip increase would be bad due to variance...",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-08T06:59:24Z",
      "diff_hunk" : "@@ -703,21 +703,36 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r421977423",
      "id" : 421977423,
      "in_reply_to_id" : 418937474,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3NzQyMw==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 829,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 408039451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421977423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r422004967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422004967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thinking further, I would keep the timeclock for triggering a re-key but not checking at re-key acceptance. It would obtain the effect aimed, which it is renew key after 1h. A time-clock manipulation that way wouldn't be able to close connections, just triggering re-key ?\r\n\r\nAnd for a malicious connected peer, it would make the DoS-cpu vector the same that an attacker retrying and abandoning session, and we agreed in BIP discussion that's something we have to bear ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-08T08:02:07Z",
      "diff_hunk" : "@@ -703,21 +703,36 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r422004967",
      "id" : 422004967,
      "in_reply_to_id" : 418937474,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNDk2Nw==",
      "original_commit_id" : "e04eddb397d613f4c4c53f2692d7dd74c165f64f",
      "original_line" : 829,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 408071742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422004967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I found the issue revealed by the fuzzer crash (reported by @jonatack).\r\n\r\nThe fuzzer assertion `assert(msg.m_raw_message_size == header_size + msg.m_message_size);` assumes that the `msg.m_message_size` never contains the size of the header (in V2, the header is the `MAC` & the `AD` [AD == encrypted message length]).\r\n\r\nThough, if the decryption failed (due to a valid size message but an invalid `MAC`), the code did **not** reduce the header size from `msg.m_message_size` and thus violating the `TransportDeserializer` protocol.\r\n\r\nThe just added commit d1a000d70aa6eccc45a8f7062c4f835073f625ed fixes this.",
      "created_at" : "2020-05-08T08:43:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-625710068",
      "id" : 625710068,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTcxMDA2OA==",
      "updated_at" : "2020-05-08T08:43:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625710068",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I added another commit (222d5334681c517636c933c9491200fbbabf3c8d) that fixes the issue reported by @ariard (https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418933381).\r\nThe bytes counter for detecting a violation of the 1GB rekey limit was not correctly incremented.\r\nIn case a valid size message had an invalid MAC, the bytes counter was not incremented leading to the problem that a flooding of messages with invalid MACs will not trigger the transmition-limit rekey.",
      "created_at" : "2020-05-08T08:46:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-625711283",
      "id" : 625711283,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTcxMTI4Mw==",
      "updated_at" : "2020-05-08T08:46:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625711283",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ran the fuzzer for 20 hours with the qa-assets seeds which previously crashed immediately (https://github.com/bitcoin/bitcoin/pull/18242#pullrequestreview-404120272) and looks good after 4.6M execs.\r\n```\r\n$ src/test/fuzz/p2p_v2_transport_deserializer ../qa-assets/fuzz_seed_corpus/\r\n\r\n#4475206\tREDUCE cov: 3039 ft: 6681 corp: 55/11110Kb exec/s: 58 rss: 712Mb L: 942178/1040651 MS: 1 EraseBytes-\r\n#4549161\tREDUCE cov: 3039 ft: 6681 corp: 55/11105Kb exec/s: 58 rss: 712Mb L: 250986/1040651 MS: 5 ChangeByte-ShuffleBytes-CrossOver-InsertByte-EraseBytes-\r\n#4586567\tREDUCE cov: 3039 ft: 6681 corp: 55/11076Kb exec/s: 58 rss: 712Mb L: 221785/1040651 MS: 1 EraseBytes-\r\n#4595153\tREDUCE cov: 3039 ft: 6681 corp: 55/11067Kb exec/s: 58 rss: 712Mb L: 212380/1040651 MS: 1 EraseBytes-\r\n```",
      "created_at" : "2020-05-09T09:02:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-626133023",
      "id" : 626133023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNjEzMzAyMw==",
      "updated_at" : "2020-05-09T09:02:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626133023",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ran the new fuzzer for 24 hours with the qa-assets seeds, which previously crashed immediately (https://github.com/bitcoin/bitcoin/pull/18242#pullrequestreview-404120272)... looks good after 5.5M execs.\r\n```\r\n$ src/test/fuzz/p2p_v2_transport_deserializer ../qa-assets/fuzz_seed_corpus/\r\n\r\n#5332942\tREDUCE cov: 3039 ft: 6681 corp: 55/10942Kb exec/s: 58 rss: 712Mb L: 738789/1040651 MS: 1 EraseBytes-\r\n#5369365\tREDUCE cov: 3039 ft: 6681 corp: 55/10940Kb exec/s: 58 rss: 712Mb L: 736365/1040651 MS: 3 CMP-PersAutoDict-EraseBytes- DE: \"\\x0d\\x00\\x00\\x00\"-\"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"-\r\n#5552616\tREDUCE cov: 3039 ft: 6681 corp: 55/10939Kb exec/s: 58 rss: 712Mb L: 751449/1040651 MS: 1 CrossOver-\r\n```",
      "created_at" : "2020-05-09T13:00:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-626172638",
      "id" : 626172638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNjE3MjYzOA==",
      "updated_at" : "2020-05-09T13:00:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626172638",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r422523503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422523503"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit/note for follow-up:\r\n```diff\r\n-        // try for short ID in case the first byte is a number larger than 12\r\n+        // try for short ID in case the first byte is a number larger than NET_P2P_V2_CMD_MAX_CHARS_SIZE\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-09T17:31:42Z",
      "diff_hunk" : "@@ -718,6 +722,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r422523503",
      "id" : 422523503,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyMzUwMw==",
      "original_commit_id" : "222d5334681c517636c933c9491200fbbabf3c8d",
      "original_line" : 840,
      "original_position" : 124,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 408669537,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/422523503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-05-12T13:34:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-627349302",
      "id" : 627349302,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNzM0OTMwMg==",
      "updated_at" : "2020-05-12T13:34:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627349302",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.",
      "created_at" : "2020-05-13T07:37:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-627806757",
      "id" : 627806757,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNzgwNjc1Nw==",
      "updated_at" : "2020-05-13T07:37:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/627806757",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r424750339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424750339"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`size_or_shortid` is `uint8_t`. Since it is unsigned, `size_or_shortid >= 0` will always be true. Should this be `if (!valid_header && size_or_shortid > 0) {`?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-13T21:47:34Z",
      "diff_hunk" : "@@ -719,6 +723,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r424750339",
      "id" : 424750339,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MDMzOQ==",
      "original_commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "original_line" : 839,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 411323386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424750339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r424904659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424904659"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure. If `size_or_shortid` is `0` (due to a `std::ios_base::failure` or if `vRecv` contain `0`), I'd like to enter this `if` to set `command_name` to `unknown-0`.\r\nOtherwise `command_name` would be unset for a size of `0` (which is somehow a undefined short-id).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-14T06:44:19Z",
      "diff_hunk" : "@@ -719,6 +723,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r424904659",
      "id" : 424904659,
      "in_reply_to_id" : 424750339,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkwNDY1OQ==",
      "original_commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "original_line" : 839,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 411505955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424904659",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r425811823"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425811823"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, if I understand correctly:\r\n```diff\r\n-    bool valid_header = false;\r\n     std::string command_name;\r\n@@ -812,15 +811,12 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\r\n         }\r\n         if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\r\n             // first byte is a number between 1 and 12. Must be a string command.\r\n-            valid_header = true;\r\n \r\n             // use direct read since we already read the varlens size uint8_t\r\n             command_name.resize(size_or_shortid);\r\n             vRecv.read(&command_name[0], size_or_shortid);\r\n-        }\r\n-        // try for short ID in case the first byte is a number larger than 12\r\n-        if (!valid_header && size_or_shortid >= 0) {\r\n-            valid_header = true;\r\n+        } else if (size_or_shortid == 0 || size_or_shortid > NET_P2P_V2_CMD_MAX_CHARS_SIZE) {\r\n+            // // try for short ID in case the first byte is a number larger than NET_P2P_V2_CMD_MAX_CHARS_SIZE\r\n             if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\r\n@@ -842,7 +838,7 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\r\n     msg.m_command = command_name;\r\n \r\n     // store state about valid header, netmagic and checksum\r\n-    msg.m_valid_header = valid_header; // not relevant for v2, always pass\r\n+    msg.m_valid_header = true ; // not relevant for v2, always pass\r\n```\r\n",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-15T13:45:01Z",
      "diff_hunk" : "@@ -719,6 +723,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r425811823",
      "id" : 425811823,
      "in_reply_to_id" : 424750339,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxMTgyMw==",
      "original_commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "original_line" : 839,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 412662374,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425811823",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r425814159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425814159"
         }
      },
      "author_association" : "MEMBER",
      "body" : "or perhaps even just `else`\r\n```diff\r\n-    bool valid_header = false;\r\n     std::string command_name;\r\n \r\n     // count bytes we decrypted including MAC tag + AD\r\n@@ -812,15 +811,12 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\r\n         }\r\n         if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\r\n             // first byte is a number between 1 and 12. Must be a string command.\r\n-            valid_header = true;\r\n \r\n             // use direct read since we already read the varlens size uint8_t\r\n             command_name.resize(size_or_shortid);\r\n             vRecv.read(&command_name[0], size_or_shortid);\r\n-        }\r\n-        // try for short ID in case the first byte is a number larger than 12\r\n-        if (!valid_header && size_or_shortid >= 0) {\r\n-            valid_header = true;\r\n+        } else {\r\n+            // try for short ID if first byte is 0 or a number larger than NET_P2P_V2_CMD_MAX_CHARS_SIZE\r\n             if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\r\n                 // unknown-short-id\r\n                 //  results in a valid but unknown message (will be skipped)\r\n@@ -842,7 +838,7 @@ CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\r\n     msg.m_command = command_name;\r\n \r\n     // store state about valid header, netmagic and checksum\r\n-    msg.m_valid_header = valid_header; // not relevant for v2, always pass\r\n+    msg.m_valid_header = true ; // not relevant for v2, always pass\r\n```\r\n",
      "commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "created_at" : "2020-05-15T13:48:46Z",
      "diff_hunk" : "@@ -719,6 +723,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r425814159",
      "id" : 425814159,
      "in_reply_to_id" : 424750339,
      "line" : 822,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxNDE1OQ==",
      "original_commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "original_line" : 822,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 125,
      "pull_request_review_id" : 412665366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-15T13:48:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425814159",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r426406735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426406735"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What if the buffer contains a `0x09` as first bytes (a valid string based command with the size of 9 chars) but those 9 bytes would actually not follow? Wouldn't it become `valid_header=true` in your suggestions? ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-18T07:00:37Z",
      "diff_hunk" : "@@ -719,6 +723,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r426406735",
      "id" : 426406735,
      "in_reply_to_id" : 424750339,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwNjczNQ==",
      "original_commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "original_line" : 839,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 413317454,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426406735",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r426701026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426701026"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unless I'm confused, I think the suggestion above is still correct for the case you describe, assuming you want it to fail both of the conditional checks, and `net_tests` and the `p2p_v2_transport_deserializer` fuzzer both pass. \r\n\r\nIn the current code, it's not clear to me what purpose `valid_header` serves because it always becomes true at the latest by line 823.\r\n\r\nUnrelated, but it looks like short command IDs need to be added for the `GETCFCHECKPT` and `CFCHECKPT` BIP157 message types that were added in f9e00bb25ac and possibly soon for `GETCFHEADERS` and `GETCFFILTERS` as well.\r\n",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-05-18T15:14:35Z",
      "diff_hunk" : "@@ -719,6 +723,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r426701026",
      "id" : 426701026,
      "in_reply_to_id" : 424750339,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwMTAyNg==",
      "original_commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "original_line" : 839,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 413691857,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426701026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-05-20T13:17:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-631467671",
      "id" : 631467671,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMTQ2NzY3MQ==",
      "updated_at" : "2020-05-20T13:17:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631467671",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased (only code formatting conflicts in `protocol.h`).",
      "created_at" : "2020-05-21T10:32:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-632012221",
      "id" : 632012221,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjAxMjIyMQ==",
      "updated_at" : "2020-05-21T10:32:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632012221",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-05-29T09:49:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-635882989",
      "id" : 635882989,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTg4Mjk4OQ==",
      "updated_at" : "2020-05-29T09:49:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635882989",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased this PR for you :relaxed:: https://github.com/bitcoin/bitcoin/compare/master...dongcarl:2020-06-net_v2-rebased",
      "created_at" : "2020-06-02T16:30:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-637666341",
      "id" : 637666341,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNzY2NjM0MQ==",
      "updated_at" : "2020-06-02T16:30:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637666341",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @dongcarl. Was a trivial closing bracket rebase. Rebase pushed.",
      "created_at" : "2020-06-02T18:00:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-637711905",
      "id" : 637711905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNzcxMTkwNQ==",
      "updated_at" : "2020-06-02T18:00:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/637711905",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440650990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440650990"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "poly1305 tag length of 16 bytes is already defined in https://github.com/bitcoin/bitcoin/blob/1c86ed41483471929840eec09b93d7de3a4aeacf/src/crypto/poly1305.h#L12\r\nIs it necessary to explicitly define it here again? ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-16T07:45:35Z",
      "diff_hunk" : "@@ -11,6 +11,7 @@\n \n static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_POLY1305_AEAD_TAG_LEN = 16; /* 16 bytes poly1305 tag */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440650990",
      "id" : 440650990,
      "line" : 15,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1MDk5MA==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 15,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 10,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440650990",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440878852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440878852"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "BIP324 removes the Message Magic bytes. Is `CMessageHeader::MessageStartChars` required here? ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-16T14:06:56Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440878852",
      "id" : 440878852,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg3ODg1Mg==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 789,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440878852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440896136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440896136"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Should be `MAC tag + AAD`? ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-16T14:30:04Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440896136",
      "id" : 440896136,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5NjEzNg==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 811,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440896136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440897035"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440897035"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: should be `(even if decryption fails)`?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-16T14:31:11Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440897035",
      "id" : 440897035,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5NzAzNQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 806,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440897035",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440956404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440956404"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit:\r\n```suggestion\r\n         // first byte is a number between 1 and 12. Must be a string command.\r\n        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\r\n```\r\nPutting the comment above the if statement seems more appropriate like it's done for short id. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-16T15:47:28Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440956404",
      "id" : 440956404,
      "line" : 848,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NjQwNA==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 848,
      "original_position" : 117,
      "original_start_line" : 819,
      "path" : "src/net.cpp",
      "position" : 96,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : 847,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440956404",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440958678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440958678"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IMO it feels easier to read if variables values are explicitly specified in comments. I tend to check variable values all the time when reading using the editor functionality. That goes away when it's in a comment.   \r\n\r\nThis is in regard to this  [comment](https://github.com/bitcoin/bitcoin/pull/18242/files#r422523503) in case git doesn't show it in its intended place. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-16T15:50:30Z",
      "diff_hunk" : "@@ -718,6 +722,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440958678",
      "id" : 440958678,
      "in_reply_to_id" : 422523503,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1ODY3OA==",
      "original_commit_id" : "222d5334681c517636c933c9491200fbbabf3c8d",
      "original_line" : 840,
      "original_position" : 124,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440958678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440967503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440967503"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: AAD",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-16T16:02:44Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    // increase the aad_pos and eventually the sequence number\n+    m_aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_aad_pos = 0;\n+        m_aad_seqnr++;\n+    }\n+    // increase the payload sequence number by 1\n+    m_payload_seqnr++;\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    CNetMessage msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg.m_command = command_name;\n+\n+    // store state about valid header, netmagic and checksum\n+    msg.m_valid_header = valid_header; // not relevant for v2, always pass\n+    msg.m_valid_checksum = valid_checksum;\n+    msg.m_valid_netmagic = true; // not relevant for v2, always pass\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt â which we tolerate at this point â we need to reduce the message size by the length of the AD & MAC",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440967503",
      "id" : 440967503,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NzUwMw==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 867,
      "original_position" : 153,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440967503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441404966"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441404966"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: AAD",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T09:19:34Z",
      "diff_hunk" : "@@ -738,6 +909,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441404966",
      "id" : 441404966,
      "line" : 899,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwNDk2Ng==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 899,
      "original_position" : 213,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 147,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441404966",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441405885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441405885"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: AAD. \r\nAt this point, I am wondering if it's intentional, if it is then ignore. There are many more, Not commenting the same for the rests. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T09:20:58Z",
      "diff_hunk" : "@@ -738,6 +909,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441405885",
      "id" : 441405885,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwNTg4NQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 937,
      "original_position" : 217,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441405885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441435792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441435792"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why reset again? ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T10:09:49Z",
      "diff_hunk" : "@@ -738,6 +909,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;\n+    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 10 : REKEY_LIMIT_TIME)) {\n+        LogPrint(BCLog::NET, \"Rekey limits reached, performing rekey.\\n\");\n+        msg.data[2] |= (1u << 7);\n+        rekey = true;\n+    }\n+\n+    // encrypt the payload, ignore return code since it can't fail in this case (controlled buffers, don't check the MAC during encrypting)\n+    m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, msg.data.data(), msg.data.size(), msg.data.data(), msg.data.size() - CHACHA20_POLY1305_AEAD_TAG_LEN, true);\n+\n+    // increase the aad_pos and eventually the sequence number\n+    m_aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_aad_pos = 0;\n+        m_aad_seqnr++;\n+    }\n+    // increase the payload sequence number by 1\n+    m_payload_seqnr++;\n+\n+    m_bytes_encrypted += msg.data.size(); // count everything, MAC tag + AD\n+\n+    if (rekey) {\n+        // make sure we rekey at this point, next message needs to be encrypted with the new key\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+        // reset the AEAD context\n+        m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+        LogPrint(BCLog::NET, \"Rekey: new send keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+        // reset the AEAD context\n+        m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441435792",
      "id" : 441435792,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzNTc5Mg==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 999,
      "original_position" : 279,
      "original_start_line" : 987,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441435792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441445522"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441445522"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "it seems the `header` is redundant here? ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T10:27:36Z",
      "diff_hunk" : "@@ -738,6 +909,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441445522",
      "id" : 441445522,
      "line" : 889,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0NTUyMg==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 889,
      "original_position" : 203,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 137,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441445522",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441468386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441468386"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`//reset sequence numbers and key counters`? Or maybe add `//reset key counters` before last two? like done in `prepareForTransport`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T11:13:35Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    // increase the aad_pos and eventually the sequence number\n+    m_aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_aad_pos = 0;\n+        m_aad_seqnr++;\n+    }\n+    // increase the payload sequence number by 1\n+    m_payload_seqnr++;\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    CNetMessage msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg.m_command = command_name;\n+\n+    // store state about valid header, netmagic and checksum\n+    msg.m_valid_header = valid_header; // not relevant for v2, always pass\n+    msg.m_valid_checksum = valid_checksum;\n+    msg.m_valid_netmagic = true; // not relevant for v2, always pass\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt â which we tolerate at this point â we need to reduce the message size by the length of the AD & MAC\n+    // to conform to the abstract TransportDeserializer protocol\n+    msg.m_message_size = valid_checksum ? msg.m_recv.size() : (msg.m_recv.size() - CHACHA20_POLY1305_AEAD_AAD_LEN - CHACHA20_POLY1305_AEAD_TAG_LEN);\n+    msg.m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n+\n+    const int64_t now = GetTime();\n+    if (m_rekey_flag) {\n+        if (!gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) && (m_time_last_rekey + MIN_REKEY_TIME > now)) {\n+            // remote peer was not respecting the mininal rekey time (DoS)\n+            LogPrint(BCLog::NET, \"Invalid rekey (DoS)\\n\");\n+            msg.m_valid_checksum = false;\n+            msg.m_valid_header = false;\n+        } else {\n+            // make sure we rekey at this point, next message is supposed to be encrypted with the new key\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+            CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+            // reset the AEAD context\n+            m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+            LogPrint(BCLog::NET, \"Rekey: new recv keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+            // reset sequence numbers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441468386",
      "id" : 441468386,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2ODM4Ng==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 941,
      "original_position" : 174,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441468386",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441475023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441475023"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As per the comment on `net_tests.cpp` line 380\r\n\r\n>  // Setting the netencryptionfastrekey flag results in using a threshold of 64kb / 10 seconds for requiring a rekey\r\n\r\nHere `m_bytes_encrypted` is checked against 32 kb. Is this intentional? \r\nShould the BIP draft add `netencryptionfastrekey` policy for better reference?\r\nAlso whats the rationale behind fastrekey? ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T11:27:44Z",
      "diff_hunk" : "@@ -738,6 +909,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;\n+    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 10 : REKEY_LIMIT_TIME)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441475023",
      "id" : 441475023,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NTAyMw==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 1022,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441475023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441480135"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441480135"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Suggested comment (in the spirit of the rest) `// recorded time when the last rekey happened`",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T11:38:09Z",
      "diff_hunk" : "@@ -698,6 +700,70 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+// V2TransportDeserializer is a transport deserializer after BIP324\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441480135",
      "id" : 441480135,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4MDEzNQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 765,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441480135",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441481441"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441481441"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We are already checking `m_message_size` against `MAX_SIZE` in `Read`. Here the check is happening against `MAX_PROTOCOL_MESSAGE_LENGTH`.\r\n1. `MAX_SIZE` = 33.5MB,  `MAX_PROTOCOL_MESSAGE_LENGTH` = 4MB. What does these two limits signify? \r\n2. if we are already checking for some size limit in `Read` why have a separate check here? So far  `OversizedMessageDetected` is not used anywhere. Any special plan for its existence? ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T11:40:44Z",
      "diff_hunk" : "@@ -698,6 +700,70 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+// V2TransportDeserializer is a transport deserializer after BIP324\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;\n+    uint256 m_session_id;           // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr = 0;   // sequence number for the payload\n+    uint64_t m_aad_seqnr = 0;       // sequence number for the packet length (AD)\n+    int m_aad_pos = 0;              // position in the aad keystream\n+    bool m_in_data = false;         // parsing header (false) or data (true)\n+    uint32_t m_message_size = 0;    // expected message size\n+    CDataStream vRecv;              // received message data\n+    unsigned int m_hdr_pos = 0;     // read pos in header\n+    unsigned int m_data_pos = 0;    // read pos in data\n+    bool m_rekey_flag = false;      // rekey in message detected\n+\n+public:\n+    V2TransportDeserializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_time_last_rekey(GetTime()), m_session_id(session_id), vRecv(SER_NETWORK, INIT_PROTO_VERSION)\n+    {\n+        Reset();\n+    }\n+\n+    void Reset()\n+    {\n+        vRecv.clear();\n+        vRecv.resize(CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        m_in_data = false;\n+        m_hdr_pos = 0;\n+        m_message_size = 0;\n+        m_data_pos = 0;\n+        m_rekey_flag = false;\n+    }\n+    bool Complete() const\n+    {\n+        if (!m_in_data) {\n+            return false;\n+        }\n+        return (m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN == m_data_pos);\n+    }\n+    void SetVersion(int nVersionIn)\n+    {\n+        vRecv.SetVersion(nVersionIn);\n+    }\n+    bool OversizedMessageDetected() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441481441",
      "id" : 441481441,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4MTQ0MQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 804,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441481441",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441493342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441493342"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Comments from `V2TransportDeserializer` can be copied here. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T12:04:16Z",
      "diff_hunk" : "@@ -712,6 +778,27 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for a later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_encrypted = 0; //counter of bytes encrypted with same key\n+    int64_t m_time_last_rekey = 0;\n+    uint256 m_session_id; // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr = 0;\n+    uint64_t m_aad_seqnr = 0;\n+    int m_aad_pos = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441493342",
      "id" : 441493342,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5MzM0Mg==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 913,
      "original_position" : 97,
      "original_start_line" : 790,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441493342",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441493700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441493700"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Same comment here from `V2TransportDeserializer` can help. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T12:04:59Z",
      "diff_hunk" : "@@ -712,6 +778,27 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for a later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_encrypted = 0; //counter of bytes encrypted with same key\n+    int64_t m_time_last_rekey = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441493700",
      "id" : 441493700,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5MzcwMA==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 833,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441493700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441496441"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441496441"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A single comment specifying this is used for V2 messaging protocol as per BIP324 might help here. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T12:10:27Z",
      "diff_hunk" : "@@ -241,3 +241,126 @@ std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n \n     return str_flags;\n }\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441496441",
      "id" : 441496441,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5NjQ0MQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 250,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441496441",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441502434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441502434"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is the mapping a p2p agreement at this point? It seems hardcoded. Which seems all right to me. Trying to have the mapping process here seems like going out of scope for this PR. Maybe a followup PR or even a BIP should be done? In that light maybe removing this comment here can help, or tagging it by a todo or something else? Can be confusing as its not implemented yet. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T12:21:34Z",
      "diff_hunk" : "@@ -266,6 +291,17 @@ extern const char* CFCHECKPT;\n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string>& getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441502434",
      "id" : 441502434,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMjQzNA==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 257,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441502434",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441542048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441542048"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems it is intended here that serialized header will be returned into the `serialized_header`? But `prepareForTransport` doesn't assign the serialized header into the `header` arguement. Not sure what is happening here. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T13:25:03Z",
      "diff_hunk" : "@@ -320,4 +322,161 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+size_t read_message(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<unsigned char>& serialized_header, const CSerializedNetMsg& msg)\n+{\n+    size_t read_bytes = 0;\n+    if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char*)serialized_header.data(), serialized_header.size());\n+    //  second: read the encrypted payload (if required)\n+    if (msg.data.size() > 0) read_bytes += deserializer->Read((const char*)msg.data.data(), msg.data.size());\n+    if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) read_bytes += deserializer->Read((const char*)msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+    return read_bytes;\n+}\n+\n+// use 32 bytey keys with all zeros\n+static const CPrivKey k1(32, 0);\n+static const CPrivKey k2(32, 0);\n+static const uint256 session_id;\n+\n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2, session_id));\n+    } else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {\n+        for (const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441542048",
      "id" : 441542048,
      "line" : 960,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0MjA0OA==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 960,
      "original_position" : 55,
      "original_start_line" : 362,
      "path" : "src/test/net_tests.cpp",
      "position" : 39,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : 959,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441542048",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441549936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441549936"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Session IDs are important for rekey calculation. Shouldn't this be initialized to something for better expression of that intent? I can see how a fixed garbage value can work too. Wondering if that was the motivation to keep it uninitialized. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T13:36:07Z",
      "diff_hunk" : "@@ -320,4 +322,161 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+size_t read_message(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<unsigned char>& serialized_header, const CSerializedNetMsg& msg)\n+{\n+    size_t read_bytes = 0;\n+    if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char*)serialized_header.data(), serialized_header.size());\n+    //  second: read the encrypted payload (if required)\n+    if (msg.data.size() > 0) read_bytes += deserializer->Read((const char*)msg.data.data(), msg.data.size());\n+    if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) read_bytes += deserializer->Read((const char*)msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+    return read_bytes;\n+}\n+\n+// use 32 bytey keys with all zeros\n+static const CPrivKey k1(32, 0);\n+static const CPrivKey k2(32, 0);\n+static const uint256 session_id;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441549936",
      "id" : 441549936,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0OTkzNg==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 786,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441549936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441553760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441553760"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why `read_message` needs a `serialized_header`? Cant it just compute the header from `CSerializedNetMsg` like it was done in `prepareForTransport`?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T13:41:27Z",
      "diff_hunk" : "@@ -320,4 +322,161 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+size_t read_message(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<unsigned char>& serialized_header, const CSerializedNetMsg& msg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441553760",
      "id" : 441553760,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1Mzc2MA==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 773,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441553760",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441573505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441573505"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: 76th?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T14:07:52Z",
      "diff_hunk" : "@@ -320,4 +322,161 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+size_t read_message(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<unsigned char>& serialized_header, const CSerializedNetMsg& msg)\n+{\n+    size_t read_bytes = 0;\n+    if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char*)serialized_header.data(), serialized_header.size());\n+    //  second: read the encrypted payload (if required)\n+    if (msg.data.size() > 0) read_bytes += deserializer->Read((const char*)msg.data.data(), msg.data.size());\n+    if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) read_bytes += deserializer->Read((const char*)msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+    return read_bytes;\n+}\n+\n+// use 32 bytey keys with all zeros\n+static const CPrivKey k1(32, 0);\n+static const CPrivKey k2(32, 0);\n+static const uint256 session_id;\n+\n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2, session_id));\n+    } else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {\n+        for (const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            size_t read_bytes = read_message(deserializer, serialized_header, msg);\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size() + serialized_header.size());\n+            // message must be complete\n+            CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+            BOOST_CHECK_EQUAL(msg_deser.m_command, msg.command);\n+            BOOST_CHECK_EQUAL(raw_msg_size, msg_deser.m_message_size);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_v2)\n+{\n+    // make sure we use the fast rekey rules\n+    // Setting the netencryptionfastrekey flag results in using a threshold of 64kb / 10 seconds for requiring a rekey\n+    gArgs.SoftSetBoolArg(\"-netencryptionfastrekey\", true);\n+\n+    // create some messages where we perform serialization and deserialization\n+    std::vector<CSerializedNetMsg> test_msgs;\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\n+    CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::TX, CTransaction(deserialize, stream)));\n+    std::vector<CInv> vInv;\n+    for (unsigned int i = 0; i < 1000; i++) {\n+        vInv.push_back(CInv(MSG_BLOCK, Params().GenesisBlock().GetHash()));\n+    }\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::INV, vInv));\n+\n+    // add a dummy message\n+    std::string dummy;\n+    for (unsigned int i = 0; i < 100; i++) {\n+        dummy += \"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\";\n+    }\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(\"foobar\", dummy));\n+\n+    message_serialize_deserialize_test(true, test_msgs);\n+    message_serialize_deserialize_test(false, test_msgs);\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));\n+    ;\n+    std::unique_ptr<TransportDeserializer> deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2, session_id));\n+\n+    ChaCha20Poly1305AEAD test_decryption_aead(k1.data(), k1.size(), k2.data(), k2.size());\n+\n+    for (unsigned int i = 0; i <= 76; i++) {\n+        // encrypt the message without the fast-rekey rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"0\");\n+        std::vector<unsigned char> serialized_header;\n+        serializer->prepareForTransport(test_msg, serialized_header);\n+\n+        // decrypt the message with the fast rekey-rules\n+        gArgs.ForceSetArg(\"-netencryptionfastrekey\", \"1\");\n+        read_message(deserializer, serialized_header, test_msg);\n+        CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+\n+        // make sure we detect the failed rekey\n+        // the 76. message (32kb) must have violated the fast rekey limits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441573505",
      "id" : 441573505,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MzUwNQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 431,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 431242124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441573505",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441707547"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441707547"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add `override` keyword to be consistent with `V1TransportSerializer` (the same conditions apply here as well, no?)",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T17:24:55Z",
      "diff_hunk" : "@@ -712,6 +762,24 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for a later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_payload_seqnr = 0;\n+    uint64_t m_aad_seqnr = 0;\n+    int m_aad_pos = 0;\n+\n+public:\n+    V2TransportSerializer(const CPrivKey& k1, const CPrivKey& k2) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2)\n+    {\n+    }\n+    // prepare for next message\n+    void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441707547",
      "id" : 441707547,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNzU0Nw==",
      "original_commit_id" : "d55f4725c4e5875969fd6010ff67f2021c328025",
      "original_line" : 844,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 432617187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441707547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441723494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441723494"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agreed this is a bit confusing, and I'm not exactly sure what you're trying to achieve. `size_or_shortid >= 0` will *always* evaluate to true. `valid_header` will *always* eventually be set to true. Under what circumstances do you think `valid_header` should be false?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T17:51:32Z",
      "diff_hunk" : "@@ -719,6 +723,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441723494",
      "id" : 441723494,
      "in_reply_to_id" : 424750339,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMzQ5NA==",
      "original_commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "original_line" : 839,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 432637541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441723494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441725357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441725357"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this should be `header.reserve(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);` and all instances of `serialized_header` should be replaced with `header`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T17:54:33Z",
      "diff_hunk" : "@@ -738,6 +864,58 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441725357",
      "id" : 441725357,
      "line" : 904,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNTM1Nw==",
      "original_commit_id" : "d55f4725c4e5875969fd6010ff67f2021c328025",
      "original_line" : 904,
      "original_position" : 173,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 152,
      "pull_request_review_id" : 432639920,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441725357",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441740223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441740223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note, after I changed this, the V2 tests fail:\r\n\r\n<details><summary>log</summary>\r\n<p>\r\n\r\n```\r\nneha@mumford:~/src/bitcoin (HEAD detached at e13accd43a)$ src/test/test_bitcoin -t net_tests -l test_suite\r\nRunning 11 test cases...\r\nEntering test module \"Bitcoin Core Test Suite\"\r\ntest/net_tests.cpp(83): Entering test suite \"net_tests\"\r\ntest/net_tests.cpp(85): Entering test case \"cnode_listen_port\"\r\ntest/net_tests.cpp(85): Leaving test case \"cnode_listen_port\"; testing time: 17203us\r\ntest/net_tests.cpp(97): Entering test case \"caddrdb_read\"\r\ntest/net_tests.cpp(97): Leaving test case \"caddrdb_read\"; testing time: 3942us\r\ntest/net_tests.cpp(143): Entering test case \"caddrdb_read_corrupted\"\r\ntest/net_tests.cpp(143): Leaving test case \"caddrdb_read_corrupted\"; testing time: 3158us\r\ntest/net_tests.cpp(173): Entering test case \"cnode_simple_test\"\r\ntest/net_tests.cpp(173): Leaving test case \"cnode_simple_test\"; testing time: 3249us\r\ntest/net_tests.cpp(198): Entering test case \"ipv4_peer_with_ipv6_addrMe_test\"\r\ntest/net_tests.cpp(198): Leaving test case \"ipv4_peer_with_ipv6_addrMe_test\"; testing time: 2877us\r\ntest/net_tests.cpp(236): Entering test case \"LimitedAndReachable_Network\"\r\ntest/net_tests.cpp(236): Leaving test case \"LimitedAndReachable_Network\"; testing time: 2849us\r\ntest/net_tests.cpp(259): Entering test case \"LimitedAndReachable_NetworkCaseUnroutableAndInternal\"\r\ntest/net_tests.cpp(259): Leaving test case \"LimitedAndReachable_NetworkCaseUnroutableAndInternal\"; testing time: 2807us\r\ntest/net_tests.cpp(282): Entering test case \"LimitedAndReachable_CNetAddr\"\r\ntest/net_tests.cpp(282): Leaving test case \"LimitedAndReachable_CNetAddr\"; testing time: 2843us\r\ntest/net_tests.cpp(296): Entering test case \"LocalAddress_BasicLifecycle\"\r\ntest/net_tests.cpp(296): Leaving test case \"LocalAddress_BasicLifecycle\"; testing time: 2845us\r\ntest/net_tests.cpp(310): Entering test case \"PoissonNextSend\"\r\ntest/net_tests.cpp(310): Leaving test case \"PoissonNextSend\"; testing time: 2813us\r\ntest/net_tests.cpp(371): Entering test case \"net_v2\"\r\ntest/net_tests.cpp(361): error: in \"net_tests/net_v2\": check deserializer->Complete() has failed\r\ntest/net_tests.cpp(362): error: in \"net_tests/net_v2\": check read_bytes == msg.data.size() + serialized_header.size() has failed [23 != 24]\r\ntest_bitcoin: net.cpp:783: virtual CNetMessage V2TransportDeserializer::GetMessage(const unsigned char (&)[4], int64_t): Assertion `Complete()' failed.\r\nunknown location(0): fatal error: in \"net_tests/net_v2\": signal: SIGABRT (application abort requested)\r\ntest/net_tests.cpp(362): last checkpoint\r\ntest/net_tests.cpp(371): Leaving test case \"net_v2\"; testing time: 3128us\r\ntest/net_tests.cpp(83): Leaving test suite \"net_tests\"; testing time: 47830us\r\nLeaving test module \"Bitcoin Core Test Suite\"; testing time: 47866us\r\n\r\n*** 3 failures are detected in the test module \"Bitcoin Core Test Suite\"\r\n```\r\n</details>",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-17T18:20:15Z",
      "diff_hunk" : "@@ -738,6 +864,58 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r441740223",
      "id" : 441740223,
      "in_reply_to_id" : 441725357,
      "line" : 904,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MDIyMw==",
      "original_commit_id" : "d55f4725c4e5875969fd6010ff67f2021c328025",
      "original_line" : 904,
      "original_position" : 173,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 152,
      "pull_request_review_id" : 432659553,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441740223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442254509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442254509"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would prefer to return an `Option<uint8_t>` here to make it clearer when there is no short id available for a command (instead of special-casing `0`).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-18T14:08:18Z",
      "diff_hunk" : "@@ -241,3 +241,126 @@ std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n \n     return str_flags;\n }\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442254509",
      "id" : 442254509,
      "in_reply_to_id" : 441496441,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1NDUwOQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 250,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 433320887,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442254509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442255349"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442255349"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It'd definitely result in shorter code use a hash table here.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-18T14:09:35Z",
      "diff_hunk" : "@@ -241,3 +241,126 @@ std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n \n     return str_flags;\n }\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442255349",
      "id" : 442255349,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1NTM0OQ==",
      "original_commit_id" : "a2931c174ee9a1dfe2fed0b705cec891f421dc89",
      "original_line" : 310,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 433322086,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442255349",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442255740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442255740"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why an empty statement here? (some more below)",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-18T14:10:07Z",
      "diff_hunk" : "@@ -241,3 +241,126 @@ std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n \n     return str_flags;\n }\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442255740",
      "id" : 442255740,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1NTc0MA==",
      "original_commit_id" : "a2931c174ee9a1dfe2fed0b705cec891f421dc89",
      "original_line" : 268,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 433322633,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442255740",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442256403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442256403"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I see @MarcoFalke's point. A P2P protocol has no commands, just messages and message ids. But yea it's unfortunate that was not caught in the BIP.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-18T14:11:00Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442256403",
      "id" : 442256403,
      "in_reply_to_id" : 407741063,
      "line" : 249,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1NjQwMw==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 249,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 110,
      "pull_request_review_id" : 433323517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442256403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442257870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442257870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the advantage of a (hash)table is that it could be built in one central function, making the mapping in both directions, which leaves only one place to update for new message types (and making sure they never go out of sync).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-18T14:13:12Z",
      "diff_hunk" : "@@ -199,3 +199,127 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;\n+        ;\n+    }\n+    return 0; //no short command\n+}\n+\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd)\n+{\n+    if (shortID == NetMsgType::ADDR_SHORT_ID) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442257870",
      "id" : 442257870,
      "in_reply_to_id" : 407265992,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1Nzg3MA==",
      "original_commit_id" : "129545bec6288ea4900ffa3284347e1e677bdf6a",
      "original_line" : 318,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 433325611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442257870",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442258785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442258785"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please use doxygen-compatible comments e.g.\r\n```\r\n/** returns the short command ID for a commandâ¦\r\n */\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-18T14:14:21Z",
      "diff_hunk" : "@@ -266,6 +291,17 @@ extern const char* CFCHECKPT;\n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string>& getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement\n+\n+// returns the short command ID for a command",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442258785",
      "id" : 442258785,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1ODc4NQ==",
      "original_commit_id" : "a2931c174ee9a1dfe2fed0b705cec891f421dc89",
      "original_line" : 259,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 433326717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442258785",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442259229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442259229"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> A single comment specifying this is used for V2 messaging protocol as per BIP324 might help here.\r\n\r\nThe comment is in the `.h` file, where it belongs for public functions.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-18T14:14:57Z",
      "diff_hunk" : "@@ -241,3 +241,126 @@ std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n \n     return str_flags;\n }\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r442259229",
      "id" : 442259229,
      "in_reply_to_id" : 441496441,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1OTIyOQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 250,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 433327308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442259229",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444278079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444278079"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I do prefer the current order here because I find it more intuitive to have the input first and then the output. But I think in `GetCommandFromShortCommandID` the input (`shortID`) should be `const` and casing should be fixed to `short_id`. nit: Overall I would prefer a more consistent API between the two functions so that they have the same return type:\r\n\r\n```suggestion\r\n// returns the short command ID for a command (string)\r\n// returns 0 if short command ID was not found\r\nbool GetShortCommandIDFromCommand(const std::string& cmd, uint8_t short_id);\r\n\r\n// returns the command (string) from a short command ID\r\n// returns an empty string if short command ID has not been found\r\nbool GetCommandFromShortCommandID(const uint8_t short_id, std::string& cmd);\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-23T14:41:08Z",
      "diff_hunk" : "@@ -266,6 +291,17 @@ extern const char* CFCHECKPT;\n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string>& getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement\n+\n+// returns the short command ID for a command\n+// returns 0 if no short command ID has been found\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd);\n+\n+// returns the command (string) from a short command ID\n+// returns an empty string if short command ID has not been found\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444278079",
      "id" : 444278079,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3ODA3OQ==",
      "original_commit_id" : "a2931c174ee9a1dfe2fed0b705cec891f421dc89",
      "original_line" : 277,
      "original_position" : 197,
      "original_start_line" : 298,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 435854061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444278079",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444286263"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444286263"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: The dummy message seems to be reused several times, could be a constant.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-23T14:51:34Z",
      "diff_hunk" : "@@ -320,4 +322,77 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // use 32 bytey keys with all zeros\n+    CPrivKey k1(32, 0);\n+    CPrivKey k2(32, 0);\n+\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2));\n+    } else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {\n+        for (const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);\n+\n+            // read two times\n+            //  first: read header\n+            size_t read_bytes = 0;\n+            if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char*)serialized_header.data(), serialized_header.size());\n+            //  second: read the encrypted payload (if required)\n+            if (msg.data.size() > 0) read_bytes += deserializer->Read((const char*)msg.data.data(), msg.data.size());\n+            if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) read_bytes += deserializer->Read((const char*)msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+            BOOST_CHECK(deserializer->Complete());\n+            BOOST_CHECK_EQUAL(read_bytes, msg.data.size() + serialized_header.size());\n+            // message must be complete\n+            CNetMessage msg_deser = deserializer->GetMessage(Params().MessageStart(), GetTimeMicros());\n+            BOOST_CHECK_EQUAL(msg_deser.m_command, msg.command);\n+            BOOST_CHECK_EQUAL(raw_msg_size, msg_deser.m_message_size);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(net_v2)\n+{\n+    // create some messages where we perform serialization and deserialization\n+    std::vector<CSerializedNetMsg> test_msgs;\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true));\n+    test_msgs.push_back(CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::PING, 123456));\n+    CDataStream stream(ParseHex(\"020000000001013107ca31e1950a9b44b75ce3e8f30127e4d823ed8add1263a1cc8adcc8e49164000000001716001487835ecf51ea0351ef266d216a7e7a3e74b84b4efeffffff02082268590000000017a9144a94391b99e672b03f56d3f60800ef28bc304c4f8700ca9a3b0000000017a9146d5df9e79f752e3c53fc468db89cafda4f7d00cb87024730440220677de5b11a5617d541ba06a1fa5921ab6b4509f8028b23f18ab8c01c5eb1fcfb02202fe382e6e87653f60ff157aeb3a18fc888736720f27ced546b0b77431edabdb0012102608c772598e9645933a86bcd662a3b939e02fb3e77966c9713db5648d5ba8a0006010000\"), SER_NETWORK, PROTOCOL_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444286263",
      "id" : 444286263,
      "line" : 992,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NjI2Mw==",
      "original_commit_id" : "e13accd43aff22e010c6635e4fde517ab8526efa",
      "original_line" : 992,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 71,
      "pull_request_review_id" : 435854061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444286263",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444303624"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444303624"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Should be doxygen comment I think.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-23T15:15:24Z",
      "diff_hunk" : "@@ -698,6 +700,54 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// V2TransportDeserializer is a transport deserializer after BIP324",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444303624",
      "id" : 444303624,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMzYyNA==",
      "original_commit_id" : "d55f4725c4e5875969fd6010ff67f2021c328025",
      "original_line" : 757,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 435854061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444303624",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444304206"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444304206"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Could also add a doxygen comment here.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-23T15:16:09Z",
      "diff_hunk" : "@@ -712,6 +762,24 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444304206",
      "id" : 444304206,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNDIwNg==",
      "original_commit_id" : "d55f4725c4e5875969fd6010ff67f2021c328025",
      "original_line" : 891,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 435854061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444304206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444311734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444311734"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "remove empty statement",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-23T15:26:22Z",
      "diff_hunk" : "@@ -394,5 +404,79 @@ BOOST_AUTO_TEST_CASE(net_v2)\n     message_serialize_deserialize_test(false, test_msgs);\n }\n \n+BOOST_AUTO_TEST_CASE(net_rekey)\n+{\n+    CPrivKey mutable_k1 = k1;\n+    CPrivKey mutable_k2 = k2;\n+    uint256 mutable_session_id = session_id;\n+\n+    CSerializedNetMsg test_msg = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (int)NODE_NETWORK, 123, CAddress(CService(), NODE_NONE), CAddress(CService(), NODE_NONE), 123, \"foobar\", 500000, true);\n+    CSerializedNetMsg test_msg_short = CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK);\n+\n+    // make sure we use the fast rekey rules\n+    std::unique_ptr<TransportSerializer> serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));\n+    ;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444311734",
      "id" : 444311734,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxMTczNA==",
      "original_commit_id" : "9ff5cec2cfc52bac2d63ff23b3fd98232682b940",
      "original_line" : 414,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 435854061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444311734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444415469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444415469"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Would be nice if that typo was fixed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-06-23T18:12:34Z",
      "diff_hunk" : "@@ -320,4 +322,77 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // use 32 bytey keys with all zeros",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r444415469",
      "id" : 444415469,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNTQ2OQ==",
      "original_commit_id" : "e13accd43aff22e010c6635e4fde517ab8526efa",
      "original_line" : 327,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 435854061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444415469",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-07-09T16:33:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-656229302",
      "id" : 656229302,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NjIyOTMwMg==",
      "updated_at" : "2020-07-09T16:33:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656229302",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase and comments addressed (there's a lot by now).",
      "created_at" : "2020-07-30T15:27:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-666455394",
      "id" : 666455394,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NjQ1NTM5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-30T15:27:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666455394",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Hopefully this helps this PR continue:\r\n\r\nI went ahead and rebased this PR, there were a bit of conflicts that I had to resolve. The branch can be found here https://github.com/bitcoin/bitcoin/compare/master...PastaPastaPasta:pr_btc_18242 https://github.com/PastaPastaPasta/dash/commits/pr_btc_18242 This branch builds and passes all tests locally\r\n\r\nAdditionally, I have created a branch that addresses any nits I could find in the review. That branch can be found here https://github.com/bitcoin/bitcoin/compare/master...PastaPastaPasta:pr_btc_18242_code_review",
      "created_at" : "2020-08-09T04:11:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-671003584",
      "id" : 671003584,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTAwMzU4NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-09T04:11:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671003584",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Sorry for the delay. Will pick this up in the next days.",
      "created_at" : "2020-08-11T09:43:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-671844569",
      "id" : 671844569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTg0NDU2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-11T09:43:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671844569",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469218647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469218647"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I prefer to keep the AEAD contents separate.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:25:10Z",
      "diff_hunk" : "@@ -11,6 +11,7 @@\n \n static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_POLY1305_AEAD_TAG_LEN = 16; /* 16 bytes poly1305 tag */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469218647",
      "id" : 469218647,
      "in_reply_to_id" : 440650990,
      "line" : 15,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxODY0Nw==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 15,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 10,
      "pull_request_review_id" : 465865164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469218647",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469220779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469220779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The transport deserializer(s) use an abstract class for the runtime flexibility. The network magic is required for V1. I think it makes no sense to try to get rid of it here as long as V1 is supported.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:27:49Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469220779",
      "id" : 469220779,
      "in_reply_to_id" : 440878852,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyMDc3OQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 789,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 465866952,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469220779",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469223149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469223149"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:30:29Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469223149",
      "id" : 469223149,
      "in_reply_to_id" : 440896136,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyMzE0OQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 811,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 465868831,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469223149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469223235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469223235"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:30:34Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469223235",
      "id" : 469223235,
      "in_reply_to_id" : 440897035,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyMzIzNQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 806,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 465868901,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469223235",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469225251"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469225251"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:33:28Z",
      "diff_hunk" : "@@ -725,6 +729,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    // increase the aad_pos and eventually the sequence number\n+    m_aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_aad_pos = 0;\n+        m_aad_seqnr++;\n+    }\n+    // increase the payload sequence number by 1\n+    m_payload_seqnr++;\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    CNetMessage msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg.m_command = command_name;\n+\n+    // store state about valid header, netmagic and checksum\n+    msg.m_valid_header = valid_header; // not relevant for v2, always pass\n+    msg.m_valid_checksum = valid_checksum;\n+    msg.m_valid_netmagic = true; // not relevant for v2, always pass\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt â which we tolerate at this point â we need to reduce the message size by the length of the AD & MAC",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469225251",
      "id" : 469225251,
      "in_reply_to_id" : 440967503,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNTI1MQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 867,
      "original_position" : 153,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 465871171,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469225251",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469226209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469226209"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops. Rebase issue. Fixed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:35:11Z",
      "diff_hunk" : "@@ -738,6 +909,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;\n+    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 10 : REKEY_LIMIT_TIME)) {\n+        LogPrint(BCLog::NET, \"Rekey limits reached, performing rekey.\\n\");\n+        msg.data[2] |= (1u << 7);\n+        rekey = true;\n+    }\n+\n+    // encrypt the payload, ignore return code since it can't fail in this case (controlled buffers, don't check the MAC during encrypting)\n+    m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, msg.data.data(), msg.data.size(), msg.data.data(), msg.data.size() - CHACHA20_POLY1305_AEAD_TAG_LEN, true);\n+\n+    // increase the aad_pos and eventually the sequence number\n+    m_aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_aad_pos = 0;\n+        m_aad_seqnr++;\n+    }\n+    // increase the payload sequence number by 1\n+    m_payload_seqnr++;\n+\n+    m_bytes_encrypted += msg.data.size(); // count everything, MAC tag + AD\n+\n+    if (rekey) {\n+        // make sure we rekey at this point, next message needs to be encrypted with the new key\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k1.data(), m_aead_k1.size()).Finalize(m_aead_k1.data());\n+        CHash256().Write(m_session_id.begin(), m_session_id.size()).Write(m_aead_k2.data(), m_aead_k2.size()).Finalize(m_aead_k2.data());\n+\n+        // reset the AEAD context\n+        m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));\n+        LogPrint(BCLog::NET, \"Rekey: new send keys (%s, %s)\\n\", HexStr(m_aead_k1), HexStr(m_aead_k2));\n+\n+        // reset the AEAD context\n+        m_aead.reset(new ChaCha20Poly1305AEAD(m_aead_k1.data(), m_aead_k1.size(), m_aead_k2.data(), m_aead_k2.size()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469226209",
      "id" : 469226209,
      "in_reply_to_id" : 441435792,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNjIwOQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 999,
      "original_position" : 279,
      "original_start_line" : 987,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 465872390,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469226209",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469226989"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469226989"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same issue as [this](https://github.com/bitcoin/bitcoin/pull/18242#discussion_r440878852). It's required for V1.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:36:36Z",
      "diff_hunk" : "@@ -738,6 +909,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469226989",
      "id" : 469226989,
      "in_reply_to_id" : 441445522,
      "line" : 889,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNjk4OQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 889,
      "original_position" : 203,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 137,
      "pull_request_review_id" : 465873398,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469226989",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469227995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469227995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The fast rekey function is not something that needs to be specified in the BIP. The purpose of it is for pure implementation testability and has nothing to do with the specification.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:38:26Z",
      "diff_hunk" : "@@ -738,6 +909,95 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id;\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.command;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    const int64_t now = GetTime(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;\n+    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 10 : REKEY_LIMIT_TIME)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469227995",
      "id" : 469227995,
      "in_reply_to_id" : 441475023,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNzk5NQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 1022,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 465874708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469227995",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469228811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469228811"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Fixed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:39:58Z",
      "diff_hunk" : "@@ -698,6 +700,70 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+// V2TransportDeserializer is a transport deserializer after BIP324\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469228811",
      "id" : 469228811,
      "in_reply_to_id" : 441480135,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyODgxMQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 765,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 465875765,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469228811",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469234339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469234339"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. I think this got \"rebased-away\". Just removed `OversizedMessageDetected()`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:50:14Z",
      "diff_hunk" : "@@ -698,6 +700,70 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+// V2TransportDeserializer is a transport deserializer after BIP324\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;\n+    uint256 m_session_id;           // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr = 0;   // sequence number for the payload\n+    uint64_t m_aad_seqnr = 0;       // sequence number for the packet length (AD)\n+    int m_aad_pos = 0;              // position in the aad keystream\n+    bool m_in_data = false;         // parsing header (false) or data (true)\n+    uint32_t m_message_size = 0;    // expected message size\n+    CDataStream vRecv;              // received message data\n+    unsigned int m_hdr_pos = 0;     // read pos in header\n+    unsigned int m_data_pos = 0;    // read pos in data\n+    bool m_rekey_flag = false;      // rekey in message detected\n+\n+public:\n+    V2TransportDeserializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_time_last_rekey(GetTime()), m_session_id(session_id), vRecv(SER_NETWORK, INIT_PROTO_VERSION)\n+    {\n+        Reset();\n+    }\n+\n+    void Reset()\n+    {\n+        vRecv.clear();\n+        vRecv.resize(CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        m_in_data = false;\n+        m_hdr_pos = 0;\n+        m_message_size = 0;\n+        m_data_pos = 0;\n+        m_rekey_flag = false;\n+    }\n+    bool Complete() const\n+    {\n+        if (!m_in_data) {\n+            return false;\n+        }\n+        return (m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN == m_data_pos);\n+    }\n+    void SetVersion(int nVersionIn)\n+    {\n+        vRecv.SetVersion(nVersionIn);\n+    }\n+    bool OversizedMessageDetected() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469234339",
      "id" : 469234339,
      "in_reply_to_id" : 441481441,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNDMzOQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 804,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 465883253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469234339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469240328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469240328"
         }
      },
      "author_association" : "MEMBER",
      "body" : "uint256 has a default constructor the sets the memory to all zeros. Should be enough?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T12:59:54Z",
      "diff_hunk" : "@@ -320,4 +322,161 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+size_t read_message(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<unsigned char>& serialized_header, const CSerializedNetMsg& msg)\n+{\n+    size_t read_bytes = 0;\n+    if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char*)serialized_header.data(), serialized_header.size());\n+    //  second: read the encrypted payload (if required)\n+    if (msg.data.size() > 0) read_bytes += deserializer->Read((const char*)msg.data.data(), msg.data.size());\n+    if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) read_bytes += deserializer->Read((const char*)msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+    return read_bytes;\n+}\n+\n+// use 32 bytey keys with all zeros\n+static const CPrivKey k1(32, 0);\n+static const CPrivKey k2(32, 0);\n+static const uint256 session_id;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469240328",
      "id" : 469240328,
      "in_reply_to_id" : 441549936,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MDMyOA==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 786,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 465891125,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469240328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469240865"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469240865"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Keep in mind that `prepareForTransport` must have the flexibility to work with other transport types including the V1 transport.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T13:00:38Z",
      "diff_hunk" : "@@ -320,4 +322,161 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+size_t read_message(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<unsigned char>& serialized_header, const CSerializedNetMsg& msg)\n+{\n+    size_t read_bytes = 0;\n+    if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char*)serialized_header.data(), serialized_header.size());\n+    //  second: read the encrypted payload (if required)\n+    if (msg.data.size() > 0) read_bytes += deserializer->Read((const char*)msg.data.data(), msg.data.size());\n+    if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) read_bytes += deserializer->Read((const char*)msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+    return read_bytes;\n+}\n+\n+// use 32 bytey keys with all zeros\n+static const CPrivKey k1(32, 0);\n+static const CPrivKey k2(32, 0);\n+static const uint256 session_id;\n+\n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2, session_id));\n+    } else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {\n+        for (const CSerializedNetMsg& msg_orig : test_msgs) {\n+            // bypass the copy protection\n+            CSerializedNetMsg msg;\n+            msg.data = msg_orig.data;\n+            msg.command = msg_orig.command;\n+            size_t raw_msg_size = msg.data.size();\n+\n+            std::vector<unsigned char> serialized_header;\n+            serializer->prepareForTransport(msg, serialized_header);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469240865",
      "id" : 469240865,
      "in_reply_to_id" : 441542048,
      "line" : 960,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MDg2NQ==",
      "original_commit_id" : "7aa91cd136de91d155961da55132684aa6e4befa",
      "original_line" : 960,
      "original_position" : 55,
      "original_start_line" : 362,
      "path" : "src/test/net_tests.cpp",
      "position" : 39,
      "pull_request_review_id" : 465891751,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : 959,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469240865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469245175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469245175"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right. Thanks. Fixed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T13:07:34Z",
      "diff_hunk" : "@@ -712,6 +762,24 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for a later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_payload_seqnr = 0;\n+    uint64_t m_aad_seqnr = 0;\n+    int m_aad_pos = 0;\n+\n+public:\n+    V2TransportSerializer(const CPrivKey& k1, const CPrivKey& k2) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2)\n+    {\n+    }\n+    // prepare for next message\n+    void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469245175",
      "id" : 469245175,
      "in_reply_to_id" : 441707547,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NTE3NQ==",
      "original_commit_id" : "d55f4725c4e5875969fd6010ff67f2021c328025",
      "original_line" : 844,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 465897294,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469245175",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469248481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469248481"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I see your point.\r\nThe pass-by-reference `header` field in `prepareForTransport()` is only used in V1.\r\nIn V2, there is actually no header (well, you could argue that the MAC-tag and the encrypted length is the header but since the MAC is at the end of the message, it makes little sense to try to use that header field).\r\n\r\nTherefor, in V2, the pass-by-reference `header` field is unused and the whole message (including the AAD & MAC) is part of the message data/payload (which I think is conceptual fine).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T13:12:45Z",
      "diff_hunk" : "@@ -738,6 +864,58 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    const uint8_t cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+    if (cmd_short_id == 0) {\n+        // message command without an assigned short-ID\n+        assert(msg.command.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469248481",
      "id" : 469248481,
      "in_reply_to_id" : 441725357,
      "line" : 904,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODQ4MQ==",
      "original_commit_id" : "d55f4725c4e5875969fd6010ff67f2021c328025",
      "original_line" : 904,
      "original_position" : 173,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 152,
      "pull_request_review_id" : 465901679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469248481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469248596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469248596"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Switched to a std::map.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T13:12:58Z",
      "diff_hunk" : "@@ -241,3 +241,126 @@ std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n \n     return str_flags;\n }\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FILTERLOAD) {\n+        return NetMsgType::FILTERLOAD_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETADDR) {\n+        return NetMsgType::GETADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETBLOCKS) {\n+        return NetMsgType::GETBLOCKS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::GETBLOCKTXN) {\n+        return NetMsgType::GETBLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETDATA) {\n+        return NetMsgType::GETDATA_SHORT_ID;\n+    } else if (cmd == NetMsgType::GETHEADERS) {\n+        return NetMsgType::GETHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::MEMPOOL) {\n+        return NetMsgType::MEMPOOL_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::MERKLEBLOCK) {\n+        return NetMsgType::MERKLEBLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::NOTFOUND) {\n+        return NetMsgType::NOTFOUND_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::PONG) {\n+        return NetMsgType::PONG_SHORT_ID;\n+    } else if (cmd == NetMsgType::SENDCMPCT) {\n+        return NetMsgType::SENDCMPCT_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::SENDHEADERS) {\n+        return NetMsgType::SENDHEADERS_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::TX) {\n+        return NetMsgType::TX_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERACK) {\n+        return NetMsgType::VERACK_SHORT_ID;\n+    } else if (cmd == NetMsgType::VERSION) {\n+        return NetMsgType::VERSION_SHORT_ID;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469248596",
      "id" : 469248596,
      "in_reply_to_id" : 442255349,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODU5Ng==",
      "original_commit_id" : "a2931c174ee9a1dfe2fed0b705cec891f421dc89",
      "original_line" : 310,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 465901861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469248596",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469248711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469248711"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Rebase issues. Fixed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T13:13:09Z",
      "diff_hunk" : "@@ -241,3 +241,126 @@ std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n \n     return str_flags;\n }\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string& cmd)\n+{\n+    if (cmd == NetMsgType::ADDR) {\n+        return NetMsgType::ADDR_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCK) {\n+        return NetMsgType::BLOCK_SHORT_ID;\n+    } else if (cmd == NetMsgType::BLOCKTXN) {\n+        return NetMsgType::BLOCKTXN_SHORT_ID;\n+    } else if (cmd == NetMsgType::CMPCTBLOCK) {\n+        return NetMsgType::CMPCTBLOCK_SHORT_ID;\n+        ;\n+    } else if (cmd == NetMsgType::FEEFILTER) {\n+        return NetMsgType::FEEFILTER_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERADD) {\n+        return NetMsgType::FILTERADD_SHORT_ID;\n+    } else if (cmd == NetMsgType::FILTERCLEAR) {\n+        return NetMsgType::FILTERCLEAR_SHORT_ID;\n+        ;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469248711",
      "id" : 469248711,
      "in_reply_to_id" : 442255740,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODcxMQ==",
      "original_commit_id" : "a2931c174ee9a1dfe2fed0b705cec891f421dc89",
      "original_line" : 268,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : null,
      "pull_request_review_id" : 465902027,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469248711",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469249972"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469249972"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-12T13:15:04Z",
      "diff_hunk" : "@@ -266,6 +291,17 @@ extern const char* CFCHECKPT;\n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string>& getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement\n+\n+// returns the short command ID for a command",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r469249972",
      "id" : 469249972,
      "in_reply_to_id" : 442258785,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTk3Mg==",
      "original_commit_id" : "a2931c174ee9a1dfe2fed0b705cec891f421dc89",
      "original_line" : 259,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 465903698,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/469249972",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Improved PR; followed recommendations in various comments. Fixed many nits.",
      "created_at" : "2020-08-12T14:16:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-672898394",
      "id" : 672898394,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3Mjg5ODM5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-12T14:16:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672898394",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nice. Will re-review soon.",
      "created_at" : "2020-08-13T08:33:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-673342550",
      "id" : 673342550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MzM0MjU1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-13T08:33:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673342550",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I've compiled, and run the unit tests with no issues at b1ef92a on macOS Catalina.",
      "created_at" : "2020-08-21T01:09:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-677982274",
      "id" : 677982274,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3Nzk4MjI3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-21T01:09:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677982274",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/36807746?v=4",
         "events_url" : "https://api.github.com/users/jules23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jules23/followers",
         "following_url" : "https://api.github.com/users/jules23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jules23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jules23",
         "id" : 36807746,
         "login" : "jules23",
         "node_id" : "MDQ6VXNlcjM2ODA3NzQ2",
         "organizations_url" : "https://api.github.com/users/jules23/orgs",
         "received_events_url" : "https://api.github.com/users/jules23/received_events",
         "repos_url" : "https://api.github.com/users/jules23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jules23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jules23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jules23"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r474682022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474682022"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit 52a2032 \"Add BIP324 v2 transport serializer and deserializer\"\r\n\r\n<details><summary>some suggested changes in <code>src/net.h::V2TransportDeserializer</code></summary><p>\r\n\r\n```diff\r\ndiff --git a/src/net.h b/src/net.h\r\nindex bf909d82d7..ee2f174ad8 100644\r\n--- a/src/net.h\r\n+++ b/src/net.h\r\n@@ -790,19 +790,19 @@ public:\r\n         m_data_pos = 0;\r\n         m_rekey_flag = false;\r\n     }\r\n-    bool Complete() const\r\n+    bool Complete() const override\r\n     {\r\n         if (!m_in_data) {\r\n             return false;\r\n         }\r\n         return (m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN == m_data_pos);\r\n     }\r\n-    void SetVersion(int nVersionIn)\r\n+    void SetVersion(int nVersionIn) override\r\n     {\r\n         vRecv.SetVersion(nVersionIn);\r\n     }\r\n-    int Read(const char* pch, unsigned int nBytes);\r\n-    CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time);\r\n+    int Read(const char* pch, unsigned int nBytes) override;\r\n+    CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time) override;\r\n };\r\n\r\n /** The TransportSerializer prepares messages for the network transport\r\n```\r\n</p></details>\r\n\r\nto fix these\r\n\r\n<details><summary>gcc/clang compiler warnings/errors</summary><p>\r\n\r\n```\r\nIn file included from init.cpp:29:\r\n./net.h:793:10: error: âvirtual bool V2TransportDeserializer::Complete() constâ can be marked override [-Werror=suggest-override]\r\n  793 |     bool Complete() const\r\n      |          ^~~~~~~~\r\n./net.h:800:10: error: âvirtual void V2TransportDeserializer::SetVersion(int)â can be marked override [-Werror=suggest-override]\r\n  800 |     void SetVersion(int nVersionIn)\r\n      |          ^~~~~~~~~~\r\n./net.h:804:9: error: âvirtual int V2TransportDeserializer::Read(const char*, unsigned int)â can be marked override [-Werror=suggest-override]\r\n  804 |     int Read(const char* pch, unsigned int nBytes);\r\n      |         ^~~~\r\n./net.h:805:17: error: âvirtual CNetMessage V2TransportDeserializer::GetMessage(const unsigned char (&)[4], std::chrono::microseconds)â can be marked override [-Werror=suggest-override]\r\n  805 |     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time);\r\n      |                 ^~~~~~~~~~\r\ncc1plus: some warnings being treated as errors\r\nmake[2]: *** [Makefile:11597: libbitcoin_server_a-init.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nIn file included from net.cpp:10:\r\n./net.h:793:10: error: âvirtual bool V2TransportDeserializer::Complete() constâ can be marked override [-Werror=suggest-override]\r\n  793 |     bool Complete() const\r\n      |          ^~~~~~~~\r\n./net.h:800:10: error: âvirtual void V2TransportDeserializer::SetVersion(int)â can be marked override [-Werror=suggest-override]\r\n  800 |     void SetVersion(int nVersionIn)\r\n      |          ^~~~~~~~~~\r\n./net.h:804:9: error: âvirtual int V2TransportDeserializer::Read(const char*, unsigned int)â can be marked override [-Werror=suggest-override]\r\n  804 |     int Read(const char* pch, unsigned int nBytes);\r\n      |         ^~~~\r\n./net.h:805:17: error: âvirtual CNetMessage V2TransportDeserializer::GetMessage(const unsigned char (&)[4], std::chrono::microseconds)â can be marked override [-Werror=suggest-override]\r\n  805 |     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time);\r\n      |                 ^~~~~~~~~~\r\nnet.cpp: In member function âvirtual CNetMessage V2TransportDeserializer::GetMessage(const unsigned char (&)[4], std::chrono::microseconds)â:\r\nnet.cpp:839:46: warning: comparison is always true due to limited range of data type [-Wtype-limits]\r\n  839 |         if (!valid_header && size_or_shortid >= 0) {\r\n      |                              ~~~~~~~~~~~~~~~~^~~~\r\ncc1plus: some warnings being treated as errors\r\nmake[2]: *** [Makefile:11653: libbitcoin_server_a-net.o] Error 1\r\nIn file included from ./net_processing.h:10,\r\n                 from net_processing.cpp:6:\r\n./net.h:793:10: error: âvirtual bool V2TransportDeserializer::Complete() constâ can be marked override [-Werror=suggest-override]\r\n  793 |     bool Complete() const\r\n      |          ^~~~~~~~\r\n./net.h:800:10: error: âvirtual void V2TransportDeserializer::SetVersion(int)â can be marked override [-Werror=suggest-override]\r\n  800 |     void SetVersion(int nVersionIn)\r\n      |          ^~~~~~~~~~\r\n./net.h:804:9: error: âvirtual int V2TransportDeserializer::Read(const char*, unsigned int)â can be marked override [-Werror=suggest-override]\r\n  804 |     int Read(const char* pch, unsigned int nBytes);\r\n      |         ^~~~\r\n./net.h:805:17: error: âvirtual CNetMessage V2TransportDeserializer::GetMessage(const unsigned char (&)[4], std::chrono::microseconds)â can be marked override [-Werror=suggest-override]\r\n  805 |     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time);\r\n      |                 ^~~~~~~~~~\r\ncc1plus: some warnings being treated as errors\r\nmake[2]: *** [Makefile:11667: libbitcoin_server_a-net_processing.o] Error 1\r\nmake[2]: Leaving directory '/home/jon/projects/bitcoin/bitcoin/src'\r\nmake[1]: *** [Makefile:18858: all-recursive] Error 1\r\nmake[1]: Leaving directory '/home/jon/projects/bitcoin/bitcoin/src'\r\nmake: *** [Makefile:790: all-recursive] Error 1\r\n```\r\n</p></details>\r\n\r\nappeased the compiler and moving forward with review",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-21T13:02:12Z",
      "diff_hunk" : "@@ -743,6 +745,66 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+/** V2TransportDeserializer is a transport deserializer after BIP324 */\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;  // recorded time when the last rekey happened\n+    uint256 m_session_id;           // the encryption session_id, relevant for rekeying\n+    uint64_t m_payload_seqnr = 0;   // sequence number for the payload\n+    uint64_t m_aad_seqnr = 0;       // sequence number for the packet length (AD)\n+    int m_aad_pos = 0;              // position in the aad keystream\n+    bool m_in_data = false;         // parsing header (false) or data (true)\n+    uint32_t m_message_size = 0;    // expected message size\n+    CDataStream vRecv;              // received message data\n+    unsigned int m_hdr_pos = 0;     // read pos in header\n+    unsigned int m_data_pos = 0;    // read pos in data\n+    bool m_rekey_flag = false;      // rekey in message detected\n+\n+public:\n+    V2TransportDeserializer(const CPrivKey& k1, const CPrivKey& k2, const uint256& session_id) : m_aead(new ChaCha20Poly1305AEAD(k1.data(), k1.size(), k2.data(), k2.size())), m_aead_k1(k1), m_aead_k2(k2), m_time_last_rekey(GetTime()), m_session_id(session_id), vRecv(SER_NETWORK, INIT_PROTO_VERSION)\n+    {\n+        Reset();\n+    }\n+\n+    void Reset()\n+    {\n+        vRecv.clear();\n+        vRecv.resize(CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        m_in_data = false;\n+        m_hdr_pos = 0;\n+        m_message_size = 0;\n+        m_data_pos = 0;\n+        m_rekey_flag = false;\n+    }\n+    bool Complete() const\n+    {\n+        if (!m_in_data) {\n+            return false;\n+        }\n+        return (m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN == m_data_pos);\n+    }\n+    void SetVersion(int nVersionIn)\n+    {\n+        vRecv.SetVersion(nVersionIn);\n+    }\n+    int Read(const char* pch, unsigned int nBytes);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r474682022",
      "id" : 474682022,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY4MjAyMg==",
      "original_commit_id" : "b1ef92ae52e7df88376dcc63507c50879fa15386",
      "original_line" : 804,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 472468219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474682022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r474684477"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474684477"
         }
      },
      "author_association" : "MEMBER",
      "body" : "When rebuilding, the compiler is warning about this now:\r\n```\r\nnet.cpp: In member function âvirtual CNetMessage V2TransportDeserializer::GetMessage(const unsigned char (&)[4], std::chrono::microseconds)â:\r\nnet.cpp:839:46: warning: comparison is always true due to limited range of data type [-Wtype-limits]\r\n  839 |         if (!valid_header && size_or_shortid >= 0) {\r\n      |                              ~~~~~~~~~~~~~~~~^~~~\r\n```\r\n",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-21T13:07:06Z",
      "diff_hunk" : "@@ -719,6 +723,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r474684477",
      "id" : 474684477,
      "in_reply_to_id" : 424750339,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY4NDQ3Nw==",
      "original_commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "original_line" : 839,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 472471550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474684477",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476212704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476212704"
         }
      },
      "author_association" : "MEMBER",
      "body" : "7fb32f34 nit, here and lines 387, 394, 418, and 499, prefix increment iterator `++i` preferred",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-25T06:43:30Z",
      "diff_hunk" : "@@ -316,4 +318,160 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+size_t read_message(std::unique_ptr<TransportDeserializer>& deserializer, const std::vector<unsigned char>& serialized_header, const CSerializedNetMsg& msg)\n+{\n+    size_t read_bytes = 0;\n+    if (serialized_header.size() > 0) read_bytes += deserializer->Read((const char*)serialized_header.data(), serialized_header.size());\n+    //  second: read the encrypted payload (if required)\n+    if (msg.data.size() > 0) read_bytes += deserializer->Read((const char*)msg.data.data(), msg.data.size());\n+    if (msg.data.size() > read_bytes && msg.data.size() - read_bytes > 0) read_bytes += deserializer->Read((const char*)msg.data.data() + read_bytes, msg.data.size() - read_bytes);\n+    return read_bytes;\n+}\n+\n+// use 32 byte keys with all zeros\n+static const CPrivKey k1(32, 0);\n+static const CPrivKey k2(32, 0);\n+static const uint256 session_id;\n+\n+void message_serialize_deserialize_test(bool v2, const std::vector<CSerializedNetMsg>& test_msgs)\n+{\n+    // construct the serializers\n+    std::unique_ptr<TransportSerializer> serializer;\n+    std::unique_ptr<TransportDeserializer> deserializer;\n+\n+    if (v2) {\n+        serializer = MakeUnique<V2TransportSerializer>(V2TransportSerializer(k1, k2, session_id));\n+        deserializer = MakeUnique<V2TransportDeserializer>(V2TransportDeserializer(k1, k2, session_id));\n+    } else {\n+        serializer = MakeUnique<V1TransportSerializer>(V1TransportSerializer());\n+        deserializer = MakeUnique<V1TransportDeserializer>(V1TransportDeserializer(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+    }\n+    // run a couple of times through all messages with the same AEAD instance\n+    for (unsigned int i = 0; i < 100; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476212704",
      "id" : 476212704,
      "line" : 951,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxMjcwNA==",
      "original_commit_id" : "b1ef92ae52e7df88376dcc63507c50879fa15386",
      "original_line" : 951,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 30,
      "pull_request_review_id" : 472606826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476212704",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476217691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476217691"
         }
      },
      "author_association" : "MEMBER",
      "body" : "2bc6e8b here in `GetMessage()`, as well as below, line 967 in `prepareForTransport`, `GetTime()` is deprecated per `util/time.h`:\r\n```cpp\r\n/**\r\n * DEPRECATED\r\n * Use either GetSystemTimeInSeconds (not mockable) or GetTime<T> (mockable)\r\n */\r\nint64_t GetTime();\r\n```\r\n",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-25T06:54:44Z",
      "diff_hunk" : "@@ -736,6 +740,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AAD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {\n+            valid_header = true;\n+            if (!GetCommandFromShortCommandID(size_or_shortid, command_name)) {\n+                // unknown-short-id\n+                //  results in a valid but unknown message (will be skipped)\n+                command_name = \"unknown-\" + ToString(size_or_shortid);\n+            }\n+        }\n+    }\n+    // increase the aad_pos and eventually the sequence number\n+    m_aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_aad_pos = 0;\n+        m_aad_seqnr++;\n+    }\n+    // increase the payload sequence number by 1\n+    m_payload_seqnr++;\n+\n+    // decompose a single CNetMessage from the TransportDeserializer\n+    CNetMessage msg(std::move(vRecv)); // result in a message with CDataStream with readpos pointing to the message payload\n+    msg.m_command = command_name;\n+\n+    // store state about valid header, netmagic and checksum\n+    msg.m_valid_header = valid_header; // not relevant for v2, always pass\n+    msg.m_valid_checksum = valid_checksum;\n+    msg.m_valid_netmagic = true; // not relevant for v2, always pass\n+\n+    // if we could successfully decrypt the message, the message no longer contains the \"header\" (AAD & MAC)\n+    // if failed to decrypt â which we tolerate at this point â we need to reduce the message size by the length of the AAD & MAC\n+    // to conform to the abstract TransportDeserializer protocol\n+    msg.m_message_size = valid_checksum ? msg.m_recv.size() : (msg.m_recv.size() - CHACHA20_POLY1305_AEAD_AAD_LEN - CHACHA20_POLY1305_AEAD_TAG_LEN);\n+    msg.m_raw_message_size = CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN; // raw wire size\n+\n+    const int64_t now = GetTime();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476217691",
      "id" : 476217691,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzY5MQ==",
      "original_commit_id" : "b1ef92ae52e7df88376dcc63507c50879fa15386",
      "original_line" : 925,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 472606826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476217691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476221476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476221476"
         }
      },
      "author_association" : "MEMBER",
      "body" : "2bc6e8bc6e9 perhaps set a default value for `m_session_id`",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-25T07:02:37Z",
      "diff_hunk" : "@@ -743,6 +745,66 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+/** V2TransportDeserializer is a transport deserializer after BIP324 */\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;  // recorded time when the last rekey happened\n+    uint256 m_session_id;           // the encryption session_id, relevant for rekeying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476221476",
      "id" : 476221476,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyMTQ3Ng==",
      "original_commit_id" : "b1ef92ae52e7df88376dcc63507c50879fa15386",
      "original_line" : 846,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 472606826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476221476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476221690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476221690"
         }
      },
      "author_association" : "MEMBER",
      "body" : "2bc6e8bc6e9 perhaps set a default value for `m_session_id`",
      "commit_id" : "6958c2237c0e5389e7017ebd66492cc4ce90b3e1",
      "created_at" : "2020-08-25T07:03:03Z",
      "diff_hunk" : "@@ -757,6 +819,27 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for a later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_encrypted = 0; //counter of bytes encrypted with same key\n+    int64_t m_time_last_rekey = 0; // recorded time when the last rekey happened\n+    uint256 m_session_id; // the encryption session_id, relevant for rekeying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r476221690",
      "id" : 476221690,
      "line" : 831,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyMTY5MA==",
      "original_commit_id" : "b1ef92ae52e7df88376dcc63507c50879fa15386",
      "original_line" : 830,
      "original_position" : 90,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : 91,
      "pull_request_review_id" : 472606826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-27T12:06:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476221690",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Two conversations with outstanding unresolved issues buried in the discussion above:\r\n\r\n- https://github.com/bitcoin/bitcoin/pull/18242#discussion_r424750339 - comparison always true\r\n\r\n- https://github.com/bitcoin/bitcoin/pull/18242#discussion_r418937474 - time clock attacks",
      "created_at" : "2020-08-25T11:45:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-679974920",
      "id" : 679974920,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3OTk3NDkyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-25T11:49:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/679974920",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r478349547"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478349547"
         }
      },
      "author_association" : "MEMBER",
      "body" : "AFAIK uint256 has always a default of zero.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-27T11:35:18Z",
      "diff_hunk" : "@@ -743,6 +745,66 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+/** V2TransportDeserializer is a transport deserializer after BIP324 */\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;  // recorded time when the last rekey happened\n+    uint256 m_session_id;           // the encryption session_id, relevant for rekeying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r478349547",
      "id" : 478349547,
      "in_reply_to_id" : 476221476,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0OTU0Nw==",
      "original_commit_id" : "b1ef92ae52e7df88376dcc63507c50879fa15386",
      "original_line" : 846,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 476630320,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478349547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r478366404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478366404"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I just removed the `size_or_shortid >= 0` check (your right,.. it's always true).\r\nThe `(!valid_header)` check is necessary though,... in case `vRecv >> size_or_shortid` failed (can't happen?!) or if it contains a value greater than 12 or if below 12, the remaining buffer doesn't have the expected size.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-27T12:05:02Z",
      "diff_hunk" : "@@ -719,6 +723,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, int64_t time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if encryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.\n+            valid_header = true;\n+\n+            // use direct read since we already read the varlens size uint8_t\n+            command_name.resize(size_or_shortid);\n+            vRecv.read(&command_name[0], size_or_shortid);\n+        }\n+        // try for short ID in case the first byte is a number larger than 12\n+        if (!valid_header && size_or_shortid >= 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r478366404",
      "id" : 478366404,
      "in_reply_to_id" : 424750339,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2NjQwNA==",
      "original_commit_id" : "b9468fa767d1daa08924a9fefe5227b2f6688e53",
      "original_line" : 839,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 476651620,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478366404",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r478730164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478730164"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, you are right; in `uint256.h` the default constructor zeroes it out with \n`memset(data, 0, sizeof(data));`.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-08-27T22:27:52Z",
      "diff_hunk" : "@@ -743,6 +745,66 @@ class V1TransportDeserializer final : public TransportDeserializer\n     CNetMessage GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time) override;\n };\n \n+// ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+// used to encrypt more than 2^70 bytes under the same {key, nonce}\n+// Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+static constexpr unsigned int REKEY_LIMIT_TIME = 3600;\n+static constexpr unsigned int REKEY_ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+static constexpr unsigned int REKEY_ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+static constexpr unsigned int MIN_REKEY_TIME = 10;                               // minimal rekey time to avoid DOS\n+\n+/** V2TransportDeserializer is a transport deserializer after BIP324 */\n+class V2TransportDeserializer : public TransportDeserializer\n+{\n+private:\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead;\n+    CPrivKey m_aead_k1; //keep the keys for later rekeying\n+    CPrivKey m_aead_k2;\n+    uint64_t m_bytes_decrypted = 0; // counter of bytes decrypted under the same key\n+    int64_t m_time_last_rekey = 0;  // recorded time when the last rekey happened\n+    uint256 m_session_id;           // the encryption session_id, relevant for rekeying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r478730164",
      "id" : 478730164,
      "in_reply_to_id" : 476221476,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMDE2NA==",
      "original_commit_id" : "b1ef92ae52e7df88376dcc63507c50879fa15386",
      "original_line" : 846,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 477126709,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/478730164",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-09-01T03:04:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-684166775",
      "id" : 684166775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NDE2Njc3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-01T03:04:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684166775",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.",
      "created_at" : "2020-09-03T15:53:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-686586509",
      "id" : 686586509,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NjU4NjUwOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-03T15:53:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686586509",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jonatack:\r\n* I think the \"always true comparison\" is fixed (#18242 (comment) - comparison always true). Agree?\r\n* The time clock attack is something that needs to be discussed first on the BIP draft (which is happening).",
      "created_at" : "2020-09-08T11:41:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-688812330",
      "id" : 688812330,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODgxMjMzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-08T11:41:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688812330",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @jonasschnelli, I've been planning to get back to this, and study Lloyd's last comment in the BIP draft as well.",
      "created_at" : "2020-09-08T12:58:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-688848674",
      "id" : 688848674,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODg0ODY3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-08T12:58:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688848674",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485704527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485704527"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The 4 bytes reservation is optimistically ? Maybe a ternary above to pick up between 1-byte short-ID and ASCII command string ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-09T15:30:27Z",
      "diff_hunk" : "@@ -751,6 +922,92 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    Optional<uint8_t> cmd_short_id = GetShortCommandIDFromCommand(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AAD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485704527",
      "id" : 485704527,
      "line" : 904,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNDUyNw==",
      "original_commit_id" : "e549e76f244fe4852141fe5331ef694b0b7d560a",
      "original_line" : 904,
      "original_position" : 218,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 152,
      "pull_request_review_id" : 485132207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485704527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485708764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485708764"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add a constant for `32 * 1024` as we have for time ? Also do we have a setting prefix for testing only flag like `netencryptionfastrekey` to underscore further it's a test-only flag ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-09T15:36:31Z",
      "diff_hunk" : "@@ -751,6 +922,92 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    Optional<uint8_t> cmd_short_id = GetShortCommandIDFromCommand(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AAD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id.value();\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.m_type;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    const std::chrono::milliseconds now = GetTime<std::chrono::milliseconds>(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;\n+    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? REKEY_LIMIT_TIME_TEST : REKEY_LIMIT_TIME)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485708764",
      "id" : 485708764,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwODc2NA==",
      "original_commit_id" : "e549e76f244fe4852141fe5331ef694b0b7d560a",
      "original_line" : 971,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 485132207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485708764",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485723574"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485723574"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Add reference to BIP324 compliance.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-09T15:57:20Z",
      "diff_hunk" : "@@ -798,6 +861,27 @@ class V1TransportSerializer  : public TransportSerializer {\n     void prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) override;\n };\n \n+class V2TransportSerializer : public TransportSerializer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485723574",
      "id" : 485723574,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcyMzU3NA==",
      "original_commit_id" : "e549e76f244fe4852141fe5331ef694b0b7d560a",
      "original_line" : 891,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 485132207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485723574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485724726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485724726"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"with a default pre-shared one as provided by BIP324\"?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-09T15:59:02Z",
      "diff_hunk" : "@@ -251,7 +252,17 @@ extern const char* WTXIDRELAY;\n }; // namespace NetMsgType\n \n /* Get a vector of all valid message types (see above) */\n-const std::vector<std::string>& getAllNetMessageTypes();\n+const std::map<uint8_t, std::string>& getAllNetMessageTypes();\n+\n+/** Short Command IDs are a low bandwidth representations of a message type\n+ *   The mapping is a peer to peer agreement",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485724726",
      "id" : 485724726,
      "line" : 270,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcyNDcyNg==",
      "original_commit_id" : "e549e76f244fe4852141fe5331ef694b0b7d560a",
      "original_line" : 270,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 16,
      "pull_request_review_id" : 485132207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485724726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485736126"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485736126"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I can't find this requirement in the BIP, not in \"Packet Handling\". Maybe you've already the change just withhold ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-09T16:11:28Z",
      "diff_hunk" : "@@ -718,6 +720,127 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485736126",
      "id" : 485736126,
      "in_reply_to_id" : 417833895,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczNjEyNg==",
      "original_commit_id" : "9f81125a9e2abc48789d02a42765f7fa0396ce49",
      "original_line" : 789,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 485132207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485736126",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485751513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485751513"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I compile without ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-09T16:28:44Z",
      "diff_hunk" : "@@ -42,6 +43,7 @@\n static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\");\n #endif\n \n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485751513",
      "id" : 485751513,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1MTUxMw==",
      "original_commit_id" : "e549e76f244fe4852141fe5331ef694b0b7d560a",
      "original_line" : 37,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 485132207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485751513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485754978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485754978"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not straightforward to understand IMO. Maybe \"first byte encode the char-length of a string command bounded between 1 to 12\" ?",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-09T16:32:44Z",
      "diff_hunk" : "@@ -738,6 +742,173 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     return msg;\n }\n \n+int V2TransportDeserializer::Read(const char* pch, unsigned int bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+            return copy_bytes;\n+        }\n+\n+        // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+        // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+        if (!m_aead->GetLength(&m_message_size, m_aad_seqnr, m_aad_pos, (const uint8_t*)vRecv.data())) {\n+            return -1;\n+        }\n+\n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = static_cast<bool>(m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected\\n\");\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        // Read the message data (command, payload & MAC)\n+        const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+        const unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+CNetMessage V2TransportDeserializer::GetMessage(const CMessageHeader::MessageStartChars& message_start, std::chrono::microseconds time)\n+{\n+    // In v2, vRecv contains the encrypted payload plus the MAC tag (1+bytes serialized message command + ? bytes message payload + 16 byte mac tag)\n+    assert(Complete());\n+\n+    // defensive decoding (MAC check, decryption, command deserialization)\n+    // we'll always return a CNetMessage (even if decryption fails), we always increase the AEAD sequence numbers\n+    bool valid_checksum = false;\n+    bool valid_header = false;\n+    std::string command_name;\n+\n+    // count bytes we decrypted including MAC tag + AAD\n+    m_bytes_decrypted += vRecv.size();\n+\n+    if (m_aead->Crypt(m_payload_seqnr, m_aad_seqnr, m_aad_pos, (unsigned char*)vRecv.data(), vRecv.size(), (const uint8_t*)vRecv.data(), vRecv.size(), false)) {\n+        // MAC check was successful\n+        valid_checksum = true;\n+\n+        // okay, we could decrypt it, now remove packet length and MAC tag\n+        assert(vRecv.size() > CHACHA20_POLY1305_AEAD_AAD_LEN + CHACHA20_POLY1305_AEAD_TAG_LEN);\n+        // CDataStream::erase at the begin will just increase the read pos\n+        vRecv.erase(vRecv.begin(), vRecv.begin() + CHACHA20_POLY1305_AEAD_AAD_LEN);\n+        vRecv.erase(vRecv.end() - CHACHA20_POLY1305_AEAD_TAG_LEN, vRecv.end());\n+\n+        uint8_t size_or_shortid = 0;\n+        try {\n+            vRecv >> size_or_shortid;\n+        } catch (const std::ios_base::failure&) {\n+            LogPrint(BCLog::NET, \"Invalid command name\\n\");\n+        }\n+        if (size_or_shortid > 0 && size_or_shortid <= NET_P2P_V2_CMD_MAX_CHARS_SIZE && vRecv.size() >= size_or_shortid) {\n+            // first byte is a number between 1 and 12. Must be a string command.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r485754978",
      "id" : 485754978,
      "line" : 848,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1NDk3OA==",
      "original_commit_id" : "e549e76f244fe4852141fe5331ef694b0b7d560a",
      "original_line" : 848,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 96,
      "pull_request_review_id" : 485132207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485754978",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r486191890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486191890"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I was trying to avoid additional constants for internal test purposes only. Sadly, we don't have a general test-only flag so far.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-10T09:19:54Z",
      "diff_hunk" : "@@ -751,6 +922,92 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    Optional<uint8_t> cmd_short_id = GetShortCommandIDFromCommand(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AAD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);\n+    // LE serialize the 24bits length\n+    // we do \"manually\" encode this since there is no helper for 24bit serialization\n+    packet_length = htole32(packet_length);\n+    memcpy(serialized_header.data(), &packet_length, 3);\n+\n+    // append the short-ID or (eventually) the varstr of the command\n+    CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_header, 3);\n+    if (cmd_short_id) {\n+        // append the single byte short ID...\n+        vector_writer << cmd_short_id.value();\n+    } else {\n+        // or the ASCII command string\n+        vector_writer << msg.m_type;\n+    }\n+\n+    // insert header directly into the CSerializedNetMsg data buffer (insert at begin)\n+    // TODO: if we refactor the ChaCha20Poly1350 crypt function to allow separate buffers for\n+    //       the AD, payload and MAC, we could avoid a insert and thus a potential reallocation\n+    msg.data.insert(msg.data.begin(), serialized_header.begin(), serialized_header.end());\n+\n+    // resize the message buffer to make space for the MAC tag\n+    msg.data.resize(msg.data.size() + CHACHA20_POLY1305_AEAD_TAG_LEN, 0);\n+\n+    // length is only allowed up to 2^23 (bit24 is used for indicating rekey)\n+    bool bit24 = msg.data[2] & (1u << 7);\n+    assert(!bit24);\n+\n+    // check if we should rekey after this message\n+    const std::chrono::milliseconds now = GetTime<std::chrono::milliseconds>(); //TODO: check how expansive the GetTime call is and if it is avoidable\n+    bool rekey = false;\n+    if (m_bytes_encrypted >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? 32 * 1024 : REKEY_LIMIT_BYTES) || now - m_time_last_rekey >= (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) ? REKEY_LIMIT_TIME_TEST : REKEY_LIMIT_TIME)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r486191890",
      "id" : 486191890,
      "in_reply_to_id" : 485708764,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5MTg5MA==",
      "original_commit_id" : "e549e76f244fe4852141fe5331ef694b0b7d560a",
      "original_line" : 971,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 485743701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486191890",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r486194276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486194276"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do you mean reserve additional bytes to avoid further buffer re-allocations? I guess 4 bytes will be sufficient for a couple of messages (like `ping`, `sendheaders`, etc.). I would also expect that the internal allocation is larger then 4 bytes anyways. Though I'm not opposed to reserve always a minimum of 64bytes which should find a single inv (most sent message?).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-10T09:23:42Z",
      "diff_hunk" : "@@ -751,6 +922,92 @@ void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vec\n     CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, header, 0, hdr};\n }\n \n+void V2TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header)\n+{\n+    size_t serialized_command_size = 1; // short-IDs are 1 byte\n+    Optional<uint8_t> cmd_short_id = GetShortCommandIDFromCommand(msg.m_type);\n+    if (!cmd_short_id) {\n+        // message command without an assigned short-ID\n+        assert(msg.m_type.size() <= NET_P2P_V2_CMD_MAX_CHARS_SIZE);\n+        // encode as varstr, max 12 chars\n+        serialized_command_size = ::GetSerializeSize(msg.m_type, PROTOCOL_VERSION);\n+    }\n+    // prepare the packet length that will later be encrypted and part of the MAC (AD)\n+    // the packet length excludes the 16 byte MAC tag\n+    uint32_t packet_length = serialized_command_size + msg.data.size();\n+\n+    // prepare the packet length & message command and reserve 4 bytes (3bytes AAD + 1byte short-ID)\n+    std::vector<unsigned char> serialized_header(CHACHA20_POLY1305_AEAD_AAD_LEN + 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r486194276",
      "id" : 486194276,
      "in_reply_to_id" : 485704527,
      "line" : 904,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NDI3Ng==",
      "original_commit_id" : "e549e76f244fe4852141fe5331ef694b0b7d560a",
      "original_line" : 904,
      "original_position" : 218,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 152,
      "pull_request_review_id" : 485746707,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486194276",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r486199951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486199951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The added code uses functions from `https://en.cppreference.com/w/cpp/header/algorithm`. Per the developer notes, every `.cpp` and `.h` file should `#include` every header file it directly uses classes, functions or other definitions from, even if those headers are already included indirectly through other headers. ",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-09-10T09:32:45Z",
      "diff_hunk" : "@@ -42,6 +43,7 @@\n static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\");\n #endif\n \n+#include <algorithm>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r486199951",
      "id" : 486199951,
      "in_reply_to_id" : 485751513,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5OTk1MQ==",
      "original_commit_id" : "e549e76f244fe4852141fe5331ef694b0b7d560a",
      "original_line" : 37,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 485754085,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/486199951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-09-15T11:40:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-692659793",
      "id" : 692659793,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MjY1OTc5Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-15T11:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692659793",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r516582625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516582625"
         }
      },
      "author_association" : "MEMBER",
      "body" : "88f1e620b maybe a typo \r\n```suggestion\r\ntest_fuzz_out_point_deserialize_SOURCES = test/fuzz/deserialize.cpp\r\n```",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-11-03T10:59:48Z",
      "diff_hunk" : "@@ -758,13 +759,20 @@ test_fuzz_out_point_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -D\n test_fuzz_out_point_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_out_point_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_out_point_deserialize_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\n+test_fuzz_out_point_de=serialize_SOURCES = test/fuzz/deserialize.cpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r516582625",
      "id" : 516582625,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4MjYyNQ==",
      "original_commit_id" : "2580d64c9fa1c32334fcca52bfb62b1c80d80625",
      "original_line" : 762,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/Makefile.test.include",
      "position" : null,
      "pull_request_review_id" : 522385645,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516582625",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r516587453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516587453"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed. Rebase mistake. Fixed now.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-11-03T11:08:24Z",
      "diff_hunk" : "@@ -758,13 +759,20 @@ test_fuzz_out_point_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -D\n test_fuzz_out_point_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_out_point_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_out_point_deserialize_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\n+test_fuzz_out_point_de=serialize_SOURCES = test/fuzz/deserialize.cpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r516587453",
      "id" : 516587453,
      "in_reply_to_id" : 516582625,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NzQ1Mw==",
      "original_commit_id" : "2580d64c9fa1c32334fcca52bfb62b1c80d80625",
      "original_line" : 762,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/Makefile.test.include",
      "position" : null,
      "pull_request_review_id" : 522391917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516587453",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r516613219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516613219"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Noting `git range-diff 218fe60 e549e76 76ce46f` here for my re-reviewing. Would be great to get this in soon.",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2020-11-03T11:56:41Z",
      "diff_hunk" : "@@ -758,13 +759,20 @@ test_fuzz_out_point_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -D\n test_fuzz_out_point_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_out_point_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_out_point_deserialize_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\n+test_fuzz_out_point_de=serialize_SOURCES = test/fuzz/deserialize.cpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r516613219",
      "id" : 516613219,
      "in_reply_to_id" : 516582625,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxMzIxOQ==",
      "original_commit_id" : "2580d64c9fa1c32334fcca52bfb62b1c80d80625",
      "original_line" : 762,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/Makefile.test.include",
      "position" : null,
      "pull_request_review_id" : 522425070,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-20T09:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/516613219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "IRC discussion today about rekey implementation: http://www.erisian.com.au/bitcoin-core-dev/log-2020-11-03.html#l-504",
      "created_at" : "2020-11-03T16:34:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-721239244",
      "id" : 721239244,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMTIzOTI0NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-03T16:34:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/721239244",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-11-20T07:17:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-730956266",
      "id" : 730956266,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMDk1NjI2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-20T07:17:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730956266",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonasschnelli Do you think you could summarize / talk about what is blocking this PR from moving forward at this point? ",
      "created_at" : "2020-12-15T02:58:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-745019545",
      "id" : 745019545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTAxOTU0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T02:58:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745019545",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@PastaPastaPasta: there is an attempt to overhaul and optimise the AEAD construct. I'd like to work that into the BIP. See https://gist.github.com/jonasschnelli/c530ea8421b8d0e80c51486325587c52 for discussion.",
      "created_at" : "2020-12-15T07:23:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-745106873",
      "id" : 745106873,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTEwNjg3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T07:23:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745106873",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-01-26T09:08:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-767405698",
      "id" : 767405698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2NzQwNTY5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-26T09:08:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767405698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r592829922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592829922"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2021-03-12T00:38:58Z",
      "diff_hunk" : "@@ -17,26 +17,36 @@ void initialize_p2p_transport_deserializer()\n     SelectParams(CBaseChainParams::REGTEST);\n }\n \n-FUZZ_TARGET_INIT(p2p_transport_deserializer, initialize_p2p_transport_deserializer)\n-{\n-    // Construct deserializer, with a dummy NodeId\n-    V1TransportDeserializer deserializer{Params(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION};\n-    Span<const uint8_t> msg_bytes{buffer};\n+void test_deserializer(std::unique_ptr<TransportDeserializer>& deserializer, Span<const uint8_t> msg_bytes, const int header_size) {\n+    size_t original_size = msg_bytes.size();\n     while (msg_bytes.size() > 0) {\n-        const int handled = deserializer.Read(msg_bytes);\n+        const int handled = deserializer->Read(msg_bytes);\n         if (handled < 0) {\n             break;\n         }\n-        if (deserializer.Complete()) {\n+        if (deserializer->Complete()) {\n             const std::chrono::microseconds m_time{std::numeric_limits<int64_t>::max()};\n             uint32_t out_err_raw_size{0};\n-            Optional<CNetMessage> result{deserializer.GetMessage(m_time, out_err_raw_size)};\n+            Optional<CNetMessage> result{deserializer->GetMessage(m_time, out_err_raw_size)};\n             if (result) {\n                 assert(result->m_command.size() <= CMessageHeader::COMMAND_SIZE);\n-                assert(result->m_raw_message_size <= buffer.size());\n-                assert(result->m_raw_message_size == CMessageHeader::HEADER_SIZE + result->m_message_size);\n+                assert(result->m_raw_message_size <= original_size);\n+                assert(result->m_raw_message_size == header_size + result->m_message_size);\n                 assert(result->m_time == m_time);\n             }\n         }\n     }\n }\n+FUZZ_TARGET_INIT(p2p_transport_deserializer, initialize_p2p_transport_deserializer)\n+{\n+    // Construct deserializer, with a dummy NodeId\n+    std::unique_ptr<TransportDeserializer> v1_deserializer = MakeUnique<V1TransportDeserializer>(Params(), (NodeId)0, SER_NETWORK, INIT_PROTO_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r592829922",
      "id" : 592829922,
      "line" : 43,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjgyOTkyMg==",
      "original_commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "original_line" : 43,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/test/fuzz/p2p_transport_deserializer.cpp",
      "position" : 37,
      "pull_request_review_id" : 610359701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-12T00:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592829922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r594009430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594009430"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please [use `std::optional` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/optional.h#L12).",
      "commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "created_at" : "2021-03-15T02:18:10Z",
      "diff_hunk" : "@@ -767,6 +770,165 @@ Optional<CNetMessage> V1TransportDeserializer::GetMessage(const std::chrono::mic\n     return msg;\n }\n \n+int V2TransportDeserializer::readHeader(Span<const uint8_t> msg_bytes) {\n+    // copy data to temporary parsing buffer\n+    const unsigned int remaining = CHACHA20_POLY1305_AEAD_AAD_LEN - m_hdr_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    memcpy(&vRecv[m_hdr_pos], msg_bytes.data(), copy_bytes);\n+    m_hdr_pos += copy_bytes;\n+\n+    // if AAD incomplete, exit\n+    if (m_hdr_pos < CHACHA20_POLY1305_AEAD_AAD_LEN) {\n+        return copy_bytes;\n+    }\n+\n+    // we got the AAD bytes at this point (3 bytes encrypted packet length)\n+    // we keep the sequence numbers unchanged at this point. Once the message is authenticated and decrypted, we increase the sequence numbers (or the aad_pos)\n+    if (!m_aead->DecryptLength(&m_message_size, (const uint8_t*)vRecv.data())) {\n+        return -1;\n+    }\n+\n+    // reject messages larger than MAX_SIZE\n+    if (m_message_size > MAX_SIZE) {\n+        return -1;\n+    }\n+\n+    // switch state to reading message data\n+    m_in_data = true;\n+\n+    return copy_bytes;\n+}\n+int V2TransportDeserializer::readData(Span<const uint8_t> msg_bytes) {\n+    // Read the message data (command, payload & MAC)\n+    const unsigned int remaining = m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN - m_data_pos;\n+    const unsigned int copy_bytes = std::min<unsigned int>(remaining, msg_bytes.size());\n+\n+    // extend buffer, respect previous copied AAD part\n+    if (vRecv.size() < CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+        vRecv.resize(std::min(CHACHA20_POLY1305_AEAD_AAD_LEN + m_message_size + CHACHA20_POLY1305_AEAD_TAG_LEN, CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + CHACHA20_POLY1305_AEAD_TAG_LEN));\n+    }\n+\n+    memcpy(&vRecv[CHACHA20_POLY1305_AEAD_AAD_LEN + m_data_pos], msg_bytes.data(), copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+Optional<CNetMessage> V2TransportDeserializer::GetMessage(std::chrono::microseconds time, uint32_t& out_err_raw_size)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#discussion_r594009430",
      "id" : 594009430,
      "line" : 819,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDAwOTQzMA==",
      "original_commit_id" : "9e81bc49b1de0e084fdc7baeb48bb39b8550ca89",
      "original_line" : 819,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 67,
      "pull_request_review_id" : 611782213,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18242",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-15T02:18:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594009430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My understanding is that someone else is helping with / taking over these changes, and that the BIP is still being overhauled. \r\nI think we'll be better off with new PRs, and clean discussion when work on the implementation resumes in this repo.\r\nChanges from here are be cherry-picked if / when needed. So I'm going to close this PR for now. ",
      "created_at" : "2021-08-18T12:24:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-901069138",
      "id" : 901069138,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "IC_kwDOABII5841tTlS",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-18T12:24:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/901069138",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "FWIW, I reviewed this repeatedly, hosted a review club meeting on BIP324 (https://bitcoincore.reviews/16202), and proposed a few times to @jonasschnelli to help move this forward. The reply was that help wasn't needed. So I am curious when that changed and who is helping with it, as little seems to be happening?",
      "created_at" : "2021-08-18T13:12:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18242#issuecomment-901104043",
      "id" : 901104043,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18242",
      "node_id" : "IC_kwDOABII5841tcGr",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-18T13:12:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/901104043",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
