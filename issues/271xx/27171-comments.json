[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [glozow](https://github.com/bitcoin/bitcoin/pull/27171#pullrequestreview-1331143909), [MarcoFalke](https://github.com/bitcoin/bitcoin/pull/27171#pullrequestreview-1334770569) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n",
      "created_at" : "2023-02-28T00:44:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27171#issuecomment-1447354758",
      "id" : 1447354758,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27171",
      "node_id" : "IC_kwDOABII585WROGG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1447354758/reactions"
      },
      "updated_at" : "2023-03-10T12:26:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1447354758",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27171#discussion_r1126801973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27171"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1126801973"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure if I'm misunderstanding this comment but afaik the reason is that txsize is max(serialized size, \"sigop\" size), not that fees have any impact?",
      "commit_id" : "89cd20cbedbba344bab92dd1d71dac9c84320a70",
      "created_at" : "2023-03-06T17:34:19Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sigop limit mempool policy (`-bytespersigop` parameter)\"\"\"\n+from math import ceil\n+\n+from test_framework.messages import (\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKSIG,\n+    OP_ENDIF,\n+    OP_FALSE,\n+    OP_IF,\n+    OP_RETURN,\n+    OP_TRUE,\n+)\n+from test_framework.script_util import (\n+    script_to_p2wsh_script,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+DEFAULT_BYTES_PER_SIGOP = 20  # default setting\n+\n+\n+class BytesPerSigOpTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # allow large datacarrier output to pad transactions\n+        self.extra_args = [['-datacarriersize=100000']]\n+\n+    def create_p2wsh_spending_tx(self, witness_script, output_script):\n+        \"\"\"Create a 1-input-1-output P2WSH spending transaction with only the\n+           witness script in the witness stack and the given output script.\"\"\"\n+        # create P2WSH address and fund it via MiniWallet first\n+        txid, vout = self.wallet.send_to(\n+            from_node=self.nodes[0],\n+            scriptPubKey=script_to_p2wsh_script(witness_script),\n+            amount=1000000,\n+        )\n+\n+        # create spending transaction\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(txid, 16), vout))]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [bytes(witness_script)]\n+        tx.vout = [CTxOut(500000, output_script)]\n+        return tx\n+\n+    def test_sigops_limit(self, bytes_per_sigop, num_sigops):\n+        sigop_equivalent_vsize = ceil(num_sigops * bytes_per_sigop / WITNESS_SCALE_FACTOR)\n+        self.log.info(f\"- {num_sigops} sigops (equivalent size of {sigop_equivalent_vsize} vbytes)\")\n+\n+        # create a template tx with the specified sigop cost in the witness script\n+        # (note that the sigops count even though being in a branch that's not executed)\n+        num_multisigops = num_sigops // 20\n+        num_singlesigops = num_sigops % 20\n+        witness_script = CScript(\n+            [OP_FALSE, OP_IF] +\n+            [OP_CHECKMULTISIG]*num_multisigops +\n+            [OP_CHECKSIG]*num_singlesigops +\n+            [OP_ENDIF, OP_TRUE]\n+        )\n+        # use a 256-byte data-push as lower bound in the output script, in order\n+        # to avoid having to compensate for tx size changes caused by varying\n+        # length serialization sizes (both for scriptPubKey and data-push lengths)\n+        tx = self.create_p2wsh_spending_tx(witness_script, CScript([OP_RETURN, b'X'*256]))\n+\n+        # bump the tx to reach the sigop-limit equivalent size by padding the datacarrier output\n+        assert_greater_than_or_equal(sigop_equivalent_vsize, tx.get_vsize())\n+        vsize_to_pad = sigop_equivalent_vsize - tx.get_vsize()\n+        tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'X'*(256+vsize_to_pad)])\n+        assert_equal(sigop_equivalent_vsize, tx.get_vsize())\n+\n+        res = self.nodes[0].testmempoolaccept([tx.serialize().hex()])[0]\n+        assert_equal(res['allowed'], True)\n+        assert_equal(res['vsize'], sigop_equivalent_vsize)\n+\n+        # increase the tx's vsize to be right above the sigop-limit equivalent size\n+        # => tx's vsize in mempool should also grow accordingly\n+        tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'X'*(256+vsize_to_pad+1)])\n+        res = self.nodes[0].testmempoolaccept([tx.serialize().hex()])[0]\n+        assert_equal(res['allowed'], True)\n+        assert_equal(res['vsize'], sigop_equivalent_vsize+1)\n+\n+        # decrease the tx's vsize to be right below the sigop-limit equivalent size\n+        # => tx's vsize in mempool should stick at the sigop-limit equivalent\n+        # bytes level (i.e. exceeding the sigop limit is possible, but has to\n+        # be compensated by higher fees)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27171#discussion_r1126801973",
      "id" : 1126801973,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DKaI1",
      "original_commit_id" : "4ff0a260e877937ecdb13d183884fe62579f5c7f",
      "original_line" : 103,
      "original_position" : 103,
      "original_start_line" : 102,
      "path" : "test/functional/mempool_sigoplimit.py",
      "position" : null,
      "pull_request_review_id" : 1326851430,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27171",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1126801973/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-06T17:43:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1126801973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27171#discussion_r1127302187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27171"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1127302187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The intention was to express the implication of exceeding the sig-op limit from a user's perspective (tx is treated as larger than it's serialized vsize => more fees needed to reach the same fee-rate; or as PR desc of #8365 put it \"high-sigop transactions [...] need to pay a fee corresponding to the maximally-used resource.\"). Agree that the comment is rather misleading and not very helpful for the test, replaced it.\r\n\r\nGenerally struggled a bit with terminology for this PR (not even sure if talking about a \"limit\" is proper, usually we reject txs from mempool if limits are exceeded), suggestions of course very welcome.",
      "commit_id" : "89cd20cbedbba344bab92dd1d71dac9c84320a70",
      "created_at" : "2023-03-07T03:25:47Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sigop limit mempool policy (`-bytespersigop` parameter)\"\"\"\n+from math import ceil\n+\n+from test_framework.messages import (\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKSIG,\n+    OP_ENDIF,\n+    OP_FALSE,\n+    OP_IF,\n+    OP_RETURN,\n+    OP_TRUE,\n+)\n+from test_framework.script_util import (\n+    script_to_p2wsh_script,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+DEFAULT_BYTES_PER_SIGOP = 20  # default setting\n+\n+\n+class BytesPerSigOpTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # allow large datacarrier output to pad transactions\n+        self.extra_args = [['-datacarriersize=100000']]\n+\n+    def create_p2wsh_spending_tx(self, witness_script, output_script):\n+        \"\"\"Create a 1-input-1-output P2WSH spending transaction with only the\n+           witness script in the witness stack and the given output script.\"\"\"\n+        # create P2WSH address and fund it via MiniWallet first\n+        txid, vout = self.wallet.send_to(\n+            from_node=self.nodes[0],\n+            scriptPubKey=script_to_p2wsh_script(witness_script),\n+            amount=1000000,\n+        )\n+\n+        # create spending transaction\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(txid, 16), vout))]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [bytes(witness_script)]\n+        tx.vout = [CTxOut(500000, output_script)]\n+        return tx\n+\n+    def test_sigops_limit(self, bytes_per_sigop, num_sigops):\n+        sigop_equivalent_vsize = ceil(num_sigops * bytes_per_sigop / WITNESS_SCALE_FACTOR)\n+        self.log.info(f\"- {num_sigops} sigops (equivalent size of {sigop_equivalent_vsize} vbytes)\")\n+\n+        # create a template tx with the specified sigop cost in the witness script\n+        # (note that the sigops count even though being in a branch that's not executed)\n+        num_multisigops = num_sigops // 20\n+        num_singlesigops = num_sigops % 20\n+        witness_script = CScript(\n+            [OP_FALSE, OP_IF] +\n+            [OP_CHECKMULTISIG]*num_multisigops +\n+            [OP_CHECKSIG]*num_singlesigops +\n+            [OP_ENDIF, OP_TRUE]\n+        )\n+        # use a 256-byte data-push as lower bound in the output script, in order\n+        # to avoid having to compensate for tx size changes caused by varying\n+        # length serialization sizes (both for scriptPubKey and data-push lengths)\n+        tx = self.create_p2wsh_spending_tx(witness_script, CScript([OP_RETURN, b'X'*256]))\n+\n+        # bump the tx to reach the sigop-limit equivalent size by padding the datacarrier output\n+        assert_greater_than_or_equal(sigop_equivalent_vsize, tx.get_vsize())\n+        vsize_to_pad = sigop_equivalent_vsize - tx.get_vsize()\n+        tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'X'*(256+vsize_to_pad)])\n+        assert_equal(sigop_equivalent_vsize, tx.get_vsize())\n+\n+        res = self.nodes[0].testmempoolaccept([tx.serialize().hex()])[0]\n+        assert_equal(res['allowed'], True)\n+        assert_equal(res['vsize'], sigop_equivalent_vsize)\n+\n+        # increase the tx's vsize to be right above the sigop-limit equivalent size\n+        # => tx's vsize in mempool should also grow accordingly\n+        tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'X'*(256+vsize_to_pad+1)])\n+        res = self.nodes[0].testmempoolaccept([tx.serialize().hex()])[0]\n+        assert_equal(res['allowed'], True)\n+        assert_equal(res['vsize'], sigop_equivalent_vsize+1)\n+\n+        # decrease the tx's vsize to be right below the sigop-limit equivalent size\n+        # => tx's vsize in mempool should stick at the sigop-limit equivalent\n+        # bytes level (i.e. exceeding the sigop limit is possible, but has to\n+        # be compensated by higher fees)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27171#discussion_r1127302187",
      "id" : 1127302187,
      "in_reply_to_id" : 1126801973,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DMUQr",
      "original_commit_id" : "4ff0a260e877937ecdb13d183884fe62579f5c7f",
      "original_line" : 103,
      "original_position" : 103,
      "original_start_line" : 102,
      "path" : "test/functional/mempool_sigoplimit.py",
      "position" : null,
      "pull_request_review_id" : 1327576705,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27171",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1127302187/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-07T03:25:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1127302187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27171#discussion_r1129803993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27171"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129803993"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah I see where that comes from, thanks for clarifying! Comment does look better to me now.",
      "commit_id" : "89cd20cbedbba344bab92dd1d71dac9c84320a70",
      "created_at" : "2023-03-08T17:24:04Z",
      "diff_hunk" : "@@ -0,0 +1,125 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2023 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sigop limit mempool policy (`-bytespersigop` parameter)\"\"\"\n+from math import ceil\n+\n+from test_framework.messages import (\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxInWitness,\n+    CTxOut,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKSIG,\n+    OP_ENDIF,\n+    OP_FALSE,\n+    OP_IF,\n+    OP_RETURN,\n+    OP_TRUE,\n+)\n+from test_framework.script_util import (\n+    script_to_p2wsh_script,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+DEFAULT_BYTES_PER_SIGOP = 20  # default setting\n+\n+\n+class BytesPerSigOpTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # allow large datacarrier output to pad transactions\n+        self.extra_args = [['-datacarriersize=100000']]\n+\n+    def create_p2wsh_spending_tx(self, witness_script, output_script):\n+        \"\"\"Create a 1-input-1-output P2WSH spending transaction with only the\n+           witness script in the witness stack and the given output script.\"\"\"\n+        # create P2WSH address and fund it via MiniWallet first\n+        txid, vout = self.wallet.send_to(\n+            from_node=self.nodes[0],\n+            scriptPubKey=script_to_p2wsh_script(witness_script),\n+            amount=1000000,\n+        )\n+\n+        # create spending transaction\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(txid, 16), vout))]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [bytes(witness_script)]\n+        tx.vout = [CTxOut(500000, output_script)]\n+        return tx\n+\n+    def test_sigops_limit(self, bytes_per_sigop, num_sigops):\n+        sigop_equivalent_vsize = ceil(num_sigops * bytes_per_sigop / WITNESS_SCALE_FACTOR)\n+        self.log.info(f\"- {num_sigops} sigops (equivalent size of {sigop_equivalent_vsize} vbytes)\")\n+\n+        # create a template tx with the specified sigop cost in the witness script\n+        # (note that the sigops count even though being in a branch that's not executed)\n+        num_multisigops = num_sigops // 20\n+        num_singlesigops = num_sigops % 20\n+        witness_script = CScript(\n+            [OP_FALSE, OP_IF] +\n+            [OP_CHECKMULTISIG]*num_multisigops +\n+            [OP_CHECKSIG]*num_singlesigops +\n+            [OP_ENDIF, OP_TRUE]\n+        )\n+        # use a 256-byte data-push as lower bound in the output script, in order\n+        # to avoid having to compensate for tx size changes caused by varying\n+        # length serialization sizes (both for scriptPubKey and data-push lengths)\n+        tx = self.create_p2wsh_spending_tx(witness_script, CScript([OP_RETURN, b'X'*256]))\n+\n+        # bump the tx to reach the sigop-limit equivalent size by padding the datacarrier output\n+        assert_greater_than_or_equal(sigop_equivalent_vsize, tx.get_vsize())\n+        vsize_to_pad = sigop_equivalent_vsize - tx.get_vsize()\n+        tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'X'*(256+vsize_to_pad)])\n+        assert_equal(sigop_equivalent_vsize, tx.get_vsize())\n+\n+        res = self.nodes[0].testmempoolaccept([tx.serialize().hex()])[0]\n+        assert_equal(res['allowed'], True)\n+        assert_equal(res['vsize'], sigop_equivalent_vsize)\n+\n+        # increase the tx's vsize to be right above the sigop-limit equivalent size\n+        # => tx's vsize in mempool should also grow accordingly\n+        tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'X'*(256+vsize_to_pad+1)])\n+        res = self.nodes[0].testmempoolaccept([tx.serialize().hex()])[0]\n+        assert_equal(res['allowed'], True)\n+        assert_equal(res['vsize'], sigop_equivalent_vsize+1)\n+\n+        # decrease the tx's vsize to be right below the sigop-limit equivalent size\n+        # => tx's vsize in mempool should stick at the sigop-limit equivalent\n+        # bytes level (i.e. exceeding the sigop limit is possible, but has to\n+        # be compensated by higher fees)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27171#discussion_r1129803993",
      "id" : 1129803993,
      "in_reply_to_id" : 1126801973,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585DV3DZ",
      "original_commit_id" : "4ff0a260e877937ecdb13d183884fe62579f5c7f",
      "original_line" : 103,
      "original_position" : 103,
      "original_start_line" : 102,
      "path" : "test/functional/mempool_sigoplimit.py",
      "position" : null,
      "pull_request_review_id" : 1331121215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27171",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129803993/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-03-08T17:24:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1129803993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@theStack could open a followup addressing anything here?\r\n\r\n> (Doesn't need to be in this PR) it could be worth checking that this vsize calculation is used for anc/desc limits as well?\r\n\r\n> for reference, usually fAccurate is set for witness scripts sigop counts, but omitting the k and n in the CMS imitates fAccurate=false.",
      "created_at" : "2023-03-10T13:58:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27171#issuecomment-1463841962",
      "id" : 1463841962,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27171",
      "node_id" : "IC_kwDOABII585XQHSq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1463841962/reactions"
      },
      "updated_at" : "2023-03-10T13:58:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1463841962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My comment was only meant for reviewers. A unit test may be more appropriate if someone wants to check the behavior of the sigop counting function itself.",
      "created_at" : "2023-03-10T14:01:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27171#issuecomment-1463846459",
      "id" : 1463846459,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27171",
      "node_id" : "IC_kwDOABII585XQIY7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1463846459/reactions"
      },
      "updated_at" : "2023-03-10T14:01:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1463846459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @theStack could open a followup addressing anything here?\r\n> \r\n> > (Doesn't need to be in this PR) it could be worth checking that this vsize calculation is used for anc/desc limits as well?\r\n> \r\n> > for reference, usually fAccurate is set for witness scripts sigop counts, but omitting the k and n in the CMS imitates fAccurate=false.\r\n\r\nYes, I'm planning to do a follow-up next week, extending the checks on ancestor/descendant limits is definitely a good idea! Regarding Marco's explanation w.r.t. fAccurate, will consider adding a small explanation comment (something like e.g. \"if k and n are omitted, the sig-ops costs of OP_CMS are 20 even in witness spends\").",
      "created_at" : "2023-03-11T12:49:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27171#issuecomment-1464905433",
      "id" : 1464905433,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27171",
      "node_id" : "IC_kwDOABII585XUK7Z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1464905433/reactions"
      },
      "updated_at" : "2023-03-11T12:49:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1464905433",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   }
]
