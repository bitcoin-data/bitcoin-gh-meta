[
   {
      "body" : "And immediately after making the pull request I realize half of it is missing - CreateNewBlock needs to be updated to create the required commitment outputs. I will make that fix.\r\n\r\n@luke-jr: Any required commitment increases the block size linearly, by the very nature of what you are doing. By adding a commitment to a block you have to at the very least add the bytes of the hash you are committing. This does it in a way which is more performant and immediately pruned from the UTXO set. And I think you may have misread req 1. My intent was that given the entire block or some transaction(s) in a Merkle proof, you know what to scan for to find the commitment.\r\n\r\nThe best system for coinbase commitments is p2pool's method. Such an approach is really not ideal. Beyond midstate being an ugly hack (not the least because some library SHA-256 implementations don't expose the necessary functionality to verify), it is also not performant. It would require the proofs to carry 32 bytes of midstate data, plus an average of 32 bytes of data prior to the commitment, and some metadata to indicate the start of the commitment within the string. That is 65 bytes of overhead plus the commitments which follow that you don't care about, which could be sizable in itself. This is a rather large waste of space, especially for applications which demand compact proofs, e.g. merged mining headers and compact spv proofs.",
      "created_at" : "2014-03-28T23:27:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-38978288",
      "id" : 38978288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-04-05T22:22:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/38978288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "Fixed CreateNewBlock() to include required commitments, and 'getblocktemplate' RPC command to include a 'budgets' field which mandates any required transaction outputs beyond the miner payout.",
      "created_at" : "2014-03-29T02:16:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-38984140",
      "id" : 38984140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-03-29T02:16:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/38984140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "> It would require the proofs to carry 32 bytes of midstate data, plus an average of 32 bytes of data prior to the commitment, and some metadata to indicate the start of the commitment within the string. That is 65 bytes of overhead plus the commitments which follow that you don't care about, which could be sizable in itself. This is a rather large waste of space, especially for applications which demand compact proofs, e.g. merged mining headers and compact spv proofs.\r\n\r\nWhat does this overhead work out to as a % of the total cost of the proof? Also, if I need more than one commitment proof for my application, what is the total size of all proofs with your scheme vs. committing to a binary radix tree of commitments?",
      "created_at" : "2014-04-01T14:12:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39209630",
      "id" : 39209630,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-04-01T14:12:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39209630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Well a proof is just 80 bytes block header + untaken Merkle paths + extra data at the (sub-)transaction level + a few bytes metadata. So for just the coinbase and one commitment that is 80 + 32 + 1-2 bytes. That's about 50% increase on a minimal block, but percentage-wise that's a worst case since the overhead is constant but the proof size increases logarithmically with the number of transactions. With a 1000 transactions in the block it is a 16% increase. Still significant.\r\n\r\nUsing the coinbase transaction with midstate also has one other glaring problem: you are unprotected from length-extension attacks. You can't know for certain if the string given is actually a commitment, or just something that looks like it inside of a giant PUSHDATA. This can be somewhat mitigated against with economic arguments by using radix trees with a single root commitment, making this root commitment required, and making it illegal to put anything after it in the coinbase transaction. Then at least any PUSHDATA trickery would also invalidate the block.\r\n\r\nUsing a radix tree with a single exposed root hash (in the coinbase or its own transaction) is less space efficient for proofs, because if they are separate transactions then you can put them consecutively and align on a corresponding power-of-2 boundary in order to reduce the number of transaction-tree Merkle branches required, vs. the radix tree approach which doesn't let you save space from the transaction Merkle tree and requires new untaken branches for commitments you don't care about (whereas that would otherwise be amortized over the size of the transaction list). It's also messier because you've added (1) the radix tree implementation (although, yes, I want that for other purposes), and (2) the tree data still needs to be transported with the block, since validation rules will depend on these commitments being correct (e.g. [U]TXO hash-tree commitments). You'd have to include the serialized radix tree in the p2p block message, on disk in the block files, and anywhere else in the bitcoin ecosystem which transmits or archives full blocks for consumption by a validator. That's a lot more code to change, and a bigger disruption to the bitcoin ecosystem.",
      "created_at" : "2014-04-01T17:36:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39234638",
      "id" : 39234638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-04-05T22:25:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39234638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "A while ago I started writing [this proposal for MM2 (merged mining 2)](https://github.com/forrestv/mm2-spec), which is essentially the \"radix tree with single exposed root hash\" maaku described, which fulfills all three of his required properties, and which P2Pool is already using. The rest of this comment mostly summarizes things that have already been said.\r\n\r\nAdmittedly, using the midstate is a bit hackish, but it isn't vulnerable to a length-extension attack, as maaku said, since there's only one root commitment hash fixed at the end of the coinbase transaction.\r\n\r\nTo conclude, everything's possible without a Bitcoin rule change, without creating any new transactions and using constant space in Bitcoin blocks, at the expense of about (64 bytes) + (32 bytes)*log2(number of types of commitments present in a block) for every block used in a commitment proof. (If the commitment root were padded so that it starts on a SHA-block boundary, the 64 bytes would decrease to 32 bytes, wasting on average about 32 bytes in every Bitcoin block.)\r\n\r\nThe other wrinkle is that if Bitcoin miners started validating the UTXO commitment, (only) the relevant Merkle branch within the radix tree would have to be forwarded around the Bitcoin network among nodes that care, requiring database and protocol changes for them.",
      "created_at" : "2014-04-04T23:26:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39621057",
      "id" : 39621057,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-04-04T23:26:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39621057",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/59872?v=3",
         "events_url" : "https://api.github.com/users/forrestv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/forrestv/followers",
         "following_url" : "https://api.github.com/users/forrestv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/forrestv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/forrestv",
         "id" : 59872,
         "login" : "forrestv",
         "organizations_url" : "https://api.github.com/users/forrestv/orgs",
         "received_events_url" : "https://api.github.com/users/forrestv/received_events",
         "repos_url" : "https://api.github.com/users/forrestv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/forrestv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/forrestv"
      }
   },
   {
      "body" : "@forrestv Oh, so p2pool already supports committing to data in addition to the p2pool share state through the radix tree it commits in that OP_RETURN output?",
      "created_at" : "2014-04-05T10:51:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39634741",
      "id" : 39634741,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-04-05T10:51:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39634741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd The P2Pool protocol supports it, but the P2Pool software doesn't currently provide an API for adding other commitments. Once finished, my MM2 proposal will declare an API, and then I'll add support to P2Pool.",
      "created_at" : "2014-04-05T21:40:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39651637",
      "id" : 39651637,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-04-05T21:40:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39651637",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/59872?v=3",
         "events_url" : "https://api.github.com/users/forrestv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/forrestv/followers",
         "following_url" : "https://api.github.com/users/forrestv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/forrestv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/forrestv",
         "id" : 59872,
         "login" : "forrestv",
         "organizations_url" : "https://api.github.com/users/forrestv/orgs",
         "received_events_url" : "https://api.github.com/users/forrestv/received_events",
         "repos_url" : "https://api.github.com/users/forrestv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/forrestv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/forrestv"
      }
   },
   {
      "body" : "@forrestv you need a bitcoin rule change, otherwise you can't trust the midstate, as I explained above. Separating the commitments out of the coinbase transaction results in smaller proofs and fewer changes to existing infrastructure, at least once the commitments are used for anything validation related.",
      "created_at" : "2014-04-05T22:31:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39652925",
      "id" : 39652925,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-04-05T22:31:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39652925",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "You realise your claiming that p2pool is insecure?\n\nAnyway coinbase mid state as used by p2pool is unambiguous as the commitment is always the last txout of the transaction and the merkle path to the header has a fixed format. \n\n\n@forrestv Excellent! That's exactly what I've been hoping we'd do for better merge mining/commitments. Speaking of, I was considering implementing my tree chains idea as a merge mined chain, possibly the only merge mined chain that will ever be needed if client side validation proves practical. p2pool is the right audience for it; I would have asked you to add commitments to p2pool if you hadn't already. \n\nIt would be good to do a BIP for it too. \n\nOn 6 April 2014 00:31:39 CEST, Mark Friedenbach <notifications@github.com> wrote:\n>@forrestv you need a bitcoin rule change, otherwise you can't trust the\n>midstate, as I explained above. Separating the commitments out of the\n>coinbase transaction results in smaller proofs and fewer changes to\n>existing infrastructure, at least once the commitments are used for\n>anything validation related.\n>\n>---\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39652925",
      "created_at" : "2014-04-06T00:37:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39655305",
      "id" : 39655305,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-04-06T00:37:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39655305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd, the insecurity he's talking about has to do with miners validating commitments. It would be possible to create a commitment that validating miners would treat as not a commitment at all, by stuffing it in a PUSHDATA. In the same vein, you'd need to make sure that a block doesn't have a commitment for a certain validation type if you think the block doesn't have it, which would be difficult to prove with P2Pool's approach.\r\n\r\nFor commitments that will require validation (SPV/non-SPV UTXO trees), P2Pool's solution is probably not the best choice. For everything else, it probably is.",
      "created_at" : "2014-04-06T01:08:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-39655730",
      "id" : 39655730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-04-06T01:08:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/39655730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/59872?v=3",
         "events_url" : "https://api.github.com/users/forrestv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/forrestv/followers",
         "following_url" : "https://api.github.com/users/forrestv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/forrestv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/forrestv",
         "id" : 59872,
         "login" : "forrestv",
         "organizations_url" : "https://api.github.com/users/forrestv/orgs",
         "received_events_url" : "https://api.github.com/users/forrestv/received_events",
         "repos_url" : "https://api.github.com/users/forrestv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/forrestv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/forrestv"
      }
   },
   {
      "body" : "BTW, I forgot to mention it before, but a serious issue with this scheme is that you can't prove the *absence* of a given commitment compactly without forcing the commitments to all be in the same index in the merkle tree, which in turn creates an ugly need for a central registration authority every time you add a new commitment. Equally that a block is now invalid just for having two commitments of the same type conflicts with future scalability solutions like sharding.",
      "created_at" : "2014-06-12T17:02:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-45919249",
      "id" : 45919249,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-06-12T17:02:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45919249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/p3977_26592396ce233e3e58736ee7dc346be20ad68b0f/ for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.",
      "created_at" : "2014-06-23T13:20:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-46843653",
      "id" : 46843653,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-06-23T13:20:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46843653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2110907?v=3",
         "events_url" : "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinPullTester/followers",
         "following_url" : "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinPullTester",
         "id" : 2110907,
         "login" : "BitcoinPullTester",
         "organizations_url" : "https://api.github.com/users/BitcoinPullTester/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinPullTester/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinPullTester/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinPullTester/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinPullTester"
      }
   },
   {
      "body" : "Wouldn't it be simpler to just require the generation transaction produce a single dummy output, then spend that from 100 blocks ago with the first commitment, and produce an output that can be consumed by the second commitment of the same block? So instead of <type> OP_EQUAL, you'd do <type> OP_BLOCKCOMMITMENT (OP_NOP3 with no behaviour changes) and ignore it in scriptSig.\r\n\r\n@petertodd I don't believe proving absence of a commitment is ever possible securely. Blocks could create a \"commitment\" of a given type with data of undeterminable validity for that type.",
      "created_at" : "2014-09-23T01:06:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-56465765",
      "id" : 56465765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-09-23T01:06:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56465765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr You're thinking too generally: I'm simply saying that with a more appropriate commitment scheme a proof can be created that a given block doesn't have a certain type of commitment; I'm not saying that such a proof can always be created without the consent of the miner. On the other hand, @maaku's scheme is flawed in that such a proof can *never* be created. (modulo providing the entire block!)\r\n\r\nIn any case since then I've written a library for creating such commitment proofs: https://github.com/petertodd/python-merbinnertree. Plenty more work to do on it, but @phantomcircuit has already been looking into using it for MM-like commitments.",
      "created_at" : "2014-09-23T06:30:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-56480716",
      "id" : 56480716,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-09-23T06:41:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56480716",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "BTW (U)TXO commitments are a concrete example where this is useful. A soft-fork to make (U)TXO commitments always required is problematic, because we can't change the format of those commitments in the future in another soft-fork - the exact form is baked in stone. However we can do a slightly less drastic soft-fork to require (U)TXO commitments to be valid, while still allowing miners to choose to not make the commitment. In this case the miners who chose not to calculate the commitment would provide a short and simple proof that the commitment didn't exist in their block. Completing the upgrade would be another soft-fork to *require* that the commitment not exist, thus upgrading the (U)TXO format and allowing the related code and indexes to be eventually removed.",
      "created_at" : "2014-09-23T06:41:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-56481430",
      "id" : 56481430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-09-23T06:44:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/56481430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Fixed bitrot. This could use some tests still.",
      "created_at" : "2014-10-10T17:29:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-58688293",
      "id" : 58688293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-10-10T17:29:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/58688293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "kerami, using the transaction ordering is doable, but fairly ugly in my own opinion. It is also strictly speaking less capable as it doesn't allow for frictionless non-consensus commitments--with the current solution you can pick a random UUID as the commitment type and have some assurance against namespace collision. I have to admit this isn't a strong argument however, as it is not clear to me that such an applicaiton would be useful.\r\n\r\nMore seriously, it's hard to avoid the spend-a-coinbase-output scheme however. The inputs need to be restricted such that no fees can be given, otherwise you break the secuirty model by opening up the possibility of paying for incorrect or malicious commitments. In the coinbase commitment scheme this is trivial -- the one and only input is an anyone-can-spend. If you instead specify commitment type by position, then you still need at least one input by protocol rules, but because it is not required to be an anyone-can-spend you've now got to either make the same arbitrary restrictions on input value, or worry about economic attacks..",
      "created_at" : "2014-10-10T17:46:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-58690844",
      "id" : 58690844,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-10-10T17:46:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/58690844",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "@maaku \r\n\r\n> otherwise you break the secuirty model by opening up the possibility of paying for incorrect or malicious commitments.\r\n\r\nDon't get caught up in notions of 'security model' - I can nearly as easily pay for those commitments with out-of-band and enforce those commitments with social, legal, or if all else fails, even fidelity bonds. The idea that avoiding in-band fee payments will help anything in the real world is silly.",
      "created_at" : "2014-10-14T11:59:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-59031292",
      "id" : 59031292,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2014-10-14T11:59:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/59031292",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "I am no longer convinced that this is the optimal approach, and am therefore closing this pull request.",
      "created_at" : "2015-02-23T22:30:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3977#issuecomment-75651701",
      "id" : 75651701,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3977",
      "updated_at" : "2015-02-23T22:30:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/75651701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   }
]
