[
   {
      "author_association" : "MEMBER",
      "body" : "ACK 71e0f07e9c5f0aef532b85c04807dcbedd04e0af -- diff looks correct\r\n\r\nThanks for removing legacy code!",
      "created_at" : "2020-08-17T21:40:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19750#issuecomment-675129540",
      "id" : 675129540,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19750",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTEyOTU0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T21:40:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675129540",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Oh wow, how could I have missed this one.\r\nACK 71e0f07e9c5f0aef532b85c04807dcbedd04e0af",
      "created_at" : "2020-08-19T12:26:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19750#issuecomment-676267058",
      "id" : 676267058,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19750",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NjI2NzA1OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-19T12:26:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676267058",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Another thing I tried once (see #17385) was to replace all uses of `atoi64` with `ParseInt64`, which does error checking. It's somewhat more involved though, and I eventually closed it due to lack of interest.\r\n(that was last year? wow, it feels like a million years ago now)",
      "created_at" : "2020-08-19T12:37:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19750#issuecomment-676282497",
      "id" : 676282497,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19750",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NjI4MjQ5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-19T12:37:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676282497",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Getting rid of `atoi64` would be really nice: `atoi64` is surprisingly liberal in what inputs it tries to take on :)\r\n\r\nIt's a bit sad that your PR #17385 was closed - that PR would have helped us get rid of quite a few usages of locale dependent functions.\r\n\r\n(Talking about locale dependence: please consider reviewing #18817 which documents why avoidance of locale dependent functions is crucial in order to not accidentally cause diverge between Bitcoin Core (which does not call `setlocale(LC_ALL, \"\")`) and Bitcoin Qt (which _does_ call `setlocale(LC_ALL, \"\")` via Qt(!). I think that is a WTH worth documenting at least :))\r\n\r\nIf someone wants to try tackle the `atoi64`/`ParseInt64` issue the following fuzzer might be helpful:\r\n\r\n```\r\n$ src/test/fuzz/atoi\r\nParseInt64 failed, but atoi64 parsed \"6!@\" (length: 3) as 6\r\nParseInt64 failed, but atoi64 parsed \"^K6@3^K\" (length: 5) as 6\r\nParseInt64 failed, but atoi64 parsed \"^M1^M\" (length: 3) as 1\r\nParseInt64 failed, but atoi64 parsed \"33333333333333333333333333333333\" (length: 32) as 9223372036854775807\r\nâ¦\r\n```\r\n\r\n```c++\r\ndiff --git a/src/Makefile.test.include b/src/Makefile.test.include\r\nindex d0f3107e2..277b51090 100644\r\n--- a/src/Makefile.test.include\r\n+++ b/src/Makefile.test.include\r\n@@ -3,6 +3,7 @@\r\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n\r\n FUZZ_TARGETS = \\\r\n+  test/fuzz/atoi \\\r\n   test/fuzz/addition_overflow \\\r\n   test/fuzz/addr_info_deserialize \\\r\n   test/fuzz/addrdb \\\r\n@@ -1137,6 +1138,12 @@ test_fuzz_uint256_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\r\n test_fuzz_uint256_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\r\n test_fuzz_uint256_deserialize_SOURCES = test/fuzz/deserialize.cpp\r\n\r\n+test_fuzz_atoi_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\r\n+test_fuzz_atoi_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\r\n+test_fuzz_atoi_LDADD = $(FUZZ_SUITE_LD_COMMON)\r\n+test_fuzz_atoi_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\r\n+test_fuzz_atoi_SOURCES = test/fuzz/atoi.cpp\r\n+\r\n endif # ENABLE_FUZZ\r\n\r\n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\r\ndiff --git a/src/test/fuzz/atoi.cpp b/src/test/fuzz/atoi.cpp\r\nnew file mode 100644\r\nindex 000000000..69fc2845f\r\n--- /dev/null\r\n+++ b/src/test/fuzz/atoi.cpp\r\n@@ -0,0 +1,25 @@\r\n+// Copyright (c) 2020 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <util/strencodings.h>\r\n+\r\n+#include <iostream>\r\n+#include <cstdint>\r\n+#include <vector>\r\n+\r\n+void test_one_input(const std::vector<uint8_t>& buffer)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    const std::string s = fuzzed_data_provider.ConsumeRandomLengthString(32);\r\n+    const int64_t parsed_using_atoi64 = atoi64(s);\r\n+    int64_t parsed_using_parseint64;\r\n+    if (ParseInt64(s, &parsed_using_parseint64)) {\r\n+        assert(parsed_using_atoi64 == parsed_using_parseint64);\r\n+    } else if (parsed_using_atoi64 != 0) {\r\n+        std::cout << \"ParseInt64 failed, but atoi64 parsed \\\"\" << s << \"\\\" (length: \" << s.length() << \") as \" << parsed_using_atoi64 << std::endl;\r\n+    }\r\n+}\r\n```",
      "created_at" : "2020-08-19T14:00:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19750#issuecomment-676406472",
      "id" : 676406472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19750",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NjQwNjQ3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-19T14:01:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676406472",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It's a bit sad that your PR #17385 was closed - that PR would have helped us get rid of quite a few usages of locale dependent functions.\r\n\r\nMaybe it's sad. I don't know. I've kind of given up on that myself. I think we've eliminated all the places where locale dependence is really bad, and the low-hanging fruit. I'm not sure dwelling on it too much is useful. At some point it becomes just baseless pedantry. E.g.:\r\n\r\nI love the clarity of Rust's approach with a 100% deterministic standard library with no locale dependence. You can opt-in to locale specific things for user interaction. But I also know we'll never get there with C++.\r\n\r\nThat said, I'll try to get around to reviewing your PR.\r\n",
      "created_at" : "2020-08-22T10:24:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19750#issuecomment-678623448",
      "id" : 678623448,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19750",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODYyMzQ0OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-22T10:24:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678623448",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
