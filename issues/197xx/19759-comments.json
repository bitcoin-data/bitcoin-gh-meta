[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19759#discussion_r472038645"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19759"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472038645"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    - Class and struct member variables have an `m_` prefix.\r\n```",
      "commit_id" : "7b144f4a8c5fb24473b505d1d2fde93e6a906c1d",
      "created_at" : "2020-08-18T09:19:23Z",
      "diff_hunk" : "@@ -81,7 +81,7 @@ required when doing so would need changes to significant pieces of existing\n code.\n   - Variable (including function arguments) and namespace names are all lowercase and may use `_` to\n     separate words (snake_case).\n-    - Class member variables have a `m_` prefix.\n+    - Class and struct member variables have a `m_` prefix.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#discussion_r472038645",
      "id" : 472038645,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODY0NQ==",
      "original_commit_id" : "c53d59558252f38d4a843a31c6065938e673ad4c",
      "original_line" : 84,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 469144678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19759",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-18T09:22:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472038645",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/425166?v=4",
         "events_url" : "https://api.github.com/users/flack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/flack/followers",
         "following_url" : "https://api.github.com/users/flack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/flack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/flack",
         "id" : 425166,
         "login" : "flack",
         "node_id" : "MDQ6VXNlcjQyNTE2Ng==",
         "organizations_url" : "https://api.github.com/users/flack/orgs",
         "received_events_url" : "https://api.github.com/users/flack/received_events",
         "repos_url" : "https://api.github.com/users/flack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/flack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/flack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/flack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19759#discussion_r472040564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19759"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472040564"
         }
      },
      "author_association" : "MEMBER",
      "body" : "thanks. Done.",
      "commit_id" : "7b144f4a8c5fb24473b505d1d2fde93e6a906c1d",
      "created_at" : "2020-08-18T09:22:32Z",
      "diff_hunk" : "@@ -81,7 +81,7 @@ required when doing so would need changes to significant pieces of existing\n code.\n   - Variable (including function arguments) and namespace names are all lowercase and may use `_` to\n     separate words (snake_case).\n-    - Class member variables have a `m_` prefix.\n+    - Class and struct member variables have a `m_` prefix.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#discussion_r472040564",
      "id" : 472040564,
      "in_reply_to_id" : 472038645,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MDU2NA==",
      "original_commit_id" : "c53d59558252f38d4a843a31c6065938e673ad4c",
      "original_line" : 84,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 469147304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19759",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-18T09:22:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472040564",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 7b144f4a8c5fb24473b505d1d2fde93e6a906c1d",
      "created_at" : "2020-08-18T10:18:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675393686",
      "id" : 675393686,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTM5MzY4Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T10:18:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675393686",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The `m_` prefix is useful for the internal class code insofar it clear distinguishes a data member from local and global variables.\r\nI don't thinks this is required for structs. And `struct.m_data` looks ugly for me.\r\n\r\nSorry.",
      "created_at" : "2020-08-18T11:19:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675419648",
      "id" : 675419648,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTQxOTY0OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T11:19:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675419648",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't like this change. It ignores the way struct and classes are used differently, and the reason `m_` and `g_` prefixes were introduced, which was to make it possible to distinguish local variable references from member variable and global variable references. For example with:\r\n\r\n```c++\r\nvar = 3;\r\nm_var = 3;\r\ng_var = 3;\r\n```\r\n\r\nthe prefixes help you see without looking things up that `var` is a local variable, `m_var` is a member variable and `g_var` is a global variable, and helps you read and navigate code more quickly.\r\n\r\nThe `m_` prefix doesn't serve a purpose for structs because because implicit `this` isn't used for struct accesses:\r\n\r\n```c++\r\ns.var = 3;\r\np->var = 4;\r\n```\r\n\r\nClearly with `s.var` or `p->var`, `var` is a struct member. Replacing it with `m_var` just adds noise.\r\n\r\nI think it makes sense to add code conventions when it solves problems, but it's not clear what problem would be solved by adding this convention.\r\n\r\n(Somewhat related: I wouldn't mind having conventions that help make the differences between classes and structs clear. I'd be happy with a convention that encouraged class member variables not to be public, so you'd be unlikely to see `c->m_var = 3`, and a convention that would encourage structs not to have methods and only have public members, so the structs would be used properly. I think we basically do follow these conventions so there may be little need to write them down.)",
      "created_at" : "2020-08-18T11:26:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675422614",
      "id" : 675422614,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTQyMjYxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T11:26:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675422614",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm happy with either convention:\r\n\r\n`- Class and struct member variables have an 'm_' prefix.`\r\n\r\nor \r\n\r\n`- Class member variables have an 'm_' prefix (struct members do not have the 'm_' prefix since they're usually not accessed with implicit 'this').`\r\n\r\nbut want it to be documented to avoid wasting time in review. Very happy to change it to the second version if that's what people prefer.",
      "created_at" : "2020-08-18T12:38:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675453206",
      "id" : 675453206,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTQ1MzIwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T12:38:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675453206",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'm happy with either convention:\r\n> \r\n> `- Class and struct member variables have an 'm_' prefix.`\r\n> \r\n> or\r\n> \r\n> `- Class member variables have an 'm_' prefix (struct members do not have the 'm_' prefix since they're usually not accessed with implicit 'this').`\r\n> \r\n> but want it to be documented to avoid wasting time in review. Very happy to change it to the second version if that's what people prefer.\r\n\r\n+1 for the second version.",
      "created_at" : "2020-08-18T12:41:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675454696",
      "id" : 675454696,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTQ1NDY5Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T12:41:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675454696",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I should also note that many people already seem to be following the convention of prefixing struct members with `m_`. See for example:\r\n\r\n- [CNodeState and its sub-structs](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net_processing.cpp#L276)\r\n- [CConnman::Options](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net.h#L141)\r\n- [CNodeStats](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net.h#L614) (which is a class but should really be a struct since it only has public data members).\r\n\r\nThe newer data members in those structs are prefixed `m_`.\r\n\r\nMy vote is for the first option, since having a consistent rule across classes and structs is easier to state/follow, and people naturally seem to be doing it already.",
      "created_at" : "2020-08-18T12:48:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-675457735",
      "id" : 675457735,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTQ1NzczNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T12:48:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675457735",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> but want it to be documented to avoid wasting time in review. Very happy to change it to the second version if that's what people prefer.\r\n\r\nð \r\n\r\n> I should also note that many people already seem to be following the convention of prefixing struct members with `m_`.\r\n\r\nBecause it's in the developer notes?\r\n\r\nFWIW I also prefer to skip `m_` prefix in structs.\r\n\r\n\r\n",
      "created_at" : "2020-08-23T22:50:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-678834932",
      "id" : 678834932,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODgzNDkzMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-23T22:50:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678834932",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the division of opinions is partly caused by the fact that there is no clear definition of what a `struct` is in C++. Semantically it is clear, but is it really helpful to call a class with default public membership still a struct if you add member functions?\r\n\r\nIf there is no member functions (e.g. [CNodeStats](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net.h#L614)), I tend to agree with hebasto and ryanofsky that the `m_` is pointless and doesn't add value in readability. If there is at least one member function (e.g. [CNodeState](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net_processing.cpp#L276)), you have the implicit this pointer and it can make sense.\r\n\r\n> I wouldn't mind having conventions that help make the differences between classes and structs clear. I'd be happy with a convention that encouraged class member variables not to be public, so you'd be unlikely to see c->m_var = 3, and a convention that would encourage structs not to have methods and only have public members, so the structs would be used properly.\r\n\r\n+1",
      "created_at" : "2020-08-24T18:24:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-679290303",
      "id" : 679290303,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3OTI5MDMwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-24T18:24:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/679290303",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> If there is no member functions (e.g. [CNodeStats](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net.h#L614)), I tend to agree with hebasto and ryanofsky that the `m_` is pointless and doesn't add value in readability. If there is at least one member function (e.g. [CNodeState](https://github.com/bitcoin/bitcoin/blob/a2a250c7d07bcb80cefca9dd4a7ce57f41291334/src/net_processing.cpp#L276)), you have the implicit this pointer and it can make sense.\r\n\r\n+1 -- maybe the guideline should be \"if you have non-static member functions (EDIT: other than constructors), it should be a class and data members should be prefixed with m_; otherwise it should be a struct, and data members should be unprefixed. static data members should be prefixed with g_ as they are globals.\" ?\r\n\r\nEDIT: or perhaps \"data members in classes should be prefixed with m_. structs should have no member functions other than constructors, no private/protected members, and any static data members should be constexpr\"",
      "created_at" : "2020-09-02T00:43:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-685210368",
      "id" : 685210368,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NTIxMDM2OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-02T01:00:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685210368",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "FWIW, when this rule was added, I intended it to apply to both structs and classes. There seem to be good reasons to not have it apply to member variables which are intended to be part of the public interface (which I guess would be a struct-like object), and it hasn't been consistently applied, so I don't think it's a big setback to change the rule to not have the m_ prefix for such types.\r\n\r\nI'm ok with changing it in either direction, but clarifying is good.",
      "created_at" : "2020-09-02T01:35:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-685228788",
      "id" : 685228788,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NTIyODc4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-02T04:24:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/685228788",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I have a preference for applying to rules to both structs and classes for one reason only: simplicity. It's a far simpler rule to consistently apply the rule \"prefix all member variables with m_\", than \"if you have non-static member functions other than constructors, it should be a class and data members should be prefixed with m_; otherwise it should be a struct, and data members should be unprefixed.\"\r\n\r\nI don't think the distinction between class and struct is very important (as long as the private/public specifiers are used it doesn't make a difference). I do think that having member variables prefixed with m_ is a big improvement for readability, so that should be the priority.",
      "created_at" : "2020-09-24T08:11:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-698189188",
      "id" : 698189188,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODE4OTE4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-24T08:11:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698189188",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't want to follow a strange rule that everybody agrees does not improve readability, and that I've never seen any other C or C++ project require, or even follow inadvertently.\r\n\r\n`m_` improves readability when implicit _`this`_ is used, and not in other cases. There is a big difference between public data structures and classes with private state. Thousands of pages have been written about the wonders and magic of classes. C++ doesn't enforce a difference because C++ barely enforces anything. But I don't think you should falsely read into that and require different things to be the same. If you want to invent a new rule that people don't like, that is new in 47 years of C programming, and that doesn't provide any first order benefits, I think there should be a bigger second-order benefit than fake consistency in a poorly written document.",
      "created_at" : "2020-09-24T11:40:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-698290053",
      "id" : 698290053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODI5MDA1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-24T11:40:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698290053",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok, closing this. It seems to be antagonizing people unnecessarily. I don't think adding guidance about when to use `class` or `struct` belongs in the **Symbol naming conventions** section, but if @ryanofsky wants to add it somewhere else in the developer docs, I'm happy to review.\r\n\r\n> If you want to invent a new rule that people don't like, that is new in 47 years of C programming\r\n\r\nIt doesn't matter too much, but I believe we copied this style convention from xbmc (https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md#87-variables) which encourages using m_ for non-static member variables, and that does convention does appear to be used for structs in at least some places in that codebase (eg https://github.com/xbmc/xbmc/blob/28239ef93051ce4317beeea4cc0a79aa475841b7/xbmc/platform/win10/filesystem/WinLibraryFile.cpp#L50-L54).",
      "created_at" : "2020-09-24T12:22:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-698309403",
      "id" : 698309403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODMwOTQwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-24T12:22:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698309403",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "FWIW the [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html#Structs_vs._Classes) makes a clear distinction when to use `struct` and when `class` and they have different naming rules for member variables.",
      "created_at" : "2020-09-29T13:28:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19759#issuecomment-700702839",
      "id" : 700702839,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19759",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMDcwMjgzOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-29T13:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/700702839",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
