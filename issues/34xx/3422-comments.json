[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "&R1Array[32] instead?\n",
      "commit_id" : "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "created_at" : "2013-12-15T20:52:59Z",
      "diff_hunk" : "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356196",
      "id" : 8356196,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYxOTY=",
      "original_commit_id" : "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "original_line" : null,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/uint256_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356196/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2013-12-25T10:16:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356199"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indentation.\n",
      "commit_id" : "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "created_at" : "2013-12-15T20:53:45Z",
      "diff_hunk" : "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));\n+const uint160 R1S = uint160(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+20));\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+const unsigned char R2Array[] = \n+    \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n+    \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n+const uint256 R2L = uint256(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+32));\n+const uint160 R2S = uint160(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+20));\n+\n+const unsigned char ZeroArray[] = \n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 ZeroL = uint256(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+32));\n+const uint160 ZeroS = uint160(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+20));\n+\t\t\t     \n+const unsigned char OneArray[] = \n+    \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 OneL = uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32));\n+const uint160 OneS = uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20));\n+\n+const unsigned char MaxArray[] = \n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n+const uint256 MaxL = uint256(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+32));\n+const uint160 MaxS = uint160(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+20));\n+\n+const uint256 HalfL = (OneL << 255);\n+const uint160 HalfS = (OneS << 159);\n+std::string ArrayToString(const unsigned char A[], unsigned int width)\n+{\n+    std::stringstream Stream;\n+    Stream << std::hex;\n+    for (unsigned int i = 0; i < width; ++i) \n+    {\n+\tStream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n+    }       \n+    return Stream.str();\n+}\n+\n+void LowestUint64OfArray(const unsigned char A[],uint64_t& R1a)\n+{\n+    R1a = 0;\n+    for (unsigned int i = 0; i < 8; ++i) \n+    {\n+\tR1a += (((uint64_t)A[i]) << 8*i);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356199",
      "id" : 8356199,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYxOTk=",
      "original_commit_id" : "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "original_line" : null,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/uint256_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356199/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2013-12-25T10:16:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356212"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe make this a constant defined at the beginning of the file too, so it's clear that changing one must mean changing this too?\n",
      "commit_id" : "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "created_at" : "2013-12-15T20:56:03Z",
      "diff_hunk" : "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));\n+const uint160 R1S = uint160(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+20));\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+const unsigned char R2Array[] = \n+    \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n+    \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n+const uint256 R2L = uint256(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+32));\n+const uint160 R2S = uint160(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+20));\n+\n+const unsigned char ZeroArray[] = \n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 ZeroL = uint256(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+32));\n+const uint160 ZeroS = uint160(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+20));\n+\t\t\t     \n+const unsigned char OneArray[] = \n+    \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 OneL = uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32));\n+const uint160 OneS = uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20));\n+\n+const unsigned char MaxArray[] = \n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n+const uint256 MaxL = uint256(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+32));\n+const uint160 MaxS = uint160(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+20));\n+\n+const uint256 HalfL = (OneL << 255);\n+const uint160 HalfS = (OneS << 159);\n+std::string ArrayToString(const unsigned char A[], unsigned int width)\n+{\n+    std::stringstream Stream;\n+    Stream << std::hex;\n+    for (unsigned int i = 0; i < width; ++i) \n+    {\n+\tStream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n+    }       \n+    return Stream.str();\n+}\n+\n+void LowestUint64OfArray(const unsigned char A[],uint64_t& R1a)\n+{\n+    R1a = 0;\n+    for (unsigned int i = 0; i < 8; ++i) \n+    {\n+\tR1a += (((uint64_t)A[i]) << 8*i);\n+    }\n+}\n \n-BOOST_AUTO_TEST_CASE(uint256_equality)\n+BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n {\n-    uint256 num1 = 10;\n-    uint256 num2 = 11;\n-    BOOST_CHECK(num1+1 == num2);\n+    BOOST_CHECK(1 == 0+1);\n+    // constructor uint256(vector<char>):\n+    BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n+    BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n+    BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n+    BOOST_CHECK(R2S.ToString() == ArrayToString(R2Array,20));\n+    BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(ZeroS.ToString() == ArrayToString(ZeroArray,20));\n+    BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\n+    BOOST_CHECK(OneS.ToString() == ArrayToString(OneArray,20));\n+    BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\n+    BOOST_CHECK(MaxS.ToString() == ArrayToString(MaxArray,20));\n+    BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(OneS.ToString() != ArrayToString(ZeroArray,20));\n+\n+    // == and !=\n+    BOOST_CHECK(R1L != R2L && R1S != R2S);\n+    BOOST_CHECK(ZeroL != OneL && ZeroS != OneS);\n+    BOOST_CHECK(OneL != ZeroL && OneS != ZeroS);\n+    BOOST_CHECK(MaxL != ZeroL && MaxS != ZeroS);\n+    BOOST_CHECK(~MaxL == ZeroL && ~MaxS == ZeroS);\n+    BOOST_CHECK( ((R1L ^ R2L) ^ R1L) == R2L);\n+    BOOST_CHECK( ((R1S ^ R2S) ^ R1S) == R2S);\n+    \n+    uint64_t Tmp64 = 0xc4dab720d9c7acaaULL;\n+    for (unsigned int i = 0; i < 256; ++i) \n+    {\n+     \tBOOST_CHECK(ZeroL != (OneL << i)); \n+\tBOOST_CHECK((OneL << i) != ZeroL); \n+\tBOOST_CHECK(R1L != (R1L ^ (OneL << i)));\n+\tBOOST_CHECK(((uint256(Tmp64) ^ (OneL << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroL == (OneL << 256)); \n+\n+    for (unsigned int i = 0; i < 160; ++i) \n+    {\n+     \tBOOST_CHECK(ZeroS != (OneS << i)); \n+\tBOOST_CHECK((OneS << i) != ZeroS); \n+\tBOOST_CHECK(R1S != (R1S ^ (OneS << i)));\n+\tBOOST_CHECK(((uint160(Tmp64) ^ (OneS << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroS == (OneS << 256)); \n+\n+    // String Constructor and Copy Constructor\n+    BOOST_CHECK(uint256(\"0x\"+R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"0x\"+R2L.ToString()) == R2L);\n+    BOOST_CHECK(uint256(\"0x\"+ZeroL.ToString()) == ZeroL);\n+    BOOST_CHECK(uint256(\"0x\"+OneL.ToString()) == OneL);\n+    BOOST_CHECK(uint256(\"0x\"+MaxL.ToString()) == MaxL);\n+    BOOST_CHECK(uint256(R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"   0x\"+R1L.ToString()+\"   \") == R1L);\n+    BOOST_CHECK(uint256(\"\") == ZeroL);\n+    BOOST_CHECK(R1L == uint256(\"7D1DE5EAF9B156D53208F033B5AA8122D2D2355D5E12292B121156CFDB4A529C\"));\n+    BOOST_CHECK(uint256(R1L) == R1L);\n+    BOOST_CHECK((uint256(R1L^R2L)^R2L) == R1L);\n+    BOOST_CHECK(uint256(ZeroL) == ZeroL);\n+    BOOST_CHECK(uint256(OneL) == OneL);\n+\n+    BOOST_CHECK(uint160(\"0x\"+R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"0x\"+R2S.ToString()) == R2S);\n+    BOOST_CHECK(uint160(\"0x\"+ZeroS.ToString()) == ZeroS);\n+    BOOST_CHECK(uint160(\"0x\"+OneS.ToString()) == OneS);\n+    BOOST_CHECK(uint160(\"0x\"+MaxS.ToString()) == MaxS);\n+    BOOST_CHECK(uint160(R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"   0x\"+R1S.ToString()+\"   \") == R1S); \n+    BOOST_CHECK(uint160(\"\") == ZeroS);\n+    BOOST_CHECK(R1S == uint160(\"7D1DE5EAF9B156D53208F033B5AA8122D2D2355D5E12292B121156CFDB4A529C\"));\n \n-    uint64_t num3 = 10;\n-    BOOST_CHECK(num1 == num3);\n-    BOOST_CHECK(num1+num2 == num3+num2);\n+    BOOST_CHECK(uint160(R1S) == R1S);\n+    BOOST_CHECK((uint160(R1S^R2S)^R2S) == R1S);\n+    BOOST_CHECK(uint160(ZeroS) == ZeroS);\n+    BOOST_CHECK(uint160(OneS) == OneS);\n+\n+    // uint64_t constructor\n+    uint64_t Part;\n+    LowestUint64OfArray(R1Array,Part);\n+    BOOST_CHECK( (R1L & uint256(\"0xffffffffffffffff\")) == uint256(Part));\n+    BOOST_CHECK(ZeroL == uint256(0));\n+    BOOST_CHECK(OneL == uint256(1));\n+    BOOST_CHECK(uint256(\"0xffffffffffffffff\") = uint256(0xffffffffffffffffULL));\n+    BOOST_CHECK( (R1S & uint160(\"0xffffffffffffffff\")) == uint160(Part));\n+    BOOST_CHECK(ZeroS == uint160(0));\n+    BOOST_CHECK(OneS == uint160(1));\n+    BOOST_CHECK(uint160(\"0xffffffffffffffff\") = uint160(0xffffffffffffffffULL));\n+\n+    // Assignment (from base_uint)\n+    uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\n+    tmpL = ~OneL; BOOST_CHECK(tmpL == ~OneL);\n+    tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\n+    tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\n+    tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n+    uint160 tmpS = ~ZeroS; BOOST_CHECK(tmpS == ~ZeroS);\n+    tmpS = ~OneS; BOOST_CHECK(tmpS == ~OneS);\n+    tmpS = ~R1S; BOOST_CHECK(tmpS == ~R1S);\n+    tmpS = ~R2S; BOOST_CHECK(tmpS == ~R2S);\n+    tmpS = ~MaxS; BOOST_CHECK(tmpS == ~MaxS);\n+\n+    // Wrong length must give 0\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+31)) == 0);\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+19)) == 0);\n }\n \n-BOOST_AUTO_TEST_CASE(uint256_hex)\n+void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n {\n-    std::string hexStr = \"d35583ed493a5eee756931353144f558e6a9ab3ad6024a63ced7f10daf7faad9\";\n-    uint256 num1;\n-    num1.SetHex(hexStr);\n-    BOOST_CHECK(num1.GetHex() == hexStr);\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+\tunsigned int F = (T+bitsToShift/8);\n+\tif (F < arrayLength) \n+\t    to[T]  = from[F] >> (bitsToShift%8);\n+\telse\n+\t    to[T] = 0;\n+\tif (F + 1 < arrayLength) \n+\t    to[T] |= from[(F+1)] << (8-bitsToShift%8);\n+    }\n+}\n+\n+void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n+{\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+\tif (T >= bitsToShift/8) \n+\t{\n+\t    unsigned int F = T-bitsToShift/8;\n+\t    to[T]  = from[F] << (bitsToShift%8);\n+\t    if (T >= bitsToShift/8+1)\n+\t\tto[T] |= from[F-1] >> (8-bitsToShift%8);\n+\t}\n+\telse {\n+\t    to[T] = 0;\n+\t}\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( shifts ) { // \"<<\"  \">>\"  \"<<=\"  \">>=\"\n+    unsigned char TmpArray[32];\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i)\n+    {\n+\tshiftArrayLeft(TmpArray, OneArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (OneL << i));\n+\tTmpL = OneL; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (OneL << i));\n+\tBOOST_CHECK((HalfL >> (255-i)) == (OneL << i));\n+\tTmpL = HalfL; TmpL >>= (255-i);\n+\tBOOST_CHECK(TmpL == (OneL << i));\n+\t\t    \n+\tshiftArrayLeft(TmpArray, R1Array, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (R1L << i));\n+\tTmpL = R1L; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (R1L << i));\n+\n+\tshiftArrayRight(TmpArray, R1Array, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (R1L >> i)); \n+\tTmpL = R1L; TmpL >>= i;\n+\tBOOST_CHECK(TmpL == (R1L >> i));\n+\n+\tshiftArrayLeft(TmpArray, MaxArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (MaxL << i));\n+\tTmpL = MaxL; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (MaxL << i));\n+\n+\tshiftArrayRight(TmpArray, MaxArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (MaxL >> i));\n+\tTmpL = MaxL; TmpL >>= i;\n+\tBOOST_CHECK(TmpL == (MaxL >> i));\n+    }\n+    uint256 c1L = uint256(0x0123456789abcdefULL);\n+    uint256 c2L = c1L << 128;\n+    for (unsigned int i = 0; i < 128; ++i) {\n+\tBOOST_CHECK((c1L << i) == (c2L >> (128-i)));\n+    }\n+    for (unsigned int i = 128; i < 256; ++i) {\n+\tBOOST_CHECK((c1L << i) == (c2L << (i-128)));\n+    }\n+\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i)\n+    {\n+\tshiftArrayLeft(TmpArray, OneArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (OneS << i));\n+\tTmpS = OneS; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (OneS << i));\n+\tBOOST_CHECK((HalfS >> (159-i)) == (OneS << i));\n+\tTmpS = HalfS; TmpS >>= (159-i);\n+\tBOOST_CHECK(TmpS == (OneS << i));\n+\t\t    \n+\tshiftArrayLeft(TmpArray, R1Array, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (R1S << i));\n+\tTmpS = R1S; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (R1S << i));\n+\n+\tshiftArrayRight(TmpArray, R1Array, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (R1S >> i)); \n+\tTmpS = R1S; TmpS >>= i;\n+\tBOOST_CHECK(TmpS == (R1S >> i));\n+\n+\tshiftArrayLeft(TmpArray, MaxArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (MaxS << i));\n+\tTmpS = MaxS; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (MaxS << i));\n+\n+\tshiftArrayRight(TmpArray, MaxArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (MaxS >> i));\n+\tTmpS = MaxS; TmpS >>= i;\n+\tBOOST_CHECK(TmpS == (MaxS >> i));\n+    }\n+    uint160 c1S = uint160(0x0123456789abcdefULL);\n+    uint160 c2S = c1S << 80;\n+    for (unsigned int i = 0; i < 80; ++i) {\n+\tBOOST_CHECK((c1S << i) == (c2S >> (80-i)));\n+    }\n+    for (unsigned int i = 80; i < 160; ++i) {\n+\tBOOST_CHECK((c1S << i) == (c2S << (i-80)));\n+    }\n+\n }\n \n+BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n+{\n+    BOOST_CHECK(!ZeroL);  BOOST_CHECK(!ZeroS);\n+    BOOST_CHECK(!(!OneL));BOOST_CHECK(!(!OneS));\n+    for (unsigned int i = 0; i < 256; ++i) \n+\tBOOST_CHECK(!(!(OneL<<i)));\n+    for (unsigned int i = 0; i < 160; ++i) \n+\tBOOST_CHECK(!(!(OneS<<i)));\n+    BOOST_CHECK(!(!R1L));BOOST_CHECK(!(!R1S));\n+    BOOST_CHECK(!(!R2S));BOOST_CHECK(!(!R2S)); \n+    BOOST_CHECK(!(!MaxL));BOOST_CHECK(!(!MaxS));\n+\n+    BOOST_CHECK(~ZeroL == MaxL); BOOST_CHECK(~ZeroS == MaxS);\n+\n+    unsigned char TmpArray[32];\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; } \n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (~R1L));\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (~R1S));\n+\n+    BOOST_CHECK(-ZeroL == ZeroL); BOOST_CHECK(-ZeroS == ZeroS);\n+    BOOST_CHECK(-R1L == uint256(\"82e21a15064ea92acdf70fcc4a557edd2d2dcaa2a1edd6d4edeea93024b5ad64\"));\n+    BOOST_CHECK(-R1S == uint160(\"4a557edd2d2dcaa2a1edd6d4edeea93024b5ad64\"));\n+    for (unsigned int i = 0; i < 256; ++i) \n+\tBOOST_CHECK(-(OneL<<i) == (MaxL << i));\n+    for (unsigned int i = 0; i < 160; ++i) \n+\tBOOST_CHECK(-(OneS<<i) == (MaxS << i));\n+}\n+\n+\n+// Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n+// element of Aarray and Barray, and then converting the result into a uint256.\n+#define CHECKBITWISEOPERATOR(_A_,_B_,_OP_) \\\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (_A_##L _OP_ _B_##L)); \\\n+    for (unsigned int i = 0; i < 20; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (_A_##S _OP_ _B_##S));\n+\n+#define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_) \\\n+    TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L)); \\\n+    TmpS = _A_##S; TmpS _OP_##= _B_##S; BOOST_CHECK(TmpS == (_A_##S _OP_ _B_##S));\n+\n+BOOST_AUTO_TEST_CASE( bitwiseOperators ) \n+{\n+    unsigned char TmpArray[32];\n+    \n+    CHECKBITWISEOPERATOR(R1,R2,|)\n+    CHECKBITWISEOPERATOR(R1,R2,^)\n+    CHECKBITWISEOPERATOR(R1,R2,&)\n+    CHECKBITWISEOPERATOR(R1,Zero,|)\n+    CHECKBITWISEOPERATOR(R1,Zero,^)\n+    CHECKBITWISEOPERATOR(R1,Zero,&)\n+    CHECKBITWISEOPERATOR(R1,Max,|)\n+    CHECKBITWISEOPERATOR(R1,Max,^)\n+    CHECKBITWISEOPERATOR(R1,Max,&)\n+    CHECKBITWISEOPERATOR(Zero,R1,|)\n+    CHECKBITWISEOPERATOR(Zero,R1,^)\n+    CHECKBITWISEOPERATOR(Zero,R1,&)\n+    CHECKBITWISEOPERATOR(Max,R1,|)\n+    CHECKBITWISEOPERATOR(Max,R1,^)\n+    CHECKBITWISEOPERATOR(Max,R1,&)\n+\n+    uint256 TmpL;\n+    uint160 TmpS;\n+    CHECKASSIGNMENTOPERATOR(R1,R2,|)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,^)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,&)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,&)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,&)\n+\n+    uint64_t Tmp64 = 0xe1db685c9a0b47a2ULL; \n+    TmpL = R1L; TmpL |= Tmp64;  BOOST_CHECK(TmpL == (R1L | uint256(Tmp64)));\n+    TmpS = R1S; TmpS |= Tmp64;  BOOST_CHECK(TmpS == (R1S | uint160(Tmp64)));\n+    TmpL = R1L; TmpL |= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS = R1S; TmpS |= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS ^= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= Tmp64;  BOOST_CHECK(TmpL == (R1L ^ uint256(Tmp64)));\n+    TmpS ^= Tmp64;  BOOST_CHECK(TmpS == (R1S ^ uint160(Tmp64)));\n+}\n+\n+BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n+{\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i) {\n+\tTmpL= OneL<< i;\n+\tBOOST_CHECK( TmpL >= ZeroL && TmpL > ZeroL && ZeroL < TmpL && ZeroL <= TmpL);\n+\tBOOST_CHECK( TmpL >= 0 && TmpL > 0 && 0 < TmpL && 0 <= TmpL);\n+\tTmpL |= R1L;\n+\tBOOST_CHECK( TmpL >= R1L ); BOOST_CHECK( (TmpL == R1L) != (TmpL > R1L)); BOOST_CHECK( (TmpL == R1L) || !( TmpL <= R1L));\n+\tBOOST_CHECK( R1L <= TmpL ); BOOST_CHECK( (R1L == TmpL) != (R1L < TmpL)); BOOST_CHECK( (TmpL == R1L) || !( R1L >= TmpL));\n+\tBOOST_CHECK(! (TmpL < R1L)); BOOST_CHECK(! (R1L > TmpL));\n+    }\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i) {\n+\tTmpS= OneS<< i;\n+\tBOOST_CHECK( TmpS >= ZeroS && TmpS > ZeroS && ZeroS < TmpS && ZeroS <= TmpS);\n+\tBOOST_CHECK( TmpS >= 0 && TmpS > 0 && 0 < TmpS && 0 <= TmpS);\n+\tTmpS |= R1S;\n+\tBOOST_CHECK( TmpS >= R1S ); BOOST_CHECK( (TmpS == R1S) != (TmpS > R1S)); BOOST_CHECK( (TmpS == R1S) || !( TmpS <= R1S));\n+\tBOOST_CHECK( R1S <= TmpS ); BOOST_CHECK( (R1S == TmpS) != (R1S < TmpS)); BOOST_CHECK( (TmpS == R1S) || !( R1S >= TmpS));\n+\tBOOST_CHECK(! (TmpS < R1S)); BOOST_CHECK(! (R1S > TmpS));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( plusMinus ) \n+{\n+    uint256 TmpL = 0;\n+    BOOST_CHECK(R1L+R2L == uint256(\"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C\"));\n+    TmpL += R1L;\n+    BOOST_CHECK(TmpL == R1L);\n+    TmpL += R2L;\n+    BOOST_CHECK(TmpL == R1L + R2L);\n+    BOOST_CHECK(OneL+MaxL == ZeroL);\n+    BOOST_CHECK(MaxL+OneL == ZeroL);\n+    for (unsigned int i = 1; i < 256; ++i) {\n+\tBOOST_CHECK( (MaxL >> i) + OneL == (HalfL >> (i-1)) );\n+\tBOOST_CHECK( OneL + (MaxL >> i) == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); TmpL += OneL;\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); TmpL += 1;\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); \n+\tBOOST_CHECK( TmpL++ == (MaxL>>i) );\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)));\n+    }\n+    BOOST_CHECK(uint256(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == uint256(0xbedc77e27940a7ULL  + 0xee8d836fce66fbULL));\n+    TmpL = uint256(0xbedc77e27940a7ULL); TmpL += 0xee8d836fce66fbULL;\n+    BOOST_CHECK(TmpL == uint256(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n+    TmpL -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpL == 0xbedc77e27940a7ULL);\n+    TmpL = R1L;\n+    BOOST_CHECK(++TmpL == R1L+1);\n+\n+    BOOST_CHECK(R1L -(-R2L) == R1L+R2L);\n+    BOOST_CHECK(R1L -(-OneL) == R1L+OneL);\n+    BOOST_CHECK(R1L - OneL == R1L+(-OneL));\n+    for (unsigned int i = 1; i < 256; ++i) {\n+\tBOOST_CHECK((MaxL>>i) - (-OneL)  == (HalfL >> (i-1)));\n+\tBOOST_CHECK((HalfL >> (i-1)) - OneL == (MaxL>>i));\n+\tTmpL = (HalfL >> (i-1));\n+\tBOOST_CHECK(TmpL-- == (HalfL >> (i-1)));\n+\tBOOST_CHECK(TmpL == (MaxL >> i));\n+\tTmpL = (HalfL >> (i-1));\n+\tBOOST_CHECK(--TmpL == (MaxL >> i));\n+    }\n+    TmpL = R1L;\n+    BOOST_CHECK(--TmpL == R1L-1);\n+\n+    // 160-bit; copy-pasted\n+    uint160 TmpS = 0;\n+    BOOST_CHECK(R1S+R2S == uint160(\"58F1B1369288D204211CA751527CFC175767850C\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356212",
      "id" : 8356212,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMTI=",
      "original_commit_id" : "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "original_line" : null,
      "original_position" : 460,
      "original_start_line" : null,
      "path" : "src/test/uint256_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356212/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2013-12-25T10:16:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356222"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "OK, there are a few more of those.\n",
      "commit_id" : "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "created_at" : "2013-12-15T20:56:59Z",
      "diff_hunk" : "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));\n+const uint160 R1S = uint160(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+20));\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+const unsigned char R2Array[] = \n+    \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n+    \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n+const uint256 R2L = uint256(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+32));\n+const uint160 R2S = uint160(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+20));\n+\n+const unsigned char ZeroArray[] = \n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 ZeroL = uint256(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+32));\n+const uint160 ZeroS = uint160(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+20));\n+\t\t\t     \n+const unsigned char OneArray[] = \n+    \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 OneL = uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32));\n+const uint160 OneS = uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20));\n+\n+const unsigned char MaxArray[] = \n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n+const uint256 MaxL = uint256(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+32));\n+const uint160 MaxS = uint160(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+20));\n+\n+const uint256 HalfL = (OneL << 255);\n+const uint160 HalfS = (OneS << 159);\n+std::string ArrayToString(const unsigned char A[], unsigned int width)\n+{\n+    std::stringstream Stream;\n+    Stream << std::hex;\n+    for (unsigned int i = 0; i < width; ++i) \n+    {\n+\tStream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n+    }       \n+    return Stream.str();\n+}\n+\n+void LowestUint64OfArray(const unsigned char A[],uint64_t& R1a)\n+{\n+    R1a = 0;\n+    for (unsigned int i = 0; i < 8; ++i) \n+    {\n+\tR1a += (((uint64_t)A[i]) << 8*i);\n+    }\n+}\n \n-BOOST_AUTO_TEST_CASE(uint256_equality)\n+BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n {\n-    uint256 num1 = 10;\n-    uint256 num2 = 11;\n-    BOOST_CHECK(num1+1 == num2);\n+    BOOST_CHECK(1 == 0+1);\n+    // constructor uint256(vector<char>):\n+    BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n+    BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n+    BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n+    BOOST_CHECK(R2S.ToString() == ArrayToString(R2Array,20));\n+    BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(ZeroS.ToString() == ArrayToString(ZeroArray,20));\n+    BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\n+    BOOST_CHECK(OneS.ToString() == ArrayToString(OneArray,20));\n+    BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\n+    BOOST_CHECK(MaxS.ToString() == ArrayToString(MaxArray,20));\n+    BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(OneS.ToString() != ArrayToString(ZeroArray,20));\n+\n+    // == and !=\n+    BOOST_CHECK(R1L != R2L && R1S != R2S);\n+    BOOST_CHECK(ZeroL != OneL && ZeroS != OneS);\n+    BOOST_CHECK(OneL != ZeroL && OneS != ZeroS);\n+    BOOST_CHECK(MaxL != ZeroL && MaxS != ZeroS);\n+    BOOST_CHECK(~MaxL == ZeroL && ~MaxS == ZeroS);\n+    BOOST_CHECK( ((R1L ^ R2L) ^ R1L) == R2L);\n+    BOOST_CHECK( ((R1S ^ R2S) ^ R1S) == R2S);\n+    \n+    uint64_t Tmp64 = 0xc4dab720d9c7acaaULL;\n+    for (unsigned int i = 0; i < 256; ++i) \n+    {\n+     \tBOOST_CHECK(ZeroL != (OneL << i)); \n+\tBOOST_CHECK((OneL << i) != ZeroL); \n+\tBOOST_CHECK(R1L != (R1L ^ (OneL << i)));\n+\tBOOST_CHECK(((uint256(Tmp64) ^ (OneL << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroL == (OneL << 256)); \n+\n+    for (unsigned int i = 0; i < 160; ++i) \n+    {\n+     \tBOOST_CHECK(ZeroS != (OneS << i)); \n+\tBOOST_CHECK((OneS << i) != ZeroS); \n+\tBOOST_CHECK(R1S != (R1S ^ (OneS << i)));\n+\tBOOST_CHECK(((uint160(Tmp64) ^ (OneS << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroS == (OneS << 256)); \n+\n+    // String Constructor and Copy Constructor\n+    BOOST_CHECK(uint256(\"0x\"+R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"0x\"+R2L.ToString()) == R2L);\n+    BOOST_CHECK(uint256(\"0x\"+ZeroL.ToString()) == ZeroL);\n+    BOOST_CHECK(uint256(\"0x\"+OneL.ToString()) == OneL);\n+    BOOST_CHECK(uint256(\"0x\"+MaxL.ToString()) == MaxL);\n+    BOOST_CHECK(uint256(R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"   0x\"+R1L.ToString()+\"   \") == R1L);\n+    BOOST_CHECK(uint256(\"\") == ZeroL);\n+    BOOST_CHECK(R1L == uint256(\"7D1DE5EAF9B156D53208F033B5AA8122D2D2355D5E12292B121156CFDB4A529C\"));\n+    BOOST_CHECK(uint256(R1L) == R1L);\n+    BOOST_CHECK((uint256(R1L^R2L)^R2L) == R1L);\n+    BOOST_CHECK(uint256(ZeroL) == ZeroL);\n+    BOOST_CHECK(uint256(OneL) == OneL);\n+\n+    BOOST_CHECK(uint160(\"0x\"+R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"0x\"+R2S.ToString()) == R2S);\n+    BOOST_CHECK(uint160(\"0x\"+ZeroS.ToString()) == ZeroS);\n+    BOOST_CHECK(uint160(\"0x\"+OneS.ToString()) == OneS);\n+    BOOST_CHECK(uint160(\"0x\"+MaxS.ToString()) == MaxS);\n+    BOOST_CHECK(uint160(R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"   0x\"+R1S.ToString()+\"   \") == R1S); \n+    BOOST_CHECK(uint160(\"\") == ZeroS);\n+    BOOST_CHECK(R1S == uint160(\"7D1DE5EAF9B156D53208F033B5AA8122D2D2355D5E12292B121156CFDB4A529C\"));\n \n-    uint64_t num3 = 10;\n-    BOOST_CHECK(num1 == num3);\n-    BOOST_CHECK(num1+num2 == num3+num2);\n+    BOOST_CHECK(uint160(R1S) == R1S);\n+    BOOST_CHECK((uint160(R1S^R2S)^R2S) == R1S);\n+    BOOST_CHECK(uint160(ZeroS) == ZeroS);\n+    BOOST_CHECK(uint160(OneS) == OneS);\n+\n+    // uint64_t constructor\n+    uint64_t Part;\n+    LowestUint64OfArray(R1Array,Part);\n+    BOOST_CHECK( (R1L & uint256(\"0xffffffffffffffff\")) == uint256(Part));\n+    BOOST_CHECK(ZeroL == uint256(0));\n+    BOOST_CHECK(OneL == uint256(1));\n+    BOOST_CHECK(uint256(\"0xffffffffffffffff\") = uint256(0xffffffffffffffffULL));\n+    BOOST_CHECK( (R1S & uint160(\"0xffffffffffffffff\")) == uint160(Part));\n+    BOOST_CHECK(ZeroS == uint160(0));\n+    BOOST_CHECK(OneS == uint160(1));\n+    BOOST_CHECK(uint160(\"0xffffffffffffffff\") = uint160(0xffffffffffffffffULL));\n+\n+    // Assignment (from base_uint)\n+    uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\n+    tmpL = ~OneL; BOOST_CHECK(tmpL == ~OneL);\n+    tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\n+    tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\n+    tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n+    uint160 tmpS = ~ZeroS; BOOST_CHECK(tmpS == ~ZeroS);\n+    tmpS = ~OneS; BOOST_CHECK(tmpS == ~OneS);\n+    tmpS = ~R1S; BOOST_CHECK(tmpS == ~R1S);\n+    tmpS = ~R2S; BOOST_CHECK(tmpS == ~R2S);\n+    tmpS = ~MaxS; BOOST_CHECK(tmpS == ~MaxS);\n+\n+    // Wrong length must give 0\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+31)) == 0);\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+19)) == 0);\n }\n \n-BOOST_AUTO_TEST_CASE(uint256_hex)\n+void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n {\n-    std::string hexStr = \"d35583ed493a5eee756931353144f558e6a9ab3ad6024a63ced7f10daf7faad9\";\n-    uint256 num1;\n-    num1.SetHex(hexStr);\n-    BOOST_CHECK(num1.GetHex() == hexStr);\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+\tunsigned int F = (T+bitsToShift/8);\n+\tif (F < arrayLength) \n+\t    to[T]  = from[F] >> (bitsToShift%8);\n+\telse\n+\t    to[T] = 0;\n+\tif (F + 1 < arrayLength) \n+\t    to[T] |= from[(F+1)] << (8-bitsToShift%8);\n+    }\n+}\n+\n+void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n+{\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+\tif (T >= bitsToShift/8) \n+\t{\n+\t    unsigned int F = T-bitsToShift/8;\n+\t    to[T]  = from[F] << (bitsToShift%8);\n+\t    if (T >= bitsToShift/8+1)\n+\t\tto[T] |= from[F-1] >> (8-bitsToShift%8);\n+\t}\n+\telse {\n+\t    to[T] = 0;\n+\t}\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( shifts ) { // \"<<\"  \">>\"  \"<<=\"  \">>=\"\n+    unsigned char TmpArray[32];\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i)\n+    {\n+\tshiftArrayLeft(TmpArray, OneArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (OneL << i));\n+\tTmpL = OneL; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (OneL << i));\n+\tBOOST_CHECK((HalfL >> (255-i)) == (OneL << i));\n+\tTmpL = HalfL; TmpL >>= (255-i);\n+\tBOOST_CHECK(TmpL == (OneL << i));\n+\t\t    \n+\tshiftArrayLeft(TmpArray, R1Array, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (R1L << i));\n+\tTmpL = R1L; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (R1L << i));\n+\n+\tshiftArrayRight(TmpArray, R1Array, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (R1L >> i)); \n+\tTmpL = R1L; TmpL >>= i;\n+\tBOOST_CHECK(TmpL == (R1L >> i));\n+\n+\tshiftArrayLeft(TmpArray, MaxArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (MaxL << i));\n+\tTmpL = MaxL; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (MaxL << i));\n+\n+\tshiftArrayRight(TmpArray, MaxArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (MaxL >> i));\n+\tTmpL = MaxL; TmpL >>= i;\n+\tBOOST_CHECK(TmpL == (MaxL >> i));\n+    }\n+    uint256 c1L = uint256(0x0123456789abcdefULL);\n+    uint256 c2L = c1L << 128;\n+    for (unsigned int i = 0; i < 128; ++i) {\n+\tBOOST_CHECK((c1L << i) == (c2L >> (128-i)));\n+    }\n+    for (unsigned int i = 128; i < 256; ++i) {\n+\tBOOST_CHECK((c1L << i) == (c2L << (i-128)));\n+    }\n+\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i)\n+    {\n+\tshiftArrayLeft(TmpArray, OneArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (OneS << i));\n+\tTmpS = OneS; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (OneS << i));\n+\tBOOST_CHECK((HalfS >> (159-i)) == (OneS << i));\n+\tTmpS = HalfS; TmpS >>= (159-i);\n+\tBOOST_CHECK(TmpS == (OneS << i));\n+\t\t    \n+\tshiftArrayLeft(TmpArray, R1Array, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (R1S << i));\n+\tTmpS = R1S; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (R1S << i));\n+\n+\tshiftArrayRight(TmpArray, R1Array, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (R1S >> i)); \n+\tTmpS = R1S; TmpS >>= i;\n+\tBOOST_CHECK(TmpS == (R1S >> i));\n+\n+\tshiftArrayLeft(TmpArray, MaxArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (MaxS << i));\n+\tTmpS = MaxS; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (MaxS << i));\n+\n+\tshiftArrayRight(TmpArray, MaxArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (MaxS >> i));\n+\tTmpS = MaxS; TmpS >>= i;\n+\tBOOST_CHECK(TmpS == (MaxS >> i));\n+    }\n+    uint160 c1S = uint160(0x0123456789abcdefULL);\n+    uint160 c2S = c1S << 80;\n+    for (unsigned int i = 0; i < 80; ++i) {\n+\tBOOST_CHECK((c1S << i) == (c2S >> (80-i)));\n+    }\n+    for (unsigned int i = 80; i < 160; ++i) {\n+\tBOOST_CHECK((c1S << i) == (c2S << (i-80)));\n+    }\n+\n }\n \n+BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n+{\n+    BOOST_CHECK(!ZeroL);  BOOST_CHECK(!ZeroS);\n+    BOOST_CHECK(!(!OneL));BOOST_CHECK(!(!OneS));\n+    for (unsigned int i = 0; i < 256; ++i) \n+\tBOOST_CHECK(!(!(OneL<<i)));\n+    for (unsigned int i = 0; i < 160; ++i) \n+\tBOOST_CHECK(!(!(OneS<<i)));\n+    BOOST_CHECK(!(!R1L));BOOST_CHECK(!(!R1S));\n+    BOOST_CHECK(!(!R2S));BOOST_CHECK(!(!R2S)); \n+    BOOST_CHECK(!(!MaxL));BOOST_CHECK(!(!MaxS));\n+\n+    BOOST_CHECK(~ZeroL == MaxL); BOOST_CHECK(~ZeroS == MaxS);\n+\n+    unsigned char TmpArray[32];\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; } \n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (~R1L));\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (~R1S));\n+\n+    BOOST_CHECK(-ZeroL == ZeroL); BOOST_CHECK(-ZeroS == ZeroS);\n+    BOOST_CHECK(-R1L == uint256(\"82e21a15064ea92acdf70fcc4a557edd2d2dcaa2a1edd6d4edeea93024b5ad64\"));\n+    BOOST_CHECK(-R1S == uint160(\"4a557edd2d2dcaa2a1edd6d4edeea93024b5ad64\"));\n+    for (unsigned int i = 0; i < 256; ++i) \n+\tBOOST_CHECK(-(OneL<<i) == (MaxL << i));\n+    for (unsigned int i = 0; i < 160; ++i) \n+\tBOOST_CHECK(-(OneS<<i) == (MaxS << i));\n+}\n+\n+\n+// Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n+// element of Aarray and Barray, and then converting the result into a uint256.\n+#define CHECKBITWISEOPERATOR(_A_,_B_,_OP_) \\\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (_A_##L _OP_ _B_##L)); \\\n+    for (unsigned int i = 0; i < 20; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (_A_##S _OP_ _B_##S));\n+\n+#define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_) \\\n+    TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L)); \\\n+    TmpS = _A_##S; TmpS _OP_##= _B_##S; BOOST_CHECK(TmpS == (_A_##S _OP_ _B_##S));\n+\n+BOOST_AUTO_TEST_CASE( bitwiseOperators ) \n+{\n+    unsigned char TmpArray[32];\n+    \n+    CHECKBITWISEOPERATOR(R1,R2,|)\n+    CHECKBITWISEOPERATOR(R1,R2,^)\n+    CHECKBITWISEOPERATOR(R1,R2,&)\n+    CHECKBITWISEOPERATOR(R1,Zero,|)\n+    CHECKBITWISEOPERATOR(R1,Zero,^)\n+    CHECKBITWISEOPERATOR(R1,Zero,&)\n+    CHECKBITWISEOPERATOR(R1,Max,|)\n+    CHECKBITWISEOPERATOR(R1,Max,^)\n+    CHECKBITWISEOPERATOR(R1,Max,&)\n+    CHECKBITWISEOPERATOR(Zero,R1,|)\n+    CHECKBITWISEOPERATOR(Zero,R1,^)\n+    CHECKBITWISEOPERATOR(Zero,R1,&)\n+    CHECKBITWISEOPERATOR(Max,R1,|)\n+    CHECKBITWISEOPERATOR(Max,R1,^)\n+    CHECKBITWISEOPERATOR(Max,R1,&)\n+\n+    uint256 TmpL;\n+    uint160 TmpS;\n+    CHECKASSIGNMENTOPERATOR(R1,R2,|)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,^)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,&)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,&)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,&)\n+\n+    uint64_t Tmp64 = 0xe1db685c9a0b47a2ULL; \n+    TmpL = R1L; TmpL |= Tmp64;  BOOST_CHECK(TmpL == (R1L | uint256(Tmp64)));\n+    TmpS = R1S; TmpS |= Tmp64;  BOOST_CHECK(TmpS == (R1S | uint160(Tmp64)));\n+    TmpL = R1L; TmpL |= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS = R1S; TmpS |= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS ^= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= Tmp64;  BOOST_CHECK(TmpL == (R1L ^ uint256(Tmp64)));\n+    TmpS ^= Tmp64;  BOOST_CHECK(TmpS == (R1S ^ uint160(Tmp64)));\n+}\n+\n+BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n+{\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i) {\n+\tTmpL= OneL<< i;\n+\tBOOST_CHECK( TmpL >= ZeroL && TmpL > ZeroL && ZeroL < TmpL && ZeroL <= TmpL);\n+\tBOOST_CHECK( TmpL >= 0 && TmpL > 0 && 0 < TmpL && 0 <= TmpL);\n+\tTmpL |= R1L;\n+\tBOOST_CHECK( TmpL >= R1L ); BOOST_CHECK( (TmpL == R1L) != (TmpL > R1L)); BOOST_CHECK( (TmpL == R1L) || !( TmpL <= R1L));\n+\tBOOST_CHECK( R1L <= TmpL ); BOOST_CHECK( (R1L == TmpL) != (R1L < TmpL)); BOOST_CHECK( (TmpL == R1L) || !( R1L >= TmpL));\n+\tBOOST_CHECK(! (TmpL < R1L)); BOOST_CHECK(! (R1L > TmpL));\n+    }\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i) {\n+\tTmpS= OneS<< i;\n+\tBOOST_CHECK( TmpS >= ZeroS && TmpS > ZeroS && ZeroS < TmpS && ZeroS <= TmpS);\n+\tBOOST_CHECK( TmpS >= 0 && TmpS > 0 && 0 < TmpS && 0 <= TmpS);\n+\tTmpS |= R1S;\n+\tBOOST_CHECK( TmpS >= R1S ); BOOST_CHECK( (TmpS == R1S) != (TmpS > R1S)); BOOST_CHECK( (TmpS == R1S) || !( TmpS <= R1S));\n+\tBOOST_CHECK( R1S <= TmpS ); BOOST_CHECK( (R1S == TmpS) != (R1S < TmpS)); BOOST_CHECK( (TmpS == R1S) || !( R1S >= TmpS));\n+\tBOOST_CHECK(! (TmpS < R1S)); BOOST_CHECK(! (R1S > TmpS));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( plusMinus ) \n+{\n+    uint256 TmpL = 0;\n+    BOOST_CHECK(R1L+R2L == uint256(\"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C\"));\n+    TmpL += R1L;\n+    BOOST_CHECK(TmpL == R1L);\n+    TmpL += R2L;\n+    BOOST_CHECK(TmpL == R1L + R2L);\n+    BOOST_CHECK(OneL+MaxL == ZeroL);\n+    BOOST_CHECK(MaxL+OneL == ZeroL);\n+    for (unsigned int i = 1; i < 256; ++i) {\n+\tBOOST_CHECK( (MaxL >> i) + OneL == (HalfL >> (i-1)) );\n+\tBOOST_CHECK( OneL + (MaxL >> i) == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); TmpL += OneL;\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); TmpL += 1;\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); \n+\tBOOST_CHECK( TmpL++ == (MaxL>>i) );\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)));\n+    }\n+    BOOST_CHECK(uint256(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == uint256(0xbedc77e27940a7ULL  + 0xee8d836fce66fbULL));\n+    TmpL = uint256(0xbedc77e27940a7ULL); TmpL += 0xee8d836fce66fbULL;\n+    BOOST_CHECK(TmpL == uint256(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n+    TmpL -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpL == 0xbedc77e27940a7ULL);\n+    TmpL = R1L;\n+    BOOST_CHECK(++TmpL == R1L+1);\n+\n+    BOOST_CHECK(R1L -(-R2L) == R1L+R2L);\n+    BOOST_CHECK(R1L -(-OneL) == R1L+OneL);\n+    BOOST_CHECK(R1L - OneL == R1L+(-OneL));\n+    for (unsigned int i = 1; i < 256; ++i) {\n+\tBOOST_CHECK((MaxL>>i) - (-OneL)  == (HalfL >> (i-1)));\n+\tBOOST_CHECK((HalfL >> (i-1)) - OneL == (MaxL>>i));\n+\tTmpL = (HalfL >> (i-1));\n+\tBOOST_CHECK(TmpL-- == (HalfL >> (i-1)));\n+\tBOOST_CHECK(TmpL == (MaxL >> i));\n+\tTmpL = (HalfL >> (i-1));\n+\tBOOST_CHECK(--TmpL == (MaxL >> i));\n+    }\n+    TmpL = R1L;\n+    BOOST_CHECK(--TmpL == R1L-1);\n+\n+    // 160-bit; copy-pasted\n+    uint160 TmpS = 0;\n+    BOOST_CHECK(R1S+R2S == uint160(\"58F1B1369288D204211CA751527CFC175767850C\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356222",
      "id" : 8356222,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMjI=",
      "original_commit_id" : "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "original_line" : null,
      "original_position" : 460,
      "original_start_line" : null,
      "path" : "src/test/uint256_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356222/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2013-12-25T10:16:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356222",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4568264?v=4",
         "events_url" : "https://api.github.com/users/tholenst/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tholenst/followers",
         "following_url" : "https://api.github.com/users/tholenst/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tholenst/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tholenst",
         "id" : 4568264,
         "login" : "tholenst",
         "node_id" : "MDQ6VXNlcjQ1NjgyNjQ=",
         "organizations_url" : "https://api.github.com/users/tholenst/orgs",
         "received_events_url" : "https://api.github.com/users/tholenst/received_events",
         "repos_url" : "https://api.github.com/users/tholenst/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tholenst/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tholenst"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Very nice, just a few nits. There are several indentation errors though (tabs/spaces? please only use 4 spaces for indent).\n",
      "created_at" : "2013-12-15T20:57:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30620087",
      "id" : 30620087,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMwNjIwMDg3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30620087/reactions"
      },
      "updated_at" : "2013-12-15T20:57:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30620087",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that wouldn't be proper. If I understand C correctly, the string constant above is null terminated, and so has 33 elements.\n",
      "commit_id" : "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "created_at" : "2013-12-15T20:58:10Z",
      "diff_hunk" : "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356230",
      "id" : 8356230,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMzA=",
      "original_commit_id" : "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "original_line" : null,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/uint256_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356230/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2013-12-25T10:16:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356230",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4568264?v=4",
         "events_url" : "https://api.github.com/users/tholenst/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tholenst/followers",
         "following_url" : "https://api.github.com/users/tholenst/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tholenst/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tholenst",
         "id" : 4568264,
         "login" : "tholenst",
         "node_id" : "MDQ6VXNlcjQ1NjgyNjQ=",
         "organizations_url" : "https://api.github.com/users/tholenst/orgs",
         "received_events_url" : "https://api.github.com/users/tholenst/received_events",
         "repos_url" : "https://api.github.com/users/tholenst/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tholenst/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tholenst"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356236"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a[b] is semantically equal to *(a+b). Not sure what the string constant definition has to do with it.\n",
      "commit_id" : "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "created_at" : "2013-12-15T20:59:17Z",
      "diff_hunk" : "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356236",
      "id" : 8356236,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMzY=",
      "original_commit_id" : "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "original_line" : null,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/uint256_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356236/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2013-12-25T10:16:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356238"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356238"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh sorry, I read the wrong line :) Yes, you're right.\n",
      "commit_id" : "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "created_at" : "2013-12-15T21:00:10Z",
      "diff_hunk" : "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356238",
      "id" : 8356238,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMzg=",
      "original_commit_id" : "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "original_line" : null,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/uint256_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356238/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2013-12-25T10:16:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356238",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4568264?v=4",
         "events_url" : "https://api.github.com/users/tholenst/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tholenst/followers",
         "following_url" : "https://api.github.com/users/tholenst/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tholenst/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tholenst",
         "id" : 4568264,
         "login" : "tholenst",
         "node_id" : "MDQ6VXNlcjQ1NjgyNjQ=",
         "organizations_url" : "https://api.github.com/users/tholenst/orgs",
         "received_events_url" : "https://api.github.com/users/tholenst/received_events",
         "repos_url" : "https://api.github.com/users/tholenst/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tholenst/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tholenst"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Closed while minor points are being fixed.\n",
      "created_at" : "2013-12-15T21:14:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30620563",
      "id" : 30620563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMwNjIwNTYz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30620563/reactions"
      },
      "updated_at" : "2013-12-15T21:14:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30620563",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4568264?v=4",
         "events_url" : "https://api.github.com/users/tholenst/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tholenst/followers",
         "following_url" : "https://api.github.com/users/tholenst/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tholenst/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tholenst",
         "id" : 4568264,
         "login" : "tholenst",
         "node_id" : "MDQ6VXNlcjQ1NjgyNjQ=",
         "organizations_url" : "https://api.github.com/users/tholenst/orgs",
         "received_events_url" : "https://api.github.com/users/tholenst/received_events",
         "repos_url" : "https://api.github.com/users/tholenst/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tholenst/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tholenst"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "No need to close for minor fixes. You can just re-push to the same branch to update the pull request.\n",
      "created_at" : "2013-12-15T21:20:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30620708",
      "id" : 30620708,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMwNjIwNzA4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30620708/reactions"
      },
      "updated_at" : "2013-12-15T21:20:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30620708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, problem is I won't be able to finish this until Wednesday, no need to clutter things until then.\n",
      "created_at" : "2013-12-15T21:37:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30621658",
      "id" : 30621658,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMwNjIxNjU4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30621658/reactions"
      },
      "updated_at" : "2013-12-15T21:37:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30621658",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4568264?v=4",
         "events_url" : "https://api.github.com/users/tholenst/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tholenst/followers",
         "following_url" : "https://api.github.com/users/tholenst/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tholenst/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tholenst",
         "id" : 4568264,
         "login" : "tholenst",
         "node_id" : "MDQ6VXNlcjQ1NjgyNjQ=",
         "organizations_url" : "https://api.github.com/users/tholenst/orgs",
         "received_events_url" : "https://api.github.com/users/tholenst/received_events",
         "repos_url" : "https://api.github.com/users/tholenst/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tholenst/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tholenst"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8494346"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8494346"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, let's remove this.\n",
      "commit_id" : "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "created_at" : "2013-12-20T07:59:09Z",
      "diff_hunk" : "@@ -638,147 +630,4 @@ class uint256 : public base_uint256\n inline const uint256 operator+(const uint256& a, const uint256& b)      { return (base_uint256)a +  (base_uint256)b; }\n inline const uint256 operator-(const uint256& a, const uint256& b)      { return (base_uint256)a -  (base_uint256)b; }\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-#ifdef TEST_UINT256",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8494346",
      "id" : 8494346,
      "line" : 650,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTQzNDY=",
      "original_commit_id" : "d1490c69b3a3fae776ef5c6b6c7c0c71aa9a61ee",
      "original_line" : null,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/uint256.h",
      "position" : 63,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8494346/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2013-12-25T10:16:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8494346",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Changes look good.\n\nBut before this can be merged, please reorganize the commits a bit.\n\nYou don't need to squash everything into one commit. For example d1490c6 and d1490c6 make sense as seperate ones, but do roll the dummy commit and indentation fixes into your original code changes.\n",
      "created_at" : "2013-12-20T08:03:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30994427",
      "id" : 30994427,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMwOTk0NDI3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30994427/reactions"
      },
      "updated_at" : "2013-12-20T08:03:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30994427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you, Wladimir.\n\nI'm new to github and git, so I don't know yet how to do useful commit structures. I improved it. Let me know if you still see room for improvement.\n",
      "created_at" : "2013-12-21T16:00:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-31066009",
      "id" : 31066009,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMDY2MDA5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/31066009/reactions"
      },
      "updated_at" : "2013-12-21T16:00:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/31066009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4568264?v=4",
         "events_url" : "https://api.github.com/users/tholenst/events{/privacy}",
         "followers_url" : "https://api.github.com/users/tholenst/followers",
         "following_url" : "https://api.github.com/users/tholenst/following{/other_user}",
         "gists_url" : "https://api.github.com/users/tholenst/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/tholenst",
         "id" : 4568264,
         "login" : "tholenst",
         "node_id" : "MDQ6VXNlcjQ1NjgyNjQ=",
         "organizations_url" : "https://api.github.com/users/tholenst/orgs",
         "received_events_url" : "https://api.github.com/users/tholenst/received_events",
         "repos_url" : "https://api.github.com/users/tholenst/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/tholenst/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/tholenst/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/tholenst"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/daa6b20e29f3926a16d4da6962ff00b74623fc6b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
      "created_at" : "2013-12-25T10:40:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-31196831",
      "id" : 31196831,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/3422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMTk2ODMx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/31196831/reactions"
      },
      "updated_at" : "2013-12-25T10:40:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/31196831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2110907?v=4",
         "events_url" : "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinPullTester/followers",
         "following_url" : "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinPullTester",
         "id" : 2110907,
         "login" : "BitcoinPullTester",
         "node_id" : "MDQ6VXNlcjIxMTA5MDc=",
         "organizations_url" : "https://api.github.com/users/BitcoinPullTester/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinPullTester/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinPullTester/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinPullTester/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinPullTester"
      }
   }
]
