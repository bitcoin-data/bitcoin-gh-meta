[
   {
      "body" : "In the CCheckQueueControl constructor, we're not acquiring the lock on the pqueue before checking its state:\r\n\r\n```\r\nCCheckQueueControl(CCheckQueue<T>* pqueueIn) : pqueue(pqueueIn), fDone(false)\r\n    {\r\n        // passed queue is supposed to be unused, or NULL\r\n        if (pqueue != NULL) {\r\n            assert(pqueue->nTotal == pqueue->nIdle);\r\n            assert(pqueue->nTodo == 0);\r\n            assert(pqueue->fAllOk == true);\r\n        }\r\n    }\r\n```\r\n\r\nConsequently I think there could be a race condition where these values could look inconsistent (nIdle is updated each time in the thread's Loop()).\r\n\r\nI was able to reliably reproduce this behavior by inserting a ```usleep(500000);``` in CCheckQueue::Loop, just before the call to ```nIdle++;```, and then starting up with a reindex.\r\n\r\nTo fix this I think we just need to acquire the pqueue's lock before checking these variables; perhaps add an IsIdle() member function to CCheckQueue that acquires the lock and then does these checks, and then assert that function returns true in the CCheckQueueControl constructor?\r\n",
      "created_at" : "2015-01-28T18:01:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/5703#issuecomment-71883180",
      "id" : 71883180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5703",
      "updated_at" : "2015-01-28T18:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/71883180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@sdaftuar Nice find, and doing that shouldn't hurt. But I'm not entirely sure how this is possible in the first place - there should not be two threads holding a CCheckQueueControl object simultaneous (it's only created inside ConnectBlock, while holding cs_main the whole time).",
      "created_at" : "2015-01-28T19:20:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/5703#issuecomment-71897206",
      "id" : 71897206,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5703",
      "updated_at" : "2015-01-28T19:20:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/71897206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
