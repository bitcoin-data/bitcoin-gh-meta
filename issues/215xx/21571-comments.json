[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21563 (net: Drop cs_sendProcessing mutex that guards nothing by hebasto)\n* #21244 (Move GetDataDir to ArgsManager by kiminuo)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-04-02T15:10:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21571#issuecomment-812571537",
      "id" : 812571537,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21571",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMjU3MTUzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-02T15:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/812571537",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606307559"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606307559"
         }
      },
      "author_association" : "MEMBER",
      "body" : "3d5eac6d\r\n```suggestion\r\n    const CService tor_service{tor_netaddr, Params().GetDefaultPort()};\r\n```",
      "commit_id" : "81747b21719b3fa6b0fdfc3b084c0104d64903f9",
      "created_at" : "2021-04-02T16:15:59Z",
      "diff_hunk" : "@@ -209,46 +210,94 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+    const CService tor_service(tor_netaddr, Params().GetDefaultPort());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606307559",
      "id" : 606307559,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjMwNzU1OQ==",
      "original_commit_id" : "3d5eac6dc3f9911a548a76eee3b6532ea3e02bb5",
      "original_line" : 220,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 627072360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-02T16:34:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606307559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606307936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606307936"
         }
      },
      "author_association" : "MEMBER",
      "body" : "3d5eac6dc3f9911a548a76eee3b6532ea3e02bb5\r\n```suggestion\r\n    // Make sure non-IP peers are discouraged and disconnected properly.\r\n```",
      "commit_id" : "81747b21719b3fa6b0fdfc3b084c0104d64903f9",
      "created_at" : "2021-04-02T16:17:00Z",
      "diff_hunk" : "@@ -209,46 +210,94 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+    const CService tor_service(tor_netaddr, Params().GetDefaultPort());\n+\n+    const std::array<CAddress, 3> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n+                                       CAddress{ip(0xa0b0c002), NODE_NONE},\n+                                       CAddress{tor_service, NODE_NONE}};\n+\n+    const CNetAddr other_addr{ip(0xa0b0ff01)}; // Not any of addr[].\n+\n+    std::array<CNode*, 3> nodes;\n+\n     banman->ClearBanned();\n-    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1);\n-    dummyNode1.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n+    nodes[0] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /* nKeyedNetGroupIn */ 0,\n+                         /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false);\n+    nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[0]);\n+    nodes[0]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[0]);\n+    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n+        LOCK(nodes[0]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));\n-    BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n-\n-    CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, /* nKeyedNetGroupIn */ 1, /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode2);\n-    dummyNode2.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n+\n+    nodes[1] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /* nKeyedNetGroupIn */ 1,\n+                         /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false);\n+    nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[1]);\n+    nodes[1]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[1]);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    peerLogic->Misbehaving(dummyNode2.GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    // [0] is still discouraged/disconnected.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    // [1] is not discouraged/disconnected yet.\n+    BOOST_CHECK(!banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(!nodes[1]->fDisconnect);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // Expect both 1 and 2\n-    BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n-\n-    peerLogic->FinalizeNode(dummyNode1);\n-    peerLogic->FinalizeNode(dummyNode2);\n+    // Expect both [0] and [1] to be discouraged/disconnected now.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n+\n+    // Make sure non-IP peers get discouraged and disconnected properly.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606307936",
      "id" : 606307936,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjMwNzkzNg==",
      "original_commit_id" : "3d5eac6dc3f9911a548a76eee3b6532ea3e02bb5",
      "original_line" : 276,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 627072360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-02T16:34:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606307936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606309650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606309650"
         }
      },
      "author_association" : "MEMBER",
      "body" : "d87815ea\r\n\r\n```diff\r\n@@ -231,9 +231,9 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\r\n-    nodes[0] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /* nKeyedNetGroupIn */ 0,\r\n+    nodes[0] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /* nKeyedNetGroupIn */ 0,\r\n                          /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\",\r\n-                         ConnectionType::INBOUND, /* inbound_onion */ false);\r\n+                         ConnectionType::INBOUND, /* inbound_onion */ false};\r\n\r\n@@ -247,9 +247,9 @@ BOOST_AUTO_TEST_CASE(peer_discouragement) \r\n-    nodes[1] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /* nKeyedNetGroupIn */ 1,\r\n+    nodes[1] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /* nKeyedNetGroupIn */ 1,\r\n                          /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\r\n-                         ConnectionType::INBOUND, /* inbound_onion */ false);\r\n+                         ConnectionType::INBOUND, /* inbound_onion */ false};\r\n```\r\n\r\n3d5eac6dc3f9911a548a76eee3b6532ea3e02bb5\r\n\r\n```diff\r\n@@ -278,11 +278,11 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\r\n \r\n-    nodes[2] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /* nKeyedNetGroupIn */ 1,\r\n+    nodes[2] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /* nKeyedNetGroupIn */ 1,\r\n                          /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\r\n-                         ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false);\r\n+                         ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false};\r\n```\r\n",
      "commit_id" : "81747b21719b3fa6b0fdfc3b084c0104d64903f9",
      "created_at" : "2021-04-02T16:21:12Z",
      "diff_hunk" : "@@ -209,46 +210,94 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+    const CService tor_service(tor_netaddr, Params().GetDefaultPort());\n+\n+    const std::array<CAddress, 3> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n+                                       CAddress{ip(0xa0b0c002), NODE_NONE},\n+                                       CAddress{tor_service, NODE_NONE}};\n+\n+    const CNetAddr other_addr{ip(0xa0b0ff01)}; // Not any of addr[].\n+\n+    std::array<CNode*, 3> nodes;\n+\n     banman->ClearBanned();\n-    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1);\n-    dummyNode1.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n+    nodes[0] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /* nKeyedNetGroupIn */ 0,\n+                         /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false);\n+    nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[0]);\n+    nodes[0]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[0]);\n+    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n+        LOCK(nodes[0]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));\n-    BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n-\n-    CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, /* nKeyedNetGroupIn */ 1, /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode2);\n-    dummyNode2.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n+\n+    nodes[1] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /* nKeyedNetGroupIn */ 1,\n+                         /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false);\n+    nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[1]);\n+    nodes[1]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[1]);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    peerLogic->Misbehaving(dummyNode2.GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    // [0] is still discouraged/disconnected.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    // [1] is not discouraged/disconnected yet.\n+    BOOST_CHECK(!banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(!nodes[1]->fDisconnect);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // Expect both 1 and 2\n-    BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n-\n-    peerLogic->FinalizeNode(dummyNode1);\n-    peerLogic->FinalizeNode(dummyNode2);\n+    // Expect both [0] and [1] to be discouraged/disconnected now.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n+\n+    // Make sure non-IP peers get discouraged and disconnected properly.\n+\n+    nodes[2] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /* nKeyedNetGroupIn */ 1,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606309650",
      "id" : 606309650,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjMwOTY1MA==",
      "original_commit_id" : "3d5eac6dc3f9911a548a76eee3b6532ea3e02bb5",
      "original_line" : 278,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 627072360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-02T16:34:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606309650",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606314885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606314885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, done",
      "commit_id" : "81747b21719b3fa6b0fdfc3b084c0104d64903f9",
      "created_at" : "2021-04-02T16:35:01Z",
      "diff_hunk" : "@@ -209,46 +210,94 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+    const CService tor_service(tor_netaddr, Params().GetDefaultPort());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606314885",
      "id" : 606314885,
      "in_reply_to_id" : 606307559,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjMxNDg4NQ==",
      "original_commit_id" : "3d5eac6dc3f9911a548a76eee3b6532ea3e02bb5",
      "original_line" : 220,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 627092003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-02T16:35:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606314885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606314917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606314917"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, done",
      "commit_id" : "81747b21719b3fa6b0fdfc3b084c0104d64903f9",
      "created_at" : "2021-04-02T16:35:06Z",
      "diff_hunk" : "@@ -209,46 +210,94 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+    const CService tor_service(tor_netaddr, Params().GetDefaultPort());\n+\n+    const std::array<CAddress, 3> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n+                                       CAddress{ip(0xa0b0c002), NODE_NONE},\n+                                       CAddress{tor_service, NODE_NONE}};\n+\n+    const CNetAddr other_addr{ip(0xa0b0ff01)}; // Not any of addr[].\n+\n+    std::array<CNode*, 3> nodes;\n+\n     banman->ClearBanned();\n-    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1);\n-    dummyNode1.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n+    nodes[0] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /* nKeyedNetGroupIn */ 0,\n+                         /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false);\n+    nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[0]);\n+    nodes[0]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[0]);\n+    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n+        LOCK(nodes[0]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));\n-    BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n-\n-    CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, /* nKeyedNetGroupIn */ 1, /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode2);\n-    dummyNode2.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n+\n+    nodes[1] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /* nKeyedNetGroupIn */ 1,\n+                         /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false);\n+    nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[1]);\n+    nodes[1]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[1]);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    peerLogic->Misbehaving(dummyNode2.GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    // [0] is still discouraged/disconnected.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    // [1] is not discouraged/disconnected yet.\n+    BOOST_CHECK(!banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(!nodes[1]->fDisconnect);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // Expect both 1 and 2\n-    BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n-\n-    peerLogic->FinalizeNode(dummyNode1);\n-    peerLogic->FinalizeNode(dummyNode2);\n+    // Expect both [0] and [1] to be discouraged/disconnected now.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n+\n+    // Make sure non-IP peers get discouraged and disconnected properly.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606314917",
      "id" : 606314917,
      "in_reply_to_id" : 606307936,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjMxNDkxNw==",
      "original_commit_id" : "3d5eac6dc3f9911a548a76eee3b6532ea3e02bb5",
      "original_line" : 276,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 627092167,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-02T16:35:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606314917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606314969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606314969"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, done",
      "commit_id" : "81747b21719b3fa6b0fdfc3b084c0104d64903f9",
      "created_at" : "2021-04-02T16:35:12Z",
      "diff_hunk" : "@@ -209,46 +210,94 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n+    CNetAddr tor_netaddr;\n+    BOOST_REQUIRE(\n+        tor_netaddr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"));\n+    const CService tor_service(tor_netaddr, Params().GetDefaultPort());\n+\n+    const std::array<CAddress, 3> addr{CAddress{ip(0xa0b0c001), NODE_NONE},\n+                                       CAddress{ip(0xa0b0c002), NODE_NONE},\n+                                       CAddress{tor_service, NODE_NONE}};\n+\n+    const CNetAddr other_addr{ip(0xa0b0ff01)}; // Not any of addr[].\n+\n+    std::array<CNode*, 3> nodes;\n+\n     banman->ClearBanned();\n-    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1);\n-    dummyNode1.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode1.GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n+    nodes[0] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /* nKeyedNetGroupIn */ 0,\n+                         /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false);\n+    nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[0]);\n+    nodes[0]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[0]);\n+    peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n-        LOCK(dummyNode1.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n+        LOCK(nodes[0]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[0]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));\n-    BOOST_CHECK(!banman->IsDiscouraged(ip(0xa0b0c001|0x0000ff00))); // Different IP, not discouraged\n-\n-    CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, /* nKeyedNetGroupIn */ 1, /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\", ConnectionType::INBOUND, /* inbound_onion */ false);\n-    dummyNode2.SetCommonVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode2);\n-    dummyNode2.fSuccessfullyConnected = true;\n-    peerLogic->Misbehaving(dummyNode2.GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n+\n+    nodes[1] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /* nKeyedNetGroupIn */ 1,\n+                         /* nLocalHostNonceIn */ 1, CAddress(), /* pszDest */ \"\",\n+                         ConnectionType::INBOUND, /* inbound_onion */ false);\n+    nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n+    peerLogic->InitializeNode(nodes[1]);\n+    nodes[1]->fSuccessfullyConnected = true;\n+    connman->AddNode(*nodes[1]);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(!banman->IsDiscouraged(addr2)); // 2 not discouraged yet...\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // ... but 1 still should be\n-    peerLogic->Misbehaving(dummyNode2.GetId(), 1, /* message */ \"\");         // 2 reaches discouragement threshold\n+    // [0] is still discouraged/disconnected.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    // [1] is not discouraged/disconnected yet.\n+    BOOST_CHECK(!banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(!nodes[1]->fDisconnect);\n+    peerLogic->Misbehaving(nodes[1]->GetId(), 1, /* message */ \"\"); // [1] reaches discouragement threshold\n     {\n-        LOCK(dummyNode2.cs_sendProcessing);\n-        BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n+        LOCK(nodes[1]->cs_sendProcessing);\n+        BOOST_CHECK(peerLogic->SendMessages(nodes[1]));\n     }\n-    BOOST_CHECK(banman->IsDiscouraged(addr1));  // Expect both 1 and 2\n-    BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n-\n-    peerLogic->FinalizeNode(dummyNode1);\n-    peerLogic->FinalizeNode(dummyNode2);\n+    // Expect both [0] and [1] to be discouraged/disconnected now.\n+    BOOST_CHECK(banman->IsDiscouraged(addr[0]));\n+    BOOST_CHECK(nodes[0]->fDisconnect);\n+    BOOST_CHECK(banman->IsDiscouraged(addr[1]));\n+    BOOST_CHECK(nodes[1]->fDisconnect);\n+\n+    // Make sure non-IP peers get discouraged and disconnected properly.\n+\n+    nodes[2] = new CNode(id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /* nKeyedNetGroupIn */ 1,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21571#discussion_r606314969",
      "id" : 606314969,
      "in_reply_to_id" : 606309650,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjMxNDk2OQ==",
      "original_commit_id" : "3d5eac6dc3f9911a548a76eee3b6532ea3e02bb5",
      "original_line" : 278,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 627092339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21571",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-02T16:35:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606314969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 81747b21719b3fa6b0fdfc3b084c0104d64903f9\r\n",
      "created_at" : "2021-04-02T16:43:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21571#issuecomment-812609747",
      "id" : 812609747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21571",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMjYwOTc0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-02T16:43:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/812609747",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Backported in #21614",
      "created_at" : "2021-04-06T09:40:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21571#issuecomment-813981979",
      "id" : 813981979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21571",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMzk4MTk3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-06T09:40:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813981979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
