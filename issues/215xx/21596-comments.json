[
   {
      "author_association" : "MEMBER",
      "body" : "From IRC:\r\n\r\n```\r\n[21:42] <aj> could probably have an AssertWithLock(L, E) that adds the annotation for L i suppose, but...\r\n",
      "created_at" : "2021-04-04T16:29:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21596#issuecomment-813061000",
      "id" : 813061000,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21596",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMzA2MTAwMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-04T16:29:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813061000",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this would be solved if (implicit) lambda capture of variable `foo` which is annotated as `foo GUARDED_BY(bar)` implied that the lambda was annotated with `EXCLUSIVE_LOCKS_REQUIRED(bar)`.\r\n\r\nIf we got a new compiler version that supported the above to the point where we could use it in our test suite, we could probably then mark Assert/Assume as `NO_THREAD_SAFETY_ANALYSIS` on older versions of clang.",
      "created_at" : "2021-04-05T06:41:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21596#issuecomment-813223282",
      "id" : 813223282,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21596",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMzIyMzI4Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-05T06:41:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813223282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "A convention I use when writing lambdas is to use `[&]` implicit capture when I believe the lambda will be called synchronously in the current scope, and use `[]` or explicit captures `[&var1, var2, var3]` when then lambda will be called asynchronously later.\r\n\r\nI think this is a good convention, and if it is followed, analysis could treat the lambda like a nested scope when the capture list starts with unnamed `[&]`.\r\n\r\nBut probably the compiler shouldn't assume this convention is used, and it would make more sense for it to provide an explicit annotation for lambdas that would tell the analysis whether the lambda is called synchronously or asynchronously. Maybe it could the allow the existing [`SCOPED_CAPABILITY`](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#scoped-capability) attribute to be applied to lambdas to indicate this, or just add a new attribute.\r\n\r\nre: https://github.com/bitcoin/bitcoin/issues/21596#issuecomment-813223282, I don't think it would be legitimate for analysis to assume whether locks needed to access a variable are acquired based on whether the variable is captured. This assumption would make analysis skip useful checking in asynchronous lambdas where a variable is captured but a lock still needs to be acquired before the variable is used. You don't need locks to access the address of a guarded variable if you aren't accessing the variable itself, and conversely having the address doesn't imply whether you have the locks.",
      "created_at" : "2021-04-05T12:28:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21596#issuecomment-813368708",
      "id" : 813368708,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21596",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMzM2ODcwOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-05T12:28:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813368708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I think this is a good convention\r\n\r\nI don't think we should need to change code for that. `Assume` is inline (the lambda is defined and then called with `()` in the same line). At least this case should be trivial for a compiler to figure out that it is a synchronous call.",
      "created_at" : "2021-11-02T10:20:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21596#issuecomment-957304712",
      "id" : 957304712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21596",
      "node_id" : "IC_kwDOABII5845D0-I",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/957304712/reactions"
      },
      "updated_at" : "2021-11-02T10:20:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/957304712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
