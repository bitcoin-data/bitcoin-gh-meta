{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "Concept ACK\r\n\r\n<details><summary>A few suggestions regarding filter_checked</summary><p>\r\n\r\n```diff\r\ndiff --git a/src/blockfilter.cpp b/src/blockfilter.cpp\r\nindex 59f34bc54e..0ab89fdbdb 100644\r\n--- a/src/blockfilter.cpp\r\n+++ b/src/blockfilter.cpp\r\n@@ -47,7 +47,7 @@ GCSFilter::GCSFilter(const Params& params)\r\n     : m_params(params), m_N(0), m_F(0), m_encoded{0}\r\n {}\r\n \r\n-GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter, const bool filter_checked)\r\n+GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter, bool filter_checked)\r\n     : m_params(params), m_encoded(std::move(encoded_filter))\r\n {\r\n     SpanReader stream{GCS_SER_TYPE, GCS_SER_VERSION, m_encoded};\r\n@@ -221,7 +221,7 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\r\n }\r\n \r\n BlockFilter::BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\r\n-                         std::vector<unsigned char> filter, const bool filter_checked)\r\n+                         std::vector<unsigned char> filter, bool filter_checked)\r\n     : m_filter_type(filter_type), m_block_hash(block_hash)\r\n {\r\n     GCSFilter::Params params;\r\ndiff --git a/src/blockfilter.h b/src/blockfilter.h\r\nindex af054dbf34..5de5679834 100644\r\n--- a/src/blockfilter.h\r\n+++ b/src/blockfilter.h\r\n@@ -59,7 +59,7 @@ public:\r\n     explicit GCSFilter(const Params& params = Params());\r\n \r\n     /** Reconstructs an already-created filter from an encoding. */\r\n-    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter, const bool filter_checked=false);\r\n+    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter, bool filter_checked = false);\r\n \r\n     /** Builds a new filter from the params and set of elements. */\r\n     GCSFilter(const Params& params, const ElementSet& elements);\r\n@@ -122,7 +122,7 @@ public:\r\n \r\n     //! Reconstruct a BlockFilter from parts.\r\n     BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\r\n-                std::vector<unsigned char> filter, const bool filter_checked=false);\r\n+                std::vector<unsigned char> filter, bool filter_checked = false);\r\n \r\n     //! Construct a new BlockFilter of the specified type from a block.\r\n     BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo);\r\ndiff --git a/src/index/blockfilterindex.cpp b/src/index/blockfilterindex.cpp\r\nindex bad766ebe1..0a4728f571 100644\r\n--- a/src/index/blockfilterindex.cpp\r\n+++ b/src/index/blockfilterindex.cpp\r\n@@ -159,7 +159,7 @@ bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& f\r\n         uint256 result;\r\n         CHash256().Write(encoded_filter).Finalize(result);\r\n         if (result != hash) return error(\"Checksum mismatch in filter decode.\");\r\n-        filter = BlockFilter(GetFilterType(), block_hash, std::move(encoded_filter), true);\r\n+        filter = BlockFilter(GetFilterType(), block_hash, std::move(encoded_filter), /*filter_checked=*/true);\r\n     }\r\n```\r\n</p></details>\r\n\r\n_Originally posted by @jonatack in https://github.com/bitcoin/bitcoin/pull/24832#pullrequestreview-939386764_",
   "closed_at" : "2022-05-08T10:45:17Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25085/comments",
   "created_at" : "2022-05-08T10:41:55Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25085/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/25085",
   "id" : 1228853661,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25085/labels{/name}",
   "locked" : true,
   "milestone" : null,
   "node_id" : "I_kwDOABII585JPtGd",
   "number" : 25085,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25085/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25085/timeline",
   "title" : ".",
   "updated_at" : "2022-05-08T10:45:27Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25085",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/92646359?v=4",
      "events_url" : "https://api.github.com/users/Raulnori77/events{/privacy}",
      "followers_url" : "https://api.github.com/users/Raulnori77/followers",
      "following_url" : "https://api.github.com/users/Raulnori77/following{/other_user}",
      "gists_url" : "https://api.github.com/users/Raulnori77/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/Raulnori77",
      "id" : 92646359,
      "login" : "Raulnori77",
      "node_id" : "U_kgDOBYWr1w",
      "organizations_url" : "https://api.github.com/users/Raulnori77/orgs",
      "received_events_url" : "https://api.github.com/users/Raulnori77/received_events",
      "repos_url" : "https://api.github.com/users/Raulnori77/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/Raulnori77/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/Raulnori77/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/Raulnori77"
   }
}
