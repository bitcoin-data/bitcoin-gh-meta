[
   {
      "body" : "How does this sort transactions? The GUI constantly reorders my transaction list, for example...",
      "created_at" : "2015-01-01T03:22:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68479538",
      "id" : 68479538,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-01T03:22:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68479538",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "The GUI reorders the model indexes, but not the cached transaction list. \r\n\r\nThis implementation works directly off the cached transaction list that represents your visible transactions. When this list changes it rebuilds all running balances of all visible transactions, since one can't be sure exactly where, in the list sorted by time, that a transaction addition/removal/or status updates that affect your visible transactions should be.",
      "created_at" : "2015-01-01T03:31:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68479624",
      "id" : 68479624,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-01T03:31:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68479624",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6132807?v=3",
         "events_url" : "https://api.github.com/users/SoCoCpp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SoCoCpp/followers",
         "following_url" : "https://api.github.com/users/SoCoCpp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SoCoCpp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SoCoCpp",
         "id" : 6132807,
         "login" : "SoCoCpp",
         "organizations_url" : "https://api.github.com/users/SoCoCpp/orgs",
         "received_events_url" : "https://api.github.com/users/SoCoCpp/received_events",
         "repos_url" : "https://api.github.com/users/SoCoCpp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SoCoCpp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SoCoCpp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SoCoCpp"
      }
   },
   {
      "body" : "Nice!\r\n\r\nRe: ordering: I'm not an accountant, but I'm a bit in doubt about doing this on the GUI side and computing them, based on date and time, on the fly. It seems like that if there is no permanence and ie changes in ordering can change the displayed balances.\r\n\r\nAfter all, bitcoin transactions on lowest level have not date and time associated with them, the date and time shown is either A) when it was received by your client B) the corresponding block time/date, if confirmed. The former can change arbitrarily (ie through a rescan/salvagewallet), the second cannot except through chain reorganizations which are rare. \r\n\r\nOf course, transactions in the block chain do have a normative ordering, ie by (block number,tx number). This roughly corresponds to time. You could also use the block timestamps. Note that block timestamps are not monotonically increasing, so these two are not always the same.\r\n\r\nMaybe use that (block,tx number) order, and not display a counting balance for unconfirmed transactions?\r\n",
      "created_at" : "2015-01-01T11:26:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68484686",
      "id" : 68484686,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-01T11:26:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68484686",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "It would look weird and confusing for the display order to be different from the balance order IMO, especially when the user is trying to sort it chronologically. Some use cases also break if we strictly use block ordering, though I do see the appeal there.",
      "created_at" : "2015-01-01T11:43:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68484939",
      "id" : 68484939,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-01T11:43:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68484939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5587#discussion_r22403823"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5587"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/22403823"
         }
      },
      "body" : "s/keey/keep",
      "commit_id" : "758a0a7418d44dc4ecf35a48048f7e1974baf705",
      "created_at" : "2015-01-02T03:01:10Z",
      "diff_hunk" : "@@ -428,121 +428,156 @@ bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)\n     return QObject::eventFilter(obj, evt);\n }\n \n-void TableViewLastColumnResizingFixer::connectViewHeadersSignals()\n+/**\n+ * Initializes all internal variables and set the handled\n+ * columns into interactive mode.\n+ */\n+TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int stretchColumnIndex, int minimumColumnWidth) :\n+    tableView(table),\n+    stretchColIndex(stretchColumnIndex),\n+    minColWidth(minimumColumnWidth)\n {\n-    connect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n-    connect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+    lastColIndex = tableView->horizontalHeader()->count() - 1;\n+    setViewHeaderResizeMode(stretchColumnIndex, QHeaderView::Interactive);\n+    setViewHeaderResizeMode(lastColIndex, QHeaderView::Interactive);\n }\n \n-// We need to disconnect these while handling the resize events, otherwise we can enter infinite loops.\n-void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()\n+/**\n+ * Called by external sources such as TransactionView\n+ * on a resizeEvent. Scales the stretch column to fill\n+ * or give up the size change.\n+ */\n+void TableViewLastColumnResizingFixer::resized()\n {\n-    disconnect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n-    disconnect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+    resizeColumn(stretchColIndex, getAvailableWidthForColumn(stretchColIndex));\n }\n \n-// Setup the resize mode, handles compatibility for Qt5 and below as the method signatures changed.\n-// Refactored here for readability.\n-void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)\n+/**\n+ * Make sure the columns don't get wider than the viewport.\n+ * Also, keey the last column's size snug against the right side.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#discussion_r22403823",
      "id" : 22403823,
      "original_commit_id" : "758a0a7418d44dc4ecf35a48048f7e1974baf705",
      "original_position" : 40,
      "path" : "src/qt/guiutil.cpp",
      "position" : 40,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5587",
      "updated_at" : "2015-01-02T03:01:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/22403823",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=3",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5587#discussion_r22403844"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5587"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/22403844"
         }
      },
      "body" : "s/infinate/infinite",
      "commit_id" : "758a0a7418d44dc4ecf35a48048f7e1974baf705",
      "created_at" : "2015-01-02T03:05:25Z",
      "diff_hunk" : "@@ -428,121 +428,156 @@ bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)\n     return QObject::eventFilter(obj, evt);\n }\n \n-void TableViewLastColumnResizingFixer::connectViewHeadersSignals()\n+/**\n+ * Initializes all internal variables and set the handled\n+ * columns into interactive mode.\n+ */\n+TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* table, int stretchColumnIndex, int minimumColumnWidth) :\n+    tableView(table),\n+    stretchColIndex(stretchColumnIndex),\n+    minColWidth(minimumColumnWidth)\n {\n-    connect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n-    connect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+    lastColIndex = tableView->horizontalHeader()->count() - 1;\n+    setViewHeaderResizeMode(stretchColumnIndex, QHeaderView::Interactive);\n+    setViewHeaderResizeMode(lastColIndex, QHeaderView::Interactive);\n }\n \n-// We need to disconnect these while handling the resize events, otherwise we can enter infinite loops.\n-void TableViewLastColumnResizingFixer::disconnectViewHeadersSignals()\n+/**\n+ * Called by external sources such as TransactionView\n+ * on a resizeEvent. Scales the stretch column to fill\n+ * or give up the size change.\n+ */\n+void TableViewLastColumnResizingFixer::resized()\n {\n-    disconnect(tableView->horizontalHeader(), SIGNAL(sectionResized(int,int,int)), this, SLOT(on_sectionResized(int,int,int)));\n-    disconnect(tableView->horizontalHeader(), SIGNAL(geometriesChanged()), this, SLOT(on_geometriesChanged()));\n+    resizeColumn(stretchColIndex, getAvailableWidthForColumn(stretchColIndex));\n }\n \n-// Setup the resize mode, handles compatibility for Qt5 and below as the method signatures changed.\n-// Refactored here for readability.\n-void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)\n+/**\n+ * Make sure the columns don't get wider than the viewport.\n+ * Also, keey the last column's size snug against the right side.\n+ */\n+void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n {\n-#if QT_VERSION < 0x050000\n-    tableView->horizontalHeader()->setResizeMode(logicalIndex, resizeMode);\n-#else\n-    tableView->horizontalHeader()->setSectionResizeMode(logicalIndex, resizeMode);\n-#endif\n+    // We no longer stretch the last column here, since we have\n+    // elaborated on on_sectionResized handling.\n+    if (getColumnsWidth() > tableView->horizontalHeader()->width())\n+        resizeColumn(stretchColIndex, getAvailableWidthForColumn(stretchColIndex));\n }\n \n-void TableViewLastColumnResizingFixer::resizeColumn(int nColumnIndex, int width)\n+/**\n+ * Add up the total current width of all the columns.\n+ */\n+int TableViewLastColumnResizingFixer::getColumnsWidth()\n {\n-    tableView->setColumnWidth(nColumnIndex, width);\n-    tableView->horizontalHeader()->resizeSection(nColumnIndex, width);\n+    int totalWidth = 0;\n+    for (int i = 0;i <= lastColIndex;i++)\n+        totalWidth += tableView->horizontalHeader()->sectionSize(i);\n+    return totalWidth;\n }\n \n-int TableViewLastColumnResizingFixer::getColumnsWidth()\n+/**\n+ * Calculate the width availible for the specified column from the \n+ * availible width left after teh total column widths not including\n+ * the column being determined.\n+ */\n+int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int colIndex)\n {\n-    int nColumnsWidthSum = 0;\n-    for (int i = 0; i < columnCount; i++)\n-    {\n-        nColumnsWidthSum += tableView->horizontalHeader()->sectionSize(i);\n+    int width = tableView->horizontalHeader()->width();\n+    if (width > 0) {\n+        width -= (getColumnsWidth() - tableView->horizontalHeader()->sectionSize(colIndex));\n+        return std::max(minColWidth, width);\n     }\n-    return nColumnsWidthSum;\n+    return minColWidth;\n }\n \n-int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)\n+/**\n+ * Setup the resize mode, handles compatibility for Qt5 and below as the method signatures changed.\n+ * Refactored here for readability.\n+ */\n+void TableViewLastColumnResizingFixer::setViewHeaderResizeMode(int logicalIndex, QHeaderView::ResizeMode resizeMode)\n {\n-    int nResult = lastColumnMinimumWidth;\n-    int nTableWidth = tableView->horizontalHeader()->width();\n-\n-    if (nTableWidth > 0)\n-    {\n-        int nOtherColsWidth = getColumnsWidth() - tableView->horizontalHeader()->sectionSize(column);\n-        nResult = std::max(nResult, nTableWidth - nOtherColsWidth);\n-    }\n-\n-    return nResult;\n+#if QT_VERSION < 0x050000\n+    tableView->horizontalHeader()->setResizeMode(logicalIndex, resizeMode);\n+#else\n+    tableView->horizontalHeader()->setSectionResizeMode(logicalIndex, resizeMode);\n+#endif\n }\n \n-// Make sure we don't make the columns wider than the tables viewport width.\n-void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n+/** \n+ * Manually sets a column's width while ignoring singnals\n+ * the resize causes to prevent infinate loops.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#discussion_r22403844",
      "id" : 22403844,
      "original_commit_id" : "758a0a7418d44dc4ecf35a48048f7e1974baf705",
      "original_position" : 118,
      "path" : "src/qt/guiutil.cpp",
      "position" : 118,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5587",
      "updated_at" : "2015-01-02T03:05:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/22403844",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=3",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "body" : "Luke-jr: Sure, but we have that problem anyhow as the transactions can be sorted in different ways, and that should certainly not affect the running balances.\r\nThough changing the default displayed transaction order to that may make sense too.\r\n",
      "created_at" : "2015-01-02T10:38:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68518634",
      "id" : 68518634,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-02T10:39:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68518634",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "luke-jr  and laanwj Think not just of the transactions being sorted in different ways, but also of them being filtered in different ways. I think this drives home the idea that the running balances should be the balance as of the time that transaction existed, irrespective of any sorting and filtering.\r\n\r\nIf we agreed against that point, it may slightly simplify things, as we wouldn't need to clone the transaction cache into a pointer list to sort by time and calculate balances. Instead, we could iterate the transaction model index, how they are currently sorted and filtered, using that existing list, then calculate balances.\r\n\r\nEdit: Currently, we have the ability to filter out any transaction records, that for example, have less than a 0.01 BTC balance. If we worked off the sorted/filtered list, I don't know if we'd still have that ability.",
      "created_at" : "2015-01-04T01:14:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68616595",
      "id" : 68616595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-04T01:21:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68616595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6132807?v=3",
         "events_url" : "https://api.github.com/users/SoCoCpp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SoCoCpp/followers",
         "following_url" : "https://api.github.com/users/SoCoCpp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SoCoCpp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SoCoCpp",
         "id" : 6132807,
         "login" : "SoCoCpp",
         "organizations_url" : "https://api.github.com/users/SoCoCpp/orgs",
         "received_events_url" : "https://api.github.com/users/SoCoCpp/received_events",
         "repos_url" : "https://api.github.com/users/SoCoCpp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SoCoCpp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SoCoCpp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SoCoCpp"
      }
   },
   {
      "body" : "IMO this is most useful if the running balances are of the time the transaction was mined into the chain, and are thus static (excluding reorganizations of the chain).\r\n\r\nYou can also use this for optimization, as the value for transactions deeper in the chain will not change - barring catastrophic chain reorganization, which would be fair to trigger a full recompute.\r\n\r\nChanges to sorting and filtering should certainly not affect them, that's visual only. Hence my reservations of doing this in the GUI in the first place. You can still do it in the GUI code, but be sure that trivial changes to user preferences (ie, filtering/sorting) don't affect it.\r\n\r\nThinking of it, transactions also have an 'nOrderPos' which is another ordering that could be used. It is the order in which transaction were added to the wallet. This is preferable to using time and date, but less stable than (height,tx) block chain ordering, as it is affected by when the unconfirmed transaction is first received by the client (so eg -salvagewallet will reconstruct in a different order).\r\n",
      "created_at" : "2015-01-04T10:43:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68628500",
      "id" : 68628500,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-04T10:43:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68628500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "I don't think it's reasonable to claim that bitcoin wallet does any real accounting (that would require an append-only ledger of credits and debits, while our transaction list can be modified, rewritten, and its ordering is not well-defined), so trying to make it (or balances computed from it) work like one isn't very useful.\r\n\r\nSeeing how much money you approximately had at what date does seem useful, however.",
      "created_at" : "2015-01-04T14:35:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68634803",
      "id" : 68634803,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-04T14:35:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68634803",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "My point in the above posts is that there *are* various orderings that are at least reasonably well-defined:\r\n\r\n- nOrderPos tracks the order in which transactions have entered the wallet. These won't change, unless `-resalvagewallet` or such but in that case metadata is expected to be lost.\r\n- (block height,num) order is well-defined, unless chain reorganizations happen\r\n- block date order is well-defined, unless chain reorganizations happen\r\n",
      "created_at" : "2015-01-04T14:54:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68635408",
      "id" : 68635408,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-04T14:54:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68635408",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "It's also tempting to try to abuse nSequence as a timestamp :)",
      "created_at" : "2015-01-04T15:38:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-68636914",
      "id" : 68636914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-04T15:38:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68636914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "IMO this make things more complicate and i don't see a need for this in bitcoin-core.\r\nNevertheless i did some testing:\r\n\r\nsetgenerate true 101 gives a strange image:\r\nIs this correct?\r\n![bildschirmfoto 2015-01-09 um 16 55 55](https://cloud.githubusercontent.com/assets/178464/5682493/9a1d3a38-9820-11e4-96e6-344c95dad6e2.png)\r\n\r\nSame if i do an additional walle tx on the top:\r\n![bildschirmfoto 2015-01-09 um 16 58 26](https://cloud.githubusercontent.com/assets/178464/5682513/c6dd52a6-9820-11e4-8ea3-8caf563826ae.png)\r\n\r\ni guess it needs better handling of immature balance?",
      "created_at" : "2015-01-09T16:00:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-69354012",
      "id" : 69354012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-01-09T16:00:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/69354012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@SoCoCpp do you have plans to update this?",
      "created_at" : "2015-03-11T10:34:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-78239329",
      "id" : 78239329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-03-11T10:34:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/78239329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Closing this due to inactivity. @SoCoCpp let me know if you start work on this again, then I'll reopen.\r\n",
      "created_at" : "2015-03-20T10:59:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5587#issuecomment-83985942",
      "id" : 83985942,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5587",
      "updated_at" : "2015-03-20T10:59:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/83985942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
