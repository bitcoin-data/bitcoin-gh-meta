[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r347705333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347705333"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\nTest cases order is shuffled using seed: 911766883\r\n\r\nEntering test module \"Bitcoin Core Test Suite\"\r\n\r\ntest/key_io_tests.cpp(20): Entering test suite \"key_io_tests\"\r\n\r\ntest/key_io_tests.cpp(122): Entering test case \"key_io_invalid\"\r\n\r\nbase58.cpp:49:17: runtime error: unsigned integer overflow: 0 - 1 cannot be represented in type 'unsigned long'\r\n\r\n    #0 0x55bab4eefc6d in DecodeBase58Size(char const*) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/base58.cpp:49:17\r\n\r\n    #1 0x55bab4eefa12 in DecodeBase58CheckSize(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/base58.cpp:187:18\r\n\r\n    #2 0x55bab4f4a6fc in (anonymous namespace)::DecodeDestination(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, CChainParams const&) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/key_io.cpp:76:9\r\n\r\n    #3 0x55bab4f4a4f5 in DecodeDestination(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/key_io.cpp:217:12\r\n\r\n    #4 0x55bab3a4be21 in key_io_tests::key_io_invalid::test_method() /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/test/key_io_tests.cpp:141:27\r\n\r\n    #5 0x55bab3a4a529 in key_io_tests::key_io_invalid_invoker() /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/test/key_io_tests.cpp:122:1\r\n\r\n    #6 0x55bab36fd3d5 in boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /usr/include/boost/function/function_template.hpp:118:11\r\n\r\n    #7 0x7f865d6212cd in boost::detail::function::function_obj_invoker0<boost::detail::forward, int>::invoke(boost::detail::function::function_buffer&) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x4b2cd)\r\n\r\n    #8 0x7f865d62077c in boost::execution_monitor::catch_signals(boost::function<int ()> const&) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x4a77c)\r\n\r\n    #9 0x7f865d620860 in boost::execution_monitor::execute(boost::function<int ()> const&) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x4a860)\r\n\r\n    #10 0x7f865d620fdc in boost::execution_monitor::vexecute(boost::function<void ()> const&) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x4afdc)\r\n\r\n    #11 0x7f865d64f8d0 in boost::unit_test::unit_test_monitor_t::execute_and_translate(boost::function<void ()> const&, unsigned int) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x798d0)\r\n\r\n    #12 0x7f865d62bc6a in boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned int, boost::unit_test::framework::state::random_generator_helper const*) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x55c6a)\r\n\r\n    #13 0x7f865d62c12d in boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned int, boost::unit_test::framework::state::random_generator_helper const*) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x5612d)\r\n\r\n    #14 0x7f865d62c12d in boost::unit_test::framework::state::execute_test_tree(unsigned long, unsigned int, boost::unit_test::framework::state::random_generator_helper const*) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x5612d)\r\n\r\n    #15 0x7f865d624cc7 in boost::unit_test::framework::run(unsigned long, bool) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x4ecc7)\r\n\r\n    #16 0x7f865d64d13e in boost::unit_test::unit_test_main(bool (*)(), int, char**) (/usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.65.1+0x7713e)\r\n\r\n    #17 0x55bab35f5d8b in main /usr/include/boost/test/unit_test.hpp:63:12\r\n\r\n    #18 0x7f865b3afb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n\r\n    #19 0x55bab34d9129 in _start (/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2a40129)",
      "commit_id" : "ff60592a3875aaacb694c5578493205533b1f2c6",
      "created_at" : "2019-11-19T02:28:41Z",
      "diff_hunk" : "@@ -32,6 +34,21 @@ static const int8_t mapBase58[256] = {\n     -1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n };\n \n+static size_t DecodeBase58Size(const char* psz)\n+{\n+    // Skip leading spaces.\n+    while (*psz && IsSpace(*psz)) psz++;\n+    // Skip and count leading '1's.\n+    int zeroes = 0;\n+    while (*psz == '1') {\n+        zeroes++;\n+        psz++;\n+    }\n+    size_t len = strlen(psz);\n+    if (len > 1000000) return std::numeric_limits<size_t>::max();\n+    return (len - 1) * 732 / 1000 + 1 + zeroes;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r347705333",
      "id" : 347705333,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzcwNTMzMw==",
      "original_commit_id" : "1dfd33b4ad29389fae33c3c467a5a37a02fb6e22",
      "original_position" : 25,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 318751200,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511",
      "updated_at" : "2019-11-19T23:40:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347705333",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nThanks for fixing this!",
      "created_at" : "2019-11-19T06:39:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555357457",
      "id" : 555357457,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NTM1NzQ1Nw==",
      "updated_at" : "2019-11-19T06:39:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555357457",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "~~I still stand by what I said in https://github.com/bitcoin/bitcoin/issues/17501#issuecomment-554910700~~\r\n\r\n> I would say it's not the encoder/decoder responsibility to check input sizes. Good generic code works for any input size.\r\n> But of course, the application side (e.g. address parsing routines) could have a check to see if inputs are reasonable. They have that knowledge.\r\n\r\n~~Checking input sizes is not the responsibility of the decoding code, but of application specific code.~~\r\n\r\nNever mind, you're doing this. I was surprised at the complexity of the `DecodeBase58Size` function, that it ignores a potentially infinite amount of spaces and ones. Don't we have tighter constraints on address lengths and such? I guess apparently not!\r\n\r\nConcept ACK.",
      "created_at" : "2019-11-19T07:53:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555378987",
      "id" : 555378987,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NTM3ODk4Nw==",
      "updated_at" : "2019-11-19T08:14:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555378987",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Hmm, I think there is a better solution than this. We do have upper bounds on the encoded data as well, which would be fine. Alternatively, we could just make DecodeBase58(Check) take an additional argument for the max size on the encoded data.",
      "created_at" : "2019-11-19T08:30:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555390901",
      "id" : 555390901,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NTM5MDkwMQ==",
      "updated_at" : "2019-11-19T08:30:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555390901",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ah yes, the number of '0' is not really unbounded, because they are counted and signify the padding. It basically just ignores an infinite amount of spaces around it. That's fine.\r\n\r\nI think this solution is OK!\r\n\r\n> Alternatively, we could just make DecodeBase58(Check) take an additional argument for the max size on the encoded data.\r\n\r\nI kind of like having a separate function to estimate the size. However, this would make it easier to ensure consistency between the functions, I guess.",
      "created_at" : "2019-11-19T08:36:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555392883",
      "id" : 555392883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NTM5Mjg4Mw==",
      "updated_at" : "2019-11-19T08:43:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555392883",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r347788868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347788868"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Let's make `1000000` a constant, like `BASE58_LIMIT`.",
      "commit_id" : "ff60592a3875aaacb694c5578493205533b1f2c6",
      "created_at" : "2019-11-19T08:36:50Z",
      "diff_hunk" : "@@ -44,8 +62,11 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         zeroes++;\n         psz++;\n     }\n+    // Decoding a megabyte of Base58 takes minutes, seems like a reasonable upper limit.\n+    size_t len = strlen(psz);\n+    if (len > 1000000) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r347788868",
      "id" : 347788868,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Nzc4ODg2OA==",
      "original_commit_id" : "bfa56d844f472b8912cecf346a1f5daf063092b5",
      "original_position" : 38,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 318857935,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511",
      "updated_at" : "2019-11-19T23:40:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347788868",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r347790436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347790436"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"and will never undershoot by more than 0.25% plus 2\" is not true in the case of trailing spaces, I think :smile: ",
      "commit_id" : "ff60592a3875aaacb694c5578493205533b1f2c6",
      "created_at" : "2019-11-19T08:40:38Z",
      "diff_hunk" : "@@ -60,4 +60,15 @@ NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vc\n  */\n NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n+/**\n+ * Compute a lower bound on the vchRet result from DecodeBase58Check.\n+ *\n+ * It will never overshoot, and will never undershoot by more than 0.25% plus 2.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r347790436",
      "id" : 347790436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Nzc5MDQzNg==",
      "original_commit_id" : "bfa56d844f472b8912cecf346a1f5daf063092b5",
      "original_position" : 7,
      "path" : "src/base58.h",
      "position" : null,
      "pull_request_review_id" : 318859925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511",
      "updated_at" : "2019-11-19T23:40:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347790436",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r348226795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348226795"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've rewritten it, this constant is no longer necessary.",
      "commit_id" : "ff60592a3875aaacb694c5578493205533b1f2c6",
      "created_at" : "2019-11-19T23:40:52Z",
      "diff_hunk" : "@@ -44,8 +62,11 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         zeroes++;\n         psz++;\n     }\n+    // Decoding a megabyte of Base58 takes minutes, seems like a reasonable upper limit.\n+    size_t len = strlen(psz);\n+    if (len > 1000000) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r348226795",
      "id" : 348226795,
      "in_reply_to_id" : 347788868,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODIyNjc5NQ==",
      "original_commit_id" : "bfa56d844f472b8912cecf346a1f5daf063092b5",
      "original_position" : 38,
      "path" : "src/base58.cpp",
      "position" : null,
      "pull_request_review_id" : 319428010,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511",
      "updated_at" : "2019-11-19T23:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348226795",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r348226952"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348226952"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You're right, and that makes this whole approach wrong, as it will reject inputs that are too long just due to spaces at the end. I've changed the approach.",
      "commit_id" : "ff60592a3875aaacb694c5578493205533b1f2c6",
      "created_at" : "2019-11-19T23:41:32Z",
      "diff_hunk" : "@@ -60,4 +60,15 @@ NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vc\n  */\n NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n+/**\n+ * Compute a lower bound on the vchRet result from DecodeBase58Check.\n+ *\n+ * It will never overshoot, and will never undershoot by more than 0.25% plus 2.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#discussion_r348226952",
      "id" : 348226952,
      "in_reply_to_id" : 347790436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODIyNjk1Mg==",
      "original_commit_id" : "bfa56d844f472b8912cecf346a1f5daf063092b5",
      "original_position" : 7,
      "path" : "src/base58.h",
      "position" : null,
      "pull_request_review_id" : 319428221,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17511",
      "updated_at" : "2019-11-19T23:41:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348226952",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Note that there are various places, e.g. PSBT parsing, that call `DecodeBase64`  in `strencodings` directly, bypassing these new bounds checks.",
      "created_at" : "2019-11-20T10:46:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555948382",
      "id" : 555948382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NTk0ODM4Mg==",
      "updated_at" : "2019-11-20T10:46:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555948382",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors DecodeBase64 doesn't have this problem, its runtime is linear on the input size.",
      "created_at" : "2019-11-20T10:48:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-555949036",
      "id" : 555949036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NTk0OTAzNg==",
      "updated_at" : "2019-11-20T10:49:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555949036",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa \r\n\r\nI think we should drop the default for `max_ret_len` since the default of `std::numeric_limits<int>::max()` is not a good or \"natural\" choice for most callers.\r\n\r\nI think it would be preferable to not have a default for `max_ret_len` to make sure callers make an informed decision regarding `max_ret_len`.\r\n\r\nMakes sense?",
      "created_at" : "2019-11-25T10:17:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-558086883",
      "id" : 558086883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1ODA4Njg4Mw==",
      "updated_at" : "2019-11-25T10:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558086883",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift Done.",
      "created_at" : "2019-12-06T00:32:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-562379898",
      "id" : 562379898,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MjM3OTg5OA==",
      "updated_at" : "2019-12-06T00:32:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562379898",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "code review ACK 5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b\r\n(definitely agree that this is easier to review than the size estimation as separate function)",
      "created_at" : "2019-12-06T07:33:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-562466189",
      "id" : 562466189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MjQ2NjE4OQ==",
      "updated_at" : "2019-12-06T09:08:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562466189",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 5909bcd3bf3c3502355e89fd0b76bb8e93d8a95b -- code looks correct\r\n\r\nFWIW there is a base58 fuzzer in #17229 (currently at zero concept ACKs :)) which would be nice to have in the tree in addition to the unit tests to get further testing.",
      "created_at" : "2019-12-06T08:47:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-562486495",
      "id" : 562486495,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MjQ4NjQ5NQ==",
      "updated_at" : "2019-12-06T08:48:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562486495",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17721](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17721.html) (util: Don't allow Base58 decoding of non-Base58 strings. Add Base58 tests. by practicalswift)\n* [#17229](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17229.html) (tests: Add fuzzing harnesses for various Base{32,58,64} and hex related functions by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-12-11T18:41:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17511#issuecomment-564677964",
      "id" : 564677964,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17511",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NDY3Nzk2NA==",
      "updated_at" : "2019-12-11T18:41:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564677964",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
