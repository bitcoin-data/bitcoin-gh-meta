{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Base58 decoding is currently done without checking that the input size is reasonable.\r\n\r\nThis can lead to excessive decoding run time if an attacker can control the base58 input being decoded.\r\n\r\n`DecodeBase58/DecodeBase58Check(â¦)` run time sampled with varying input sizes:\r\n\r\n* 1 000 bytes: 1 ms\r\n* 10 000 bytes: 97 ms\r\n* 100 000 bytes: 8 865 ms (9 seconds)\r\n* 1 000 000 bytes: 857 440 ms (14 minutes)\r\n* 10 000 000 bytes: too long :)\r\n\r\n`DecodeBase58/DecodeBase58Check(â¦)` is reachable via the RPC interface using the following code paths:\r\n\r\n```\r\naddmultisigaddress(JSONRPCRequest const&) â AddrToPubKey(CKeyStore*, std::string const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ncreatepsbt(JSONRPCRequest const&) â ConstructTransaction(UniValue const&, UniValue const&, UniValue const&, UniValue const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ncreaterawtransaction(JSONRPCRequest const&) â ConstructTransaction(UniValue const&, UniValue const&, UniValue const&, UniValue const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ncreatewallet(JSONRPCRequest const&) â CWallet::CreateWalletFromFile(interfaces::Chain&, WalletLocation const&, unsigned long) â CWallet::LoadWallet(bool&) â WalletBatch::LoadWallet(CWallet*) â ReadKeyValue(CWallet*, CDataStream&, CDataStream&, CWalletScanState&, std::string&, std::string&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nderiveaddresses(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeExtKey(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nderiveaddresses(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeExtPubKey(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nderiveaddresses(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nderiveaddresses(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ndumpprivkey(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nfundrawtransaction(JSONRPCRequest const&) â FundTransaction(CWallet*, CMutableTransaction&, long&, int&, UniValue) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ngeneratetoaddress(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ngetaddressinfo(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ngetdescriptorinfo(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeExtKey(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ngetdescriptorinfo(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeExtPubKey(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ngetdescriptorinfo(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ngetdescriptorinfo(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\ngetreceivedbyaddress(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportaddress(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportmulti(JSONRPCRequest const&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportmulti(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeExtKey(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportmulti(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeExtPubKey(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportmulti(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportmulti(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportmulti(JSONRPCRequest const&) â ProcessImportLegacy(ImportData&, std::map<CKeyID, CPubKey, std::less<CKeyID>, std::allocator<std::pair<CKeyID const, CPubKey> > >&, std::map<CKeyID, CKey, std::less<CKeyID>, std::allocator<std::pair<CKeyID const, CKey> > >&, std::set<CScript, std::less<CScript>, std::allocator<CScript> >&, bool&, UniValue const&, std::vector<CKeyID>&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportmulti(JSONRPCRequest const&) â ProcessImportLegacy(ImportData&, std::map<CKeyID, CPubKey, std::less<CKeyID>, std::allocator<std::pair<CKeyID const, CPubKey> > >&, std::map<CKeyID, CKey, std::less<CKeyID>, std::allocator<std::pair<CKeyID const, CKey> > >&, std::set<CScript, std::less<CScript>, std::allocator<CScript> >&, bool&, UniValue const&, std::vector<CKeyID>&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportprivkey(JSONRPCRequest const&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nimportwallet(JSONRPCRequest const&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nlistreceivedbyaddress(JSONRPCRequest const&) â ListReceived(interfaces::Chain::Lock&, CWallet*, UniValue const&, bool) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nlistreceivedbylabel(JSONRPCRequest const&) â ListReceived(interfaces::Chain::Lock&, CWallet*, UniValue const&, bool) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nlistunspent(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nloadwallet(JSONRPCRequest const&) â LoadWallet(interfaces::Chain&, WalletLocation const&, std::string&, std::string&) â CWallet::CreateWalletFromFile(interfaces::Chain&, WalletLocation const&, unsigned long) â CWallet::LoadWallet(bool&) â WalletBatch::LoadWallet(CWallet*) â ReadKeyValue(CWallet*, CDataStream&, CDataStream&, CWalletScanState&, std::string&, std::string&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nscantxoutset(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeExtKey(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nscantxoutset(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeExtPubKey(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nscantxoutset(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â (anonymous namespace)::ParsePubkey(Span<char const> const&, bool, FlatSigningProvider&) â (anonymous namespace)::ParsePubkeyInner(Span<char const> const&, bool, FlatSigningProvider&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nscantxoutset(JSONRPCRequest const&) â Parse(std::string const&, FlatSigningProvider&, bool) â (anonymous namespace)::ParseScript(Span<char const>&, (anonymous namespace)::ParseScriptContext, FlatSigningProvider&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nsendmany(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nsendtoaddress(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nsethdseed(JSONRPCRequest const&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nsetlabel(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nsignmessage(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nsignmessagewithprivkey(JSONRPCRequest const&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nsignrawtransactionwithkey(JSONRPCRequest const&) â DecodeSecret(std::string const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nvalidateaddress(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nverifymessage(JSONRPCRequest const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nwalletcreatefundedpsbt(JSONRPCRequest const&) â ConstructTransaction(UniValue const&, UniValue const&, UniValue const&, UniValue const&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nwalletcreatefundedpsbt(JSONRPCRequest const&) â FundTransaction(CWallet*, CMutableTransaction&, long&, int&, UniValue) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\n```\r\n\r\nOther code paths involving base58-decoding:\r\n\r\n```\r\nIsValidDestinationString(std::string const&, CChainParams const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nLoadWallet(interfaces::Chain&, std::string const&, std::string&, std::string&) â LoadWallet(interfaces::Chain&, WalletLocation const&, std::string&, std::string&) â CWallet::CreateWalletFromFile(interfaces::Chain&, WalletLocation const&, unsigned long) â CWallet::LoadWallet(bool&) â WalletBatch::LoadWallet(CWallet*) â ReadKeyValue(CWallet*, CDataStream&, CDataStream&, CWalletScanState&, std::string&, std::string&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nLoadWallets(interfaces::Chain&, std::vector<std::string, std::allocator<std::string > > const&) â CWallet::CreateWalletFromFile(interfaces::Chain&, WalletLocation const&, unsigned long) â CWallet::LoadWallet(bool&) â WalletBatch::LoadWallet(CWallet*) â ReadKeyValue(CWallet*, CDataStream&, CDataStream&, CWalletScanState&, std::string&, std::string&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\nWalletBatch::RecoverKeysOnlyFilter(void*, CDataStream, CDataStream) â ReadKeyValue(CWallet*, CDataStream&, CDataStream&, CWalletScanState&, std::string&, std::string&) â DecodeDestination(std::string const&) â (anonymous namespace)::DecodeDestination(std::string const&, CChainParams const&) â DecodeBase58Check(std::string const&, std::vector<unsigned char>&)\r\n```",
   "closed_at" : "2019-12-12T09:57:31Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 3,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17501/comments",
   "created_at" : "2019-11-17T21:46:32Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17501/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/17501",
   "id" : 524052839,
   "labels" : [
      {
         "color" : "981023",
         "default" : false,
         "description" : null,
         "id" : 326918230,
         "name" : "Resource usage",
         "node_id" : "MDU6TGFiZWwzMjY5MTgyMzA=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Resource%20usage"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17501/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU1MjQwNTI4Mzk=",
   "number" : 17501,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Base58 decoding is done without checking that the input size is reasonable",
   "updated_at" : "2019-12-12T09:57:31Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17501",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
