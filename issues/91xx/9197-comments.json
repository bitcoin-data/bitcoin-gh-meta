[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hi,\r\n\r\nI've experimented a bit and implemented something that could maybe offer a solution to the problem with sending of identical requests. \r\n\r\nThe changes are located in:\r\n\r\n* **httprpc.cpp** - where we check incoming nonces and keep track of previous ones. There are two ways to get a nonce: the client generates **X-Nonce** header, or we create one on-the-fly based on the JSON-request object content (a Hash160 will be generated)\r\n\r\n* **bitcoin-cli.cpp** - here we generate nonces by using the `std::random_device`+ `std::mt19937`\r\n\r\n* **rpc/server.cpp** - here we use a new method `isDangerousCommand` which tells if a particular RPC-command belongs to `dangerous ones`. A command is `dangerous` when it can change the wallet, manipulate UTXOs, change wallet state etc. \r\n\r\n* **rpcwallet.cpp** - the RPC **commands[]** table was updated to contain the boolean flag *dangerous* that indicates if a command is `destructive`.\r\n\r\n-----   \r\n\r\nA client request will be rejected when either of the following problems occur:\r\n\r\n* **Client sends a request containing a *dangerous* command together with `X-Nonce` that is already known**. That is: the server has already seen and (maybe) executed this command. A client that keeps on sending the same request without changing X-Nonce is not functioning properly, regardless how meaningful the command is.\r\n\r\n* **Client sends a request containing a *dangerous* command without X-Nonce but with identical JSON content**. Here the client is repeating the same command again and again.\r\n\r\nIn the first case the nonce will be used to reject the request immediately. \r\nIn the second case the server would first generate a nonce based on the JSON data from the request and then check if this once is already known.\r\n\r\nThere is another, *harmless* case, when a client is sending requests containing non-dangerous commands. In such cases the server would continue answering requests as those commands aren't changing anything on the server. However, they too could be handled more strictly, for example to *throttle requests* or similar tasks.\r\n\r\nWhen a requests is blocked the following entry will be logged:\r\n\r\n![reject](https://raw.githubusercontent.com/brakmic/bazaar/master/images/random/reject_replay_request.png)\r\n\r\nAlthough very interesting to implement and also a nice way to learn more about Bitcoin internals, I am not sure if this approach is really useful and resilient enough to be used in real environments.\r\n\r\nThe changes are located [in my repo](https://github.com/brakmic/bitcoin/commit/763bf6053610c5c3b1be951ce21a8ddffbae7c7e). I don't think that at this stage a PR should be opened.\r\n\r\nRegards,",
      "created_at" : "2020-04-13T16:27:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/9197#issuecomment-612974002",
      "id" : 612974002,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjk3NDAwMg==",
      "updated_at" : "2020-04-13T16:29:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612974002",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/56779?v=4",
         "events_url" : "https://api.github.com/users/brakmic/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brakmic/followers",
         "following_url" : "https://api.github.com/users/brakmic/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brakmic/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brakmic",
         "id" : 56779,
         "login" : "brakmic",
         "node_id" : "MDQ6VXNlcjU2Nzc5",
         "organizations_url" : "https://api.github.com/users/brakmic/orgs",
         "received_events_url" : "https://api.github.com/users/brakmic/received_events",
         "repos_url" : "https://api.github.com/users/brakmic/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brakmic/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brakmic"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "My first concern is that it will be difficult (and perhaps even non-intuitive) which commands are considered \"dangerous\" and \"harmless\". Are there any harmless commands at all?\r\n\r\nI would also like to bring up that there are many databases out there in the world that deal with this problem all the time, using transaction isolation: https://www.postgresql.org/docs/current/transaction-iso.html\r\n\r\n",
      "created_at" : "2020-04-13T16:50:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/9197#issuecomment-612984066",
      "id" : 612984066,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjk4NDA2Ng==",
      "updated_at" : "2020-04-13T16:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612984066",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/101238?v=4",
         "events_url" : "https://api.github.com/users/kanzure/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kanzure/followers",
         "following_url" : "https://api.github.com/users/kanzure/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kanzure/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kanzure",
         "id" : 101238,
         "login" : "kanzure",
         "node_id" : "MDQ6VXNlcjEwMTIzOA==",
         "organizations_url" : "https://api.github.com/users/kanzure/orgs",
         "received_events_url" : "https://api.github.com/users/kanzure/received_events",
         "repos_url" : "https://api.github.com/users/kanzure/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kanzure/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kanzure/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kanzure"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe we could also give users an option to define which methods they consider `dangerous`. Via config option. \r\n\r\nLike:\r\n\r\n`dangerous=sendmany,sendtoaddress`\r\nAnd maybe also: `dangerous=all` to declare them all dangerous.\r\n\r\nBut if we go the postgres way, it'd mean implementing a much more sophisticated structure that's way beyond my knowledge. But it would be a good way to learn something new. :)  ",
      "created_at" : "2020-04-13T17:19:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/9197#issuecomment-612997257",
      "id" : 612997257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9197",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjk5NzI1Nw==",
      "updated_at" : "2020-04-13T17:19:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612997257",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/56779?v=4",
         "events_url" : "https://api.github.com/users/brakmic/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brakmic/followers",
         "following_url" : "https://api.github.com/users/brakmic/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brakmic/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brakmic",
         "id" : 56779,
         "login" : "brakmic",
         "node_id" : "MDQ6VXNlcjU2Nzc5",
         "organizations_url" : "https://api.github.com/users/brakmic/orgs",
         "received_events_url" : "https://api.github.com/users/brakmic/received_events",
         "repos_url" : "https://api.github.com/users/brakmic/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brakmic/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brakmic"
      }
   }
]
