{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "**tl;dr**\r\n\r\nI try swapping out `std::unordered_map` for a faster third-party implementation where it matters, see something like 15% speedup for initial block download coincident with a 19.3% reduction in memory usage.\r\n\r\n---\r\n\r\nWhen profiling initial block download, it's evident that a decent chunk of time on the critical path is spent in `CCoinsViewCache`, the data structure responsible for the in-memory representation of the UTXO set.\r\n\r\n![Selection_147](https://user-images.githubusercontent.com/73197/63644597-9b1b8700-c6ba-11e9-964c-91c6fb78b3a2.png)\r\n*Profile of the `msghand` thread at height ~300,000.*\r\n\r\nThe essential data member of the cache, `cacheCoins`, is a `std::unordered_map` that holds as many UTXO as can fit into memory given the `dbcache` setting. While this map implementation is definitely preferable to `std::map` (which retains order and has O(log(n)) lookups insted of O(1)), both stdlib maps are subpar [relative to non-`std` alternatives](https://martin.ankerl.com/2019/04/01/hashmap-benchmarks-01-overview/).\r\n\r\nAfter seeing cacheCoins as a bottleneck, I decided to try swapping one of these alternative implementations in to see if there is any benefit. It looks like there is.\r\n\r\n![ibd local range 500000 520000](https://user-images.githubusercontent.com/73197/63644703-0a927600-c6bd-11e9-9e1d-2748b8fbdf8d.png)\r\n\r\nFor 20,000 blocks at a representative part of the chain, we see something like a 15% speedup with a 19.3% reduction in memory usage (dbcache was set to 3000).\r\n\r\nThe `CCoinsCaching` benchmark shows improvement but not as dramatically as IBD does:\r\n\r\n![microbenches](https://user-images.githubusercontent.com/73197/63644768-572a8100-c6be-11e9-922c-8360a9f9e3b4.png)\r\n\r\nObviously adding 2000 lines of new consensus-critical code isn't appealing, but if those numbers hold for the full IBD process I think there might be a compelling case to be made for the added code.\r\n\r\n### Implementations considered\r\n\r\nOf the few best-looking options, I picked the one with the most succinct implementation and fewest dependencies, [`robin_hood::unordered_node_map`](https://github.com/martinus/robin-hood-hashing) (it's just a header file). I also looked at Facebook's [`F14NodeMap`](https://github.com/facebook/folly/blob/master/folly/container/F14.md) and Abseil's [`node_hash_map`](https://abseil.io/docs/cpp/guides/container) but both required too much elbow-grease (for now) to integrate here without pulling in a whole lot of code.\r\n\r\n### Next steps\r\n\r\nI'm going to be running more comprehensive benchmarks, including a near-full IBD from the network, to see if these improvements hold.\r\n\r\nI'm also interested in benching this along with a similar change to `mapBlockIndex` (currently a `std::unordered_map`).\r\n\r\n### Questions\r\n\r\nIf we decide to include this or another hashmap implementation, should we do a full fork inclusion a la leveldb or should we try to slim down the implementation to a single header file as is done here (but more)?",
   "closed_at" : "2019-11-14T22:30:08Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
      "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
      "followers_url" : "https://api.github.com/users/jamesob/followers",
      "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/jamesob",
      "id" : 73197,
      "login" : "jamesob",
      "node_id" : "MDQ6VXNlcjczMTk3",
      "organizations_url" : "https://api.github.com/users/jamesob/orgs",
      "received_events_url" : "https://api.github.com/users/jamesob/received_events",
      "repos_url" : "https://api.github.com/users/jamesob/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/jamesob"
   },
   "comments" : 43,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718/comments",
   "created_at" : "2019-08-25T02:30:51Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718",
   "id" : 484882513,
   "labels" : [
      {
         "color" : "fef2c0",
         "default" : false,
         "id" : 1392286103,
         "name" : "Needs Conceptual Review",
         "node_id" : "MDU6TGFiZWwxMzkyMjg2MTAz",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review"
      },
      {
         "color" : "981023",
         "default" : false,
         "id" : 326918230,
         "name" : "Resource usage",
         "node_id" : "MDU6TGFiZWwzMjY5MTgyMzA=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Resource%20usage"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0MzEwNjUzMDkx",
   "number" : 16718,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/16718.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/16718.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16718"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Improve speed, memory efficiency with alternate hashmap",
   "updated_at" : "2019-11-14T22:30:09Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
   "user" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
      "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
      "followers_url" : "https://api.github.com/users/jamesob/followers",
      "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/jamesob",
      "id" : 73197,
      "login" : "jamesob",
      "node_id" : "MDQ6VXNlcjczMTk3",
      "organizations_url" : "https://api.github.com/users/jamesob/orgs",
      "received_events_url" : "https://api.github.com/users/jamesob/received_events",
      "repos_url" : "https://api.github.com/users/jamesob/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/jamesob"
   }
}
