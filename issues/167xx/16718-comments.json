[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16539](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16539.html) (wallet: lower -txmaxfee default from 0.1 to 0.01 BTC by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-08-25T02:41:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-524595468",
      "id" : 524595468,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDU5NTQ2OA==",
      "updated_at" : "2019-08-25T02:41:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524595468",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> including a near-full IBD from the network, to see if these improvements hold.\r\n\r\nYap that would be interesting.\r\n\r\n> I'm also interested in benching this along with a similar change to `mapBlockIndex`\r\n\r\nI'd be surprised to see such improvements here.\r\n\r\n> If we decide to include this or another hashmap implementation, should we do a full fork inclusion a la leveldb or should we try to slim down the implementation to a single header file as is done here (but more)?\r\n\r\nEither way it should include tests.",
      "created_at" : "2019-08-25T10:09:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-524617555",
      "id" : 524617555,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDYxNzU1NQ==",
      "updated_at" : "2019-08-25T10:09:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524617555",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16910](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16910.html) (wallet: reduce loading time by using unordered maps by achow101)\n* [#16801](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16801.html) (faster & less memory for sync: bulk pool allocator for node based containers by martinus)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-08-25T12:07:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-524624890",
      "id" : 524624890,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDYyNDg5MA==",
      "updated_at" : "2019-11-09T03:47:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524624890",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jamesob Interesting! Thanks for providing benchmarks!\r\n\r\nWhich implementation of `std::unordered_map` did you benchmark against?\r\n\r\nIt would be interesting to see this benchmarked against the three major implementations of `std::unordered_map` (`libstdc++`, `libc++` and Microsoft STL).",
      "created_at" : "2019-08-25T12:09:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-524625051",
      "id" : 524625051,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDYyNTA1MQ==",
      "updated_at" : "2019-08-25T12:09:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524625051",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Which implementation of std::unordered_map did you benchmark against?\r\n\r\nI've been benching on Ubuntu and Debian systems with `libstdc++` (x86_64, glibc6).",
      "created_at" : "2019-08-25T14:46:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-524635914",
      "id" : 524635914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDYzNTkxNA==",
      "updated_at" : "2019-08-25T14:46:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524635914",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I try swapping out std::unordered_map for a faster third-party implementation where it matters, see something like 15% speedup for initial block download coincident with a 19.3% reduction in memory usage.\r\n\r\nNice. This is the kind of PR I enjoy reading / reviewing / testing.\r\n\r\nI did a basic benchmark on my macOS machine: `time src/bitcoind -stopatheight=350000`.\r\n\r\n#16718 6f9882ce4a817c9f14aa7526165ab6e278de890e - 48m49s\r\nmaster db67101c748c208cced8e9b76a66d57cd48fbf6e - 55m22s\r\n\r\nWill run something to a more intense height later.",
      "created_at" : "2019-08-26T02:58:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-524697360",
      "id" : 524697360,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDY5NzM2MA==",
      "updated_at" : "2019-08-26T02:58:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524697360",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Some additional context from further benchmarking:\r\n\r\n### Local tests\r\n\r\nI did a local IBD (not real network) comparison up to height 510,000. We see a speedup of roughly 17% coupled with memory savings of roughly 13.5%.\r\n\r\nGiven the vertical shift in real memory usage curve on the robinhood branch (pictured below), I suspect there's a problem with my implementation of the `DynamicUsage()` memory estimator for the new robin_hood map. We appear to be *over-reporting* estimated memory usage of the new map relative to actual, so fixing this might lead to additional speedups for configurations with a limiting dbcache. \r\n\r\n![ibd local 510000](https://user-images.githubusercontent.com/73197/63704784-c658c000-c7f9-11e9-89f8-d7e181849ae7.png)\r\n\r\n\r\n#### 2019-08-robinhood vs. master (absolute)\r\n|          bench name           |  x  |    2019-08-robinhood    |         master          |\r\n|-------------------------------|----:|-------------------------|-------------------------|\r\n| ibd.local.510000.total_secs   |   1 | 7827.2801 (Â± 0.0000)    | 9447.3154 (Â± 0.0000)    |\r\n| ibd.local.510000.peak_rss_KiB |   1 | 4863324.0000 (Â± 0.0000) | 5620656.0000 (Â± 0.0000) |\r\n#### 2019-08-robinhood vs. master (relative)\r\n|          bench name           |  x  | 2019-08-robinhood | master |\r\n|-------------------------------|----:|------------------:|-------:|\r\n| ibd.local.510000.total_secs   |   1 |                 1 |  1.207 |\r\n| ibd.local.510000.peak_rss_KiB |   1 |                 1 |  1.156 |\r\n\r\n### IBD from the real network\r\n\r\nI let IBD run overnight up to height 550,000 using peers from the real network for both master and this branch. The differences in speed were not as compelling here (a 6% gain for the robinhood branch) but memory differences were still pronounced: 14.6% percent savings for the robinhood branch (6502MB vs. 7615MB, both at a dbcache of 5000).\r\n\r\n```\r\nIntel(R) Core(TM) i7-4770 CPU @ 3.40GHz\r\nLinux 4.4.0-119-generic x86_64\r\n\r\n`master` to height 550_000, dbcache=5000:\r\n\r\nCommand being timed: \"./src/bitcoind -datadir=/data/bitcoin-rh -printtoconsole=0 -stopatheight=550000 -dbcache=5000\"\r\nUser time (seconds): 54822.52\r\nSystem time (seconds): 929.91\r\nPercent of CPU this job got: 121%\r\nElapsed (wall clock) time (h:mm:ss or m:ss): 12:44:12\r\nAverage shared text size (kbytes): 0\r\nAverage unshared data size (kbytes): 0\r\nAverage stack size (kbytes): 0\r\nAverage total size (kbytes): 0\r\nMaximum resident set size (kbytes): 7615768\r\nAverage resident set size (kbytes): 0\r\nMajor (requiring I/O) page faults: 1715\r\nMinor (reclaiming a frame) page faults: 72418086\r\nVoluntary context switches: 26934810\r\nInvoluntary context switches: 287115\r\nSwaps: 0\r\nFile system inputs: 451040\r\nFile system outputs: 596633792\r\nSocket messages sent: 0\r\nSocket messages received: 0\r\nSignals delivered: 0\r\nPage size (bytes): 4096\r\nExit status: 0\r\n\r\n\r\nOn the robinhood branch:\r\n\r\nCommand being timed: \"./src/bitcoind -datadir=/data/bitcoin-rh -printtoconsole=0 -stopatheight=550000 -dbcache=5000\"\r\nUser time (seconds): 52074.03\r\nSystem time (seconds): 914.95\r\nPercent of CPU this job got: 123%\r\nElapsed (wall clock) time (h:mm:ss or m:ss): 11:57:01\r\nAverage shared text size (kbytes): 0\r\nAverage unshared data size (kbytes): 0\r\nAverage stack size (kbytes): 0\r\nAverage total size (kbytes): 0\r\nMaximum resident set size (kbytes): 6502096\r\nAverage resident set size (kbytes): 0\r\nMajor (requiring I/O) page faults: 14411\r\nMinor (reclaiming a frame) page faults: 72379830\r\nVoluntary context switches: 22815471\r\nInvoluntary context switches: 290463\r\nSwaps: 0\r\nFile system inputs: 770608\r\nFile system outputs: 597949704\r\nSocket messages sent: 0\r\nSocket messages received: 0\r\nSignals delivered: 0\r\nPage size (bytes): 4096\r\nExit status: 0\r\n```\r\n\r\nThe \"real\" gains here dampen my enthusiasm somewhat, but the memory story is compelling. Curious for others to weigh in on whether these differences merit the increased risk of bringing in a non-`std` map implementation.",
      "created_at" : "2019-08-26T16:23:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-524927442",
      "id" : 524927442,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDkyNzQ0Mg==",
      "updated_at" : "2019-08-26T16:23:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524927442",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Consider my enthusiasm renewed because the latest \"real\" IBD runs came back showing a hard-to-believe 40% speedup. Sync to 550,000 on different machines but identical hardware. Still a 12% memory savings.\r\n\r\nObviously it's hard to gauge variance when syncing from the real network.\r\n\r\n### `2019-08-robinhood`\r\n\r\n![Selection_149](https://user-images.githubusercontent.com/73197/63738371-8a544800-c857-11e9-808e-b763a14250d9.png)\r\n\r\n### `master`\r\n\r\n![Selection_148](https://user-images.githubusercontent.com/73197/63738448-ce474d00-c857-11e9-8867-f692222754d1.png)\r\n\r\nApologies for the images - tmux over SSH makes copying text a pain.\r\n",
      "created_at" : "2019-08-27T03:19:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525119421",
      "id" : 525119421,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTExOTQyMQ==",
      "updated_at" : "2019-08-27T03:19:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525119421",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ack, NACK this implementation. From the docs:\r\n\r\n```\r\nDepends on good Hashing. For a really bad hash the performance will not only degrade like in std::unordered_map, the map will simply fail with an std::overflow_error. In practice, when using the standard robin_hood::hash, I have never seen this happening.\r\n```\r\n\r\nThere are some ways that we could maybe get some better performance with STD::unordered_map, will take a look and give some feedback later. ",
      "created_at" : "2019-08-27T04:25:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525131403",
      "id" : 525131403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTEzMTQwMw==",
      "updated_at" : "2019-08-27T04:25:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525131403",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> the map will simply fail with an std::overflow_error\r\n\r\nThanks for the close look @JeremyRubin. This is exactly the kind of change I'd be really worried about introducing. The performance difference will have to be really compelling (and verified by a few people aside from myself) to consider using a non-`std` implementation for something as consensus-sensitive as `cacheCoins`.\r\n\r\nI wonder if, assuming we did find a non-std implementation that we're comfortable with, we should initially leave its use as an opt-in configure flag that, e.g., installations running on lower-power hardware can make use of.",
      "created_at" : "2019-08-27T16:00:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525368573",
      "id" : 525368573,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTM2ODU3Mw==",
      "updated_at" : "2019-08-27T16:00:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525368573",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Alternatively, we could look at forking `robin-hood-hashing` and removing all instances of [`throwOverflowError()`](https://github.com/martinus/robin-hood-hashing/blob/master/src/include/robin_hood.h#L1820-L1826) with something more conservative.",
      "created_at" : "2019-08-27T16:22:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525377566",
      "id" : 525377566,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTM3NzU2Ng==",
      "updated_at" : "2019-08-27T16:22:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525377566",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK for replacing the hashmap, `std::map` is a disaster. (`std::unordered_map` is a little bit better but still really bad).",
      "created_at" : "2019-08-27T16:43:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525385497",
      "id" : 525385497,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTM4NTQ5Nw==",
      "updated_at" : "2019-08-27T16:43:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525385497",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jamesob maybe have a look at the experimental rust fork?\r\n\r\nYou could just wrap the rust hasmap (with at least rust v1.35 or use hashbrown crate). Rust's hashmap is based on swisstable.\r\n\r\nReplacing sensitive data structures with rust seems like a good use case given long term goals, and can be used for low resource nodes experimentally?",
      "created_at" : "2019-08-27T17:26:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525402401",
      "id" : 525402401,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTQwMjQwMQ==",
      "updated_at" : "2019-08-27T17:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525402401",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jeremyrubin\r\nI just had a talk with him about this,\r\nPersonally I'd love to see rust inside of bitcoin, but I'm not sure a hashmap is the best first step as integrating rust and c++ requires a C ABI in between. \r\n\r\nI do hope I'll have time to test the C++ SwissTable implementation and compare benchmarks https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h",
      "created_at" : "2019-08-27T17:34:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525405561",
      "id" : 525405561,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTQwNTU2MQ==",
      "updated_at" : "2019-08-27T17:34:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525405561",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I agree with @elichai - I think adding Rust as a dependency for one of the most consensus-sensitive data structures is way too big a leap. A few extra thousand lines of heavily-scrutinized cpp is about the biggest risk I'm willing to take personally, and that's assuming a ton of review, testing, and maybe a gradual deployment process.",
      "created_at" : "2019-08-27T17:43:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525408692",
      "id" : 525408692,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTQwODY5Mg==",
      "updated_at" : "2019-08-27T17:43:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525408692",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "1. Would love a quick explanation on how to run all these benchmarks myself (so I can get both a control before changing and after).\r\n\r\n2. Why did you choose `unordered_node_map` and not `unordered_flat_map`?.\r\n\r\n3. Do you think it would be interesting in the future for other uses of `std::unordered_map` in the code? (and potentially even `std::map`)",
      "created_at" : "2019-08-27T19:56:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525458164",
      "id" : 525458164,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTQ1ODE2NA==",
      "updated_at" : "2019-08-27T19:56:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525458164",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Would love a quick explanation on how to run all these benchmarks myself (so I can get both a control before changing and after).\r\n\r\nYou can use [bitcoinperf](https://github.com/chaincodelabs/bitcoinperf) to perform the host-local comparative benchmarks I've posted above. I've committed an example file for this branch [here](https://github.com/chaincodelabs/bitcoinperf/blob/master/examples/robinhood-hashing.yml) - note that you're going to have to change some of the paths and potentially create some partially synced datadirs to be able to use it.\r\n\r\n> Why did you choose unordered_node_map and not unordered_flat_map?\r\n\r\nIn the case of `cacheCoins`, the values can be fairly large (>55 bytes) since they include scriptPubkeys. The flat map is good for values of small size, but shuffling around medium-to-large objects isn't the intended use. The node map allocates values separately and stores pointers instead. See [Folly's docs](https://github.com/facebook/folly/blob/master/folly/container/F14.md#f14-variants) for more details.\r\n\r\nThat said, I'm happy to benchmark against a `flat_map` implementation to see how it compares to `node_map`.\r\n\r\n> Do you think it would be interesting in the future for other uses of std::unordered_map in the code? (and potentially even std::map)\r\n\r\nYeah, I do, though I don't expect any other piece of data in the system will give us such dramatic improvements in performance. If we're going to use this map for arguably the most sensitive data structure in the system, we might as well use it elsewhere. I think a compelling candidate would be `mapBlockIndex`, but there are probably other good uses as well.",
      "created_at" : "2019-08-27T20:13:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525464014",
      "id" : 525464014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTQ2NDAxNA==",
      "updated_at" : "2019-08-27T20:13:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525464014",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sounds good :) Thanks! \r\nI'll try also to benchmark myself, curious the difference between `unordered_node_map` and  `unordered_flat_map` over unique pointers.",
      "created_at" : "2019-08-27T20:18:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525465933",
      "id" : 525465933,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTQ2NTkzMw==",
      "updated_at" : "2019-08-27T20:18:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525465933",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok I've had a chance to more tightly review the code here. I didn't want to say so earlier, because I wasn't sure, but I think it *should* be possible to modify the cuckoocache code minimally to support cacheCoins (store a key/value and (maybe) get rid of atomics for erasure).\r\n\r\nI can put together a PoC of that... there are some other benefits as CuckooCache is specifically a cache and not a map being used as a cache.\r\n\r\nThis is already a consensus dependency, and has been in since v0.14, so it introduces less new code.",
      "created_at" : "2019-08-27T22:25:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525507057",
      "id" : 525507057,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTUwNzA1Nw==",
      "updated_at" : "2019-08-27T22:25:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525507057",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Latest round of benchmarks are in from two dedicated bench machines with identical specs (Intel(R) Xeon(R) CPU E3-1220 v5 @ 3.00GHz, 8GB memory, SSD).\r\n\r\nFirst I reran the last test I reported above (`/usr/bin/time -v ./src/bitcoind -stopatheight=550000 -dbcache=5000`) to ensure I could recreate the results. To my surprise, they held (**40% speedup, 13% memory savings**). To ensure that the wide disparity in performance wasn't due to a difference in the machines, I did a crossover: I swapped branches on each machine and reran the IBD. Same results.\r\n\r\nmaster (a7be1cc92be4946c4f042bccd3a1b007657f3241):\r\n```\r\nElapsed (wall clock) time (h:mm:ss or m:ss): 6:47:37\r\nMaximum resident set size (kbytes): 7425920\r\n```\r\n\r\nthis branch:\r\n```\r\nElapsed (wall clock) time (h:mm:ss or m:ss): 4:03:51\r\nMaximum resident set size (kbytes): 6436820\r\n```\r\n\r\nThis is a remarkable performance improvement that I'm eager to see reproduced by others.",
      "created_at" : "2019-08-28T13:47:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525753125",
      "id" : 525753125,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTc1MzEyNQ==",
      "updated_at" : "2019-08-28T13:49:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525753125",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I think it should be possible to modify the cuckoocache code minimally to support cacheCoins\r\n\r\n@JeremyRubin I'd be very eager to see your PoC for this. In principle I strongly agree that if we can modify existing consensus-supporting data structures and see similar performance benefits, that's the way to go. \r\n\r\n> CuckooCache is specifically a cache and not a map being used as a cache\r\n\r\nI'm curious about what you mean here, and it highlights one of my concerns about repurposing CuckooCache. As you probably know, we can't just evict stuff from cacheCoins - we have to be very careful about persisting cache content (`FlushStateToDisk()`) before eviction. At the moment it looks like CuckooCache quietly evicts data when it fills up - I'm curious to see how you'll ensure that we can coordinate eviction with a guaranteed flush.",
      "created_at" : "2019-08-28T13:57:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525757222",
      "id" : 525757222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTc1NzIyMg==",
      "updated_at" : "2019-08-28T13:57:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525757222",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK for improving  `std::unordered_map` behavior or swapping it for an alternative if the improvement is >10%. It's nice how this only changes 1 line in `coins.h`.\r\n\r\nI'm able to reproduce the memory gain, but the speed is actually worse for me, on a 2019 MacBook Pro with `-dbcache=10000`, no indexes and no wallets, syncing over LAN to a single node:\r\n* IBD before: 3:35 hours plus 11 minute db flush (memory at height 564180:  8.23 GB) \r\n* IBD after: 5:30 hours plus 20 minute db flush (memory at height 564180: 7.5 GB)\r\n",
      "created_at" : "2019-08-28T16:20:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525818499",
      "id" : 525818499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTgxODQ5OQ==",
      "updated_at" : "2019-08-28T16:22:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525818499",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hi all! I am the author of the the `robin_hood::unordered_map` variants, and just saw this PR by accident. Please ask away if you have any question about my implementation! \r\n\r\nI have also done extensive map benchmarks here, which might be interesting: https://github.com/martinus/map_benchmark\r\n\r\nI agree with @JeremyRubin that the `throwOverflowError()` is a potential problem, if there is a way to force collisions in the map. Be aware that new hasmaps (facebook's F14, Google's Swisstable) also depend on good hashes. They don't throw an exception, but performance can degrade so much that it's not much different from an infinite loop.",
      "created_at" : "2019-08-28T16:22:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525819075",
      "id" : 525819075,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTgxOTA3NQ==",
      "updated_at" : "2019-08-28T16:22:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525819075",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@martinus would love to see some list of projects you know are depending and using your implementation :)\r\n\r\nI think if people would feel this is a stable and vetted implementation they would feel better about considering using it in consensus critical code.\r\nThanks :)",
      "created_at" : "2019-08-28T16:59:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525832792",
      "id" : 525832792,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTgzMjc5Mg==",
      "updated_at" : "2019-08-28T16:59:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525832792",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@elichai, we have been using the map in several core components in [Dynatrace's](https://www.dynatrace.com) proprietary monitoring platform for quite a while. That's a very well tested and widely deployed product on multiple platforms (I work at dynatrace so I might be biased..).\r\n\r\nI don't know much about other use cases. Here is a github query tough to find other uses of the map: https://github.com/search?q=robin_hood_h_included&type=Code It only finds usages who copied the file though.\r\n\r\nSome usages that I had a look at: \r\n* https://github.com/jinja2cpp/Jinja2Cpp reported 2x speedup https://twitter.com/flex_ferrum/status/1159210516943908865\r\n* https://github.com/carlfindahl/wacman 2x speedup: https://github.com/carlfindahl/wacman/commit/2189bef22eb86d4ad227dcd3b7ed1ca412110d15#diff-275e07678407ddce12c68ed11772f041R90\r\n* https://github.com/masc-ucsc/lgraph serializes and mmaps robin_hood maps https://github.com/masc-ucsc/lgraph/commit/ec37bdc6e867824a40e269bd5204cd42b1a75cf3. I don't know of any speedups.\r\n* https://github.com/p-ranav/csv has switched from tessil's robin_hood map to my map and reported speedup here: https://github.com/p-ranav/csv/commit/eabe6172cad9bad1f35b0749d729cbb3df89c8c2\r\n* https://github.com/JeremyBYU/polylidarv2 has 30% speedup https://github.com/JeremyBYU/polylidarv2/commit/8e6e07bff1de5046cf60af6a62045abba7cf15ea",
      "created_at" : "2019-08-28T17:41:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525848503",
      "id" : 525848503,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTg0ODUwMw==",
      "updated_at" : "2019-08-28T17:41:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525848503",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Are there any benchmarks on low cpu, low memory devices. Given that this slows down IBD for @Sjors  (https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525818499), I wouldn't be surprised if it also slowed down other architectures/configurations.",
      "created_at" : "2019-08-28T17:51:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525852488",
      "id" : 525852488,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTg1MjQ4OA==",
      "updated_at" : "2019-08-28T17:51:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525852488",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The speed-ups are promising, it's surprising to me that this makes so much of a difference,\r\n\r\nBut to me it sounds quite risky, to be honest, to import a custom map implementation into consensus-critical code. Of course, we can never be sure, but likely these have much less testing than whatever tried-and-true map implementation comes with C++ libraries by default.\r\n\r\n(Importing rust code for this reason seems a very bad idea to me, I'd be surprised if it helps performance at all with a FFI barrier there, and that makes it doubly risky)",
      "created_at" : "2019-08-28T18:37:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525870177",
      "id" : 525870177,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTg3MDE3Nw==",
      "updated_at" : "2019-08-28T18:37:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525870177",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, pulling in Rust for something like this is way too early/aggressive. I'm curious if its possible to get similar speedups by taking a hatchet to robinhood so that we can cut it down to something thats more reviewable, since obviously thats the key criteria.",
      "created_at" : "2019-08-28T18:56:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525877289",
      "id" : 525877289,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTg3NzI4OQ==",
      "updated_at" : "2019-08-28T18:56:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525877289",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It would be very interesting where exactly the speedup is coming from. It might be possible to reproduce this speedup by staying with `std::unordered_map`. E.g. I see two possibilities for improvement:\r\n\r\n* robin_hood map requires less hashing and less key comparisons than std::unordered_map. It might be possible to save a lot of hashing & comparisons by simply adding the precalculated hash value to the key (so instead of the `COutPoint` use e.g. `std::pair<COutPoint, size_t>`. This unfortunately will increase memory usage a bit (but not much, since the key/value pair is already quite large).\r\n\r\n* I use a bulk allocator that never frees any memory, but reuses previously allocated memory. So once the cache has reached its peak size, no allocations will be necessary any more. This can also be achieved with a custom allocator for std::unordered_map.\r\n\r\n* If the speedup comes from the robin_hood style memory layout, that's bad luck - can't be achieved with `std::unordered_map`.",
      "created_at" : "2019-08-28T18:59:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525878177",
      "id" : 525878177,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTg3ODE3Nw==",
      "updated_at" : "2019-08-28T18:59:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525878177",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "First `-reindex-chainstate` bench finished: ~~46.7%~~ 2.14x faster with 1173 MB less memory usage.\r\n\r\nmaster (a7be1cc92be4946c4f042bccd3a1b007657f3241):\r\n\r\n```\r\nuser@bench-ssd-4:~/bitcoin$ /usr/bin/time -v ./src/bitcoind -reindex-chainstate -stopatheight=550000 -printtoconsole=0 -dbcache=5000; git branch\r\n\r\n        Command being timed: \"./src/bitcoind -reindex-chainstate -stopatheight=550000 -printtoconsole=0 -dbcache=5000\"\r\n        User time (seconds): 7735.97\r\n        System time (seconds): 1081.16\r\n        Percent of CPU this job got: 53%\r\n        Elapsed (wall clock) time (h:mm:ss or m:ss): 4:32:10\r\n        Average shared text size (kbytes): 0\r\n        Average unshared data size (kbytes): 0\r\n        Average stack size (kbytes): 0\r\n        Average total size (kbytes): 0\r\n        Maximum resident set size (kbytes): 7563764\r\n        Average resident set size (kbytes): 0\r\n        Major (requiring I/O) page faults: 15004449\r\n        Minor (reclaiming a frame) page faults: 61431800\r\n        Voluntary context switches: 22076432\r\n        Involuntary context switches: 4492039\r\n        Swaps: 0\r\n        File system inputs: 2826327856\r\n        File system outputs: 165988936\r\n        Socket messages sent: 0\r\n        Socket messages received: 0\r\n        Signals delivered: 0\r\n        Page size (bytes): 4096\r\n        Exit status: 0\r\n```\r\n\r\n2019-08-robinhood: \r\n\r\n```\r\nuser@bench-ssd-3:~/bitcoin$ /usr/bin/time -v ./src/bitcoind -reindex-chainstate -stopatheight=550000 -printtoconsole=0 -dbcache=5000; git branch\r\n\r\n        Command being timed: \"./src/bitcoind -reindex-chainstate -stopatheight=550000 -printtoconsole=0 -dbcache=5000\"\r\n        User time (seconds): 5598.92\r\n        System time (seconds): 720.66\r\n        Percent of CPU this job got: 82%\r\n        Elapsed (wall clock) time (h:mm:ss or m:ss): 2:07:54\r\n        Average shared text size (kbytes): 0\r\n        Average unshared data size (kbytes): 0\r\n        Average stack size (kbytes): 0\r\n        Average total size (kbytes): 0\r\n        Maximum resident set size (kbytes): 6361924\r\n        Average resident set size (kbytes): 0\r\n        Major (requiring I/O) page faults: 1684815\r\n        Minor (reclaiming a frame) page faults: 73715700\r\n        Voluntary context switches: 7033296\r\n        Involuntary context switches: 1901858\r\n        Swaps: 0\r\n        File system inputs: 502322648\r\n        File system outputs: 177410624\r\n        Socket messages sent: 0\r\n        Socket messages received: 0\r\n        Signals delivered: 0\r\n        Page size (bytes): 4096\r\n        Exit status: 0\r\n```\r\n\r\n---\r\n\r\n@laanwj in terms of your concerns, I couldn't agree more. The last thing I want is to be responsible for a consensus failure. \r\n\r\nI wonder if these performance gains indeed turn out to be real, we could devote a substantial amount of effort to scrutinizing this map implementation using e.g. fuzz + stress testing and thorough manual review. After some period (months), we could make its use opt-in via configure flag to allow some hardware-constrained installations to use it.\r\n\r\nThat said, in the grand scheme of things maybe even a 50% speedup in IBD is negligibly marginal relative to the risk.",
      "created_at" : "2019-08-28T19:03:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525879711",
      "id" : 525879711,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTg3OTcxMQ==",
      "updated_at" : "2019-08-28T19:11:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525879711",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My mistake - that's *2.14x* faster, not 46.7%.",
      "created_at" : "2019-08-28T19:11:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525882635",
      "id" : 525882635,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTg4MjYzNQ==",
      "updated_at" : "2019-08-28T19:11:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525882635",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> master ([a7be1cc](https://github.com/bitcoin/bitcoin/commit/a7be1cc92be4946c4f042bccd3a1b007657f3241)):\r\n> ```\r\n>         User time (seconds): 7735.97\r\n>         Major (requiring I/O) page faults: 15004449\r\n> ```\r\n> \r\n> 2019-08-robinhood:\r\n> ```\r\n>         User time (seconds): 5598.92\r\n>         Major (requiring I/O) page faults: 1684815\r\n> ```\r\n\r\nI find it a bit fishy that the major page faults with robinhood are 10x less. Could disk cache affect the benchmark? Maybe drop the cache before benchmarking, I think `sync; echo 3 > /proc/sys/vm/drop_caches` should work",
      "created_at" : "2019-08-28T19:19:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525885509",
      "id" : 525885509,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTg4NTUwOQ==",
      "updated_at" : "2019-08-28T19:19:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525885509",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> we could make its use opt-in via configure flag to allow some hardware-constrained installations to use it\r\n\r\nI disagree about a phased out deployment. Either the consensus code is safe to run, correct, and can be deployed to the whole network, or not. There is no in-between. The last thing you want to see happening is that all `arm` (or whatever \"hardware-constrained means) devices are off consensus.",
      "created_at" : "2019-08-28T19:22:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525886639",
      "id" : 525886639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNTg4NjYzOQ==",
      "updated_at" : "2019-08-28T19:22:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525886639",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I've benchmarked `bitcoind -reindex-chainstate -stopatheight=550000 -printtoconsole=0 -dbcache=5000` on my machine (Intel i7-8700, g++ 9.1, libstdc++), and can confirm a significant speedup with @jamesob's changes. For accurate reproducability I have disabled frequency scaling and turbo boost for my cpu (with [sudo pyperf system tune](https://pyperf.readthedocs.io/en/latest/)). Runtime with `std::unordered_map` is 6471 seconds, and 5339 seconds with robin_hood map, 21% faster.\r\n\r\nI've modified `SaltedOutpointHasher` and added a custom equals function to count the number of hashes and equal operations performed. To my surprise, on my system `std::unordered_map` needs *less* hash calls. It looks like it caches the full hash. (10.7 vs. 13.2 billion hashes). I've benchmarked just the hashing and equals operations, and this should account for about 323 vs. 391 seconds of CPU total.\r\n\r\nNext I'm going to try to use a bulk pool allocator for std::unordered_map and see how that goes.\r\n",
      "created_at" : "2019-08-30T07:26:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-526491374",
      "id" : 526491374,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjQ5MTM3NA==",
      "updated_at" : "2019-08-30T07:26:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526491374",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I have tried to use `boost::pool_allocator` and `boost::fast_pool_allocator` for the `std::unordered_map`, but performance was *much* slower than `std::allocator`.\r\n\r\nThen I adapted my [BulkPoolAllocator](https://github.com/martinus/robin-hood-hashing/blob/master/src/include/robin_hood.h#L338) to be usable for the `std::unordered_map`, and results are much better.\r\n\r\nBenchmark results for `bitcoind -reindex-chainstate -stopatheight=550000 -printtoconsole=0 -dbcache=5000` on my i7-8700:\r\n\r\n|                 | unordered_map | robin_hood | unordered_map + BulkPoolAllocator |\r\n|-----------------|---------------|------------|---------------------------------|\r\n| elapsed h:mm:ss |       1:47:51 |    1:28:59 |                         1:32:56 |\r\n| speedup %       |            0% |      21.2% |                           16.1% |\r\n| max RSS kbyte   |       7553716 |    6301540 |                         6950432 |\r\n| max RSS %       |          100% |      83.4% |                           92.0% |\r\n\r\nSo most of the savings can also be achieved by staying with `std::unordered_map` and adding the BulkPoolAllocator. This should be much easier to integrate since it's less than 200 lines of code. Also, the allocator might make sense for other node-based containers as well.",
      "created_at" : "2019-08-30T17:21:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-526681466",
      "id" : 526681466,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjY4MTQ2Ng==",
      "updated_at" : "2019-08-30T17:21:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526681466",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think we may also be able to eke out some additional performance by making the keys the sha256 salted hash of the COutpoint rather than the COutpoint itself, and instead of using siphash taking entropy from that salted hash (as done for cuckoocache).\r\n\r\n\r\nAt the expense of one extra sha256 on insert/find (and less siphash), we get to drop 4 of the key bytes and have cheaper hash re-evaluation. Furthermore (this is a little bit platform dependent, but maybe we can detect it or wrap the hash in an is_integral type) we can set __cache_hash_code in the map to false, and save another 8 bytes. Depending on padding issues we may save even more space.\r\n\r\n",
      "created_at" : "2019-08-30T19:02:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-526713367",
      "id" : 526713367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjcxMzM2Nw==",
      "updated_at" : "2019-08-30T19:02:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526713367",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for running those benchmarks, @martinus. I also think we should try calling `cacheCoins.reserve(dbcache / avg_coinscacheentry_size)` somewhere during startup with both implementations to see how that affects things.\r\n\r\nOn the chance that we still want to consider using the `robin_hood` map, I've stripped about 500 lines out of `robinhood.h` (mostly relating to `unordered_flat_map` which I don't think we have much use for). I refer to this stripped down version as `robinhood-slim` in the benchmarks below (and it's now the tip of this branch).\r\n\r\n---\r\n\r\nI've been running benchmarks pretty continuously for the last few days and here's a summary of the SSD-based timings:\r\n\r\n![Selection_153](https://user-images.githubusercontent.com/73197/64177533-ae9ebe80-ce2d-11e9-977e-47b85b41a9e2.png)\r\n\r\nUnsurprisingly it seems that performance improvement is most pronounced with a large dbcache. Presumably this is because as the number of entries in cacheCoins grows, `std::unordered_map`'s performance starts to degrade, `robin_hood` starts to shine, or both.\r\n\r\nI found it interesting that over numerous runs, a large dbcache (7000) ended up being slower across the board than a smaller dbcache (6000 or 3000).\r\n\r\nIn general, the weird timing disparities from these results give me pause. I'm benching on dedicated, non-virtualized hardware that is for no purpose other than benchmarking, and I'm dropping caches before runs (`sudo /sbin/swapoff -a; sudo /sbin/sysctl vm.drop_caches=3;`). Yet we see weird outliers like the 500-minute robinhood reindex at dbcache=5000 - which I didn't believe initially but then reproduced. Why would a dbcache=7000 run take longer than a dbcache=3000? Is the runtime of -reindex-chainstate somehow weirdly determined by the dbcache value during IBD?\r\n\r\nI'm quite confused by some aspects of these results. \r\n\r\nAnyway, here's the memory story:\r\n\r\n![Selection_154](https://user-images.githubusercontent.com/73197/64178328-45b84600-ce2f-11e9-98de-cfa28b3ca850.png)\r\n\r\nWe reliably see significant memory savings from the robinhood map.\r\n\r\n---\r\n\r\nI also ran -reindex-chainstate to 550,000 on equivalent machines with HDDs. The disparity between master and this branch has been almost unbelievable, but I've reliably reproduced it even after doing machine crossover. The following table is characteristic of the -reindex-chainstates I've done on HDD:\r\n\r\n| branch | dbcache | time | memory |\r\n| ------ | ------- | ---- | ------ |\r\n| robinhood | 5000 | 8:46:59 | 6.38 GB |\r\n| master | 5000 | 21:32:58 (stopped early) | 7.47 GB |\r\n\r\nSimilarly, IBD to the same height with the same dbcache took 47 hours on master (!?) and 17 hours on this branch.\r\n\r\nI'm just kind of assuming these results are bogus somehow, although I'm very confused by the fact that I can reliably reproduce them even after swapping machines, but maybe someone with a spinning disk can confirm or deny that there's a dramatic difference in performance between this branch and master.",
      "created_at" : "2019-09-03T14:19:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-527479906",
      "id" : 527479906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNzQ3OTkwNg==",
      "updated_at" : "2019-09-03T14:19:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527479906",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for doing those additional benchmarks @jamesob. I think that confirms the finding by @Sjors that the sync is slowed down with a high dbcache in https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-525818499",
      "created_at" : "2019-09-03T14:27:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-527483128",
      "id" : 527483128,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNzQ4MzEyOA==",
      "updated_at" : "2019-09-03T14:27:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527483128",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I think that confirms the finding by @Sjors that the sync is slowed down with a high dbcache in #16718 (comment)\r\n\r\nNote though that I differ from Sjors' findings in that this branch was ~2x faster than master for dbcache=7000 (reindex-chainstate), whereas in his results this branch was slower than master for a large dbcache (10000) during IBD. \r\n\r\n\r\nI lightly suspect that @Sjors' slowness on this branch relative to master was due to some kind of IBD-inherent variability since on every other benchmark run I've seen, this branch performs better than master. \r\n\r\nSjors' total IBD runtime (<5 hours) was also less than my reindex-chainstate runtime (up to 8 hours), which I attribute to his probably-much-better hardware.",
      "created_at" : "2019-09-03T15:16:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-527504979",
      "id" : 527504979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNzUwNDk3OQ==",
      "updated_at" : "2019-09-03T15:16:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527504979",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "In https://github.com/martinus/bitcoin/tree/2019-08-bulkpoolallocator I'm currently working on a PR where I've extracted (and completely rewrote...) the pool allocator so it is usable in std::unordered_map. Unfortunately the standard allocator API is trickier than I've expected, but I think I got it now. It's performance is still as advertised in https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-526681466. I still have to clean up the code and add some unit tests before I'm creating a PR, probably in the next few days.",
      "created_at" : "2019-09-03T18:03:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-527571982",
      "id" : 527571982,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNzU3MTk4Mg==",
      "updated_at" : "2019-09-03T18:03:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527571982",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Surprised nobody's pointed out that using `std::unordered_map` basically gives us an *unknown* implementation right now... which probably is best avoided in consensus code, when possible. The fact that we can get performance improvements too really suggests to me that switching to a *specific* implementation would be a good idea. So concept ACK.\r\n\r\nAgree with need for intense care and testing to avoid a surprise protocol change. Bundling like LevelDB seems best if it's a lot of code.\r\n\r\nAs far as issues with bad hashes - we don't want to enable intentionally-crafted transactions to screw over performance, so might need to re-hash with some seed?",
      "created_at" : "2019-09-20T21:24:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-533713536",
      "id" : 533713536,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzMzcxMzUzNg==",
      "updated_at" : "2019-09-20T21:24:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533713536",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Status of this?\r\n\r\n- Does using std::unordered_map with custom allocator https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-527571982 still seem like it could be a good approach?\r\n\r\n- Are the code changes in this PR more or less complete, or is there more robinhood code streamlining to be done?\r\n\r\n- Are there still concerns about performance will smaller dbcaches and more constrained hardware with these implementations?\r\n\r\n- Are there still benchmark reproducibility issues? Are these affecting other setups or just James' benchmarks?",
      "created_at" : "2019-10-21T19:51:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-544678963",
      "id" : 544678963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDY3ODk2Mw==",
      "updated_at" : "2019-10-21T19:51:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544678963",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Status of this?\r\n\r\nI think using a custom allocator from #16801 is a much safer choice than switching to a different map implementation.Writing a correct and fast hashmap is orders of magnitudes more difficult than a custom allocator. This PR was good though that it has highlighted what could be possible. Most of the performance benefit can be achieved with the custom allocator as well \r\n\r\nConcerning benchmark reproducibility, I believe @jamesob has stumbled upon a pretty severe performance bug, but we don't know yet if this is due to the new code or maybe the optimizations trigger an existing bug more often: https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544367528",
      "created_at" : "2019-10-23T06:32:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-545290624",
      "id" : 545290624,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTI5MDYyNA==",
      "updated_at" : "2019-10-23T06:32:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545290624",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Some new (and stabilized) benchmarks here. Following the same methodology  [as in similar PRs](https://github.com/bitcoin/bitcoin/pull/16801#issuecomment-551883348), we see a 6% difference in runtime with ~400MB less memory usage for a reindex up to 550,000 ([`bench/robinhood.1`](https://github.com/jamesob/bitcoin/commits/bench/robinhood.1) vs. [`bench/master.1`](https://github.com/jamesob/bitcoin/commits/bench/master.1)):\r\n\r\n```\r\nhost         tag                      time       time% maxmem  cpu%  dbcache\r\nbench-ssd-2  robinhood.1              8:43:36    0.94  5304.37MB 356%  4000MB\r\nbench-ssd-2  robinhood.1              8:44:29    0.94  5309.67MB 355%  4000MB\r\nbench-ssd-2  master.1                 9:15:02    1.00  5776.95MB 344%  4000MB\r\nbench-ssd-2  master.1                 9:15:26    1.00  5762.75MB 343%  4000MB\r\n\r\nbench-ssd-3  robinhood.1              8:44:41    0.94  5293.84MB 355%  4000MB\r\nbench-ssd-3  robinhood.1              8:46:29    0.94  5309.91MB 354%  4000MB\r\nbench-ssd-3  master.1                 9:18:07    1.00  5780.84MB 342%  4000MB\r\nbench-ssd-3  master.1                 9:15:53    1.00  5773.25MB 343%  4000MB\r\n\r\nbench-ssd-4  robinhood.1              8:46:13    0.95  5279.41MB 354%  4000MB\r\nbench-ssd-4  robinhood.1              8:45:36    0.94  5294.21MB 354%  4000MB\r\nbench-ssd-4  master.1                 9:14:42    1.00  5782.72MB 344%  4000MB\r\nbench-ssd-4  master.1                 9:16:17    1.00  5762.92MB 343%  4000MB\r\n\r\nbench-ssd-5  robinhood.1              8:42:02    0.94  5277.88MB 357%  4000MB\r\nbench-ssd-5  robinhood.1              8:41:34    0.94  5302.08MB 357%  4000MB\r\nbench-ssd-5  master.1                 9:12:43    1.00  5773.20MB 345%  4000MB\r\nbench-ssd-5  master.1                 9:12:08    1.00  5769.65MB 345%  4000MB\r\n\r\nbench-strong robinhood.1              14:16:20   0.94  5302.65MB 563%  4000MB\r\nbench-strong master.1                 15:07:08   1.00  5804.43MB 543%  4000MB\r\nbench-strong master.1                 15:08:44   1.00  5722.19MB 543%  4000MB\r\n```\r\n\r\nInteresting, but probably not a sufficient benefit to justify adding an extra 1500 lines of consensus-critical code. I'm going to close this one and perhaps someone can revisit this later.",
      "created_at" : "2019-11-14T22:30:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16718#issuecomment-554111177",
      "id" : 554111177,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16718",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDExMTE3Nw==",
      "updated_at" : "2019-11-14T22:30:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554111177",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
