{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "### **Issue:**\r\n\r\nSimply `DecodeDestination` does not handle errors where the user inputs a valid address for the wrong network. _e.x. testnet while running client on mainnet_  \r\n\r\nThe current error `not a valid Bech32 or Base58 encoding` for a valid address on a different network is entirely incorrect. This is because of the is_bech32 variable used at the core of `DecodeDestination` logic  only checks that the prefix matches. If it doesn't it just starts running everything as `DecodeBase58Check` regardless if the Bech32 String was actually valid.\r\n\r\n### **Proposed Solution:**\r\n\r\nBase58 Addresses with invalid prefixes now display network and expected values.\r\n\r\n- previous: `Invalid or unsupported Base58-encoded address.`\r\n- 27260 `Invalid or unsupported Base58 testnet address. Expected prefix m, n, or 2`\r\n\r\nBech32 Addresses with invalid prefixes now display network and expected values. The current from of the error is completely incorrect when the user passes valid Bech32 for the wrong network.\r\n\r\n- previous: `Invalid or unsupported Segwit (Bech32) or Base58 encoding.`\r\n- 27260: `Invalid chain prefix for testnet. Expected tb got bc`\r\n\r\n### **Reference**\r\nhttps://github.com/bitcoin/bitcoin/issues/26290\r\n### **Implementation :**\r\nSimply put, don't delay the attempt to decode the string as Bech32 using Bech32::Decode(str). This takes a minimal amount cpu cycles to perform and is acceptable to do since this operation is not performed often. \r\n\r\nOnce you get the decoding status of the string as bech32, do the same for DecodeBase58 with a len of 100 and DecodeBase58Check. This gives you nearly the entire state needed to start properly decoding errors. There is one additional variable added to the logic for strings that contain bech32 chars that just don't pass for another reason. _e.x. checksum_\r\n\r\nAfter that run though the logic and display errors with the network names and expected values when the user just misses the prefix.\r\n\r\n### **Other Notes**\r\n\r\n- Previous errors had inconsistencies such as random periods in some errors and not others. Using the word encoded in some errors and not others. This has been resolved.\r\n- Passes the extended functional test suite.\r\n- I used a function scoped struct to keep track of the state\r\n- Due to the need to access struct members with dot operators I opted to create direct bindings to the members of the struct to keep the code readable.\r\n\r\n<!--\r\n*** Please remove the following help text before submitting: ***\r\n\r\nPull requests without a rationale and clear improvement may be closed\r\nimmediately.\r\n\r\nGUI-related pull requests should be opened against\r\nhttps://github.com/bitcoin-core/gui\r\nfirst. See CONTRIBUTING.md\r\n-->\r\n\r\n<!--\r\nPlease provide clear motivation for your patch and explain how it improves\r\nBitcoin Core user experience or Bitcoin Core developer experience\r\nsignificantly:\r\n\r\n* Any test improvements or new tests that improve coverage are always welcome.\r\n* All other changes should have accompanying unit tests (see `src/test/`) or\r\n  functional tests (see `test/`). Contributors should note which tests cover\r\n  modified code. If no tests exist for a region of modified code, new tests\r\n  should accompany the change.\r\n* Bug fixes are most welcome when they come with steps to reproduce or an\r\n  explanation of the potential issue as well as reasoning for the way the bug\r\n  was fixed.\r\n* Features are welcome, but might be rejected due to design or scope issues.\r\n  If a feature is based on a lot of dependencies, contributors should first\r\n  consider building the system outside of Bitcoin Core, if possible.\r\n* Refactoring changes are only accepted if they are required for a feature or\r\n  bug fix or otherwise improve developer experience significantly. For example,\r\n  most \"code style\" refactoring changes require a thorough explanation why they\r\n  are useful, what downsides they have and why they *significantly* improve\r\n  developer experience or avoid serious programming bugs. Note that code style\r\n  is often a subjective matter. Unless they are explicitly mentioned to be\r\n  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\r\n  changes are usually rejected.\r\n-->\r\n\r\n<!--\r\nBitcoin Core has a thorough review process and even the most trivial change\r\nneeds to pass a lot of eyes and requires non-zero or even substantial time\r\neffort to review. There is a huge lack of active reviewers on the project, so\r\npatches often sit for a long time.\r\n-->\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 7,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260/comments",
   "created_at" : "2023-03-15T10:17:16Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260",
   "id" : 1625214363,
   "labels" : [
      {
         "color" : "0052cc",
         "default" : false,
         "description" : null,
         "id" : 98279177,
         "name" : "RPC/REST/ZMQ",
         "node_id" : "MDU6TGFiZWw5ODI3OTE3Nw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585MFwU7",
   "number" : 27260,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/27260.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27260",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/27260.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27260"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260/timeline",
   "title" : "Enhanced error messages for invalid network prefix during address parsing.",
   "updated_at" : "2023-05-20T00:08:13Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27260",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/3104223?v=4",
      "events_url" : "https://api.github.com/users/russeree/events{/privacy}",
      "followers_url" : "https://api.github.com/users/russeree/followers",
      "following_url" : "https://api.github.com/users/russeree/following{/other_user}",
      "gists_url" : "https://api.github.com/users/russeree/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/russeree",
      "id" : 3104223,
      "login" : "russeree",
      "node_id" : "MDQ6VXNlcjMxMDQyMjM=",
      "organizations_url" : "https://api.github.com/users/russeree/orgs",
      "received_events_url" : "https://api.github.com/users/russeree/received_events",
      "repos_url" : "https://api.github.com/users/russeree/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/russeree/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/russeree/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/russeree"
   }
}
