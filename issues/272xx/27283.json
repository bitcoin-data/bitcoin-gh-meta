{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "On Ubuntu 22.10 (GNU/Linux 6.0.6-060006-generic x86_64) with gcc (12.2.0) and then running under valgrind (3.18.1).\r\n\r\nLoading a legacy wallet and then shutting down the node is the easiest way to reproduce.\r\n\r\nCan be seen on master f4e42a78c75719ad6a99962360ec67d92a563a9d, but see https://github.com/bitcoin/bitcoin/issues/27283#issuecomment-1476501591 for when the leak was introduced. It does not happen with BDB 5.13.\r\n\r\n```\r\n./configure BDB_LIBS=â¦ --enable-debug --disable-asm â¦\r\nmake\r\nâ¦ \r\nvalgrind âleak-check=full src/bitcoind -regtest -nowallet -wallet=test_legacy\r\nâ¦ \r\n023-03-20T19:32:09Z [test_legacy] Releasing wallet\r\n2023-03-20T19:32:09Z Shutdown: done\r\n==1744646== \r\n==1744646== HEAP SUMMARY:\r\n==1744646==     in use at exit: 2,377 bytes in 12 blocks\r\n==1744646==   total heap usage: 296,219 allocs, 296,207 frees, 103,153,206 bytes allocated\r\n==1744646== \r\n==1744646== 160 bytes in 1 blocks are definitely lost in loss record 6 of 12\r\n==1744646==    at 0x4844899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==1744646==    by 0xE702AD: __os_malloc (in /home/sjors/dev/bitcoin2/src/bitcoind)\r\n==1744646==    by 0xE455CC: __env_alloc (in /home/sjors/dev/bitcoin2/src/bitcoind)\r\n==1744646==    by 0xEE3CC1: __lock_open (in /home/sjors/dev/bitcoin2/src/bitcoind)\r\n==1744646==    by 0xE497EB: __env_attach_regions (in /home/sjors/dev/bitcoin2/src/bitcoind)\r\n==1744646==    by 0xE49A8E: __env_open (in /home/sjors/dev/bitcoin2/src/bitcoind)\r\n==1744646==    by 0xE49C01: __env_open_pp (in /home/sjors/dev/bitcoin2/src/bitcoind)\r\n==1744646==    by 0xE16E7D: DbEnv::open(char const*, unsigned int, int) (in /home/sjors/dev/bitcoin2/src/bitcoind)\r\n==1744646==    by 0x9EDDE8: wallet::BerkeleyEnvironment::Open(bilingual_str&) (bdb.cpp:164)\r\n==1744646==    by 0x9EEF34: wallet::BerkeleyDatabase::Verify(bilingual_str&) (bdb.cpp:271)\r\n==1744646==    by 0x9F41C8: wallet::MakeBerkeleyDatabase(fs::path const&, wallet::DatabaseOptions const&, wallet::DatabaseStatus&, bilingual_str&) (bdb.cpp:849)\r\n==1744646==    by 0x9A074A: wallet::MakeDatabase(fs::path const&, wallet::DatabaseOptions const&, wallet::DatabaseStatus&, bilingual_str&) (walletdb.cpp:1228)\r\n==1744646== \r\n==1744646== LEAK SUMMARY:\r\n==1744646==    definitely lost: 160 bytes in 1 blocks\r\n==1744646==    indirectly lost: 0 bytes in 0 blocks\r\n==1744646==      possibly lost: 0 bytes in 0 blocks\r\n==1744646==    still reachable: 2,217 bytes in 11 blocks\r\n==1744646==         suppressed: 0 bytes in 0 blocks\r\n==1744646== Reachable blocks (those to which a pointer was found) are not shown.\r\n==1744646== To see them, rerun with: --leak-check=full --show-leak-kinds=all\r\n==1744646== \r\n==1744646== For lists of detected and suppressed errors, rerun with: -s\r\n==1744646== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\r\n```\r\n\r\n\r\nOriginally I found it inside a test by using the address sanitizer. I kept the original text below so the comments make sense:\r\n\r\n---\r\n\r\n```\r\nsrc/test/test_bitcoin --run_test=wallet_tests\r\n```\r\n\r\nPassed when configured without BDB, fails when configured with BDB:\r\n\r\n```sh\r\n./configure 'BDB_LIBS=-L/â¦' BDB_CFLAGS=-I/â¦/include CC=clang CXX=clang++ --enable-suppress-external-warnings --disable-asm --with-sanitizers=address --disable-fuzz-binary --without-gui\r\nmake -C src/test\r\nsrc/test/test_bitcoin --run_test=wallet_tests\r\n\r\nâ¦\r\n\r\n*** No errors detected\r\n\r\n=================================================================\r\n==637422==ERROR: LeakSanitizer: detected memory leaks\r\n\r\nDirect leak of 320 byte(s) in 2 object(s) allocated from:\r\n    #0 0x555592a03dbe in malloc (/home/sjors/dev/bitcoin/src/test/test_bitcoin+0x470dbe) (BuildId: 8a0fe1527885800d0ca318fefe6c7e66c608d5eb)\r\n    #1 0x555595965e64 in __os_malloc (/home/sjors/dev/bitcoin/src/test/test_bitcoin+0x33d2e64) (BuildId: 8a0fe1527885800d0ca318fefe6c7e66c608d5eb)\r\n\r\nSUMMARY: AddressSanitizer: 320 byte(s) leaked in 2 allocation(s).\r\nmake[3]: *** [Makefile:21823: wallet/test/wallet_tests.cpp.test] Error 1\r\n```\r\n\r\nThere's other BDB related `-with-sanitizers=address` issues: #22592, #19034.\r\n\r\nThere's currently no suppression file for the address sanitizer and I don't know how to make one. It could make sense to suppress the ones we've found, keep a Github issue open for each of one to fix & remove the suppression.\r\n\r\nWithout BDB I can run the full unit and functional test suite just fine, so that's good news in the long run. But in the shorter run it's good to be able to thoroughly test all the legacy -> descriptor migration code that's being written.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 19,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27283/comments",
   "created_at" : "2023-03-20T12:01:19Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27283/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/27283",
   "id" : 1631965664,
   "labels" : [
      {
         "color" : "08a781",
         "default" : false,
         "description" : null,
         "id" : 149424,
         "name" : "Wallet",
         "node_id" : "MDU6TGFiZWwxNDk0MjQ=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet"
      },
      {
         "color" : "bfd4f2",
         "default" : false,
         "description" : null,
         "id" : 159815356,
         "name" : "Upstream",
         "node_id" : "MDU6TGFiZWwxNTk4MTUzNTY=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Upstream"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27283/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII585hRdHg",
   "number" : 27283,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27283/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27283/timeline",
   "title" : "Memory leak loading legacy wallet (BDB 4.8.30)",
   "updated_at" : "2023-03-21T14:51:27Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27283",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
      "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
      "followers_url" : "https://api.github.com/users/Sjors/followers",
      "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/Sjors",
      "id" : 10217,
      "login" : "Sjors",
      "node_id" : "MDQ6VXNlcjEwMjE3",
      "organizations_url" : "https://api.github.com/users/Sjors/orgs",
      "received_events_url" : "https://api.github.com/users/Sjors/received_events",
      "repos_url" : "https://api.github.com/users/Sjors/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/Sjors"
   }
}
