[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 15057](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/15057/total.coverage/index.html), a830d1c4d3eeac4c869c9a061d64e2722a1a252a) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html), a1fd876122938469cc3527f53211f976351989c1)   |\n|-----------|-------------------------|--------------------|\n| Lines     | -0.0129 %            | 87.3755 %        |\n| Functions | -0.0452 %            | 84.5100 %        |\n| Branches  | -0.0079 %            | 51.3984 %        |\n\n<sup>Updated at: 2018-12-29T18:13:51.889322.</sup>\n",
      "created_at" : "2018-12-29T18:13:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450510367",
      "id" : 450510367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDUxMDM2Nw==",
      "updated_at" : "2018-12-29T18:13:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450510367",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK",
      "created_at" : "2018-12-29T18:34:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450511701",
      "id" : 450511701,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDUxMTcwMQ==",
      "updated_at" : "2018-12-29T18:34:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450511701",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/2287825?v=4",
         "events_url" : "https://api.github.com/users/ch4ot1c/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ch4ot1c/followers",
         "following_url" : "https://api.github.com/users/ch4ot1c/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ch4ot1c",
         "id" : 2287825,
         "login" : "ch4ot1c",
         "node_id" : "MDQ6VXNlcjIyODc4MjU=",
         "organizations_url" : "https://api.github.com/users/ch4ot1c/orgs",
         "received_events_url" : "https://api.github.com/users/ch4ot1c/received_events",
         "repos_url" : "https://api.github.com/users/ch4ot1c/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ch4ot1c/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ch4ot1c"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "For reference:\r\n\r\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/src/validation.cpp.gcov.html#2855\r\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/15057/total.coverage/src/validation.cpp.gcov.html#2855",
      "created_at" : "2018-12-29T18:51:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450512602",
      "id" : 450512602,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDUxMjYwMg==",
      "updated_at" : "2018-12-29T18:51:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450512602",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "IIRC if you     have a chain  A B C D E and invalidate D then invalidate B, then reconsider  B you'll end back up on E.",
      "created_at" : "2019-01-01T02:38:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450706123",
      "id" : 450706123,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDcwNjEyMw==",
      "updated_at" : "2019-01-01T02:38:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450706123",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added a test for this as well (and fixed up the help text). Maybe the method should have been called `reconsiderchain` with the description \"Reconsiders all chains the given block is in\"",
      "created_at" : "2019-01-01T17:04:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450743616",
      "id" : 450743616,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDc0MzYxNg==",
      "updated_at" : "2019-01-01T17:04:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450743616",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK fa38d3df69851212fea7544badadc1c3e5369bf5",
      "created_at" : "2019-01-02T14:22:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450875180",
      "id" : 450875180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDg3NTE4MA==",
      "updated_at" : "2019-01-02T14:22:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450875180",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244853885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244853885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/previous/initial/",
      "commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "created_at" : "2019-01-02T21:04:18Z",
      "diff_hunk" : "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-3])\n+        # Reconsider only the previous tip",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244853885",
      "id" : 244853885,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDg1Mzg4NQ==",
      "original_commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "original_position" : 85,
      "path" : "test/functional/rpc_invalidateblock.py",
      "position" : 85,
      "pull_request_review_id" : 188828154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
      "updated_at" : "2019-01-02T21:08:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244853885",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244854327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854327"
         }
      },
      "author_association" : "MEMBER",
      "body" : "remove?",
      "commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "created_at" : "2019-01-02T21:06:25Z",
      "diff_hunk" : "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244854327",
      "id" : 244854327,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDg1NDMyNw==",
      "original_commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "original_position" : 82,
      "path" : "test/functional/rpc_invalidateblock.py",
      "position" : 82,
      "pull_request_review_id" : 188828154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
      "updated_at" : "2019-01-02T21:08:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854327",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244854544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854544"
         }
      },
      "author_association" : "MEMBER",
      "body" : "remove?",
      "commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "created_at" : "2019-01-02T21:07:10Z",
      "diff_hunk" : "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-3])\n+        # Reconsider only the previous tip\n+        self.nodes[1].reconsiderblock(blocks[-1])\n+        # Should be back at the tip by now\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+\n+        self.log.info(\"Verify that we reconsider all descendants\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-2])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244854544",
      "id" : 244854544,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDg1NDU0NA==",
      "original_commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "original_position" : 94,
      "path" : "test/functional/rpc_invalidateblock.py",
      "position" : 94,
      "pull_request_review_id" : 188828154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
      "updated_at" : "2019-01-02T21:08:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854544",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244965661"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244965661"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why? This is exactly what the test should be testing for. See https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450706123",
      "commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "created_at" : "2019-01-03T10:57:47Z",
      "diff_hunk" : "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-3])\n+        # Reconsider only the previous tip\n+        self.nodes[1].reconsiderblock(blocks[-1])\n+        # Should be back at the tip by now\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+\n+        self.log.info(\"Verify that we reconsider all descendants\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-2])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244965661",
      "id" : 244965661,
      "in_reply_to_id" : 244854544,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDk2NTY2MQ==",
      "original_commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "original_position" : 94,
      "path" : "test/functional/rpc_invalidateblock.py",
      "position" : 94,
      "pull_request_review_id" : 188968259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
      "updated_at" : "2019-01-03T10:57:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244965661",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244970263"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244970263"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yap sorry.",
      "commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "created_at" : "2019-01-03T11:18:04Z",
      "diff_hunk" : "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-3])\n+        # Reconsider only the previous tip\n+        self.nodes[1].reconsiderblock(blocks[-1])\n+        # Should be back at the tip by now\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+\n+        self.log.info(\"Verify that we reconsider all descendants\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-2])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244970263",
      "id" : 244970263,
      "in_reply_to_id" : 244854544,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDk3MDI2Mw==",
      "original_commit_id" : "fa38d3df69851212fea7544badadc1c3e5369bf5",
      "original_position" : 94,
      "path" : "test/functional/rpc_invalidateblock.py",
      "position" : 94,
      "pull_request_review_id" : 188974162,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
      "updated_at" : "2019-01-03T11:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244970263",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK fa38d3d, don't mind the above nits..\r\n\r\nCandidate for backport?",
      "created_at" : "2019-01-05T16:00:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-451667126",
      "id" : 451667126,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MTY2NzEyNg==",
      "updated_at" : "2019-01-05T16:00:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451667126",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'd say no. User-facing it is only a minor documentation fixup of a method that should not casually be used in production.",
      "created_at" : "2019-01-05T16:11:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-451667837",
      "id" : 451667837,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MTY2NzgzNw==",
      "updated_at" : "2019-01-05T16:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451667837",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
