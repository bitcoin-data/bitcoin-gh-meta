[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24922](https://github.com/bitcoin/bitcoin/pull/24922) (Isolate the storage abstraction layer from the application/serialization layer by TheQuantumPhysicist)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-04-20T14:59:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24932#issuecomment-1104034547",
      "id" : 1104034547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24932",
      "node_id" : "IC_kwDOABII585Bzjrz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1104034547/reactions"
      },
      "updated_at" : "2022-04-20T14:59:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1104034547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "No idea if you want to do it here, but FWIW here's a patch that makes `KNOWN_VIOLATIONS` specific:\r\n```patch\r\ndiff --git a/test/lint/lint-locale-dependence.py b/test/lint/lint-locale-dependence.py\r\nindex 47f1395dd626468eb8a427ee64897f6abcdf8acb..6c7b5f549f9bd67d40dfdb38df201303b43079b2 100755\r\n--- a/test/lint/lint-locale-dependence.py\r\n+++ b/test/lint/lint-locale-dependence.py\r\n@@ -46,9 +46,10 @@ from subprocess import check_output, CalledProcessError\r\n KNOWN_VIOLATIONS = [\r\n     \"src/dbwrapper.cpp:.*vsnprintf\",\r\n     \"src/test/dbwrapper_tests.cpp:.*snprintf\",\r\n-    \"src/test/fuzz/locale.cpp\",\r\n-    \"src/test/fuzz/string.cpp\",\r\n-    \"src/test/util_tests.cpp\"\r\n+    \"src/test/fuzz/locale.cpp:.*setlocale\",\r\n+    \"src/test/fuzz/string.cpp:.*strtol\",\r\n+    \"src/test/fuzz/string.cpp:.*strtoul\",\r\n+    \"src/test/util_tests.cpp:.*strtoll\"\r\n ]\r\n \r\n REGEXP_EXTERNAL_DEPENDENCIES_EXCLUSIONS = [\r\n```\r\nEdit: and after #24933 we could also enable checking for strerror except for `src/util/strerror.cpp`, but I would guess this gets merged first.",
      "created_at" : "2022-04-20T15:18:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24932#issuecomment-1104057171",
      "id" : 1104057171,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24932",
      "node_id" : "IC_kwDOABII585BzpNT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1104057171/reactions"
      },
      "updated_at" : "2022-04-20T15:26:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1104057171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK 0628561af940b8dd08565586af911a1b06576b97\r\nre-ACK d1a7d2af231597c200441f9ffdd277f4888a41e9",
      "created_at" : "2022-04-20T15:20:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24932#issuecomment-1104058666",
      "id" : 1104058666,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24932",
      "node_id" : "IC_kwDOABII585Bzpkq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1104058666/reactions"
      },
      "updated_at" : "2022-04-20T17:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1104058666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24932#discussion_r855389187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855389187"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This function name is too generic for what it does. Maybe `find_locale_dependent_function_uses`?",
      "commit_id" : "6dc01c664b8259ced092daf72273f13e201e268e",
      "created_at" : "2022-04-21T16:44:52Z",
      "diff_hunk" : "@@ -0,0 +1,259 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018-2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Be aware that bitcoind and bitcoin-qt differ in terms of localization: Qt\n+# opts in to POSIX localization by running setlocale(LC_ALL, \"\") on startup,\n+# whereas no such call is made in bitcoind.\n+#\n+# Qt runs setlocale(LC_ALL, \"\") on initialization. This installs the locale\n+# specified by the user's LC_ALL (or LC_*) environment variable as the new\n+# C locale.\n+#\n+# In contrast, bitcoind does not opt in to localization -- no call to\n+# setlocale(LC_ALL, \"\") is made and the environment variables LC_* are\n+# thus ignored.\n+#\n+# This results in situations where bitcoind is guaranteed to be running\n+# with the classic locale (\"C\") whereas the locale of bitcoin-qt will vary\n+# depending on the user's environment variables.\n+#\n+# An example: Assuming the environment variable LC_ALL=de_DE then the\n+# call std::to_string(1.23) will return \"1.230000\" in bitcoind but\n+# \"1,230000\" in bitcoin-qt.\n+#\n+# From the Qt documentation:\n+# \"On Unix/Linux Qt is configured to use the system locale settings by default.\n+#  This can cause a conflict when using POSIX functions, for instance, when\n+#  converting between data types such as floats and strings, since the notation\n+#  may differ between locales. To get around this problem, call the POSIX function\n+#  setlocale(LC_NUMERIC,\"C\") right after initializing QApplication, QGuiApplication\n+#  or QCoreApplication to reset the locale that is used for number formatting to\n+#  \"C\"-locale.\"\n+#\n+# See https://doc.qt.io/qt-5/qcoreapplication.html#locale-settings and\n+# https://stackoverflow.com/a/34878283 for more details.\n+#\n+# TODO: Reduce KNOWN_VIOLATIONS by replacing uses of locale dependent snprintf with strprintf.\n+\n+import re\n+import sys\n+\n+from subprocess import check_output, CalledProcessError\n+\n+\n+KNOWN_VIOLATIONS = [\n+    \"src/dbwrapper.cpp:.*vsnprintf\",\n+    \"src/test/dbwrapper_tests.cpp:.*snprintf\",\n+    \"src/test/fuzz/locale.cpp:.*setlocale\",\n+    \"src/test/fuzz/string.cpp:.*strtol\",\n+    \"src/test/fuzz/string.cpp:.*strtoul\",\n+    \"src/test/util_tests.cpp:.*strtoll\"\n+]\n+\n+REGEXP_EXTERNAL_DEPENDENCIES_EXCLUSIONS = [\n+    \"src/crypto/ctaes/\",\n+    \"src/leveldb/\",\n+    \"src/secp256k1/\",\n+    \"src/minisketch/\",\n+    \"src/tinyformat.h\",\n+    \"src/univalue/\"\n+]\n+\n+LOCALE_DEPENDENT_FUNCTIONS = [\n+    \"alphasort\",    # LC_COLLATE (via strcoll)\n+    \"asctime\",      # LC_TIME (directly)\n+    \"asprintf\",     # (via vasprintf)\n+    \"atof\",         # LC_NUMERIC (via strtod)\n+    \"atoi\",         # LC_NUMERIC (via strtol)\n+    \"atol\",         # LC_NUMERIC (via strtol)\n+    \"atoll\",        # (via strtoll)\n+    \"atoq\",\n+    \"btowc\",        # LC_CTYPE (directly)\n+    \"ctime\",        # (via asctime or localtime)\n+    \"dprintf\",      # (via vdprintf)\n+    \"fgetwc\",\n+    \"fgetws\",\n+    \"fold_case\",    # boost::locale::fold_case\n+    \"fprintf\",      # (via vfprintf)\n+    \"fputwc\",\n+    \"fputws\",\n+    \"fscanf\",       # (via __vfscanf)\n+    \"fwprintf\",     # (via __vfwprintf)\n+    \"getdate\",      # via __getdate_r => isspace // __localtime_r\n+    \"getwc\",\n+    \"getwchar\",\n+    \"is_digit\",     # boost::algorithm::is_digit\n+    \"is_space\",     # boost::algorithm::is_space\n+    \"isalnum\",      # LC_CTYPE\n+    \"isalpha\",      # LC_CTYPE\n+    \"isblank\",      # LC_CTYPE\n+    \"iscntrl\",      # LC_CTYPE\n+    \"isctype\",      # LC_CTYPE\n+    \"isdigit\",      # LC_CTYPE\n+    \"isgraph\",      # LC_CTYPE\n+    \"islower\",      # LC_CTYPE\n+    \"isprint\",      # LC_CTYPE\n+    \"ispunct\",      # LC_CTYPE\n+    \"isspace\",      # LC_CTYPE\n+    \"isupper\",      # LC_CTYPE\n+    \"iswalnum\",     # LC_CTYPE\n+    \"iswalpha\",     # LC_CTYPE\n+    \"iswblank\",     # LC_CTYPE\n+    \"iswcntrl\",     # LC_CTYPE\n+    \"iswctype\",     # LC_CTYPE\n+    \"iswdigit\",     # LC_CTYPE\n+    \"iswgraph\",     # LC_CTYPE\n+    \"iswlower\",     # LC_CTYPE\n+    \"iswprint\",     # LC_CTYPE\n+    \"iswpunct\",     # LC_CTYPE\n+    \"iswspace\",     # LC_CTYPE\n+    \"iswupper\",     # LC_CTYPE\n+    \"iswxdigit\",    # LC_CTYPE\n+    \"isxdigit\",     # LC_CTYPE\n+    \"localeconv\",   # LC_NUMERIC + LC_MONETARY\n+    \"mblen\",        # LC_CTYPE\n+    \"mbrlen\",\n+    \"mbrtowc\",\n+    \"mbsinit\",\n+    \"mbsnrtowcs\",\n+    \"mbsrtowcs\",\n+    \"mbstowcs\",     # LC_CTYPE\n+    \"mbtowc\",       # LC_CTYPE\n+    \"mktime\",\n+    \"normalize\",    # boost::locale::normalize\n+    \"printf\",       # LC_NUMERIC\n+    \"putwc\",\n+    \"putwchar\",\n+    \"scanf\",        # LC_NUMERIC\n+    \"setlocale\",\n+    \"snprintf\",\n+    \"sprintf\",\n+    \"sscanf\",\n+    \"std::locale::global\",\n+    \"std::to_string\",\n+    \"stod\",\n+    \"stof\",\n+    \"stoi\",\n+    \"stol\",\n+    \"stold\",\n+    \"stoll\",\n+    \"stoul\",\n+    \"stoull\",\n+    \"strcasecmp\",\n+    \"strcasestr\",\n+    \"strcoll\",      # LC_COLLATE\n+    #\"strerror\",\n+    \"strfmon\",\n+    \"strftime\",     # LC_TIME\n+    \"strncasecmp\",\n+    \"strptime\",\n+    \"strtod\",       # LC_NUMERIC\n+    \"strtof\",\n+    \"strtoimax\",\n+    \"strtol\",       # LC_NUMERIC\n+    \"strtold\",\n+    \"strtoll\",\n+    \"strtoq\",\n+    \"strtoul\",      # LC_NUMERIC\n+    \"strtoull\",\n+    \"strtoumax\",\n+    \"strtouq\",\n+    \"strxfrm\",      # LC_COLLATE\n+    \"swprintf\",\n+    \"to_lower\",     # boost::locale::to_lower\n+    \"to_title\",     # boost::locale::to_title\n+    \"to_upper\",     # boost::locale::to_upper\n+    \"tolower\",      # LC_CTYPE\n+    \"toupper\",      # LC_CTYPE\n+    \"towctrans\",\n+    \"towlower\",     # LC_CTYPE\n+    \"towupper\",     # LC_CTYPE\n+    \"trim\",         # boost::algorithm::trim\n+    \"trim_left\",    # boost::algorithm::trim_left\n+    \"trim_right\",   # boost::algorithm::trim_right\n+    \"ungetwc\",\n+    \"vasprintf\",\n+    \"vdprintf\",\n+    \"versionsort\",\n+    \"vfprintf\",\n+    \"vfscanf\",\n+    \"vfwprintf\",\n+    \"vprintf\",\n+    \"vscanf\",\n+    \"vsnprintf\",\n+    \"vsprintf\",\n+    \"vsscanf\",\n+    \"vswprintf\",\n+    \"vwprintf\",\n+    \"wcrtomb\",\n+    \"wcscasecmp\",\n+    \"wcscoll\",      # LC_COLLATE\n+    \"wcsftime\",     # LC_TIME\n+    \"wcsncasecmp\",\n+    \"wcsnrtombs\",\n+    \"wcsrtombs\",\n+    \"wcstod\",       # LC_NUMERIC\n+    \"wcstof\",\n+    \"wcstoimax\",\n+    \"wcstol\",       # LC_NUMERIC\n+    \"wcstold\",\n+    \"wcstoll\",\n+    \"wcstombs\",     # LC_CTYPE\n+    \"wcstoul\",      # LC_NUMERIC\n+    \"wcstoull\",\n+    \"wcstoumax\",\n+    \"wcswidth\",\n+    \"wcsxfrm\",      # LC_COLLATE\n+    \"wctob\",\n+    \"wctomb\",       # LC_CTYPE\n+    \"wctrans\",\n+    \"wctype\",\n+    \"wcwidth\",\n+    \"wprintf\"\n+]\n+\n+\n+def git_grep_call(regexp_locale_dependent_functions):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24932#discussion_r855389187",
      "id" : 855389187,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y_DQD",
      "original_commit_id" : "d1a7d2af231597c200441f9ffdd277f4888a41e9",
      "original_line" : 218,
      "original_position" : 218,
      "original_start_line" : null,
      "path" : "test/lint/lint-locale-dependence.py",
      "position" : null,
      "pull_request_review_id" : 948918925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24932",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855389187/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-21T16:45:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855389187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24932#discussion_r855390892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24932"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855390892"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it'd make sense to pass in the list of locale dependent functions to this function, then build the regexp inside (it's a implementation detail).",
      "commit_id" : "6dc01c664b8259ced092daf72273f13e201e268e",
      "created_at" : "2022-04-21T16:46:15Z",
      "diff_hunk" : "@@ -0,0 +1,259 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018-2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Be aware that bitcoind and bitcoin-qt differ in terms of localization: Qt\n+# opts in to POSIX localization by running setlocale(LC_ALL, \"\") on startup,\n+# whereas no such call is made in bitcoind.\n+#\n+# Qt runs setlocale(LC_ALL, \"\") on initialization. This installs the locale\n+# specified by the user's LC_ALL (or LC_*) environment variable as the new\n+# C locale.\n+#\n+# In contrast, bitcoind does not opt in to localization -- no call to\n+# setlocale(LC_ALL, \"\") is made and the environment variables LC_* are\n+# thus ignored.\n+#\n+# This results in situations where bitcoind is guaranteed to be running\n+# with the classic locale (\"C\") whereas the locale of bitcoin-qt will vary\n+# depending on the user's environment variables.\n+#\n+# An example: Assuming the environment variable LC_ALL=de_DE then the\n+# call std::to_string(1.23) will return \"1.230000\" in bitcoind but\n+# \"1,230000\" in bitcoin-qt.\n+#\n+# From the Qt documentation:\n+# \"On Unix/Linux Qt is configured to use the system locale settings by default.\n+#  This can cause a conflict when using POSIX functions, for instance, when\n+#  converting between data types such as floats and strings, since the notation\n+#  may differ between locales. To get around this problem, call the POSIX function\n+#  setlocale(LC_NUMERIC,\"C\") right after initializing QApplication, QGuiApplication\n+#  or QCoreApplication to reset the locale that is used for number formatting to\n+#  \"C\"-locale.\"\n+#\n+# See https://doc.qt.io/qt-5/qcoreapplication.html#locale-settings and\n+# https://stackoverflow.com/a/34878283 for more details.\n+#\n+# TODO: Reduce KNOWN_VIOLATIONS by replacing uses of locale dependent snprintf with strprintf.\n+\n+import re\n+import sys\n+\n+from subprocess import check_output, CalledProcessError\n+\n+\n+KNOWN_VIOLATIONS = [\n+    \"src/dbwrapper.cpp:.*vsnprintf\",\n+    \"src/test/dbwrapper_tests.cpp:.*snprintf\",\n+    \"src/test/fuzz/locale.cpp:.*setlocale\",\n+    \"src/test/fuzz/string.cpp:.*strtol\",\n+    \"src/test/fuzz/string.cpp:.*strtoul\",\n+    \"src/test/util_tests.cpp:.*strtoll\"\n+]\n+\n+REGEXP_EXTERNAL_DEPENDENCIES_EXCLUSIONS = [\n+    \"src/crypto/ctaes/\",\n+    \"src/leveldb/\",\n+    \"src/secp256k1/\",\n+    \"src/minisketch/\",\n+    \"src/tinyformat.h\",\n+    \"src/univalue/\"\n+]\n+\n+LOCALE_DEPENDENT_FUNCTIONS = [\n+    \"alphasort\",    # LC_COLLATE (via strcoll)\n+    \"asctime\",      # LC_TIME (directly)\n+    \"asprintf\",     # (via vasprintf)\n+    \"atof\",         # LC_NUMERIC (via strtod)\n+    \"atoi\",         # LC_NUMERIC (via strtol)\n+    \"atol\",         # LC_NUMERIC (via strtol)\n+    \"atoll\",        # (via strtoll)\n+    \"atoq\",\n+    \"btowc\",        # LC_CTYPE (directly)\n+    \"ctime\",        # (via asctime or localtime)\n+    \"dprintf\",      # (via vdprintf)\n+    \"fgetwc\",\n+    \"fgetws\",\n+    \"fold_case\",    # boost::locale::fold_case\n+    \"fprintf\",      # (via vfprintf)\n+    \"fputwc\",\n+    \"fputws\",\n+    \"fscanf\",       # (via __vfscanf)\n+    \"fwprintf\",     # (via __vfwprintf)\n+    \"getdate\",      # via __getdate_r => isspace // __localtime_r\n+    \"getwc\",\n+    \"getwchar\",\n+    \"is_digit\",     # boost::algorithm::is_digit\n+    \"is_space\",     # boost::algorithm::is_space\n+    \"isalnum\",      # LC_CTYPE\n+    \"isalpha\",      # LC_CTYPE\n+    \"isblank\",      # LC_CTYPE\n+    \"iscntrl\",      # LC_CTYPE\n+    \"isctype\",      # LC_CTYPE\n+    \"isdigit\",      # LC_CTYPE\n+    \"isgraph\",      # LC_CTYPE\n+    \"islower\",      # LC_CTYPE\n+    \"isprint\",      # LC_CTYPE\n+    \"ispunct\",      # LC_CTYPE\n+    \"isspace\",      # LC_CTYPE\n+    \"isupper\",      # LC_CTYPE\n+    \"iswalnum\",     # LC_CTYPE\n+    \"iswalpha\",     # LC_CTYPE\n+    \"iswblank\",     # LC_CTYPE\n+    \"iswcntrl\",     # LC_CTYPE\n+    \"iswctype\",     # LC_CTYPE\n+    \"iswdigit\",     # LC_CTYPE\n+    \"iswgraph\",     # LC_CTYPE\n+    \"iswlower\",     # LC_CTYPE\n+    \"iswprint\",     # LC_CTYPE\n+    \"iswpunct\",     # LC_CTYPE\n+    \"iswspace\",     # LC_CTYPE\n+    \"iswupper\",     # LC_CTYPE\n+    \"iswxdigit\",    # LC_CTYPE\n+    \"isxdigit\",     # LC_CTYPE\n+    \"localeconv\",   # LC_NUMERIC + LC_MONETARY\n+    \"mblen\",        # LC_CTYPE\n+    \"mbrlen\",\n+    \"mbrtowc\",\n+    \"mbsinit\",\n+    \"mbsnrtowcs\",\n+    \"mbsrtowcs\",\n+    \"mbstowcs\",     # LC_CTYPE\n+    \"mbtowc\",       # LC_CTYPE\n+    \"mktime\",\n+    \"normalize\",    # boost::locale::normalize\n+    \"printf\",       # LC_NUMERIC\n+    \"putwc\",\n+    \"putwchar\",\n+    \"scanf\",        # LC_NUMERIC\n+    \"setlocale\",\n+    \"snprintf\",\n+    \"sprintf\",\n+    \"sscanf\",\n+    \"std::locale::global\",\n+    \"std::to_string\",\n+    \"stod\",\n+    \"stof\",\n+    \"stoi\",\n+    \"stol\",\n+    \"stold\",\n+    \"stoll\",\n+    \"stoul\",\n+    \"stoull\",\n+    \"strcasecmp\",\n+    \"strcasestr\",\n+    \"strcoll\",      # LC_COLLATE\n+    #\"strerror\",\n+    \"strfmon\",\n+    \"strftime\",     # LC_TIME\n+    \"strncasecmp\",\n+    \"strptime\",\n+    \"strtod\",       # LC_NUMERIC\n+    \"strtof\",\n+    \"strtoimax\",\n+    \"strtol\",       # LC_NUMERIC\n+    \"strtold\",\n+    \"strtoll\",\n+    \"strtoq\",\n+    \"strtoul\",      # LC_NUMERIC\n+    \"strtoull\",\n+    \"strtoumax\",\n+    \"strtouq\",\n+    \"strxfrm\",      # LC_COLLATE\n+    \"swprintf\",\n+    \"to_lower\",     # boost::locale::to_lower\n+    \"to_title\",     # boost::locale::to_title\n+    \"to_upper\",     # boost::locale::to_upper\n+    \"tolower\",      # LC_CTYPE\n+    \"toupper\",      # LC_CTYPE\n+    \"towctrans\",\n+    \"towlower\",     # LC_CTYPE\n+    \"towupper\",     # LC_CTYPE\n+    \"trim\",         # boost::algorithm::trim\n+    \"trim_left\",    # boost::algorithm::trim_left\n+    \"trim_right\",   # boost::algorithm::trim_right\n+    \"ungetwc\",\n+    \"vasprintf\",\n+    \"vdprintf\",\n+    \"versionsort\",\n+    \"vfprintf\",\n+    \"vfscanf\",\n+    \"vfwprintf\",\n+    \"vprintf\",\n+    \"vscanf\",\n+    \"vsnprintf\",\n+    \"vsprintf\",\n+    \"vsscanf\",\n+    \"vswprintf\",\n+    \"vwprintf\",\n+    \"wcrtomb\",\n+    \"wcscasecmp\",\n+    \"wcscoll\",      # LC_COLLATE\n+    \"wcsftime\",     # LC_TIME\n+    \"wcsncasecmp\",\n+    \"wcsnrtombs\",\n+    \"wcsrtombs\",\n+    \"wcstod\",       # LC_NUMERIC\n+    \"wcstof\",\n+    \"wcstoimax\",\n+    \"wcstol\",       # LC_NUMERIC\n+    \"wcstold\",\n+    \"wcstoll\",\n+    \"wcstombs\",     # LC_CTYPE\n+    \"wcstoul\",      # LC_NUMERIC\n+    \"wcstoull\",\n+    \"wcstoumax\",\n+    \"wcswidth\",\n+    \"wcsxfrm\",      # LC_COLLATE\n+    \"wctob\",\n+    \"wctomb\",       # LC_CTYPE\n+    \"wctrans\",\n+    \"wctype\",\n+    \"wcwidth\",\n+    \"wprintf\"\n+]\n+\n+\n+def git_grep_call(regexp_locale_dependent_functions):\n+    exclude_args = [\":(exclude)\" + excl for excl in REGEXP_EXTERNAL_DEPENDENCIES_EXCLUSIONS]\n+    git_grep_command = [\"git\", \"grep\", \"-E\", \"[^a-zA-Z0-9_\\\\`'\\\"<>](\" +  regexp_locale_dependent_functions + \"(_r|_s)?)[^a-zA-Z0-9_\\\\`'\\\"<>]\", \"--\", \"*.cpp\", \"*.h\"] + exclude_args\n+    git_grep_output = list()\n+\n+    try:\n+        git_grep_output = check_output(git_grep_command, universal_newlines=True, encoding=\"utf8\").splitlines()\n+    except CalledProcessError as e:\n+        if e.returncode > 1:\n+            raise e\n+\n+    return git_grep_output\n+\n+\n+def main():\n+    exit_code = 0\n+\n+    regexp_ignore_known_violations = \"|\".join(KNOWN_VIOLATIONS)\n+    regexp_locale_dependent_functions = \"|\".join(LOCALE_DEPENDENT_FUNCTIONS)\n+    git_grep_output = git_grep_call(regexp_locale_dependent_functions)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24932#discussion_r855390892",
      "id" : 855390892,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y_Dqs",
      "original_commit_id" : "d1a7d2af231597c200441f9ffdd277f4888a41e9",
      "original_line" : 237,
      "original_position" : 237,
      "original_start_line" : null,
      "path" : "test/lint/lint-locale-dependence.py",
      "position" : null,
      "pull_request_review_id" : 948920887,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24932",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855390892/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-21T16:46:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855390892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested and code review ACK 3043a1bc9d32b451020b511c8340c12e0d99f8cc",
      "created_at" : "2022-04-25T15:53:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24932#issuecomment-1108751062",
      "id" : 1108751062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24932",
      "node_id" : "IC_kwDOABII585CFjLW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108751062/reactions"
      },
      "updated_at" : "2022-04-25T15:53:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108751062",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
