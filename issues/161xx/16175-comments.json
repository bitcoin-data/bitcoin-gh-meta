[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16202](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16202.html) (Refactor network message deserialization by jonasschnelli)\n* [#16194](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16194.html) (refactor: share blockmetadata with BlockManager by jamesob)\n* [#15921](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15921.html) (Tidy up ValidationState interface by jnewbery)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n* [#15545](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15545.html) ([doc] explain why CheckBlock() is called before AcceptBlock by Sjors)\n* [#15505](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15505.html) ([p2p] Request NOTFOUND transactions immediately from other outbound peers, when possible by sdaftuar)\n* [#15206](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15206.html) (Immediately disconnect on invalid net message checksum by jonasschnelli)\n* [#14046](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14046.html) (net: Refactor message parsing (CNetMessage), adds flexibility by jonasschnelli)\n* [#14032](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14032.html) (Add p2p layer encryption with ECDH/ChaCha20Poly1305 by jonasschnelli)\n* [#9849](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/9849.html) (Qt: Network Watch tool by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-06-09T15:05:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-500219265",
      "id" : 500219265,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16175",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMDIxOTI2NQ==",
      "updated_at" : "2019-06-17T00:39:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/500219265",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops, it turns out its actually not possible to do #16174 first separately (and without it, this PR is entirely useless). By itself, #16174 ends up hitting the deadly cross-validationinterface-queue deadlock - it takes cs_peerstate first, then (eventually) calls PNB, which may call LimitValidationInterfaceQueue(). Meanwhile, in the validation queue, we may end up waiting on cs_peerstate to update some peer's state. Of course, once we actually move block validation into its own thread, this is no longer (materially) a concern - we trivially guarantee there are no locks held going into LimitValidationInterfaceQueue().",
      "created_at" : "2019-06-09T19:32:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-500238824",
      "id" : 500238824,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16175",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMDIzODgyNA==",
      "updated_at" : "2019-06-09T19:32:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/500238824",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Note that there is still a regression causing some functional tests to time out as we may end up waiting 100ms to discover that a block has been processed and we can process the next message from that peer (this shouldn't be an issue in the case of downloading from multiple peers since we'll always wake on a new tip block, and seems to not be an issue for one peer, even though its possible it would be due to a wake race). Not 100% sure what the best solution to that is.",
      "created_at" : "2019-06-09T22:04:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-500249226",
      "id" : 500249226,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16175",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMDI0OTIyNg==",
      "updated_at" : "2019-06-09T22:04:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/500249226",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Oops, it turns out its actually not possible to do #16174 first separately [...] Meanwhile, in the validation queue, we may end up waiting on cs_peerstate to update some peer's state.\r\n\r\nFor other reviewers: the particular validationinterface callback at fault here looks to be `PeerLogicValidation::BlockChecked`.\r\n\r\nBig Concept ACK on the lock-splitting at the very least, though I do wish it could be done separately somehow. I'm a Concept-Concept ACK on this (in concept), but want to make sure I fully understand the implications.",
      "created_at" : "2019-06-11T02:38:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-500664222",
      "id" : 500664222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16175",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMDY2NDIyMg==",
      "updated_at" : "2019-06-11T02:38:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/500664222",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292549581"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292549581"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add a new peer state tracking class to reduce cs_main contention.\" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\r\n\r\nDo you want this to be a recursive mutex for some reason? If so, it'd helpful to say in an comment why recursive locking is helpful here. Otherwise I'd suggest changing this line to `Mutex g_peerstate_mutex` (also not using the old \"critical section\" terminology).",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-11T16:30:45Z",
      "diff_hunk" : "@@ -388,7 +399,20 @@ struct CNodeState {\n // Keeps track of the time (in microseconds) when transactions were requested last time\n limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n \n+/** Note that this must be locked BEFORE cs_main! */\n+CCriticalSection cs_peerstate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292549581",
      "id" : 292549581,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjU0OTU4MQ==",
      "original_commit_id" : "54b3431c404c0879ea35091089c33288a3084403",
      "original_position" : 23,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292549581",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292550851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292550851"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add a new peer state tracking class to reduce cs_main contention.\" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\r\n\r\nNot necessarily suggesting you should change this here, but is the only reason for adding a new `mapPeerState` map to make the diff smaller? If entries are always added to both `mapNodeState` and `mapPeerState` maps and removed from the maps at the same times with both locks held, it would seem more ideal to have just single map where each entry contains separate node state and peer state structs (to support separate lock annotations).",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-11T16:33:45Z",
      "diff_hunk" : "@@ -756,12 +780,22 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         LOCK(cs_main);\n         mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->fInbound, pnode->m_manual_connection));\n     }\n+    {\n+        LOCK(cs_peerstate);\n+        mapPeerState.emplace_hint(mapPeerState.end(), nodeid, CPeerState{});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292550851",
      "id" : 292550851,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjU1MDg1MQ==",
      "original_commit_id" : "54b3431c404c0879ea35091089c33288a3084403",
      "original_position" : 45,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292550851",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292573676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292573676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add a new peer state tracking class to reduce cs_main contention.\" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\r\n\r\nProbably better to follow current coding convention and call it `PeerState` instead of `CPeerState`",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-11T17:26:03Z",
      "diff_hunk" : "@@ -197,6 +197,17 @@ struct CBlockReject {\n     uint256 hashBlock;\n };\n \n+/**\n+ * Maintain state about nodes, protected by our own lock. Historically we put all\n+ * peer tracking state in CNodeState, however this results in significant cs_main\n+ * contention. Thus, new state tracking should go here, and we should eventually\n+ * move most (non-validation-specific) state here.\n+ */\n+struct CPeerState {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292573676",
      "id" : 292573676,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjU3MzY3Ng==",
      "original_commit_id" : "54b3431c404c0879ea35091089c33288a3084403",
      "original_position" : 10,
      "path" : "src/net_processing.cpp",
      "position" : 22,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292573676",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292575733"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292575733"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add a new peer state tracking class to reduce cs_main contention.\" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\r\n\r\nWould suggest calling this `LookupPeerState`, to be consistent with `LookupBlockIndex`, and because otherwise calls to this function look like they are constructing objects, not looking up existing objects",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-11T17:30:58Z",
      "diff_hunk" : "@@ -388,7 +399,20 @@ struct CNodeState {\n // Keeps track of the time (in microseconds) when transactions were requested last time\n limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n \n+/** Note that this must be locked BEFORE cs_main! */\n+CCriticalSection cs_peerstate;\n+\n /** Map maintaining per-node state. */\n+static std::map<NodeId, CPeerState> mapPeerState GUARDED_BY(cs_peerstate);\n+\n+static CPeerState *PeerState(NodeId pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_peerstate) LOCKS_EXCLUDED(cs_main) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292575733",
      "id" : 292575733,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjU3NTczMw==",
      "original_commit_id" : "54b3431c404c0879ea35091089c33288a3084403",
      "original_position" : 28,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292575733",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292576265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292576265"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add a new peer state tracking class to reduce cs_main contention.\" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\r\n\r\n`g_peer_states` instead of `mapPeerState` would be more in line with current coding convention",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-11T17:32:16Z",
      "diff_hunk" : "@@ -388,7 +399,20 @@ struct CNodeState {\n // Keeps track of the time (in microseconds) when transactions were requested last time\n limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n \n+/** Note that this must be locked BEFORE cs_main! */\n+CCriticalSection cs_peerstate;\n+\n /** Map maintaining per-node state. */\n+static std::map<NodeId, CPeerState> mapPeerState GUARDED_BY(cs_peerstate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292576265",
      "id" : 292576265,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjU3NjI2NQ==",
      "original_commit_id" : "54b3431c404c0879ea35091089c33288a3084403",
      "original_position" : 26,
      "path" : "src/net_processing.cpp",
      "position" : 96,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292576265",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292586622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292586622"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add a new peer state tracking class to reduce cs_main contention.\" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\r\n\r\nAcquiring a global lock in `PeerLogicValidation::ProcessMessages` for a single peer seems like a pessimization. Why acquire `cs_peerstate` at such a broad scope here instead of just acquiring it directly where needed, like the code is currently doing with `cs_main`? This would potentially be more efficient and make ProcessMessages code easier to parallelize in the future, but more importantly I think it would make the control flow easier to understand because you could see the mutex being locked in actual places the lock is needed, instead of relying on it already being locked somewhere up the call stack.\r\n\r\nIf the broader locking is justified, it would at least be good to have a comment to give a clue about why the mutex is being locked for so long beyond the initial PeerState lookup, and what other things below require the lock.",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-11T17:56:24Z",
      "diff_hunk" : "@@ -3193,6 +3229,8 @@ bool PeerLogicValidation::SendRejectsAndCheckIfBanned(CNode* pnode, bool enable_\n bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n+    LOCK(cs_peerstate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292586622",
      "id" : 292586622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjU4NjYyMg==",
      "original_commit_id" : "54b3431c404c0879ea35091089c33288a3084403",
      "original_position" : 100,
      "path" : "src/net_processing.cpp",
      "position" : 603,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292586622",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292598784"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292598784"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add a new peer state tracking class to reduce cs_main contention.\" (e89822964e9ef8dadf88d47bc94f5396a8c61a54)\r\n\r\nIt'd be good to have a comment about what code here actually requires the lock. It's unclear if it's just the map lookup and `IsPendingBlockValidated` code added in a later commit, or if cs_peerstate is replacing cs_main in other parts of this function. If you could reduce the scope of the lock to only the code that needs it, I think that'd also be good, but when you're holding a lock over a really wide scope and not briefly for a specific reason, it's good to have some explanation.",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-11T18:24:35Z",
      "diff_hunk" : "@@ -3484,6 +3522,9 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // If we get here, the outgoing message serialization version is set and can't change.\n         const CNetMsgMaker msgMaker(pto->GetSendVersion());\n \n+        LOCK(cs_peerstate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292598784",
      "id" : 292598784,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjU5ODc4NA==",
      "original_commit_id" : "54b3431c404c0879ea35091089c33288a3084403",
      "original_position" : 118,
      "path" : "src/net_processing.cpp",
      "position" : 644,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292598784",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292619647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292619647"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Move nDoS counters to CPeerState (and, thus, out of cs_main)\" (bcc64438d2eebf01866a26a92abf932ed21e0d4f):\r\n\r\nWould be clearer to assign members directly above (`bool fShouldBan = false;`)",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-11T19:17:26Z",
      "diff_hunk" : "@@ -204,7 +206,28 @@ struct CBlockReject {\n  * move most (non-validation-specific) state here.\n  */\n struct CPeerState {\n-    CPeerState() {}\n+    //! String name of this peer (debugging/logging purposes).\n+    const std::string name;\n+\n+    //! Whether this peer should be disconnected and banned (unless whitelisted).\n+    bool fShouldBan;\n+    //! Accumulated misbehaviour score for this peer.\n+    int nMisbehavior;\n+\n+    //! Whether this peer is an inbound connection\n+    bool m_is_inbound;\n+\n+    //! Whether this peer is a manual connection\n+    bool m_is_manual_connection;\n+\n+    CPeerState(std::string addrNameIn, bool is_inbound, bool is_manual) :\n+        name(std::move(addrNameIn)),\n+        m_is_inbound(is_inbound),\n+        m_is_manual_connection (is_manual)\n+    {\n+        fShouldBan = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r292619647",
      "id" : 292619647,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjYxOTY0Nw==",
      "original_commit_id" : "bcc64438d2eebf01866a26a92abf932ed21e0d4f",
      "original_position" : 36,
      "path" : "src/net_processing.cpp",
      "position" : 52,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292619647",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293247162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293247162"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Adding an \"e\" completes the spelling here :-)",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-13T07:52:26Z",
      "diff_hunk" : "@@ -208,15 +209,17 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * Note that we guarantee that either the proof-of-work is valid on pblock, or\n  * (and possibly also) BlockChecked will have been called.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * May not be called in a validationinterface callback.\n+ *\n+ * Do NOT block on the returned future waiting for it to resolve as this may\n+ * introduce deadlocks (in the case you are holding any mutexes which are\n+ * also taken in validationinterface callbacks).\n  *\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n- * @return True if state.IsValid()\n+ * @return      A future which complets with a boolean which is set to indicate if the block was first received via this call",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293247162",
      "id" : 293247162,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzI0NzE2Mg==",
      "original_commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "original_position" : 24,
      "path" : "src/validation.h",
      "position" : 24,
      "pull_request_review_id" : 249179626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T07:52:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293247162",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293532602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293532602"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Remove unnecessary cs_mains in denialofservice_tests\" (9bc8ca61f5c9ca57ea71b3acdd1021a5cf66512f)\r\n\r\nConsider moving this commit into a separate PR. It could probably be merged quickly and would cut down size of this PR.",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-13T19:02:53Z",
      "diff_hunk" : "@@ -95,11 +95,11 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Test starts here\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293532602",
      "id" : 293532602,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzUzMjYwMg==",
      "original_commit_id" : "9bc8ca61f5c9ca57ea71b3acdd1021a5cf66512f",
      "original_position" : 4,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 12,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293532602",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293545964"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293545964"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Make ProcessNewBlock return a future instead of an immediate bool\" (79e6e446dd0c8a3f53759a9792388f28e1053bfb)\r\n\r\nThis line is added here and them moved below NotifyHeaderTip in a later commit 64e74ce8a917e071b8a250a4ba9cd110448796d6. It would be preferable to just add in the right place below now so it doesn't need to be moved later.",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-13T19:40:25Z",
      "diff_hunk" : "@@ -3448,21 +3451,25 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, &fNewBlock);\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            result_promise.set_value(fNewBlock);\n+            return result;\n         }\n     }\n \n+    result_promise.set_value(fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293545964",
      "id" : 293545964,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU0NTk2NA==",
      "original_commit_id" : "79e6e446dd0c8a3f53759a9792388f28e1053bfb",
      "original_position" : 35,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293545964",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293548589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293548589"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Run ProcessNewBlock in a background thread (XXX: p2p_sendheaders broken)\" (64e74ce8a917e071b8a250a4ba9cd110448796d6)\r\n\r\nDocumentation for this function in validation.h becomes out of date with this commit and should be updated. It still says \"This only returns after the best known valid block is made active.\"",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-13T19:48:07Z",
      "diff_hunk" : "@@ -3430,48 +3430,87 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing)\n+void CChainState::ProcessBlockValidationQueue()\n {\n-    AssertLockNotHeld(cs_main);\n+    while (true) {\n+        LimitValidationInterfaceQueue();\n \n-    std::promise<bool> result_promise;\n-    std::future<bool> result = result_promise.get_future();\n-    bool fNewBlock = false;\n+        std::shared_ptr<const CBlock> pblock;\n+        bool fForceProcessing;\n+        std::promise<bool> result_promise;\n+        {\n+            std::unique_lock<CCriticalSection> lock(m_cs_block_validation_queue);\n+            if (m_block_validation_queue.empty()) {\n+                m_cv_block_validation_queue.wait_for(lock, std::chrono::seconds(1));\n+            }\n+            if (ShutdownRequested())\n+                break;\n+            boost::this_thread::interruption_point();\n+            if (m_block_validation_queue.empty()) {\n+                continue;\n+            }\n \n-    {\n-        CBlockIndex *pindex = nullptr;\n-        CValidationState state;\n+            std::tuple<std::shared_ptr<const CBlock>, bool, std::promise<bool>>& tuple = m_block_validation_queue.front();\n+            pblock = std::move(std::get<0>(tuple));\n+            fForceProcessing = std::get<1>(tuple);\n+            result_promise = std::move(std::get<2>(tuple));\n+            m_block_validation_queue.pop_front();\n+        }\n \n-        // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n-        // Therefore, the following critical section must include the CheckBlock() call as well.\n-        LOCK(cs_main);\n+        CChainParams chainparams = Params();\n+        bool fNewBlock = false;\n+        {\n+            CBlockIndex *pindex = nullptr;\n+            CValidationState state;\n \n-        // Ensure that CheckBlock() passes before calling AcceptBlock, as\n-        // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n-        if (ret) {\n-            // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, &fNewBlock);\n-        }\n-        if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n-            result_promise.set_value(fNewBlock);\n-            return result;\n+            // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n+            // Therefore, the following critical section must include the CheckBlock() call as well.\n+            LOCK(cs_main);\n+\n+            // Ensure that CheckBlock() passes before calling AcceptBlock, as\n+            // belt-and-suspenders.\n+            bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+            if (ret) {\n+                // Store to disk\n+                ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, &fNewBlock);\n+            }\n+            if (!ret) {\n+                GetMainSignals().BlockChecked(*pblock, state);\n+                error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+                result_promise.set_value(fNewBlock);\n+                continue;\n+            }\n         }\n-    }\n \n-    result_promise.set_value(fNewBlock);\n+        NotifyHeaderTip();\n \n-    NotifyHeaderTip();\n+        CValidationState state; // Only used to report errors, not invalidity - ignore it\n+        if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n+            error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(state));\n+\n+        result_promise.set_value(fNewBlock);\n+    }\n+}\n \n-    CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n-        error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(state));\n+std::future<bool> CChainState::ProcessNewBlock(const std::shared_ptr<const CBlock> pblock, bool fForceProcessing)\n+{\n+    AssertLockNotHeld(cs_main);\n \n+    std::promise<bool> result_promise;\n+    std::future<bool> result = result_promise.get_future();\n+    {\n+        LOCK(m_cs_block_validation_queue);\n+        m_block_validation_queue.emplace_back(std::move(pblock), fForceProcessing, std::move(result_promise));\n+    }\n+    m_cv_block_validation_queue.notify_one();\n     return result;\n }\n \n+std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293548589",
      "id" : 293548589,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU0ODU4OQ==",
      "original_commit_id" : "64e74ce8a917e071b8a250a4ba9cd110448796d6",
      "original_position" : 109,
      "path" : "src/validation.cpp",
      "position" : 114,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293548589",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293553191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293553191"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Run ProcessNewBlock in a background thread (XXX: p2p_sendheaders broken)\" (64e74ce8a917e071b8a250a4ba9cd110448796d6)\r\n\r\nThroughout this function shouldn't `::ChainstateActive()` be replaced by `*this`?",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-13T20:01:18Z",
      "diff_hunk" : "@@ -3430,48 +3430,87 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-std::future<bool> ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing)\n+void CChainState::ProcessBlockValidationQueue()\n {\n-    AssertLockNotHeld(cs_main);\n+    while (true) {\n+        LimitValidationInterfaceQueue();\n \n-    std::promise<bool> result_promise;\n-    std::future<bool> result = result_promise.get_future();\n-    bool fNewBlock = false;\n+        std::shared_ptr<const CBlock> pblock;\n+        bool fForceProcessing;\n+        std::promise<bool> result_promise;\n+        {\n+            std::unique_lock<CCriticalSection> lock(m_cs_block_validation_queue);\n+            if (m_block_validation_queue.empty()) {\n+                m_cv_block_validation_queue.wait_for(lock, std::chrono::seconds(1));\n+            }\n+            if (ShutdownRequested())\n+                break;\n+            boost::this_thread::interruption_point();\n+            if (m_block_validation_queue.empty()) {\n+                continue;\n+            }\n \n-    {\n-        CBlockIndex *pindex = nullptr;\n-        CValidationState state;\n+            std::tuple<std::shared_ptr<const CBlock>, bool, std::promise<bool>>& tuple = m_block_validation_queue.front();\n+            pblock = std::move(std::get<0>(tuple));\n+            fForceProcessing = std::get<1>(tuple);\n+            result_promise = std::move(std::get<2>(tuple));\n+            m_block_validation_queue.pop_front();\n+        }\n \n-        // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n-        // Therefore, the following critical section must include the CheckBlock() call as well.\n-        LOCK(cs_main);\n+        CChainParams chainparams = Params();\n+        bool fNewBlock = false;\n+        {\n+            CBlockIndex *pindex = nullptr;\n+            CValidationState state;\n \n-        // Ensure that CheckBlock() passes before calling AcceptBlock, as\n-        // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n-        if (ret) {\n-            // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, &fNewBlock);\n-        }\n-        if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n-            result_promise.set_value(fNewBlock);\n-            return result;\n+            // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n+            // Therefore, the following critical section must include the CheckBlock() call as well.\n+            LOCK(cs_main);\n+\n+            // Ensure that CheckBlock() passes before calling AcceptBlock, as\n+            // belt-and-suspenders.\n+            bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+            if (ret) {\n+                // Store to disk\n+                ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, &fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293553191",
      "id" : 293553191,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU1MzE5MQ==",
      "original_commit_id" : "64e74ce8a917e071b8a250a4ba9cd110448796d6",
      "original_position" : 69,
      "path" : "src/validation.cpp",
      "position" : 74,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293553191",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293554242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293554242"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Make ProcessNewBlock return a future instead of an immediate bool\" (79e6e446dd0c8a3f53759a9792388f28e1053bfb)\r\n\r\nThis seems fine, but just to make sure I understand correctly, there is a change in behavior here? Previously `accepted` would only be true if `CheckBlock` and `AcceptBlock` and `ActivateBestChain` all succeeded but this can be true even they fail?",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-13T20:04:32Z",
      "diff_hunk" : "@@ -745,12 +746,13 @@ static UniValue submitblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    bool new_block = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true).get();\n     UnregisterValidationInterface(&sc);\n-    if (!new_block && accepted) {\n+    LOCK(cs_main);\n+    const CBlockIndex* pindex = LookupBlockIndex(blockptr->GetHash());\n+    if (!new_block && pindex && pindex->IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293554242",
      "id" : 293554242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU1NDI0Mg==",
      "original_commit_id" : "79e6e446dd0c8a3f53759a9792388f28e1053bfb",
      "original_position" : 23,
      "path" : "src/rpc/mining.cpp",
      "position" : 24,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293554242",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293562749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293562749"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Make ProcessNewBlock return a future instead of an immediate bool\" (79e6e446dd0c8a3f53759a9792388f28e1053bfb)\r\n\r\nIn the commit message about these tests you wrote \"Note that this makes some of the unit tests less restrictive.\" But I don't think there's a good justification for doing this. If you just declared `struct ProcessNewBlockResult { bool error = false; bool already_have = false; };` and returned `std::future<ProcessNewBlockResult>`, the tests could behave the same and the code would be more readable and less fragile, without the need for people to guess from context whether the bool indicates success or newness.\r\n",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-13T20:28:25Z",
      "diff_hunk" : "@@ -175,7 +175,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n     uint256 chainA_last_header = last_header;\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r293562749",
      "id" : 293562749,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MzU2Mjc0OQ==",
      "original_commit_id" : "79e6e446dd0c8a3f53759a9792388f28e1053bfb",
      "original_position" : 13,
      "path" : "src/test/blockfilter_index_tests.cpp",
      "position" : 13,
      "pull_request_review_id" : 248296873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-13T20:39:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/293562749",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "When IBDing from a single peer, this branch appears to be no slower (or negligibly slower) than master. I'm going to modify the benchmark framework to test against multiple peers, which is where I'm assuming we'd expect to see some speedup.\r\n\r\n![ibd local range 500000 505000](https://user-images.githubusercontent.com/73197/59466913-65c20580-8dfc-11e9-9c29-514f943a3a29.png)\r\n\r\n\r\n",
      "created_at" : "2019-06-13T20:58:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-501876327",
      "id" : 501876327,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16175",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMTg3NjMyNw==",
      "updated_at" : "2019-06-13T20:58:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/501876327",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Just want to note that all my comments above are just suggested cleanups. Feel free to ignore them if they don't make sense or aren't worth effort to implement. The only thing I'd really like to see are more comments about locking. When a lock is held in a small scope for specific purpose, I don't think there's a need to have a comment, but when a lock is held over wide scope for no obvious reason it's good to have a comment that suggests why it needs to be acquired there and when it is safe to release.",
      "created_at" : "2019-06-14T14:53:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-502140053",
      "id" : 502140053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16175",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMjE0MDA1Mw==",
      "updated_at" : "2019-06-14T14:53:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/502140053",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r294579194"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294579194"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Think I agree with this suggestion; dropping the `fNewBlock` result at the same time as turning the return into a `future` seems unnecessarily complicated.",
      "commit_id" : "2d1e8f64cd527b9c44ba171beb0bb837c64cc0a5",
      "created_at" : "2019-06-18T01:30:00Z",
      "diff_hunk" : "@@ -175,7 +175,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n     uint256 chainA_last_header = last_header;\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#discussion_r294579194",
      "id" : 294579194,
      "in_reply_to_id" : 293562749,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDU3OTE5NA==",
      "original_commit_id" : "79e6e446dd0c8a3f53759a9792388f28e1053bfb",
      "original_position" : 13,
      "path" : "src/test/blockfilter_index_tests.cpp",
      "position" : 13,
      "pull_request_review_id" : 250821780,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16175",
      "updated_at" : "2019-06-18T01:30:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294579194",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Working on rewriting this to make it simpler but it looks like it may end up growing so dunno about it.",
      "created_at" : "2019-06-18T20:17:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16175#issuecomment-503294948",
      "id" : 503294948,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16175",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMzI5NDk0OA==",
      "updated_at" : "2019-06-18T20:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/503294948",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
