[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17140](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17140.html) (test: Fix bug in blockfilter_index_tests. by jimpo)\n* [#16411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16411.html) (Signet support by kallewoof)\n* [#15921](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15921.html) (validation: Tidy up ValidationState interface by jnewbery)\n* [#15545](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15545.html) ([doc] explain why CheckBlock() is called before AcceptBlock by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-06-25T00:13:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-505227446",
      "id" : 505227446,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNTIyNzQ0Ng==",
      "updated_at" : "2019-10-15T01:10:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/505227446",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297034762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297034762"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does it make sense to have a `ProcessAndNotifyNewBlock` to wrap this repeated code?",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-06-25T07:04:59Z",
      "diff_hunk" : "@@ -2902,10 +2910,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297034762",
      "id" : 297034762,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzAzNDc2Mg==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 51,
      "path" : "src/net_processing.cpp",
      "position" : 55,
      "pull_request_review_id" : 253805861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297034762",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297421989"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297421989"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd prefer to just wait and clean it up in a later PR, given I want to move towards doing this in the background anyway.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-06-25T22:38:45Z",
      "diff_hunk" : "@@ -2902,10 +2910,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297421989",
      "id" : 297421989,
      "in_reply_to_id" : 297034762,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzQyMTk4OQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 51,
      "path" : "src/net_processing.cpp",
      "position" : 55,
      "pull_request_review_id" : 254305898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297421989",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298737297"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298737297"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Return the AcceptBlock CValidationState directly in ProcessNewBlock\" (dd07ec726c5ade950435876d39741d52a33471ce)\r\n\r\nWhy is this saying \"possibly get feedback\"? If you check CValidationState and wait for BlockChecked, are there still cases where there wouldn't be feedback? If so, it'd be good to give some hint of when or why this would happen. If not, I'd suggest changing \"If you want to *possibly* get feedback\" to \"If you want to get feedback\" and \"you must install\" to \"you must also install\"",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-06-28T20:25:43Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298737297",
      "id" : 298737297,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODczNzI5Nw==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 8,
      "path" : "src/validation.h",
      "position" : 8,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298737297",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298739909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298739909"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Return the AcceptBlock CValidationState directly in ProcessNewBlock\" (dd07ec726c5ade950435876d39741d52a33471ce)\r\n\r\nCould you clarify what malleated means here, or what case this is talking about? When is a block connected but also non valid?",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-06-28T20:35:31Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory malleation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked).\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been malleated, state is guaranteed to be some",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298739909",
      "id" : 298739909,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODczOTkwOQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 17,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298739909",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298742380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298742380"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Return the AcceptBlock CValidationState directly in ProcessNewBlock\" (dd07ec726c5ade950435876d39741d52a33471ce)\r\n\r\nI don't understand what this is saying. Is it just saying it would be wasteful to call with fForceProcessing set in this case, or something more? Would the recommendation be to call with fForceProcessing unset instead, or try to avoid calls entirely? Probably it would be clearer to say when fForceProcessing should be set rather than when it shouldn't be set (if I'm not just completely misunderstanding point of this).",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-06-28T20:45:12Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory malleation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked).\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been malleated, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set, barring pruning and a desire to re-download a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298742380",
      "id" : 298742380,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODc0MjM4MA==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 22,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298742380",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298748875"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298748875"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why is mapBlockSource.erase call needed here? In not valid case, this should already happen in explicit BlockChecked call. In valid case, I assume it happens in BlockChecked validation callback?\r\n\r\nThis logic is messy and repetitive and seems like it could be simplified by moving more of it out of here into the BlockChecked() function, or breaking BlockChecked up into reusable parts.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-06-28T21:10:37Z",
      "diff_hunk" : "@@ -2813,15 +2817,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298748875",
      "id" : 298748875,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODc0ODg3NQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 35,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298748875",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298749945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298749945"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297034762\r\n\r\nIn commit \"Return the AcceptBlock CValidationState directly in ProcessNewBlock\" (dd07ec726c5ade950435876d39741d52a33471ce)\r\n\r\n> I'd prefer to just wait and clean it up in a later PR, given I want to move towards doing this in the background anyway\r\n\r\nSeems to me deduplicating this code now would only simplify the later PR.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-06-28T21:14:55Z",
      "diff_hunk" : "@@ -2902,10 +2910,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298749945",
      "id" : 298749945,
      "in_reply_to_id" : 297034762,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODc0OTk0NQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 51,
      "path" : "src/net_processing.cpp",
      "position" : 55,
      "pull_request_review_id" : 255960030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/298749945",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281017"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, but in the full branch I first clean up some cruft, and then merge the now-identical code instead of the currently-partially-identical code. Easier to just leave it as-is.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-07-02T02:22:21Z",
      "diff_hunk" : "@@ -2902,10 +2910,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281017",
      "id" : 299281017,
      "in_reply_to_id" : 297034762,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTI4MTAxNw==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 51,
      "path" : "src/net_processing.cpp",
      "position" : 55,
      "pull_request_review_id" : 256637736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281017",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281755"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281755"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe the confusion was the use of the old term \"malleated\" instead of the \"mutated\" term used in ValidationInvalidReason. I changed references to mutated.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-07-02T02:27:26Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory malleation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked).\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been malleated, state is guaranteed to be some",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281755",
      "id" : 299281755,
      "in_reply_to_id" : 298739909,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTI4MTc1NQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 17,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 256638637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281755",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281962"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is saying something very specific - if fForceProcessing is set (but deliberately not saying anything about *when* you should set it, as that is a rather complicated topic), unless your goal is to re-download a block, you *never* need to call ProcessNewBlock again with the block. That is to say, \"this copy of the block is good, no need to try to find an alternate source\", hence the somewhat verbose text. Feel free to suggest an alternative.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-07-02T02:28:58Z",
      "diff_hunk" : "@@ -198,22 +198,30 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory malleation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked).\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been malleated, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set, barring pruning and a desire to re-download a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281962",
      "id" : 299281962,
      "in_reply_to_id" : 298742380,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTI4MTk2Mg==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 22,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 256638891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299281962",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299282275"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299282275"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This PR removes the (now redundant) BlockChecked call in case a block is completely bogus (ie !dos_state.IsValid()), so, no.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-07-02T02:30:59Z",
      "diff_hunk" : "@@ -2813,15 +2817,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299282275",
      "id" : 299282275,
      "in_reply_to_id" : 298748875,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTI4MjI3NQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 35,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 256639245,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299282275",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332066318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332066318"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`s/has been mutation/has been mutated/`",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-07T14:54:32Z",
      "diff_hunk" : "@@ -198,22 +198,31 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been mutation, state is guaranteed to be some",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332066318",
      "id" : 332066318,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjA2NjMxOA==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 18,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 298190050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332066318",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332066711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332066711"
         }
      },
      "author_association" : "MEMBER",
      "body" : "what does \"connects\" mean here? If it's not valid how does it connect?",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-07T14:55:09Z",
      "diff_hunk" : "@@ -198,22 +198,31 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been mutation, state is guaranteed to be some",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332066711",
      "id" : 332066711,
      "in_reply_to_id" : 332066318,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjA2NjcxMQ==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 18,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 298190050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332066711",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332067642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332067642"
         }
      },
      "author_association" : "MEMBER",
      "body" : "move the parenthetical `barring pruning and a desire...` to after the last condition that needs to be satisfied `state.IsValid()` to have this part flow better.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-07T14:56:42Z",
      "diff_hunk" : "@@ -198,22 +198,31 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been mutation, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), barring pruning and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332067642",
      "id" : 332067642,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjA2NzY0Mg==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 23,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 298190050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332067642",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332082822"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332082822"
         }
      },
      "author_association" : "MEMBER",
      "body" : "let's rename it to `dos_state` for clarity since it seems all callers(aside from dummy usage) calls it that.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-07T15:23:09Z",
      "diff_hunk" : "@@ -3428,14 +3428,13 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& state, bool fForceProcessing, bool *fNewBlock)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332082822",
      "id" : 332082822,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjA4MjgyMg==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 298190050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332082822",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332084670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332084670"
         }
      },
      "author_association" : "MEMBER",
      "body" : "unrelated to PR but can `state` still be valid here?",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-07T15:26:19Z",
      "diff_hunk" : "@@ -3449,15 +3448,14 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n             ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n         }\n     }\n \n     NotifyHeaderTip();\n \n-    CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n+    CValidationState dummy_state; // Only used to report errors, not invalidity - ignore it\n+    if (!::ChainstateActive().ActivateBestChain(dummy_state, chainparams, pblock))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332084670",
      "id" : 332084670,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjA4NDY3MA==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 40,
      "pull_request_review_id" : 298190050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332084670",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332091929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332091929"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggested enhancement to comment:\r\n\r\n\"This is called after cursory DoS checks fail, and after full validation of the block in question.\"",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-07T15:39:34Z",
      "diff_hunk" : "@@ -1232,7 +1232,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n  * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332091929",
      "id" : 332091929,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjA5MTkyOQ==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 2,
      "path" : "src/net_processing.cpp",
      "position" : 3,
      "pull_request_review_id" : 298190050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332091929",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332306747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332306747"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "But the \"barring pruning...\" bit applies *both* to fForceProcessing and fNewBlock being set to true upon return? I think that would change the meaning.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-08T01:48:46Z",
      "diff_hunk" : "@@ -198,22 +198,31 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been mutation, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), barring pruning and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332306747",
      "id" : 332306747,
      "in_reply_to_id" : 332067642,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjMwNjc0Nw==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 23,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 298497149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332306747",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332307066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332307066"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done. Also fixed an issue where the FormatStateMessage in ActivateBestChain failure prints the state state, not the dummy_state state.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-08T01:50:45Z",
      "diff_hunk" : "@@ -3428,14 +3428,13 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& state, bool fForceProcessing, bool *fNewBlock)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332307066",
      "id" : 332307066,
      "in_reply_to_id" : 332082822,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjMwNzA2Ng==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 298497518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332307066",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332307068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332307068"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point, clarified it a bunch, though its pretty subtle. I hope its a bit better now.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-08T01:50:46Z",
      "diff_hunk" : "@@ -198,22 +198,31 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been mutation, state is guaranteed to be some",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332307068",
      "id" : 332307068,
      "in_reply_to_id" : 332066318,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjMwNzA2OA==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 18,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 298497520,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332307068",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "looks like it doesn't compile anymore",
      "created_at" : "2019-10-08T15:30:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-539569710",
      "id" : 539569710,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzOTU2OTcxMA==",
      "updated_at" : "2019-10-08T15:30:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/539569710",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, just an issue triggered by the rebase-on-master testing. Rebased so should work now.",
      "created_at" : "2019-10-08T20:10:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-539682213",
      "id" : 539682213,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzOTY4MjIxMw==",
      "updated_at" : "2019-10-08T20:10:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/539682213",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Will review when the build is fixed.",
      "created_at" : "2019-10-08T20:39:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-539694672",
      "id" : 539694672,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzOTY5NDY3Mg==",
      "updated_at" : "2019-10-08T20:39:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/539694672",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Built is fixed :)",
      "created_at" : "2019-10-08T23:03:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-539739866",
      "id" : 539739866,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzOTczOTg2Ng==",
      "updated_at" : "2019-10-08T23:03:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/539739866",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333100579"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333100579"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you're right that we can't get rid of this `mapBlockSource.erase()` call, but not for the reason you say. We still need to call it if the block is valid, but this isn't the first time we've received it (ie `fNewBlock` is returned as true). I think this logic would be easier to follow if structured as follows, with comments:\r\n\r\n```c++\r\n        ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing, &fNewBlock);\r\n        if (!dos_state.IsValid()) {\r\n            // The block failed anti-dos / mutation checks. Call BlockChecked() callback here.\r\n            // This clears the block from mapBlockSource.\r\n            BlockChecked(*pblock, dos_state, connman);\r\n        } else if (!fNewBlock) {\r\n            // Block was valid but we've seen it before. Clear it from mapBlockSource.\r\n            LOCK(cs_main);\r\n            mapBlockSource.erase(pblock->GetHash());\r\n        } else {\r\n            // Block is valid and we haven't seen it before. set nLastBlockTime for this peer.\r\n            pfrom->nLastBlockTime = GetTime();\r\n        }\r\n```",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-09T16:03:13Z",
      "diff_hunk" : "@@ -2813,15 +2817,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333100579",
      "id" : 333100579,
      "in_reply_to_id" : 298748875,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzEwMDU3OQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 35,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 299525552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333100579",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333115791"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333115791"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems like a behaviour change. If `ConnectBlock()` fails for this block, then `pindex->nStatus` will be updated with `BLOCK_FAILED_VALID`. Previously, that would prevent this branch from being executed, but now we're only looking at the return `CValidationState` from `CheckBlock()` and `AcceptBlock()`.\r\n\r\nIf this is an intentional behaviour change, can you pull it out into a separate commit and comment on why in the commit log?",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-09T16:36:12Z",
      "diff_hunk" : "@@ -2839,15 +2846,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333115791",
      "id" : 333115791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzExNTc5MQ==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 43,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 299525552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333115791",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333117201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333117201"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think `|| !state.IsValid()` is necessary. `ProcessNewBlock()` cannot return true if state is invalid.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-09T16:39:28Z",
      "diff_hunk" : "@@ -132,7 +132,8 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n             continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))\n+        CValidationState state;\n+        if (!ProcessNewBlock(Params(), shared_pblock, state, true, nullptr) || !state.IsValid())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333117201",
      "id" : 333117201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzExNzIwMQ==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 6,
      "path" : "src/rpc/mining.cpp",
      "position" : 6,
      "pull_request_review_id" : 299525552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333117201",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334689003"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334689003"
         }
      },
      "author_association" : "NONE",
      "body" : "It's a little difficult to parse this sentence. It may be easier to understand if written a little more succinctly as:\r\n\r\n```\r\nIf the block that pblock is built on is in our header tree, and pblock is a\r\ncandidate for accepting to disk (either because it is a candidate for the\r\nbest chain or fForceProcessing is set) but has been mutated, then state is\r\nguaranteed to be non-IsValid().\r\n```\r\n\r\nDoes that look equivalent?",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-14T22:38:00Z",
      "diff_hunk" : "@@ -198,22 +198,33 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If the block pblock is built on is in our header tree, and pblock is a\n+ * candidate for accepting to disk (either because it is a candidate for the\n+ * best chain soon, or due to fForceProcessing being set), but pblock has been\n+ * mutated, state is guaranteed to be some non-IsValid() state.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334689003",
      "id" : 334689003,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDY4OTAwMw==",
      "original_commit_id" : "81bc5bc52b2f706b57ae5034bb9f90e2b1797d63",
      "original_position" : 21,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 301573506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334689003",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334693379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334693379"
         }
      },
      "author_association" : "NONE",
      "body" : "Consider turning this into an `if-else` or `if` guard.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-14T22:57:23Z",
      "diff_hunk" : "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334693379",
      "id" : 334693379,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDY5MzM3OQ==",
      "original_commit_id" : "81bc5bc52b2f706b57ae5034bb9f90e2b1797d63",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 30,
      "pull_request_review_id" : 301573506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334693379",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334708611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334708611"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, yea, thats a bit cleaner, however, after #16323, which this was refactored out of, the original goes back to being cleaner, so would prefer to just leave it (also cause its fewer LoC changed).",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T00:15:29Z",
      "diff_hunk" : "@@ -2813,15 +2817,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334708611",
      "id" : 334708611,
      "in_reply_to_id" : 298748875,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDcwODYxMQ==",
      "original_commit_id" : "dd07ec726c5ade950435876d39741d52a33471ce",
      "original_position" : 35,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 301598325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334708611",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334710935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334710935"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Don't think it matters either way (though also don't think it was *intentional* per se). It's not so much an important change as it is an accidental tweak thats probably a bit better but shouldn't matter. Once we get the block we have to mark it as received, but we cannot do that if the block is malleated. If the block is invalid, we don't care too much - essentially anyone who sends us the block is gonna get the banhammer (if the block is not received via compact blocks).",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T00:28:41Z",
      "diff_hunk" : "@@ -2839,15 +2846,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334710935",
      "id" : 334710935,
      "in_reply_to_id" : 333115791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDcxMDkzNQ==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 43,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 301598325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334710935",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334711101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334711101"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Might very well be #16323 bleeding in, but hopefully that is required soon :).",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T00:29:35Z",
      "diff_hunk" : "@@ -132,7 +132,8 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n             continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))\n+        CValidationState state;\n+        if (!ProcessNewBlock(Params(), shared_pblock, state, true, nullptr) || !state.IsValid())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334711101",
      "id" : 334711101,
      "in_reply_to_id" : 333117201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDcxMTEwMQ==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 6,
      "path" : "src/rpc/mining.cpp",
      "position" : 6,
      "pull_request_review_id" : 301598325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334711101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334714648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334714648"
         }
      },
      "author_association" : "NONE",
      "body" : "I'm also having a tough time parsing this sentence. I'm reading it as:\r\n\r\n`If <X>, barring <Y>, if <Z>, there should never ...`\r\n\r\n The `if <Z>` part is throwing me off. Should there be an 'and' or an 'or' before it?",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T00:53:00Z",
      "diff_hunk" : "@@ -198,22 +198,31 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been mutation, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), barring pruning and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334714648",
      "id" : 334714648,
      "in_reply_to_id" : 332067642,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDcxNDY0OA==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 23,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 301573506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334714648",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334717294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334717294"
         }
      },
      "author_association" : "NONE",
      "body" : "Consider the less verbose version:\r\n\r\n```c++\r\nreturn BIP22ValidationResult(dos_state.IsValid() ? sc.state : dos_state);\r\n```\r\n\r\nOr use a guard clause to be consistent with the previous `if`:\r\n\r\n```c++\r\nif (!dos_state.IsValid()) {\r\n    return BIP22ValidationResult(dos_state);\r\n}\r\n\r\nreturn BIP22ValidationResult(sc.state);\r\n```",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T01:09:54Z",
      "diff_hunk" : "@@ -733,15 +734,20 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    CValidationState dos_state;\n+    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n-    if (!sc.found) {\n+    if (!sc.found && dos_state.IsValid()) {\n         return \"inconclusive\";\n     }\n-    return BIP22ValidationResult(sc.state);\n+    if (dos_state.IsValid()) {\n+        return BIP22ValidationResult(sc.state);\n+    } else {\n+        return BIP22ValidationResult(dos_state);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334717294",
      "id" : 334717294,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDcxNzI5NA==",
      "original_commit_id" : "81bc5bc52b2f706b57ae5034bb9f90e2b1797d63",
      "original_position" : 30,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 301573506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334717294",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334747204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334747204"
         }
      },
      "author_association" : "NONE",
      "body" : "Nit: Alignment",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T04:23:31Z",
      "diff_hunk" : "@@ -198,22 +198,33 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If the block pblock is built on is in our header tree, and pblock is a\n+ * candidate for accepting to disk (either because it is a candidate for the\n+ * best chain soon, or due to fForceProcessing being set), but pblock has been\n+ * mutated, state is guaranteed to be some non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), barring pruning and\n+ * a desire to re-download a pruned block, if state.IsValid(), there should\n+ * never be any reason to re-ProcessNewBlock any block with the same hash.\n+ *\n+ * May not be called in a validationinterface callback.\n  *\n  * @param[in]   pblock  The block we want to process.\n+ * @param[out] state This may be set to an Error state if any error occurred processing them",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334747204",
      "id" : 334747204,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDc0NzIwNA==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 32,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 301646321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334747204",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334748011"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334748011"
         }
      },
      "author_association" : "NONE",
      "body" : "Actually, you can remove the duplicate check on `dos_state.IsValid()` like so:\r\n\r\n```c++\r\nif (!dos_state.IsValid()) {\r\n    return BIP22ValidationResult(dos_state);\r\n}\r\n\r\nif (!sc.found) {\r\n    return \"inconclusive\";\r\n}\r\n\r\nreturn BIP22ValidationResult(sc.state);\r\n```",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T04:28:55Z",
      "diff_hunk" : "@@ -733,15 +734,20 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    CValidationState dos_state;\n+    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n-    if (!sc.found) {\n+    if (!sc.found && dos_state.IsValid()) {\n         return \"inconclusive\";\n     }\n-    return BIP22ValidationResult(sc.state);\n+    if (dos_state.IsValid()) {\n+        return BIP22ValidationResult(sc.state);\n+    } else {\n+        return BIP22ValidationResult(dos_state);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334748011",
      "id" : 334748011,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDc0ODAxMQ==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 30,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 301647323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334748011",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335137336"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335137336"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note that it doesn't have to be a candidate for the best chain, as it can meet the \"more or same work\" criteria, hence the word \"soon\". I took the drop of \"due to\", but am not a huge fan of dropping the redundant subject after the parenthetical (as then you have to re-read skipping the parenthetical).",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T19:32:35Z",
      "diff_hunk" : "@@ -198,22 +198,33 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If the block pblock is built on is in our header tree, and pblock is a\n+ * candidate for accepting to disk (either because it is a candidate for the\n+ * best chain soon, or due to fForceProcessing being set), but pblock has been\n+ * mutated, state is guaranteed to be some non-IsValid() state.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335137336",
      "id" : 335137336,
      "in_reply_to_id" : 334689003,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTEzNzMzNg==",
      "original_commit_id" : "81bc5bc52b2f706b57ae5034bb9f90e2b1797d63",
      "original_position" : 21,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 302146016,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335137336",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335138656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335138656"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm? Note that ret may get set to false in the if (ret) {} conditional above.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T19:36:03Z",
      "diff_hunk" : "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335138656",
      "id" : 335138656,
      "in_reply_to_id" : 334693379,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTEzODY1Ng==",
      "original_commit_id" : "81bc5bc52b2f706b57ae5034bb9f90e2b1797d63",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 30,
      "pull_request_review_id" : 302147800,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335138656",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335140193"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335140193"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, maybe I misunderstood what @instagibbs was suggesting. Took the changes.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T19:40:04Z",
      "diff_hunk" : "@@ -198,22 +198,31 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been mutation, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), barring pruning and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335140193",
      "id" : 335140193,
      "in_reply_to_id" : 332067642,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTE0MDE5Mw==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 23,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 302149848,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335140193",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335144100"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335144100"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I can't remember what my suggestion meant but the new text reads much better",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T19:49:38Z",
      "diff_hunk" : "@@ -198,22 +198,31 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been mutation, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), barring pruning and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335144100",
      "id" : 335144100,
      "in_reply_to_id" : 332067642,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTE0NDEwMA==",
      "original_commit_id" : "8d3ca746deb006995b5261b00437f39cb0137b28",
      "original_position" : 23,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 302154863,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335144100",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335147140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335147140"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Much better. Can you do something similar here: https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333100579 please :)",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T19:57:12Z",
      "diff_hunk" : "@@ -733,15 +734,20 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    CValidationState dos_state;\n+    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n-    if (!sc.found) {\n+    if (!sc.found && dos_state.IsValid()) {\n         return \"inconclusive\";\n     }\n-    return BIP22ValidationResult(sc.state);\n+    if (dos_state.IsValid()) {\n+        return BIP22ValidationResult(sc.state);\n+    } else {\n+        return BIP22ValidationResult(dos_state);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335147140",
      "id" : 335147140,
      "in_reply_to_id" : 334748011,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTE0NzE0MA==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 30,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 302158998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335147140",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335156453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335156453"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If it doesn't matter either way, can you leave it unchanged? Trying to pick through what exactly `MarkBlockAsReceived()` is doing and whether changing whether it's called or not is adding quite a lot of burden to review.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T20:19:08Z",
      "diff_hunk" : "@@ -2839,15 +2846,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335156453",
      "id" : 335156453,
      "in_reply_to_id" : 333115791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTE1NjQ1Mw==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 43,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 302171377,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335156453",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335160718"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335160718"
         }
      },
      "author_association" : "NONE",
      "body" : "Ah, missed that. Not sure if `CheckBlock(...) && ::ChainstateActive().AcceptBlock(...)` is any better, but feel free to leave it as is.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T20:28:45Z",
      "diff_hunk" : "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335160718",
      "id" : 335160718,
      "in_reply_to_id" : 334693379,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTE2MDcxOA==",
      "original_commit_id" : "81bc5bc52b2f706b57ae5034bb9f90e2b1797d63",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 30,
      "pull_request_review_id" : 302176962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335160718",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335161983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335161983"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IMO, this is much cleaner, even if the behavior proper doesn't matter. a) reaching into validation to figure out what happened after calling PNB is...a massive layer violation, this should be returned, not figured out by side-effects, b) it means one chunk of cs_main less (even if its only in the uncommon case), and c) it matters a lot for #16323.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T20:31:33Z",
      "diff_hunk" : "@@ -2839,15 +2846,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335161983",
      "id" : 335161983,
      "in_reply_to_id" : 333115791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTE2MTk4Mw==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 43,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 302178593,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335161983",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335166425"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335166425"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ok, if it does matter, can you separate into its own commit, with a commit log saying _why_ it matters a lot :)",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T20:41:18Z",
      "diff_hunk" : "@@ -2839,15 +2846,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335166425",
      "id" : 335166425,
      "in_reply_to_id" : 333115791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTE2NjQyNQ==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 43,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 302184209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335166425",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335185457"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335185457"
         }
      },
      "author_association" : "NONE",
      "body" : "The commit message mentions this in an offhand sort of way. But it seems like this (i.e. removing the event notification) and the way callers handle the secondary return are the primary changes introduced in this commit. The commit log could better reflect this rather than describing the implementation mechanics (i.e. the 'how').\r\n\r\nYou could argue that removing the event notification should be a commit unto itself. Doing so would definitely make formulating the two commit summaries much easier.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T21:26:42Z",
      "diff_hunk" : "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335185457",
      "id" : 335185457,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTE4NTQ1Nw==",
      "original_commit_id" : "8f6a4a70bdc5fd4d71a67ada5c506eaa277f02ed",
      "original_position" : 28,
      "path" : "src/validation.cpp",
      "position" : 28,
      "pull_request_review_id" : 302176962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335185457",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335191536"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335191536"
         }
      },
      "author_association" : "NONE",
      "body" : "Unrelated to this commit, the error here may be from either `CheckBlock` or `AcceptBlock`. Related to this commit, the returned `CValidationState` could also be from either rather than just `AcceptBlock` but the commit summary mentions only the latter.\r\n\r\nI think this reflects a need for better naming / code organization rather than the need to make the commit message more verbose, however.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T21:43:58Z",
      "diff_hunk" : "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335191536",
      "id" : 335191536,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTE5MTUzNg==",
      "original_commit_id" : "8f6a4a70bdc5fd4d71a67ada5c506eaa277f02ed",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 30,
      "pull_request_review_id" : 302176962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335191536",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335214564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335214564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I missed it too :) Maybe consider not reusing the `ret` variable but giving the return of `AcceptBlock` a different name. `check_ret` and `accept_ret` for example.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T23:02:43Z",
      "diff_hunk" : "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335214564",
      "id" : 335214564,
      "in_reply_to_id" : 334693379,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTIxNDU2NA==",
      "original_commit_id" : "81bc5bc52b2f706b57ae5034bb9f90e2b1797d63",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 30,
      "pull_request_review_id" : 302244453,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335214564",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335216141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335216141"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This one could also be named `dos_state`, I think?",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T23:09:42Z",
      "diff_hunk" : "@@ -132,7 +132,8 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n             continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))\n+        CValidationState state;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335216141",
      "id" : 335216141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTIxNjE0MQ==",
      "original_commit_id" : "8f6a4a70bdc5fd4d71a67ada5c506eaa277f02ed",
      "original_position" : 5,
      "path" : "src/rpc/mining.cpp",
      "position" : 5,
      "pull_request_review_id" : 302246450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335216141",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335222308"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335222308"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "but since this commit is touching this code, might be worth updating error message to \"AcceptBlock or CheckBlock FAILED...\" to be more accurate? ",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-15T23:36:24Z",
      "diff_hunk" : "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335222308",
      "id" : 335222308,
      "in_reply_to_id" : 335191536,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTIyMjMwOA==",
      "original_commit_id" : "8f6a4a70bdc5fd4d71a67ada5c506eaa277f02ed",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 30,
      "pull_request_review_id" : 302253873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335222308",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "tested ACK eabc9a192765df5b66fd4cdc65c4b645a39391cf\r\n\r\nReviewed code and ran tests + modified tests to try failure scenarios. While beyond the scope of this PR, something to note is that all the tests that were changed only tested the happy path. Something to improve in follow-ups, maybe after #16323.",
      "created_at" : "2019-10-16T00:06:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-542454201",
      "id" : 542454201,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MjQ1NDIwMQ==",
      "updated_at" : "2019-10-16T00:06:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/542454201",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335245622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335245622"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Historically, CheckBlock was only called as a part of AcceptBlock, and I think we'd like to eventually go back there. See #9765 and the bitcoin-dev mail titled \"Vulnerability relating to 64-byte transactions in Bitcoin Core 0.13 branch\". (sorry, lots and lots of context to this code.....)",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-16T01:38:39Z",
      "diff_hunk" : "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335245622",
      "id" : 335245622,
      "in_reply_to_id" : 335191536,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTI0NTYyMg==",
      "original_commit_id" : "8f6a4a70bdc5fd4d71a67ada5c506eaa277f02ed",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 30,
      "pull_request_review_id" : 302281500,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T17:03:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335245622",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335246487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335246487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Clarified the commit message to make it more clear. Not gonna bother splitting as it really is the same idea - we return the dos_state instead of passing it back via a callback.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-16T01:44:15Z",
      "diff_hunk" : "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335246487",
      "id" : 335246487,
      "in_reply_to_id" : 335185457,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTI0NjQ4Nw==",
      "original_commit_id" : "8f6a4a70bdc5fd4d71a67ada5c506eaa277f02ed",
      "original_position" : 28,
      "path" : "src/validation.cpp",
      "position" : 28,
      "pull_request_review_id" : 302282549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T01:44:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335246487",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "tested ACK 2ec121f09d8f7117fc9a8f830a7242f9a3602b78.\r\n\r\nCompiled and ran all of the tests. Ran a testnet node with this code for ~1 day without issue. Currently running one with the updated commits from today (will post if any issues).",
      "created_at" : "2019-10-16T03:04:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-542489708",
      "id" : 542489708,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MjQ4OTcwOA==",
      "updated_at" : "2019-10-16T03:04:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/542489708",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/69561?v=4",
         "events_url" : "https://api.github.com/users/etscrivner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/etscrivner/followers",
         "following_url" : "https://api.github.com/users/etscrivner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/etscrivner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/etscrivner",
         "id" : 69561,
         "login" : "etscrivner",
         "node_id" : "MDQ6VXNlcjY5NTYx",
         "organizations_url" : "https://api.github.com/users/etscrivner/orgs",
         "received_events_url" : "https://api.github.com/users/etscrivner/received_events",
         "repos_url" : "https://api.github.com/users/etscrivner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/etscrivner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/etscrivner"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335261392"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335261392"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Two different definitions of \"matter\", I suppose. Anyway, I pulled it out on its own.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-16T03:10:44Z",
      "diff_hunk" : "@@ -2839,15 +2846,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335261392",
      "id" : 335261392,
      "in_reply_to_id" : 333115791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTI2MTM5Mg==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 43,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 302300715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T03:10:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335261392",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335261531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335261531"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ugh, github's review tools have gone to shit. I responded at https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334708611",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-16T03:11:31Z",
      "diff_hunk" : "@@ -733,15 +734,20 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    CValidationState dos_state;\n+    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n-    if (!sc.found) {\n+    if (!sc.found && dos_state.IsValid()) {\n         return \"inconclusive\";\n     }\n-    return BIP22ValidationResult(sc.state);\n+    if (dos_state.IsValid()) {\n+        return BIP22ValidationResult(sc.state);\n+    } else {\n+        return BIP22ValidationResult(dos_state);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335261531",
      "id" : 335261531,
      "in_reply_to_id" : 334748011,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTI2MTUzMQ==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 30,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 302300890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T03:11:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335261531",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335592877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335592877"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Tests that clarify and assert the points in this discussion would be reassuring.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-16T16:53:57Z",
      "diff_hunk" : "@@ -2839,15 +2846,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335592877",
      "id" : 335592877,
      "in_reply_to_id" : 333115791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTU5Mjg3Nw==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 43,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 302726940,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-16T16:53:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335592877",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "tested ACK 2ec121f. Compiled and ran unit and functional tests.",
      "created_at" : "2019-10-16T18:06:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-542823603",
      "id" : 542823603,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MjgyMzYwMw==",
      "updated_at" : "2019-10-16T18:06:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/542823603",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335770164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335770164"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is second alternative of comment right ? \"after full validation of the block fails\" in fact it's called in ConnectTip also when block is valid. Also comment should said what function is doing \"Punish peer if sending bogus data unless it's under BIP152 relaxation or eventually promote peer to announce blocks via compact blocks\" ",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-17T00:51:36Z",
      "diff_hunk" : "@@ -1227,6 +1227,9 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n /**\n  * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.\n+ * Called both in case of cursory DoS checks failing (implying the peer is likely\n+ * sending us bogus data) and after full validation of the block fails (which may",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335770164",
      "id" : 335770164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc3MDE2NA==",
      "original_commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 302953761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-17T02:29:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335770164",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335776612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335776612"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I lean to agree that's a minor change. I'm not even sure there is a difference between the 2 checks as BLOCK_VALID_TRANSACTION is set in `ReceivedBlockTransactions` itself called at the end of `AcceptBlock` after all checks modifying state to invalid. Even it's lower the bar and increase the number of bogus blocks we download we're going to ban peer through the `BlockChecked` callback. So if banhammer works bogus downloads are going to cease soon.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-17T01:31:52Z",
      "diff_hunk" : "@@ -2839,15 +2846,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335776612",
      "id" : 335776612,
      "in_reply_to_id" : 333115791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc3NjYxMg==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 43,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 302953761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-17T02:29:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335776612",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335778910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335778910"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you clarify the reasons? I think it's due a lock conflict with `cs_main` but maybe you're anticipating on the introduction of `cs_peerstate`",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-17T01:46:45Z",
      "diff_hunk" : "@@ -196,22 +196,33 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If the block pblock is built on is in our header tree, and pblock is a\n+ * candidate for accepting to disk (either because it is a candidate for the\n+ * best chain soon, or fForceProcessing is set), but pblock has been mutated,\n+ * state is guaranteed to be some non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), and state.IsValid(),\n+ * barring pruning and a desire to re-download a pruned block, there should\n+ * never be any reason to re-ProcessNewBlock any block with the same hash.\n+ *\n+ * May not be called in a validationinterface callback.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335778910",
      "id" : 335778910,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc3ODkxMA==",
      "original_commit_id" : "c98e4d39f0e03652ffdca2cba515ee59ea16935d",
      "original_position" : 29,
      "path" : "src/validation.h",
      "position" : 29,
      "pull_request_review_id" : 302953761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-17T02:29:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335778910",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335781934"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335781934"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"The installed `BlockChecked` method will be called for *any* block completing validation. It may not be called for the provided pblock as this one not being part of the best chain. But if `BlockChecked` is called for it and its `CValidationState` is invalid, the invalidity reason will be different than the `CValidationState got back from `ProcessNewBlock`\". Just a verbose attempt to underscores clearly the fact you will get 2 different set of invalidity reasons.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-17T02:03:59Z",
      "diff_hunk" : "@@ -196,22 +196,33 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335781934",
      "id" : 335781934,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc4MTkzNA==",
      "original_commit_id" : "c98e4d39f0e03652ffdca2cba515ee59ea16935d",
      "original_position" : 10,
      "path" : "src/validation.h",
      "position" : 10,
      "pull_request_review_id" : 302953761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-17T02:29:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335781934",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335783223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335783223"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The whole comment could be clearer by defining what we mean by processed. Like \"A processed block is one saved to disk and submit as candidate to be part of the best chain.\" We can also add \"passed the cursory mutation/Dos checks\" if I'm correct will always return failed (non-processed) if block fail them. So both concepts are a bit mangled, as processed presume these preliminary checks as successful. For DoS storage risks, we don't want to process blocks without basic safeguards.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-17T02:12:34Z",
      "diff_hunk" : "@@ -196,22 +196,33 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If the block pblock is built on is in our header tree, and pblock is a\n+ * candidate for accepting to disk (either because it is a candidate for the\n+ * best chain soon, or fForceProcessing is set), but pblock has been mutated,\n+ * state is guaranteed to be some non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), and state.IsValid(),\n+ * barring pruning and a desire to re-download a pruned block, there should\n+ * never be any reason to re-ProcessNewBlock any block with the same hash.\n+ *\n+ * May not be called in a validationinterface callback.\n  *\n  * @param[in]   pblock  The block we want to process.\n+ * @param[out]  state This may be set to an Error state if any error occurred processing them\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @returns     If the block was processed, independently of block validity",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335783223",
      "id" : 335783223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc4MzIyMw==",
      "original_commit_id" : "c98e4d39f0e03652ffdca2cba515ee59ea16935d",
      "original_position" : 35,
      "path" : "src/validation.h",
      "position" : 35,
      "pull_request_review_id" : 302953761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-17T02:29:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335783223",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335785185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335785185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: slight behavior change as now we return error on weak validity check, but would say it's now more accurate as `BlockChecked` wasn't giving state of the block we wait for. ",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-17T02:24:39Z",
      "diff_hunk" : "@@ -733,11 +734,15 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    CValidationState dos_state;\n+    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n+    if (!dos_state.IsValid()) {\n+        return BIP22ValidationResult(dos_state);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335785185",
      "id" : 335785185,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc4NTE4NQ==",
      "original_commit_id" : "c98e4d39f0e03652ffdca2cba515ee59ea16935d",
      "original_position" : 22,
      "path" : "src/rpc/mining.cpp",
      "position" : 22,
      "pull_request_review_id" : 302953761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-17T02:29:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335785185",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-10-17T13:01:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-543163576",
      "id" : 543163576,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzE2MzU3Ng==",
      "updated_at" : "2019-10-17T13:01:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543163576",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r336138643"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336138643"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The existing comment already says that.\r\n\"Handle invalid block rejection and consequent peer banning\".",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-17T17:42:24Z",
      "diff_hunk" : "@@ -1227,6 +1227,9 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n /**\n  * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.\n+ * Called both in case of cursory DoS checks failing (implying the peer is likely\n+ * sending us bogus data) and after full validation of the block fails (which may",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r336138643",
      "id" : 336138643,
      "in_reply_to_id" : 335770164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjEzODY0Mw==",
      "original_commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 303430952,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-17T17:42:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336138643",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r336138940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336138940"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "There really is no material difference in behavior here. Its much *cleaner* code, but the behavior is the same. Hence the two different definitions of \"matter\".",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-17T17:43:04Z",
      "diff_hunk" : "@@ -2839,15 +2846,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r336138940",
      "id" : 336138940,
      "in_reply_to_id" : 333115791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjEzODk0MA==",
      "original_commit_id" : "3f88fbdd66e401216ac042099b9aa97c6dc62c44",
      "original_position" : 43,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 303431314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-17T17:43:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336138940",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r336139454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336139454"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ehh, getblocktemplate is a mess already. TBH who really cares since no one actually uses it except to get a block template and submit a block. No one uses the return value.",
      "commit_id" : "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "created_at" : "2019-10-17T17:44:10Z",
      "diff_hunk" : "@@ -733,11 +734,15 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    CValidationState dos_state;\n+    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n+    if (!dos_state.IsValid()) {\n+        return BIP22ValidationResult(dos_state);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#discussion_r336139454",
      "id" : 336139454,
      "in_reply_to_id" : 335785185,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjEzOTQ1NA==",
      "original_commit_id" : "c98e4d39f0e03652ffdca2cba515ee59ea16935d",
      "original_position" : 22,
      "path" : "src/rpc/mining.cpp",
      "position" : 22,
      "pull_request_review_id" : 303432004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16279",
      "updated_at" : "2019-10-17T17:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336139454",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops cause I didnât comment, this kind of trivial refactor is probably detrimental in the death-by-1000-cuts model without #16323 and #16324, which seem to be too scary to get any review, so would recommend against running with it without reviving those (which are, of course, up for grabs if someone thinks they can make progress with it).\n\n>> On Nov 12, 2019, at 15:19, Matt Corallo <notifications@github.com> wrote:\n> ï»¿\n> Closed #16279.\n> \n> â\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n",
      "created_at" : "2019-11-12T21:43:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553129424",
      "id" : 553129424,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MzEyOTQyNA==",
      "updated_at" : "2019-11-12T21:43:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553129424",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It's very difficult for reviewers to understand the motivation and direction for this sequence of PRs, and consequently to help you move them forward toward merge. The OP for this PR states \"It's just two rather-nice (IMO) cleanups.\", but your final comment here is \"would recommend against running with it without reviving those [other PRs]\". Those comments seem to me to be in direct contraction with each other. If the changes here are rather-nice cleanups, that suggests to me that they're worth taking independently from #16323 and #16324.",
      "created_at" : "2019-11-12T22:16:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553142036",
      "id" : 553142036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MzE0MjAzNg==",
      "updated_at" : "2019-11-12T22:16:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553142036",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, but nice cleanups donât always need to be merged, and do, by themselves, carry other weight. See the regular stream of âif this gets merged, X, Y, and Z will conflictâ from Drahtbot (which is awesome). If they have a goal towards enabling other work, thatâs great, but by themselves, unless they make it less likely some issue crops up in the future (which I kinda doubt for these changes), theyâre often not worth merging.\n\n> On Nov 12, 2019, at 17:16, John Newbery <notifications@github.com> wrote:\n> \n> ï»¿\n> It's very difficult for reviewers to understand the motivation and direction for this sequence of PRs, and consequently to help you move them forward toward merge. The OP for this PR states \"It's just two rather-nice (IMO) cleanups.\", but your final comment here is \"would recommend against running with it without reviving those [other PRs]\". Those comments seem to me to be in direct contraction with each other. If the changes here are rather-nice cleanups, that suggests to me that they're worth taking independently from #16323 and #16324.\n> \n> â\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n",
      "created_at" : "2019-11-12T23:18:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553162734",
      "id" : 553162734,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MzE2MjczNA==",
      "updated_at" : "2019-11-12T23:18:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553162734",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Marking up for grabs\r\n\r\nhttp://www.erisian.com.au/bitcoin-core-dev/log-2019-11-12.html#l-455\r\n\r\n> \\<jnewbery> #16279 seems to have already had a lot of review. I liked everything except the last commit in that one, so I might grab those",
      "created_at" : "2019-11-13T16:57:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553492988",
      "id" : 553492988,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MzQ5Mjk4OA==",
      "updated_at" : "2019-11-13T16:57:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553492988",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "See above discussion. I donât think that tag makes sense here.\n\n> On Nov 13, 2019, at 11:57, Russell Yanofsky <notifications@github.com> wrote:\n> \n> ï»¿\n> Marking up for grabs\n> \n> http://www.erisian.com.au/bitcoin-core-dev/log-2019-11-12.html#l-455\n> \n> <jnewbery> #16279 seems to have already had a lot of review. I liked everything except the last commit in that one, so I might grab those\n> \n> â\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n",
      "created_at" : "2019-11-13T18:26:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553537364",
      "id" : 553537364,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MzUzNzM2NA==",
      "updated_at" : "2019-11-13T18:26:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553537364",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased in #17479",
      "created_at" : "2019-11-14T17:18:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553988906",
      "id" : 553988906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16279",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1Mzk4ODkwNg==",
      "updated_at" : "2019-11-14T17:18:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553988906",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
