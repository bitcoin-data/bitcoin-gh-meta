[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2021-04-06T10:53:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#issuecomment-814025631",
      "id" : 814025631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21617",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDAyNTYzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-06T10:53:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814025631",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 33333755f2edcbe88fcd136f6fef81f94819002e",
      "created_at" : "2021-04-06T21:56:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#issuecomment-814463590",
      "id" : 814463590,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21617",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDQ2MzU5MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-06T21:56:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814463590",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608422230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608422230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: extra white space near the end: `occurred )`",
      "commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "created_at" : "2021-04-07T07:52:03Z",
      "diff_hunk" : "@@ -7,6 +7,14 @@\n #include <util/rbf.h>\n #include <version.h>\n \n+bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608422230",
      "id" : 608422230,
      "line" : 10,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODQyMjIzMA==",
      "original_commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "original_line" : 10,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : 4,
      "pull_request_review_id" : 629696410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-07T08:26:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608422230",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608429338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608429338"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "* This would signal a failure without setting `errno` (it was like this even before this PR, but better fix it)\r\n* Would result in either an error or timeout, but never \"the requested event occurred\"\r\n* `!ConsumeBool()` is the same as `ConsumeBool()`\r\n\r\n```suggestion\r\n{\r\n    constexpr std::array wait_errnos{\r\n        EBADF,\r\n        EINTR,\r\n        EINVAL,\r\n    };\r\n    if (m_fuzzed_data_provider.ConsumeBool()) { \r\n        SetFuzzedErrNo(m_fuzzed_data_provider, wait_errnos);\r\n        return false;\r\n    } \r\n    if (occurred) { \r\n        if (m_fuzzed_data_provider.ConsumeBool()) { \r\n            *occurred = requested;\r\n        } else { \r\n            *occurred = 0;\r\n        } \r\n    } \r\n    return true;\r\n}\r\n```",
      "commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "created_at" : "2021-04-07T08:02:29Z",
      "diff_hunk" : "@@ -7,6 +7,14 @@\n #include <util/rbf.h>\n #include <version.h>\n \n+bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+{\n+    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+        return false;\n+    }\n+    if (occurred) *occurred = 0;\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608429338",
      "id" : 608429338,
      "line" : 17,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODQyOTMzOA==",
      "original_commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "original_line" : 17,
      "original_position" : 11,
      "original_start_line" : 11,
      "path" : "src/test/fuzz/util.cpp",
      "position" : 11,
      "pull_request_review_id" : 629696410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617",
      "side" : "RIGHT",
      "start_line" : 11,
      "start_side" : "RIGHT",
      "updated_at" : "2021-04-07T08:26:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608429338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608431181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608431181"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I like separating the interface from the implementation - it makes it more readable for consumers who want to use it without being bothered with implementation details (actually it is better to not see the implementation so that one does not accidentally start relying on undocumented implementation details).\r\n\r\nHere is an extra commit that moves the rest of the `FuzzedSock`'s implementation to `util.cpp`:\r\n\r\nhttps://github.com/vasild/bitcoin/commit/33c203d6878d9b6adee046f36311c58a13e79941\r\n\r\n<details>\r\n<summary>fuzz: split FuzzedSock interface and implementation</summary>\r\n\r\n```diff\r\ncommit 33c203d6878d9b6adee046f36311c58a13e79941 (HEAD -> pull/21617_1617705813_33333755f__2104-fuzzValgrind, vasild/2104-fuzzValgrind)\r\nParent: 33333755f2edcbe88fcd136f6fef81f94819002e\r\nAuthor:     Vasil Dimov <vd@FreeBSD.org>\r\nAuthorDate: Wed Apr 7 10:18:39 2021 +0200\r\nCommit:     Vasil Dimov <vd@FreeBSD.org>\r\nCommitDate: Wed Apr 7 10:18:39 2021 +0200\r\ngpg: Signature made Wed Apr  7 10:18:59 2021 CEST\r\ngpg:                using RSA key E64D8D45614DB07545D9CCC154DF06F64B55CBBF\r\ngpg: Good signature from \"Vasil Dimov <vd@myforest.net>\" [ultimate]\r\ngpg:                 aka \"Vasil Dimov <vd@FreeBSD.org>\" [ultimate]\r\ngpg:                 aka \"Vasil Dimov <vasild@gmail.com>\" [ultimate]\r\n\r\n\r\n    fuzz: split FuzzedSock interface and implementation\r\n\r\ndiff --git a/src/test/fuzz/util.cpp b/src/test/fuzz/util.cpp\r\nindex cf5244e31..2ab227e29 100644\r\n--- a/src/test/fuzz/util.cpp\r\n+++ b/src/test/fuzz/util.cpp\r\n@@ -4,21 +4,194 @@\r\n \r\n #include <test/fuzz/util.h>\r\n #include <test/util/script.h>\r\n #include <util/rbf.h>\r\n #include <version.h>\r\n \r\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\r\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\r\n+{\r\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();\r\n+}\r\n+\r\n+FuzzedSock::~FuzzedSock()\r\n+{\r\n+    // Sock::~Sock() will be called after FuzzedSock::~FuzzedSock() and it will call\r\n+    // Sock::Reset() (not FuzzedSock::Reset()!) which will call CloseSocket(m_socket).\r\n+    // Avoid closing an arbitrary file descriptor (m_socket is just a random number which\r\n+    // may concide with a real opened file descriptor).\r\n+    Reset();\r\n+}\r\n+\r\n+FuzzedSock& FuzzedSock::operator=(Sock&& other)\r\n+{\r\n+    assert(false && \"Move of Sock into FuzzedSock not allowed.\");\r\n+    return *this;\r\n+}\r\n+\r\n+void FuzzedSock::Reset()\r\n+{\r\n+    m_socket = INVALID_SOCKET;\r\n+}\r\n+\r\n+ssize_t FuzzedSock::Send(const void* data, size_t len, int flags) const\r\n+{\r\n+    constexpr std::array send_errnos{\r\n+        EACCES,\r\n+        EAGAIN,\r\n+        EALREADY,\r\n+        EBADF,\r\n+        ECONNRESET,\r\n+        EDESTADDRREQ,\r\n+        EFAULT,\r\n+        EINTR,\r\n+        EINVAL,\r\n+        EISCONN,\r\n+        EMSGSIZE,\r\n+        ENOBUFS,\r\n+        ENOMEM,\r\n+        ENOTCONN,\r\n+        ENOTSOCK,\r\n+        EOPNOTSUPP,\r\n+        EPIPE,\r\n+        EWOULDBLOCK,\r\n+    };\r\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\r\n+        return len;\r\n+    }\r\n+    const ssize_t r = m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(-1, len);\r\n+    if (r == -1) {\r\n+        SetFuzzedErrNo(m_fuzzed_data_provider, send_errnos);\r\n+    }\r\n+    return r;\r\n+}\r\n+\r\n+ssize_t FuzzedSock::Recv(void* buf, size_t len, int flags) const\r\n+{\r\n+    // Have a permanent error at recv_errnos[0] because when the fuzzed data is exhausted\r\n+    // SetFuzzedErrNo() will always return the first element and we want to avoid Recv()\r\n+    // returning -1 and setting errno to EAGAIN repeatedly.\r\n+    constexpr std::array recv_errnos{\r\n+        ECONNREFUSED,\r\n+        EAGAIN,\r\n+        EBADF,\r\n+        EFAULT,\r\n+        EINTR,\r\n+        EINVAL,\r\n+        ENOMEM,\r\n+        ENOTCONN,\r\n+        ENOTSOCK,\r\n+        EWOULDBLOCK,\r\n+    };\r\n+    assert(buf != nullptr || len == 0);\r\n+    if (len == 0 || m_fuzzed_data_provider.ConsumeBool()) {\r\n+        const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\r\n+        if (r == -1) {\r\n+            SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\r\n+        }\r\n+        return r;\r\n+    }\r\n+    std::vector<uint8_t> random_bytes;\r\n+    bool pad_to_len_bytes{m_fuzzed_data_provider.ConsumeBool()};\r\n+    if (m_peek_data.has_value()) {\r\n+        // `MSG_PEEK` was used in the preceding `Recv()` call, return `m_peek_data`.\r\n+        random_bytes.assign({m_peek_data.value()});\r\n+        if ((flags & MSG_PEEK) == 0) {\r\n+            m_peek_data.reset();\r\n+        }\r\n+        pad_to_len_bytes = false;\r\n+    } else if ((flags & MSG_PEEK) != 0) {\r\n+        // New call with `MSG_PEEK`.\r\n+        random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(1);\r\n+        if (!random_bytes.empty()) {\r\n+            m_peek_data = random_bytes[0];\r\n+            pad_to_len_bytes = false;\r\n+        }\r\n+    } else {\r\n+        random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(\r\n+            m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, len));\r\n+    }\r\n+    if (random_bytes.empty()) {\r\n+        const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\r\n+        if (r == -1) {\r\n+            SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\r\n+        }\r\n+        return r;\r\n+    }\r\n+    std::memcpy(buf, random_bytes.data(), random_bytes.size());\r\n+    if (pad_to_len_bytes) {\r\n+        if (len > random_bytes.size()) {\r\n+            std::memset((char*)buf + random_bytes.size(), 0, len - random_bytes.size());\r\n+        }\r\n+        return len;\r\n+    }\r\n+    if (m_fuzzed_data_provider.ConsumeBool() && std::getenv(\"FUZZED_SOCKET_FAKE_LATENCY\") != nullptr) {\r\n+        std::this_thread::sleep_for(std::chrono::milliseconds{2});\r\n+    }\r\n+    return random_bytes.size();\r\n+}\r\n+\r\n+int FuzzedSock::Connect(const sockaddr*, socklen_t) const\r\n+{\r\n+    // Have a permanent error at connect_errnos[0] because when the fuzzed data is exhausted\r\n+    // SetFuzzedErrNo() will always return the first element and we want to avoid Connect()\r\n+    // returning -1 and setting errno to EAGAIN repeatedly.\r\n+    constexpr std::array connect_errnos{\r\n+        ECONNREFUSED,\r\n+        EAGAIN,\r\n+        ECONNRESET,\r\n+        EHOSTUNREACH,\r\n+        EINPROGRESS,\r\n+        EINTR,\r\n+        ENETUNREACH,\r\n+        ETIMEDOUT,\r\n+    };\r\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\r\n+        SetFuzzedErrNo(m_fuzzed_data_provider, connect_errnos);\r\n+        return -1;\r\n+    }\r\n+    return 0;\r\n+}\r\n+\r\n+int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\r\n+{\r\n+    constexpr std::array getsockopt_errnos{\r\n+        ENOMEM,\r\n+        ENOBUFS,\r\n+    };\r\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\r\n+        SetFuzzedErrNo(m_fuzzed_data_provider, getsockopt_errnos);\r\n+        return -1;\r\n+    }\r\n+    if (opt_val == nullptr) {\r\n+        return 0;\r\n+    }\r\n+    std::memcpy(opt_val,\r\n+                ConsumeFixedLengthByteVector(m_fuzzed_data_provider, *opt_len).data(),\r\n+                *opt_len);\r\n+    return 0;\r\n+}\r\n+\r\n bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\r\n {\r\n     if (!m_fuzzed_data_provider.ConsumeBool()) {\r\n         return false;\r\n     }\r\n     if (occurred) *occurred = 0;\r\n     return true;\r\n }\r\n \r\n+bool FuzzedSock::IsConnected(std::string& errmsg) const\r\n+{\r\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\r\n+        return true;\r\n+    }\r\n+    errmsg = \"disconnected at random by the fuzzer\";\r\n+    return false;\r\n+}\r\n+\r\n void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_version) noexcept\r\n {\r\n     const ServiceFlags remote_services = ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS);\r\n     const NetPermissionFlags permission_flags = ConsumeWeakEnum(fuzzed_data_provider, ALL_NET_PERMISSION_FLAGS);\r\n     const int32_t version = fuzzed_data_provider.ConsumeIntegralInRange<int32_t>(MIN_PEER_PROTO_VERSION, std::numeric_limits<int32_t>::max());\r\n     const bool filter_txs = fuzzed_data_provider.ConsumeBool();\r\ndiff --git a/src/test/fuzz/util.h b/src/test/fuzz/util.h\r\nindex adcdd7174..8f4f87fbd 100644\r\n--- a/src/test/fuzz/util.h\r\n+++ b/src/test/fuzz/util.h\r\n@@ -572,185 +572,31 @@ class FuzzedSock : public Sock\r\n      * If `MSG_PEEK` is used, then our `Recv()` returns some random data as usual, but on the next\r\n      * `Recv()` call we must return the same data, thus we remember it here.\r\n      */\r\n     mutable std::optional<uint8_t> m_peek_data;\r\n \r\n public:\r\n-    explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider) : m_fuzzed_data_provider{fuzzed_data_provider}\r\n-    {\r\n-          m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();\r\n-    }\r\n+    explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider);\r\n \r\n-    ~FuzzedSock() override\r\n-    {\r\n-        // Sock::~Sock() will be called after FuzzedSock::~FuzzedSock() and it will call\r\n-        // Sock::Reset() (not FuzzedSock::Reset()!) which will call CloseSocket(m_socket).\r\n-        // Avoid closing an arbitrary file descriptor (m_socket is just a random number which\r\n-        // may concide with a real opened file descriptor).\r\n-        Reset();\r\n-    }\r\n+    ~FuzzedSock() override;\r\n \r\n-    FuzzedSock& operator=(Sock&& other) override\r\n-    {\r\n-        assert(false && \"Move of Sock into FuzzedSock not allowed.\");\r\n-        return *this;\r\n-    }\r\n+    FuzzedSock& operator=(Sock&& other) override;\r\n \r\n-    void Reset() override\r\n-    {\r\n-        m_socket = INVALID_SOCKET;\r\n-    }\r\n+    void Reset() override;\r\n \r\n-    ssize_t Send(const void* data, size_t len, int flags) const override\r\n-    {\r\n-        constexpr std::array send_errnos{\r\n-            EACCES,\r\n-            EAGAIN,\r\n-            EALREADY,\r\n-            EBADF,\r\n-            ECONNRESET,\r\n-            EDESTADDRREQ,\r\n-            EFAULT,\r\n-            EINTR,\r\n-            EINVAL,\r\n-            EISCONN,\r\n-            EMSGSIZE,\r\n-            ENOBUFS,\r\n-            ENOMEM,\r\n-            ENOTCONN,\r\n-            ENOTSOCK,\r\n-            EOPNOTSUPP,\r\n-            EPIPE,\r\n-            EWOULDBLOCK,\r\n-        };\r\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\r\n-            return len;\r\n-        }\r\n-        const ssize_t r = m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(-1, len);\r\n-        if (r == -1) {\r\n-            SetFuzzedErrNo(m_fuzzed_data_provider, send_errnos);\r\n-        }\r\n-        return r;\r\n-    }\r\n+    ssize_t Send(const void* data, size_t len, int flags) const override;\r\n \r\n-    ssize_t Recv(void* buf, size_t len, int flags) const override\r\n-    {\r\n-        // Have a permanent error at recv_errnos[0] because when the fuzzed data is exhausted\r\n-        // SetFuzzedErrNo() will always return the first element and we want to avoid Recv()\r\n-        // returning -1 and setting errno to EAGAIN repeatedly.\r\n-        constexpr std::array recv_errnos{\r\n-            ECONNREFUSED,\r\n-            EAGAIN,\r\n-            EBADF,\r\n-            EFAULT,\r\n-            EINTR,\r\n-            EINVAL,\r\n-            ENOMEM,\r\n-            ENOTCONN,\r\n-            ENOTSOCK,\r\n-            EWOULDBLOCK,\r\n-        };\r\n-        assert(buf != nullptr || len == 0);\r\n-        if (len == 0 || m_fuzzed_data_provider.ConsumeBool()) {\r\n-            const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\r\n-            if (r == -1) {\r\n-                SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\r\n-            }\r\n-            return r;\r\n-        }\r\n-        std::vector<uint8_t> random_bytes;\r\n-        bool pad_to_len_bytes{m_fuzzed_data_provider.ConsumeBool()};\r\n-        if (m_peek_data.has_value()) {\r\n-            // `MSG_PEEK` was used in the preceding `Recv()` call, return `m_peek_data`.\r\n-            random_bytes.assign({m_peek_data.value()});\r\n-            if ((flags & MSG_PEEK) == 0) {\r\n-                m_peek_data.reset();\r\n-            }\r\n-            pad_to_len_bytes = false;\r\n-        } else if ((flags & MSG_PEEK) != 0) {\r\n-            // New call with `MSG_PEEK`.\r\n-            random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(1);\r\n-            if (!random_bytes.empty()) {\r\n-                m_peek_data = random_bytes[0];\r\n-                pad_to_len_bytes = false;\r\n-            }\r\n-        } else {\r\n-            random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(\r\n-                m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, len));\r\n-        }\r\n-        if (random_bytes.empty()) {\r\n-            const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\r\n-            if (r == -1) {\r\n-                SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\r\n-            }\r\n-            return r;\r\n-        }\r\n-        std::memcpy(buf, random_bytes.data(), random_bytes.size());\r\n-        if (pad_to_len_bytes) {\r\n-            if (len > random_bytes.size()) {\r\n-                std::memset((char*)buf + random_bytes.size(), 0, len - random_bytes.size());\r\n-            }\r\n-            return len;\r\n-        }\r\n-        if (m_fuzzed_data_provider.ConsumeBool() && std::getenv(\"FUZZED_SOCKET_FAKE_LATENCY\") != nullptr) {\r\n-            std::this_thread::sleep_for(std::chrono::milliseconds{2});\r\n-        }\r\n-        return random_bytes.size();\r\n-    }\r\n+    ssize_t Recv(void* buf, size_t len, int flags) const override;\r\n \r\n-    int Connect(const sockaddr*, socklen_t) const override\r\n-    {\r\n-        // Have a permanent error at connect_errnos[0] because when the fuzzed data is exhausted\r\n-        // SetFuzzedErrNo() will always return the first element and we want to avoid Connect()\r\n-        // returning -1 and setting errno to EAGAIN repeatedly.\r\n-        constexpr std::array connect_errnos{\r\n-            ECONNREFUSED,\r\n-            EAGAIN,\r\n-            ECONNRESET,\r\n-            EHOSTUNREACH,\r\n-            EINPROGRESS,\r\n-            EINTR,\r\n-            ENETUNREACH,\r\n-            ETIMEDOUT,\r\n-        };\r\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\r\n-            SetFuzzedErrNo(m_fuzzed_data_provider, connect_errnos);\r\n-            return -1;\r\n-        }\r\n-        return 0;\r\n-    }\r\n+    int Connect(const sockaddr*, socklen_t) const override;\r\n \r\n-    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\r\n-    {\r\n-        constexpr std::array getsockopt_errnos{\r\n-            ENOMEM,\r\n-            ENOBUFS,\r\n-        };\r\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\r\n-            SetFuzzedErrNo(m_fuzzed_data_provider, getsockopt_errnos);\r\n-            return -1;\r\n-        }\r\n-        if (opt_val == nullptr) {\r\n-            return 0;\r\n-        }\r\n-        std::memcpy(opt_val,\r\n-                    ConsumeFixedLengthByteVector(m_fuzzed_data_provider, *opt_len).data(),\r\n-                    *opt_len);\r\n-        return 0;\r\n-    }\r\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\r\n \r\n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\r\n \r\n-    bool IsConnected(std::string& errmsg) const override\r\n-    {\r\n-        if (m_fuzzed_data_provider.ConsumeBool()) {\r\n-            return true;\r\n-        }\r\n-        errmsg = \"disconnected at random by the fuzzer\";\r\n-        return false;\r\n-    }\r\n+    bool IsConnected(std::string& errmsg) const override;\r\n };\r\n \r\n [[nodiscard]] inline FuzzedSock ConsumeSock(FuzzedDataProvider& fuzzed_data_provider)\r\n {\r\n     return FuzzedSock{fuzzed_data_provider};\r\n }\r\n```\r\n</details>\r\n\r\n(feel free to ignore)",
      "commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "created_at" : "2021-04-07T08:05:25Z",
      "diff_hunk" : "@@ -738,12 +738,10 @@ class FuzzedSock : public Sock\n         return 0;\n     }\n \n-    bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override\n-    {\n-        return m_fuzzed_data_provider.ConsumeBool();\n-    }\n+    bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608431181",
      "id" : 608431181,
      "line" : 741,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODQzMTE4MQ==",
      "original_commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "original_line" : 741,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.h",
      "position" : 8,
      "pull_request_review_id" : 629696410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-07T08:26:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608431181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608456113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608456113"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch. Someone forgot to run clang-format",
      "commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "created_at" : "2021-04-07T08:39:49Z",
      "diff_hunk" : "@@ -7,6 +7,14 @@\n #include <util/rbf.h>\n #include <version.h>\n \n+bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608456113",
      "id" : 608456113,
      "in_reply_to_id" : 608422230,
      "line" : 10,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODQ1NjExMw==",
      "original_commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "original_line" : 10,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : 4,
      "pull_request_review_id" : 629743496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-07T08:39:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608456113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608456958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608456958"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> !ConsumeBool() is the same as ConsumeBool()\r\n\r\nI had a slight preference to not invalidate the existing fuzz inputs by using the `!` operator on the bool\r\n\r\nMind taking the other changes to a new pr?",
      "commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "created_at" : "2021-04-07T08:41:00Z",
      "diff_hunk" : "@@ -7,6 +7,14 @@\n #include <util/rbf.h>\n #include <version.h>\n \n+bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+{\n+    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+        return false;\n+    }\n+    if (occurred) *occurred = 0;\n+    return true;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608456958",
      "id" : 608456958,
      "in_reply_to_id" : 608429338,
      "line" : 17,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODQ1Njk1OA==",
      "original_commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "original_line" : 17,
      "original_position" : 11,
      "original_start_line" : 11,
      "path" : "src/test/fuzz/util.cpp",
      "position" : 11,
      "pull_request_review_id" : 629744647,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617",
      "side" : "RIGHT",
      "start_line" : 11,
      "start_side" : "RIGHT",
      "updated_at" : "2021-04-07T08:41:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608456958",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608457435"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608457435"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Concept ACK on the commit. Please open a new pr and ping me for review.",
      "commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "created_at" : "2021-04-07T08:41:42Z",
      "diff_hunk" : "@@ -738,12 +738,10 @@ class FuzzedSock : public Sock\n         return 0;\n     }\n \n-    bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override\n-    {\n-        return m_fuzzed_data_provider.ConsumeBool();\n-    }\n+    bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#discussion_r608457435",
      "id" : 608457435,
      "in_reply_to_id" : 608431181,
      "line" : 741,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODQ1NzQzNQ==",
      "original_commit_id" : "33333755f2edcbe88fcd136f6fef81f94819002e",
      "original_line" : 741,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.h",
      "position" : 8,
      "pull_request_review_id" : 629745321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21617",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-07T08:41:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608457435",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I merged this to unbreak our valgrind fuzzer. Happy to review the proposed changes in a follow-up pr.",
      "created_at" : "2021-04-07T08:42:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#issuecomment-814725694",
      "id" : 814725694,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21617",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDcyNTY5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-07T08:42:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814725694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Followup in https://github.com/bitcoin/bitcoin/pull/21630",
      "created_at" : "2021-04-07T09:12:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21617#issuecomment-814749300",
      "id" : 814749300,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21617",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDc0OTMwMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-07T09:12:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814749300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
