[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nThanks for making `src/test/fuzz/` an even better place!",
      "created_at" : "2021-04-07T09:29:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-814764430",
      "id" : 814764430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDc2NDQzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-07T09:29:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814764430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Can the uninitialized read also happen in i2p? (The `Wait` return code is ignored here):\r\n\r\n```\r\nsrc/i2p.cpp=bool Session::Accept(Connection& conn)\r\nsrc/i2p.cpp-{\r\nsrc/i2p.cpp-    try {\r\nsrc/i2p.cpp-        while (!*m_interrupt) {\r\nsrc/i2p.cpp-            Sock::Event occurred;\r\nsrc/i2p.cpp:            conn.sock->Wait(MAX_WAIT_FOR_IO, Sock::RECV, &occurred);\r\nsrc/i2p.cpp-\r\nsrc/i2p.cpp-            if ((occurred & Sock::RECV) == 0) {\r\n",
      "created_at" : "2021-04-07T09:31:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-814765659",
      "id" : 814765659,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDc2NTY1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-07T09:31:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814765659",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "review-only ACK d2e8d121eff98f9bbc3f15977bfb1dda9a27245a ð§\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreview-only ACK d2e8d121eff98f9bbc3f15977bfb1dda9a27245a ð§\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUg1aQv/aeRus5hrRnP5M5V3tAv4J17uP4l0h7ApjymlEHRgJvNLlBTDAjOKdji/\r\nu3CYy9mEuxrLn1tv5TGqBMXy1YQLrj2x1R0ExBp96LRalfRPVyTpocx/yOhokfj0\r\nsgy5MyPOpNg4WbcxMU6z0Mli2mg0TBg9pii/b5+KTQg7SdnSsjMXkWYoBYIBvcLk\r\ng/Ra92zzNjYcUGYLM5zDbTu3oU/wbhV7M1H5xapm29heIhtJ3FfSGo5zlA5BynVO\r\nnMNjq9+I04e3qpPopH0wnsSaApnqlFqzRdUNADTMdkyB+tqolDxet3G4GRR0SPGL\r\n8TR7BXBUqAKNfx37x2+4hM5cUnTh+eByyemrRXlyMwAGWzo6QBmINbmD6dbPLT/t\r\nKZUAiKPN7ppA0nsSBdmejAX37ZyVKLFjtC0Nd2XT6XNKXCaYA27lL7VNbQJ2wpOq\r\nfayqkcxeAre8F+5rFq7/oIWSU8ArIXM9ruWhXO6OOFB0MHgcN23CgQ58jfvGLIoM\r\n6nO8IrZq\r\n=aNPu\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `fbf1a942dcb87778554e8487c05545ff298d95af1816d6f90d53986f457f41d2  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108fbf1a942dcb87778554e8487c05545ff298d95af1816d6f90d53986f457f41d2f010a0e269c79670f89e59f4213ae1a005e608fff010710f77a8f6be531bd712916adcbcb76808f104606d7c16f008558fb48655cb9cc50083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff01073fa67a73539f3417d2da425f52ab83b08f104606d7c16f0086cab89c2dda7b3df0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010b1265724fd092dbd0058b89a461b608108f104606d7c16f00874af00b98daf4b220083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010bf70e418520b9ffcffe6f87e839c60f808f02093487d8535b3e0c07cc4518473606c118101d39dc82d891dfadc5ea85f3419fb08f020e0db5529f12c9062201918a177ffe2b1cb1d288c7710b29ec684f74567eb031d08f104606d6e3cf008c8ca0e84f7fb7c460083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2021-04-07T09:32:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-814766021",
      "id" : 814766021,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDc2NjAyMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-07T09:32:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814766021",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r608495069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608495069"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If you want you can remove the `!`, now that you are breaking the input format anyway",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-07T09:32:48Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();\n+}\n+\n+FuzzedSock::~FuzzedSock()\n+{\n+    // Sock::~Sock() will be called after FuzzedSock::~FuzzedSock() and it will call\n+    // Sock::Reset() (not FuzzedSock::Reset()!) which will call CloseSocket(m_socket).\n+    // Avoid closing an arbitrary file descriptor (m_socket is just a random number which\n+    // may concide with a real opened file descriptor).\n+    Reset();\n+}\n+\n+FuzzedSock& FuzzedSock::operator=(Sock&& other)\n+{\n+    assert(false && \"Move of Sock into FuzzedSock not allowed.\");\n+    return *this;\n+}\n+\n+void FuzzedSock::Reset()\n+{\n+    m_socket = INVALID_SOCKET;\n+}\n+\n+ssize_t FuzzedSock::Send(const void* data, size_t len, int flags) const\n+{\n+    constexpr std::array send_errnos{\n+        EACCES,\n+        EAGAIN,\n+        EALREADY,\n+        EBADF,\n+        ECONNRESET,\n+        EDESTADDRREQ,\n+        EFAULT,\n+        EINTR,\n+        EINVAL,\n+        EISCONN,\n+        EMSGSIZE,\n+        ENOBUFS,\n+        ENOMEM,\n+        ENOTCONN,\n+        ENOTSOCK,\n+        EOPNOTSUPP,\n+        EPIPE,\n+        EWOULDBLOCK,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        return len;\n+    }\n+    const ssize_t r = m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(-1, len);\n+    if (r == -1) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, send_errnos);\n+    }\n+    return r;\n+}\n+\n+ssize_t FuzzedSock::Recv(void* buf, size_t len, int flags) const\n+{\n+    // Have a permanent error at recv_errnos[0] because when the fuzzed data is exhausted\n+    // SetFuzzedErrNo() will always return the first element and we want to avoid Recv()\n+    // returning -1 and setting errno to EAGAIN repeatedly.\n+    constexpr std::array recv_errnos{\n+        ECONNREFUSED,\n+        EAGAIN,\n+        EBADF,\n+        EFAULT,\n+        EINTR,\n+        EINVAL,\n+        ENOMEM,\n+        ENOTCONN,\n+        ENOTSOCK,\n+        EWOULDBLOCK,\n+    };\n+    assert(buf != nullptr || len == 0);\n+    if (len == 0 || m_fuzzed_data_provider.ConsumeBool()) {\n+        const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        if (r == -1) {\n+            SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n+        }\n+        return r;\n+    }\n+    std::vector<uint8_t> random_bytes;\n+    bool pad_to_len_bytes{m_fuzzed_data_provider.ConsumeBool()};\n+    if (m_peek_data.has_value()) {\n+        // `MSG_PEEK` was used in the preceding `Recv()` call, return `m_peek_data`.\n+        random_bytes.assign({m_peek_data.value()});\n+        if ((flags & MSG_PEEK) == 0) {\n+            m_peek_data.reset();\n+        }\n+        pad_to_len_bytes = false;\n+    } else if ((flags & MSG_PEEK) != 0) {\n+        // New call with `MSG_PEEK`.\n+        random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(1);\n+        if (!random_bytes.empty()) {\n+            m_peek_data = random_bytes[0];\n+            pad_to_len_bytes = false;\n+        }\n+    } else {\n+        random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(\n+            m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, len));\n+    }\n+    if (random_bytes.empty()) {\n+        const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        if (r == -1) {\n+            SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n+        }\n+        return r;\n+    }\n+    std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+    if (pad_to_len_bytes) {\n+        if (len > random_bytes.size()) {\n+            std::memset((char*)buf + random_bytes.size(), 0, len - random_bytes.size());\n+        }\n+        return len;\n+    }\n+    if (m_fuzzed_data_provider.ConsumeBool() && std::getenv(\"FUZZED_SOCKET_FAKE_LATENCY\") != nullptr) {\n+        std::this_thread::sleep_for(std::chrono::milliseconds{2});\n+    }\n+    return random_bytes.size();\n+}\n+\n+int FuzzedSock::Connect(const sockaddr*, socklen_t) const\n+{\n+    // Have a permanent error at connect_errnos[0] because when the fuzzed data is exhausted\n+    // SetFuzzedErrNo() will always return the first element and we want to avoid Connect()\n+    // returning -1 and setting errno to EAGAIN repeatedly.\n+    constexpr std::array connect_errnos{\n+        ECONNREFUSED,\n+        EAGAIN,\n+        ECONNRESET,\n+        EHOSTUNREACH,\n+        EINPROGRESS,\n+        EINTR,\n+        ENETUNREACH,\n+        ETIMEDOUT,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, connect_errnos);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n+{\n+    constexpr std::array getsockopt_errnos{\n+        ENOMEM,\n+        ENOBUFS,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, getsockopt_errnos);\n+        return -1;\n+    }\n+    if (opt_val == nullptr) {\n+        return 0;\n+    }\n+    std::memcpy(opt_val,\n+                ConsumeFixedLengthByteVector(m_fuzzed_data_provider, *opt_len).data(),\n+                *opt_len);\n+    return 0;\n+}\n+\n+bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n+{\n+    constexpr std::array wait_errnos{\n+        EBADF,\n+        EINTR,\n+        EINVAL,\n+    };\n     if (!m_fuzzed_data_provider.ConsumeBool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r608495069",
      "id" : 608495069,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODQ5NTA2OQ==",
      "original_commit_id" : "d2e8d121eff98f9bbc3f15977bfb1dda9a27245a",
      "original_line" : 181,
      "original_position" : 176,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 629795363,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T06:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608495069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r608502130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608502130"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-07T09:43:05Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();\n+}\n+\n+FuzzedSock::~FuzzedSock()\n+{\n+    // Sock::~Sock() will be called after FuzzedSock::~FuzzedSock() and it will call\n+    // Sock::Reset() (not FuzzedSock::Reset()!) which will call CloseSocket(m_socket).\n+    // Avoid closing an arbitrary file descriptor (m_socket is just a random number which\n+    // may concide with a real opened file descriptor).\n+    Reset();\n+}\n+\n+FuzzedSock& FuzzedSock::operator=(Sock&& other)\n+{\n+    assert(false && \"Move of Sock into FuzzedSock not allowed.\");\n+    return *this;\n+}\n+\n+void FuzzedSock::Reset()\n+{\n+    m_socket = INVALID_SOCKET;\n+}\n+\n+ssize_t FuzzedSock::Send(const void* data, size_t len, int flags) const\n+{\n+    constexpr std::array send_errnos{\n+        EACCES,\n+        EAGAIN,\n+        EALREADY,\n+        EBADF,\n+        ECONNRESET,\n+        EDESTADDRREQ,\n+        EFAULT,\n+        EINTR,\n+        EINVAL,\n+        EISCONN,\n+        EMSGSIZE,\n+        ENOBUFS,\n+        ENOMEM,\n+        ENOTCONN,\n+        ENOTSOCK,\n+        EOPNOTSUPP,\n+        EPIPE,\n+        EWOULDBLOCK,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        return len;\n+    }\n+    const ssize_t r = m_fuzzed_data_provider.ConsumeIntegralInRange<ssize_t>(-1, len);\n+    if (r == -1) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, send_errnos);\n+    }\n+    return r;\n+}\n+\n+ssize_t FuzzedSock::Recv(void* buf, size_t len, int flags) const\n+{\n+    // Have a permanent error at recv_errnos[0] because when the fuzzed data is exhausted\n+    // SetFuzzedErrNo() will always return the first element and we want to avoid Recv()\n+    // returning -1 and setting errno to EAGAIN repeatedly.\n+    constexpr std::array recv_errnos{\n+        ECONNREFUSED,\n+        EAGAIN,\n+        EBADF,\n+        EFAULT,\n+        EINTR,\n+        EINVAL,\n+        ENOMEM,\n+        ENOTCONN,\n+        ENOTSOCK,\n+        EWOULDBLOCK,\n+    };\n+    assert(buf != nullptr || len == 0);\n+    if (len == 0 || m_fuzzed_data_provider.ConsumeBool()) {\n+        const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        if (r == -1) {\n+            SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n+        }\n+        return r;\n+    }\n+    std::vector<uint8_t> random_bytes;\n+    bool pad_to_len_bytes{m_fuzzed_data_provider.ConsumeBool()};\n+    if (m_peek_data.has_value()) {\n+        // `MSG_PEEK` was used in the preceding `Recv()` call, return `m_peek_data`.\n+        random_bytes.assign({m_peek_data.value()});\n+        if ((flags & MSG_PEEK) == 0) {\n+            m_peek_data.reset();\n+        }\n+        pad_to_len_bytes = false;\n+    } else if ((flags & MSG_PEEK) != 0) {\n+        // New call with `MSG_PEEK`.\n+        random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(1);\n+        if (!random_bytes.empty()) {\n+            m_peek_data = random_bytes[0];\n+            pad_to_len_bytes = false;\n+        }\n+    } else {\n+        random_bytes = m_fuzzed_data_provider.ConsumeBytes<uint8_t>(\n+            m_fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, len));\n+    }\n+    if (random_bytes.empty()) {\n+        const ssize_t r = m_fuzzed_data_provider.ConsumeBool() ? 0 : -1;\n+        if (r == -1) {\n+            SetFuzzedErrNo(m_fuzzed_data_provider, recv_errnos);\n+        }\n+        return r;\n+    }\n+    std::memcpy(buf, random_bytes.data(), random_bytes.size());\n+    if (pad_to_len_bytes) {\n+        if (len > random_bytes.size()) {\n+            std::memset((char*)buf + random_bytes.size(), 0, len - random_bytes.size());\n+        }\n+        return len;\n+    }\n+    if (m_fuzzed_data_provider.ConsumeBool() && std::getenv(\"FUZZED_SOCKET_FAKE_LATENCY\") != nullptr) {\n+        std::this_thread::sleep_for(std::chrono::milliseconds{2});\n+    }\n+    return random_bytes.size();\n+}\n+\n+int FuzzedSock::Connect(const sockaddr*, socklen_t) const\n+{\n+    // Have a permanent error at connect_errnos[0] because when the fuzzed data is exhausted\n+    // SetFuzzedErrNo() will always return the first element and we want to avoid Connect()\n+    // returning -1 and setting errno to EAGAIN repeatedly.\n+    constexpr std::array connect_errnos{\n+        ECONNREFUSED,\n+        EAGAIN,\n+        ECONNRESET,\n+        EHOSTUNREACH,\n+        EINPROGRESS,\n+        EINTR,\n+        ENETUNREACH,\n+        ETIMEDOUT,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, connect_errnos);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n+int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n+{\n+    constexpr std::array getsockopt_errnos{\n+        ENOMEM,\n+        ENOBUFS,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, getsockopt_errnos);\n+        return -1;\n+    }\n+    if (opt_val == nullptr) {\n+        return 0;\n+    }\n+    std::memcpy(opt_val,\n+                ConsumeFixedLengthByteVector(m_fuzzed_data_provider, *opt_len).data(),\n+                *opt_len);\n+    return 0;\n+}\n+\n+bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n+{\n+    constexpr std::array wait_errnos{\n+        EBADF,\n+        EINTR,\n+        EINVAL,\n+    };\n     if (!m_fuzzed_data_provider.ConsumeBool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r608502130",
      "id" : 608502130,
      "in_reply_to_id" : 608495069,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODUwMjEzMA==",
      "original_commit_id" : "d2e8d121eff98f9bbc3f15977bfb1dda9a27245a",
      "original_line" : 181,
      "original_position" : 176,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 629804936,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T06:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608502130",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Can the uninitialized read also happen in i2p? (The `Wait` return code is ignored here):\r\n\r\nRight! Addressed in https://github.com/bitcoin/bitcoin/pull/21631.\r\n\r\n",
      "created_at" : "2021-04-07T12:20:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-814869328",
      "id" : 814869328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDg2OTMyOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-07T12:20:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814869328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Consider adding `[[nodiscard]]` to `Wait`: such an annotation would likely have saved us from the uninitialized read reported in #21617.\r\n\r\n`[[nodiscard]]` is great for functions where an ignored return value is likely to be unintentional (like in this case!). I think we underuse `[[nodiscard]]` :)",
      "created_at" : "2021-04-07T21:00:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-815259976",
      "id" : 815259976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNTI1OTk3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-07T21:02:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/815259976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "review ACK 841905bb61e34faa97b34f4f0c97f7581092a988 ð°\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreview ACK 841905bb61e34faa97b34f4f0c97f7581092a988 ð°\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUhL0Av/boScIgVINXDYMJ262ndgfw3HxUyP9JYZLZ/LFDjDhnuLCoBYqfnGvs63\r\nu8DZKbJoFtxjyHkasgOMgWindvj9ae/qzTNkLSBoT8Z6oWoooRhmjawvWXCj2OhO\r\nTxfqVpY9FtcpnXMHZUWN3nx8qbGeAkhdoQ8dB3V0tCa1N+74taaLB1GmgcaJzy/8\r\nMftf7AymvV/lgWSvZjcIOv1JoXKqw2vEYEkDUoXJuVyiVeqZXzYPeT/ZAgFrlQed\r\nui3KjNa8RT/VGa4+rQee6rl76oSUcjBBRiAw+nRGpi4J3cxu15yHoD/ETR0OVow3\r\nz0d//mhKHbn6Pyn4tqJ23ple4/JlFRgAuZBEBPYcfxVUYBfPNHgOiomoIKA5fLnK\r\nByJcIa0hHsPVMy54bzXHMrPyDaFeXw/563/lPsJt9IgJ3o73B3hQ0PGbtvmZe3FH\r\nK4lSSuxOWBNdowECW0qMweSH36kzrB9KQPvF2ov+KGNbd5j8ErB8M5GtpLcMy4mq\r\nRBX26q3v\r\n=eXO6\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `3f87a5b288e93fbd4eb780ede4aca90eea4b994dd7a1d9c2be7101c3fbf5173f  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401083f87a5b288e93fbd4eb780ede4aca90eea4b994dd7a1d9c2be7101c3fbf5173ff010b40e6c8693186982bc0cc081a1a4fde508fff01009601bd37e4b475ebcc7d5605e572f0608f104606ea05cf00800a9024a9ed9604f0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0105f4a4d329b5147a76f51495f7b8f600b08f104606eae35f0087712fdad601624120083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010c397e06b5949ef871327c59551b4e26c08f104606eae34f008d0dca29cb01ecf0d0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010d1a4c1e228623ac205744e375901212c08f104606eae35f008a742e6036fa7ac750083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2021-04-08T07:18:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-815515930",
      "id" : 815515930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNTUxNTkzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-08T07:18:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/815515930",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift, I will do `[[nodiscard]]` in a separate PR, once #21631 is merged.",
      "created_at" : "2021-04-09T12:17:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-816641699",
      "id" : 816641699,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNjY0MTY5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-09T12:17:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816641699",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610694541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610694541"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not changed in this PR, but is there any scenario where we want `m_socket !=  INVALID_SOCKET` here?\r\n\r\nOtherwise I'd prefer going with `INVALID_SOCKET`. Perhaps `Sock::m_socket` could be default initialized to `INVALID_SOCKET`. That should be a safe default.",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-09T14:56:18Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n-    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610694541",
      "id" : 610694541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDY5NDU0MQ==",
      "original_commit_id" : "841905bb61e34faa97b34f4f0c97f7581092a988",
      "original_line" : 13,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 632506650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T06:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610694541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610715093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610715093"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Normally we want the fuzzed socket's `m_socket` to be `!= INVALID_SOCKET`, otherwise a code that does `if (sock.Get() == INVALID_SOCKET)` will \"misbehave\" when mocked.",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-09T15:23:53Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n-    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610715093",
      "id" : 610715093,
      "in_reply_to_id" : 610694541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDcxNTA5Mw==",
      "original_commit_id" : "841905bb61e34faa97b34f4f0c97f7581092a988",
      "original_line" : 13,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 632533922,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T06:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610715093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610733459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610733459"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@vasild Oh, I didn't think about the possibility to peek at `m_socket` via `Get()`. But then I guess we want two cases: 1.)  `m_socket == INVALID_SOCKET`, and 2.) `m_socket != INVALID_SOCKET` where `m_socket` is a very high number which is unlikely to coincide with a real opened file descriptor?\r\n\r\nThe current code allows `m_socket ` to be set to low numbers such as `0`, `1`, `2`, `3`, etc which may be problematic :)",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-09T15:50:07Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n-    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610733459",
      "id" : 610733459,
      "in_reply_to_id" : 610694541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDczMzQ1OQ==",
      "original_commit_id" : "841905bb61e34faa97b34f4f0c97f7581092a988",
      "original_line" : 13,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 632558349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T06:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610733459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610737620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610737620"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps `m_socket = fuzzed_data_provider.ConsumeIntegralInRange<SOCKET>(INVALID_SOCKET - 1, INVALID_SOCKET)`?",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-09T15:56:20Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n-    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r610737620",
      "id" : 610737620,
      "in_reply_to_id" : 610694541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDczNzYyMA==",
      "original_commit_id" : "841905bb61e34faa97b34f4f0c97f7581092a988",
      "original_line" : 13,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 632564418,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T06:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610737620",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r611413951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611413951"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right! And we can do even better:\r\n\r\n* add a method to check if the `Sock` object \"owns\" a socket, similar to [`std::unique_ptr::operator bool()`](https://en.cppreference.com/w/cpp/memory/unique_ptr/operator_bool) so that callers don't do `Get() == INVALID_SOCKET`.\r\n* Add wrapper methods for `getsockname()`, `setsockopt()`, `bind()` and `listen()`. That way more code will be mockable, but more importantly - then nobody would need to call `Sock::Get()` anymore so the value of `m_socket` will remain \"hidden\" within the `Sock` class.",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-12T08:09:01Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n-    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r611413951",
      "id" : 611413951,
      "in_reply_to_id" : 610694541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTQxMzk1MQ==",
      "original_commit_id" : "841905bb61e34faa97b34f4f0c97f7581092a988",
      "original_line" : 13,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 633250344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T06:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611413951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r611456364"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611456364"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@vasild Sounds good! Until we have that in place I think it makes sense to set `m_socket` to very high numbers here to avoid nasty surprises :)  The thought of random reads/writes to existing open file descriptors is a bit scary even if only from fuzzing code.",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-12T09:09:03Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n-    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r611456364",
      "id" : 611456364,
      "in_reply_to_id" : 610694541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTQ1NjM2NA==",
      "original_commit_id" : "841905bb61e34faa97b34f4f0c97f7581092a988",
      "original_line" : 13,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 633306084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T06:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611456364",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`Sock` methods flagged with `[[nodiscard]]` in https://github.com/bitcoin/bitcoin/pull/21659.",
      "created_at" : "2021-04-12T13:53:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-817831550",
      "id" : 817831550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNzgzMTU1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-12T13:53:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/817831550",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2021-04-14T11:59:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-819462801",
      "id" : 819462801,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxOTQ2MjgwMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-15T08:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819462801",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r613781614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613781614"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Low fd values avoided in https://github.com/bitcoin/bitcoin/pull/21677.",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-15T06:10:45Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n-    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r613781614",
      "id" : 613781614,
      "in_reply_to_id" : 610694541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzc4MTYxNA==",
      "original_commit_id" : "841905bb61e34faa97b34f4f0c97f7581092a988",
      "original_line" : 13,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 636301159,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T06:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613781614",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-04-15T06:10:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-820143576",
      "id" : 820143576,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDE0MzU3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-15T06:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820143576",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`841905bb6...549c82ad3`: rebase due to conflicts",
      "created_at" : "2021-04-15T06:53:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-820166117",
      "id" : 820166117,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDE2NjExNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-15T06:53:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820166117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "cr ACK 549c82ad3a34a885ecca37a5f04c36dfbaa95d17: patch looks correct and touches only `src/test/fuzz/`",
      "created_at" : "2021-04-15T07:12:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-820177233",
      "id" : 820177233,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDE3NzIzMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-15T07:12:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820177233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK 549c82ad3a34a885ecca37a5f04c36dfbaa95d17 only change is rebase ð¬\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK 549c82ad3a34a885ecca37a5f04c36dfbaa95d17 only change is rebase ð¬\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjNUwv5AZxj+qkRP+IARG87hMf1liImC+MpuCNqfr2qE2faCtn9+lGilUiSYIMo\r\nTmf4R06QIevh+jlAAbXazLwB7eLrSrFX25dIgQ7f6ijCMXEl8ezcic58WY1K7gF4\r\nOhWm6bjDHYOH6b70fIpAHIXxsZViIJD1N1COqoD999rvFkTkCkREQXIsk1LkHxAJ\r\nCr45GFJ7zSo55WIxV8NSfvUFDftENjlgu0/YB4n6wraIaQ3sNiRe7n45eqVt5Zc2\r\nZ0lnE3+9JwbCZKpsNcJ9C5G24KcIxyc/hbB5qwP+uF58b2ANGry5KJjMEyGJ5TWp\r\nhWWxcjZQq1ZhaEoCOpapKKyTDPckTLfE4TfpJz5h3YbVzEXezT+nUskZoCHTc9b7\r\nOldfw9BF7foMyhS83QOfjDd4POw7rtPaWT7PR0lRAKbXGHjy9PYHpocXoLlvXJPz\r\nasKm+tfedIyfIVO24aRPMnrW22KUFX9Hrd56lqeo21SVHXT22zyz+bcDyNSV8541\r\nzTOdMYVQ\r\n=0nmO\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `fefa9f6ff7ab6d5c5d493fb447f3ba78a5d161e01bf1afb703b033184420ad98  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108fefa9f6ff7ab6d5c5d493fb447f3ba78a5d161e01bf1afb703b033184420ad98f01012aca8e4fe809b9dfa37cb77dd7b489a08fff01007a94ec917e7259d7b7307f41802e4be08f1046077fd5af0083962d472f42a7a4b0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01074f29f76de231f8ff5df58ad84c1400f08f1046077fd5bf00833b014daa707c5830083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff0107a4bf0538af257c4396f3c35096e327208f1046077fd5bf008ebca33857411737d0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f01083ad3f59b9b8531276436fb5ec0eb97008f120ae61ec3ead87d1c6c102ec6502c7cc13e3070156669874b4a66c04ddb0cce0af08f1046077ef80f008ce3e61f62ad5193b0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2021-04-15T08:46:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#issuecomment-820242333",
      "id" : 820242333,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21630",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDI0MjMzMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-15T08:46:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820242333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r614164737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614164737"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Add wrapper methods for ...\r\n\r\nDone in https://github.com/bitcoin/bitcoin/pull/21700",
      "commit_id" : "549c82ad3a34a885ecca37a5f04c36dfbaa95d17",
      "created_at" : "2021-04-15T15:19:45Z",
      "diff_hunk" : "@@ -7,15 +7,196 @@\n #include <util/rbf.h>\n #include <version.h>\n \n-bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred ) const\n+FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n+    : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n-    if (!m_fuzzed_data_provider.ConsumeBool()) {\n+    m_socket = fuzzed_data_provider.ConsumeIntegral<SOCKET>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21630#discussion_r614164737",
      "id" : 614164737,
      "in_reply_to_id" : 610694541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDE2NDczNw==",
      "original_commit_id" : "841905bb61e34faa97b34f4f0c97f7581092a988",
      "original_line" : 13,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : null,
      "pull_request_review_id" : 636818091,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21630",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-15T15:19:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614164737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
