[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It's great for this to be removing the recursive locks in 09c924d3beb56a6b64d8855b1818b6e73c40ec0d and 5b8587f0bf5076d6651ec67d4a941034b5287429. Also annotating CChainState::m_chain in 8257e9ab7592a7fe459089f021053c7740004817 makes a lot of sense.\r\n\r\nThe thing I don't understand is what bug is prevented by making `m_active_chainstate` `std::atomic<CChainState*>` instead of `CChainState*`? What bugs are prevented by adding `LOCK(m_cs_chainstates);` or having `m_cs_chainstates` exist at all?\r\n\r\nNot putting EXCLUSIVE_LOCKS_REQUIRED(cs_main) on ChainstateManager methods seems like Six Flags saying congratulations, we're waiving the $100 fee to get into the park, we're just going to charge you $100 the first time you get onto any ride. It seems like this could only be appealing if you wanted to go to a `CChainState` theme park without trying any rides (accessing any data inside).\r\n",
      "created_at" : "2021-04-06T20:19:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-814412610",
      "id" : 814412610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDQxMjYxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-06T20:20:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814412610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21789 (refactor: Remove ::Params() global from CChainState by MarcoFalke)\n* #21584 (Fix assumeutxo crash due to invalid base_blockhash by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-04-06T23:51:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-814504792",
      "id" : 814504792,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDUwNDc5Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-12T16:32:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814504792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the quick look @ryanofsky. \r\n\r\n> The thing I don't understand is what bug is prevented by making m_active_chainstate std::atomic<CChainState*> instead of CChainState*? What bugs are prevented by adding LOCK(m_cs_chainstates); or having m_cs_chainstates exist at all?\r\n\r\nStrictly speaking, I don't think there's a difference in bugs between this approach and just repurposing `cs_main` to guard this stuff. But there are a number of usability/maybe-performance arguments. I think the major arguments are:\r\n- `cs_main` is a lock that's used for many different things, and eventually (I think?) we want to break it up into more granular, specified locks - though I could be wrong about that,\r\n- it's kind of nice not having to worry callers about *any* locks if indeed this `std::atomic` approach works in the way that I claim it does, because....\r\n- otherwise, if we apply a `GUARDED_BY(::cs_main)` to `m_active_chainstate`, we'll need to do [awkward stuff like temporarily holding `cs_main`](https://github.com/bitcoin/bitcoin/pull/17737/files#diff-b1e19192258d83199d8adaa5ac31f067af98f63554bfdd679bd8e8073815e69dR713-R722) to acquire the active chainstate before we call `ActivateBestChain()`, since you can't go into ABC holding cs_main.\r\n\r\nI think your Six Flags analogy is both entertaining and true (in a strict sense), but if everyone generally agrees that we eventually need to break up `cs_main` to avoid unnecessary lock contention, then I think these changes are a step in that direction.\r\n\r\nBut otherwise I'm happy to separate out the commits that you mention and just annotate everything with `cs_main` if it makes more sense for that lock to live on in its spirit of \"I lock every damn thing related to chainstate,\" which may be easier to reason about than having three or four more granular locks running around.\r\n\r\nBut it does seem appealing to decouple, say, block storage locking from chain locking so that we can do things like prune while continuing validation. And longer term I suspect that each chainstate instance will want its own little cs_main so that we can do various chainstate operations in parallel should something like utreexo come around.",
      "created_at" : "2021-04-07T02:08:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-814548722",
      "id" : 814548722,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNDU0ODcyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-07T02:08:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814548722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Will review in more detail, and I'm all for lock granularity if locks are independent. But if we're just turning one lock into two dependent locks where you acquire one lock, release it, then always acquire the other lock, it seems pointlessly complex. It increases the number of states things can be in and makes thread safety annotations less likely to catch race conditions. If there is theoretically a place where having these two locks could be better for performance, I would be curious to know where it is. The ActivateBestChain example just seems like a case of weird code organization that should be cleaned up, not a case where two locks make more sense for code as it is executed.\r\n\r\nI think the clearest thing would be for this low level code not to have any synchronization: no locks or atomics, just plain annotations stating locking assumptions so higher level code can call it correctly. I've suggested this before https://github.com/bitcoin/bitcoin/pull/19806#pullrequestreview-584279133, and it can be done separately from this PR. This PR does make other improvements, and I'm happy with all the changes, and planning to review it.\r\n\r\n\r\n",
      "created_at" : "2021-04-08T21:28:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-816222195",
      "id" : 816222195,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNjIyMjE5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-08T21:28:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/816222195",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I haven't read everything yet, and plan on doing it soon. Q for you: Does this mean that even if we hold `::cs_main`, we won't be sure that the `m_active_chainstate` won't change from under us?",
      "created_at" : "2021-04-13T01:51:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-818372304",
      "id" : 818372304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxODM3MjMwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-13T01:51:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818372304",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Good points @ryanofsky @dongcarl. After digesting this a little, I actually think that both this approach *and* our current approach have bugs.\r\n\r\nConsider the case where `ActivateSnapshot()` is called [at this moment during `ProcessNewBlock()`](https://github.com/jamesob/bitcoin/blob/c47a00d3de4ac3e62d3eee215f6180d4f3170dfb/src/validation.cpp#L3840). Neither a `cs_main` hold nor the `atomic` approach here for guarding the contents of `m_active_chainstate` will prevent a different active chainstate from being used in the contents of PNB above this line, creating a situation where we've called `AcceptBlock()` on a different chainstate than the one we've called `ActivateBestChain()` on.\r\n\r\nThe narrow solution in this case is maybe obviously to grab a single chainstate at the top of the function (instead of `calling` `ActiveChainstate()` for each usage), but I'm trying to think about what the right arrangement of locks and annotations would be to prevent this situation in general.",
      "created_at" : "2021-04-13T15:12:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-818814730",
      "id" : 818814730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxODgxNDczMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-13T15:12:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818814730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The narrow solution in this case is maybe obviously to grab a single chainstate at the top of the function (instead of `calling` `ActiveChainstate()` for each usage)\r\n\r\nYes, please. This was on my unimplemented review suggestion followup list. https://github.com/bitcoin/bitcoin/pull/20749#discussion_r560979259 https://github.com/bitcoin/bitcoin/pull/20749#pullrequestreview-578845627 https://github.com/bitcoin/bitcoin/pull/21025#pullrequestreview-581735705 \"Best would be to have a CChainState* chain_state local variable that is initialized while cs_main is held above, and then used here.\"\r\n\r\n> but I'm trying to think about what the right arrangement of locks and annotations would be to prevent this situation in general.\r\n\r\nIt seems to me replacing synchronization with annotations in ChainstateManager (removing the locks and atomic and adding EXCLUSIVE_LOCKS_REQUIRED(cs_main) as suggested) would ensure callers use it correctly, or at least have to think about using it correctly.",
      "created_at" : "2021-04-13T15:40:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-818836912",
      "id" : 818836912,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxODgzNjkxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-13T15:40:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818836912",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Offline thread:\r\n\r\n\\<james>: I think we need cs_active_chainstate or something that functions like PNB either acquire or are annotated with to prevent the active chainstate from being swapped out during their usage\r\n\r\n\\<russ>: I'm not trying to claim adding lock annotations will prevent all Chainstatemanger callers from being buggy and wrongly assuming chainstate doesn't change when they didn't lock it. I don't think there is anything Chainstatemanager can do to prevent that unless it's going to go into the kernel and freeze all running threads. My claim is just that bugs are less likely if locking cs_main locks the chainstate and callers are forced to lock cs_main and thinking about locking when they use ChainstateManager\r\n\r\n\\<james>: The kind of sad thing is that that swap-out only happens once during runtime (i.e. when ActivateSnapshot() is called) and really we could avoid a lot of this mess if we restricted snapshots to being loaded at init time\r\n\r\n\\<russ>: I don't see what's that complicated about this. If you don't want the active chainstate to change, then you should lock cs_main. If you don't care whether the active chainstate changes then you can take a reference to the chainstate and not lock cs_main.",
      "created_at" : "2021-04-14T17:05:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-819675825",
      "id" : 819675825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxOTY3NTgyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-14T17:05:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819675825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "If there is a case where it's neccessary for code to release cs_main but prevent the active chain from changing would suggest a condition variable:\r\n\r\n```c++\r\nbool m_lock_chainstate = false;\r\nstd::condition_variable m_lock_chainstate_cv;\r\n```\r\n\r\nThen in the code that wants to update the chainstate:\r\n\r\n```c++\r\nlock_chainstate_cv.wait(cs_main, []{return !lock_chainstate;});\r\n```\r\n\r\nAnd the code that wants to lock the chainstate without holding cs_main:\r\n\r\n```c++\r\nm_lock_chainstate = true;\r\nm_lock_chainstate_cv.notify_all();\r\n\r\n...\r\n\r\nm_lock_chainstate = false;\r\nm_lock_chainstate_cv.notify_all()\r\n```",
      "created_at" : "2021-04-14T17:11:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-819680129",
      "id" : 819680129,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxOTY4MDEyOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-14T17:11:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819680129",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Actually I guess that could be equivalent to your [active_chainstate](https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-819675825) mutex if it using manual locking instead of a scoped lock. So maybe I'll arrive at the same conclusion as you from a different angle. It just seems like there are a lot of solutions here, and there shouldn't be any conflict between a good solution and one that uses compiler thread safety annotations",
      "created_at" : "2021-04-14T17:20:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-819685974",
      "id" : 819685974,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxOTY4NTk3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-14T17:22:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819685974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I haven't looked at the code here yet, but I want to respond to a couple of the points raised in the discussion here:\r\n\r\n> Not putting EXCLUSIVE_LOCKS_REQUIRED(cs_main) on ChainstateManager methods seems like Six Flags saying congratulations, we're waiving the $100 fee to get into the park, we're just going to charge you $100 the first time you get onto any ride. It seems like this could only be appealing if you wanted to go to a CChainState theme park without trying any rides (accessing any data inside).\r\n\r\n> I think the clearest thing would be for this low level code not to have any synchronization: no locks or atomics, just plain annotations stating locking assumptions so higher level code can call it correctly.\r\n\r\nMost of the client code (eg in net_processing, rpc, etc) shouldn't need to lock chainman in most cases. Usually it's just trying to read a single piece of data (whether we're in IBD, what the current height is, fetch a CBlockIndex pointer to the tip, etc). The higher level code shouldn't have to concern itself with locks in those cases, and in fact those operations can be made lock-free by using atomics to cache the data (as `IsInitialBlockDownload()` used to do, but now sadly requires cs_main in most cases). Removing cs_main locks from the rpc methods and the GUI's `node/interface` methods would ensure that RPC/GUI is never blocking validation from doing useful work. Reducing cs_main usage in net_processing would open the possibility to parallelizing IBD (either with multiple net_processing threads or a separate validation thread).\r\n\r\nThere are also cases where the client code _does_ want to carry out multiple operations atomically on chainman. For those cases, I think it makes sense to expose `cs_main` to the caller and enforce it with annotations.",
      "created_at" : "2021-04-15T10:53:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-820330794",
      "id" : 820330794,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDMzMDc5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-15T10:53:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820330794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Most of the client code (eg in net_processing, rpc, etc) shouldn't need to lock chainman in most cases. Usually it's just trying to read a single piece of data (whether we're in IBD, what the current height is, fetch a CBlockIndex pointer to the tip, etc). \r\n\r\nYes, I think we are on the same page. When you just need one piece of data, this is what atomics are for and it makes sense to switch a variable from `T` to `atomic<T>` or `T*` to `atomic<T*>` so you can read it without locking. And for an API:\r\n\r\n```c++\r\nT GetData() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\r\nT GetCachedData();\r\n```\r\n\r\nis nice. But you can make individual variables atomic or not without affecting anything else more broadly. I do think it makes sense to delay switching a variable from `T` to `atomic<T>` until you have at least one piece of code that's reading it without a lock.",
      "created_at" : "2021-04-15T12:09:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-820373026",
      "id" : 820373026,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDM3MzAyNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-15T12:09:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820373026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nðµï¸ @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
      "created_at" : "2021-05-03T09:32:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-831141850",
      "id" : 831141850,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMTE0MTg1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-03T09:32:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831141850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-12T20:46:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21620#issuecomment-840085400",
      "id" : 840085400,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0MDA4NTQwMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-12T20:46:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/840085400",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
