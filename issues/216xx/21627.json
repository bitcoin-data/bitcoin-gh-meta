{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\n\r\nWe detected a potential race on the global variable [`fHavePruned`][fHavePruned] with a static data race detection tool.\r\n\r\nBecause the report is from a static analysis tool,  we do not have a concrete execution or trace, but we have reviewed the report and are reasonably confident this variable can be accessed in parallel and is not guarded by any common locks.\r\n\r\nWe are not able to confirm 100% that this race is real, or what impacts it may have on the program, but we decided to report it just to be safe.  \r\n\r\n#### Writing Thread\r\nThe flag can be set to true by the thread spawned at [`init.cpp:1883`](https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/init.cpp#L1883)\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/init.cpp#L1883-L1885\r\n\r\nThis thread can call [`ThreadImport`][ThreadImport] -> [`LoadExternalBlockFile`][LoadExternalBlockFile] -> [`AcceptBlock`][AcceptBlock] -> [`FlushStateToDisk`][FlushStateToDisk]\r\n\r\nAnd the `FlushStateToDisk` function can write to the `fHavePruned` flag.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/validation.cpp#L2311\r\n\r\n\r\n[fHavePruned]: https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/validation.cpp#L139\r\n[ThreadImport]: https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/init.cpp#L1884\r\n[LoadExternalBlockFile]: https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/init.cpp#L715\r\n[AcceptBlock]: https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/validation.cpp#L4717\r\n[FlushStateToDisk]: https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/validation.cpp#L3807\r\n\r\n#### Reading Thread\r\n\r\nThe [`fHavePruned`][fHavePruned] flag can be read as part of the REST HTTP handler [`rest_block_extended`](https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/rest.cpp#L300) which registered at [`rest.cpp:690`](\r\nhttps://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/rest.cpp#L672-L693).\r\n\r\nFrom there the handler can call [`rest_block`][rest_block] -> [`blockToJSON`][blockToJSON] -> [`IsBlockPruned`][isBlockPruned]\r\n\r\nAnd `IsBlockPruned` will read `fHavePruned`\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/validation.h#L1026\r\n\r\n[isBlockPruned]: https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/rpc/blockchain.cpp#L167\r\n[blockToJSON]: https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/rest.cpp#L285\r\n[rest_block]: https://github.com/bitcoin/bitcoin/blob/9be7fe4849310884294669b019dd8300f69bc334/src/rest.cpp#L300\r\n\r\n**Expected behavior**\r\n\r\nNo threads reading and writing to the same variable without synchronization.\r\n\r\n**Actual behavior**\r\n\r\nIt appears possible for threads to read and write [`fHavePruned`][fHavePruned] in parallel.\r\n\r\n**To reproduce**\r\n\r\nMay be difficult to reproduce consistently as we found the potential race through static analysis and data races can be non-deterministic.\r\n\r\n**System information**\r\n\r\nWe analyzed commit 328aaac80 specifically, but the issue is still present at the time of posting this issue. \r\n\r\nFor reference, here is a screenshot of the report generated by our tool ([Coderrect Scanner](https://coderrect.com/overview/)). I have summarized all the info from this report above.\r\n![Coderrect Scanner Report](https://user-images.githubusercontent.com/25114061/113774750-4f7deb80-96ed-11eb-98e1-b7553a82f001.png)\r\n\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21627/comments",
   "created_at" : "2021-04-06T20:58:58Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21627/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/21627",
   "id" : 851805884,
   "labels" : [
      {
         "color" : "000000",
         "default" : false,
         "description" : null,
         "id" : 219890555,
         "name" : "Block storage",
         "node_id" : "MDU6TGFiZWwyMTk4OTA1NTU=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Block%20storage"
      },
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21627/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU4NTE4MDU4ODQ=",
   "number" : 21627,
   "performed_via_github_app" : null,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Potential data race on fHavePruned flag",
   "updated_at" : "2021-04-06T21:00:56Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21627",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/25114061?v=4",
      "events_url" : "https://api.github.com/users/BradSwain/events{/privacy}",
      "followers_url" : "https://api.github.com/users/BradSwain/followers",
      "following_url" : "https://api.github.com/users/BradSwain/following{/other_user}",
      "gists_url" : "https://api.github.com/users/BradSwain/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/BradSwain",
      "id" : 25114061,
      "login" : "BradSwain",
      "node_id" : "MDQ6VXNlcjI1MTE0MDYx",
      "organizations_url" : "https://api.github.com/users/BradSwain/orgs",
      "received_events_url" : "https://api.github.com/users/BradSwain/received_events",
      "repos_url" : "https://api.github.com/users/BradSwain/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/BradSwain/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/BradSwain/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/BradSwain"
   }
}
