[
   {
      "author_association" : "MEMBER",
      "body" : "Not ready, please review #21062 first.",
      "created_at" : "2021-02-10T17:55:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-776897969",
      "id" : 776897969,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3Njg5Nzk2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-10T17:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776897969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2021-02-10T19:09:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-776943189",
      "id" : 776943189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3Njk0MzE4OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-16T01:56:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776943189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK: very nice to see the mempool logic more thoroughly fuzzed!",
      "created_at" : "2021-02-10T21:06:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-777035750",
      "id" : 777035750,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3NzAzNTc1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-10T21:06:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777035750",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2021-02-11T13:51:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-777472660",
      "id" : 777472660,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3NzQ3MjY2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-11T13:51:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777472660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested ACK e4e253d73007e0b680d2a473327c6fd66de4d86c\r\n\r\n* Very nice to see the mempool logic more thoroughly fuzzed!\r\n* Achieves good coverage quickly.\r\n* Touches only `src/test/fuzz/`.",
      "created_at" : "2021-02-28T20:13:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-787514951",
      "id" : 787514951,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc4NzUxNDk1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-28T20:13:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787514951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "https://bitcoincore.reviews/21142",
      "created_at" : "2021-03-12T08:21:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-797320050",
      "id" : 797320050,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5NzMyMDA1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-12T08:21:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797320050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-03-15T18:54:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-799670491",
      "id" : 799670491,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5OTY3MDQ5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-15T18:54:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799670491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595626635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595626635"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was wondering if RBF'ed transactions would be in `removed`, but then realized it wouldn't hit RBF stuff since you only use inputs from `outpoints`. Maybe add `Assert(res.m_replaced_transactions.size() == 0)`?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T00:20:26Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595626635",
      "id" : 595626635,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYyNjYzNQ==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 178,
      "original_position" : 175,
      "original_start_line" : 174,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595626635",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595631907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595631907"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Naming suggestions for clarity\r\n\r\n```suggestion\r\n        const auto insert_tx = [](auto& created_in_tx, auto& spent_by_tx, const auto& tx) {\r\n            for (size_t i{0}; i < tx->vout.size(); ++i) {\r\n                Assert(created_in_tx.emplace(tx->GetHash(), i).second);\r\n            }\r\n            for (const auto& in : tx->vin) {\r\n                Assert(spent_by_tx.insert(in.prevout).second);\r\n            }\r\n        };\r\n        // Add created outpoints, remove spent outpoints\r\n        {\r\n            std::set<COutPoint> spent_outpoints;\r\n            for (const auto& removed_tx : removed) {\r\n                insert_tx(/* created_in_tx */ spent, /* spent_by_tx */ outpoints, /* tx */ removed_tx);\r\n            }\r\n            for (const auto& added_tx : added) {\r\n                insert_tx(/* created_in_tx */ outpoints, /* spent_by_tx */ spent, /* tx */ added_tx);\r\n            }\r\n            for (const auto& p : spent) {\r\n```",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T00:35:59Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& tx_outs, auto& tx_ins, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(tx_outs.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(tx_ins.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> pop;\n+            for (const auto& r : removed) {\n+                insert_tx(/* tx_outs */ pop, /* tx_ins */ outpoints, /* tx */ r);\n+            }\n+            for (const auto& a : added) {\n+                insert_tx(/* tx_outs */ outpoints, /* tx_ins */ pop, /* tx */ a);\n+            }\n+            for (const auto& p : pop) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595631907",
      "id" : 595631907,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYzMTkwNw==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 198,
      "original_position" : 195,
      "original_start_line" : 178,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595631907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637690"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why does `num_out` need to be in the range [1, outpoints.size()]?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T00:52:52Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637690",
      "id" : 595637690,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYzNzY5MA==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 115,
      "original_position" : 115,
      "original_start_line" : 114,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637917"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why not have an `amount_left` and pull amounts from `ConsumeIntegralInRange<CAmount>(0, amount_left)`?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T00:53:36Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637917",
      "id" : 595637917,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYzNzkxNw==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 140,
      "original_position" : 140,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595643616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595643616"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Question: I know it's a test, but does it make sense for any of these values to be 0? ð® I'm also wondering why 200 is the max instead of something closer to the default values?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T01:10:33Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595643616",
      "id" : 595643616,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY0MzYxNg==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 105,
      "original_position" : 105,
      "original_start_line" : 94,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 613825058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595643616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596090657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596090657"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, renamed `pop` to `spent`. `tx_outs` to `created_by_tx`. `tx_ins` to `spent_by_tx`.",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T14:50:26Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& tx_outs, auto& tx_ins, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(tx_outs.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(tx_ins.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> pop;\n+            for (const auto& r : removed) {\n+                insert_tx(/* tx_outs */ pop, /* tx_ins */ outpoints, /* tx */ r);\n+            }\n+            for (const auto& a : added) {\n+                insert_tx(/* tx_outs */ outpoints, /* tx_ins */ pop, /* tx */ a);\n+            }\n+            for (const auto& p : pop) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596090657",
      "id" : 596090657,
      "in_reply_to_id" : 595631907,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5MDY1Nw==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 198,
      "original_position" : 195,
      "original_start_line" : 178,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614402773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596090657",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091187"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Limited to 2*outputs.size",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T14:50:53Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091187",
      "id" : 596091187,
      "in_reply_to_id" : 595637690,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5MTE4Nw==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 115,
      "original_position" : 115,
      "original_start_line" : 114,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614403360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091996"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Made it to pick the fee instead of the output amounts. They are now all constant for each tx",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T14:51:49Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091996",
      "id" : 596091996,
      "in_reply_to_id" : 595637917,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5MTk5Ng==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 140,
      "original_position" : 140,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614404528,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596094609"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596094609"
         }
      },
      "author_association" : "MEMBER",
      "body" : "* I want to set it small enough so that the fuzz engine can quickly hit the limit without having to produce megabytes of transactions first.\r\n* Changed all maxima to be multiples of the default values, except for maxmempool, which is in [0,200]",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T14:54:35Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596094609",
      "id" : 596094609,
      "in_reply_to_id" : 595643616,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5NDYwOQ==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 105,
      "original_position" : 105,
      "original_start_line" : 94,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614408154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596094609",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596136078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596136078"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\r\n```",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T15:35:39Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596136078",
      "id" : 596136078,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjEzNjA3OA==",
      "original_commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "original_line" : 26,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614472163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596136078",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596146995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596146995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        // Remember all removed and added transactions\r\n```",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T15:44:44Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596146995",
      "id" : 596146995,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjE0Njk5NQ==",
      "original_commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "original_line" : 165,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614472163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596146995",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596156456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596156456"
         }
      },
      "author_association" : "MEMBER",
      "body" : "maybe simplify to\r\n```diff\r\n@@ -159,8 +159,7 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\r\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\r\n-        const bool require_standard = fuzzed_data_provider.ConsumeBool();\r\n-        ::fRequireStandard = require_standard;\r\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\r\n         const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\r\n\r\n@@ -219,8 +218,7 @@ FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\r\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\r\n-        const bool require_standard = fuzzed_data_provider.ConsumeBool();\r\n-        ::fRequireStandard = require_standard;\r\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\r\n         const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\r\n```\r\n",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T15:55:19Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& created_by_tx, auto& consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(created_by_tx.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(consumed_by_tx.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> spent;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ spent, /* consumed_by_tx */ outpoints, /* tx */ removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ outpoints, /* consumed_by_tx */ spent, /* tx */ added_tx);\n+            }\n+            for (const auto& p : spent) {\n+                Assert(outpoints.erase(p) == 1);\n+            }\n+        }\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        txids.push_back(outpoint.hash);\n+    }\n+    CTxMemPool tx_pool;\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const auto mut_tx = ConsumeTransaction(fuzzed_data_provider, txids);\n+\n+        const auto tx = MakeTransactionRef(mut_tx);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596156456",
      "id" : 596156456,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjE1NjQ1Ng==",
      "original_commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "original_line" : 274,
      "original_position" : 223,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614472163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596156456",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Only for tx_pool_standard: https://drahtbot.space/host_reports/DrahtBot/reports/coverage_fuzz/monotree/fa5382241f7943a7/fuzz.coverage/index.html",
      "created_at" : "2021-03-17T20:07:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801399294",
      "id" : 801399294,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMTM5OTI5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-17T20:07:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801399294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596361725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596361725"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Excellent suggestion to add rbf. Done",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-17T20:33:47Z",
      "diff_hunk" : "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596361725",
      "id" : 596361725,
      "in_reply_to_id" : 595626635,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM2MTcyNQ==",
      "original_commit_id" : "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "original_line" : 178,
      "original_position" : 175,
      "original_start_line" : 174,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 614759190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596361725",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I pushed an update for RBF. Will push some more stuff tomorrow :sleeping: ",
      "created_at" : "2021-03-17T20:34:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801424891",
      "id" : 801424891,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMTQyNDg5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-17T20:34:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801424891",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "ACK fa5382241f7943a7395f60a8916e0d71c10d2932\r\n\r\nReviewed the code and ran the fuzz coverage tests before & after running for a few hours. Definitely getting better coverage with this, especially with the mempool/validation files. \r\n\r\n<details>\r\n<summary>Before</summary>\r\n\r\n```\r\n\r\n              Hit     Total  Coverage      \r\nLines:       28292    43939   64.4 %\r\nFunctions:    7835    11651   67.2 %\r\nBranches:   101626   333283   30.5 %\r\n\r\n\r\n                             \r\nFilename                     Line Coverage             Functions               Branches\r\n....\r\ntxmempool.cpp             35.7 %    262 / 734      50.8 %     31 / 61     15.8 %   782 / 4940\r\ntxmempool.h               61.9 %     99 / 160      60.0 %     42 / 70     30.2 %   189 / 626\r\ntxorphanage.cpp           61.7 %     74 / 120      66.7 %      6 / 9      25.0 %   205 / 820\r\ntxorphanage.h            100.0 %      4 / 4       100.0 %      5 / 5      50.0 %     4 / 8\r\ntxrequest.cpp             99.3 %    292 / 294     100.0 %     78 / 78     53.2 %  1330 / 2500\r\nuint256.cpp              100.0 %     32 / 32       60.0 %      6 / 10     32.3 %    62 / 192\r\nuint256.h                100.0 %     54 / 54       92.0 %     46 / 50     41.0 %    77 / 188\r\nundo.h                   100.0 %     22 / 22       59.6 %     28 / 47     30.7 %    54 / 176\r\nvalidation.cpp            45.4 %   1338 / 2945     59.9 %    115 / 192    20.1 %  3992 / 19900\r\nvalidation.h              52.0 %     26 / 50       53.8 %     14 / 26     21.4 %    39 / 182\r\nvalidationinterface.cpp   46.8 %     58 / 124      39.8 %     35 / 88      8.8 %   178 / 2016\r\nvalidationinterface.h     20.0 %      2 / 10       20.0 %      2 / 10          -     0 / 0\r\n...\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>After</summary>\r\n\r\n```\r\n              Hit     Total  Coverage\r\nLines:       28933    43936   65.9 %\r\nFunctions:    7934    11652   68.1 %\r\nBranches:   104236   333473   31.3 %\r\n\r\n\r\n\r\n\r\nFilename                     Line Coverage             Functions               Branches\r\n....\r\ntxmempool.cpp             54.9 %    403 / 734      67.2 %     41 / 61     25.6 %  1267 / 4940\r\ntxmempool.h               66.2 %    106 / 160      65.7 %     46 / 70     31.6 %   198 / 626\r\ntxorphanage.cpp           61.7 %     74 / 120      66.7 %      6 / 9      25.0 %   205 / 820\r\ntxorphanage.h            100.0 %      4 / 4       100.0 %      5 / 5      50.0 %     4 / 8\r\ntxrequest.cpp             99.3 %    292 / 294     100.0 %     78 / 78     53.2 %  1330 / 2500\r\nuint256.cpp              100.0 %     32 / 32       60.0 %      6 / 10     32.3 %    62 / 192\r\nuint256.h                100.0 %     54 / 54       92.0 %     46 / 50     41.0 %    77 / 188\r\nundo.h                   100.0 %     22 / 22       59.6 %     28 / 47     30.7 %    54 / 176\r\nvalidation.cpp            53.9 %   1586 / 2945     65.1 %    125 / 192    25.3 %  5044 / 19900\r\nvalidation.h              66.0 %     33 / 50       69.2 %     18 / 26     27.5 %    50 / 182\r\nvalidationinterface.cpp   81.5 %    101 / 124      71.6 %     63 / 88     19.9 %   402 / 2016\r\nvalidationinterface.h     30.0 %      3 / 10       30.0 %      3 / 10          -     0 / 0\r\n...\r\n```\r\n\r\n</details>",
      "created_at" : "2021-03-18T06:01:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801654114",
      "id" : 801654114,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMTY1NDExNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-18T06:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801654114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10763569?v=4",
         "events_url" : "https://api.github.com/users/AnthonyRonning/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AnthonyRonning/followers",
         "following_url" : "https://api.github.com/users/AnthonyRonning/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AnthonyRonning/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AnthonyRonning",
         "id" : 10763569,
         "login" : "AnthonyRonning",
         "node_id" : "MDQ6VXNlcjEwNzYzNTY5",
         "organizations_url" : "https://api.github.com/users/AnthonyRonning/orgs",
         "received_events_url" : "https://api.github.com/users/AnthonyRonning/received_events",
         "repos_url" : "https://api.github.com/users/AnthonyRonning/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AnthonyRonning/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AnthonyRonning/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AnthonyRonning"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "https://drahtbot.space/host_reports/DrahtBot/reports/coverage_fuzz/monotree/fa6cb809bc934009/fuzz.coverage/index.html",
      "created_at" : "2021-03-18T11:23:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801842171",
      "id" : 801842171,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMTg0MjE3MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-18T13:11:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801842171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596852709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596852709"
         }
      },
      "author_association" : "MEMBER",
      "body" : "thx, done",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-18T13:10:43Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596852709",
      "id" : 596852709,
      "in_reply_to_id" : 596146995,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njg1MjcwOQ==",
      "original_commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "original_line" : 165,
      "original_position" : 156,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 615364745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596852709",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596852807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596852807"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-18T13:10:50Z",
      "diff_hunk" : "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& created_by_tx, auto& consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(created_by_tx.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(consumed_by_tx.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> spent;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ spent, /* consumed_by_tx */ outpoints, /* tx */ removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ outpoints, /* consumed_by_tx */ spent, /* tx */ added_tx);\n+            }\n+            for (const auto& p : spent) {\n+                Assert(outpoints.erase(p) == 1);\n+            }\n+        }\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        txids.push_back(outpoint.hash);\n+    }\n+    CTxMemPool tx_pool;\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const auto mut_tx = ConsumeTransaction(fuzzed_data_provider, txids);\n+\n+        const auto tx = MakeTransactionRef(mut_tx);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596852807",
      "id" : 596852807,
      "in_reply_to_id" : 596156456,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njg1MjgwNw==",
      "original_commit_id" : "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "original_line" : 274,
      "original_position" : 223,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : null,
      "pull_request_review_id" : 615364865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-18T17:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596852807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke as you requested in the review club yesterday, I ran the `tx_pool` fuzzer since then for 20+ hours and didn't see an accepted transaction.\r\n\r\n```diff\r\n         if (accepted) {\r\n             txids.push_back(tx->GetHash());\r\n+            std::cout << \"\\n\\n\\n*********************** SUCCESS ***************************\\n\\n\\n\";\r\n         }\r\n```\r\n\r\n```\r\n#7104574\tNEW    cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 393483/902446 MS: 3 EraseBytes-ChangeByte-CMP- DE: \"\\x01\\x00\\x00\\x00\\x10\\x8b\\x12\\xb3\"-\r\n#7104591\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 70/902446 MS: 1 EraseBytes-\r\n#7104827\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 451/902446 MS: 1 EraseBytes-\r\n#7104855\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 118/902446 MS: 3 CMP-CMP-EraseBytes- DE: \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"-\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\"-\r\n#7105353\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 15731/902446 MS: 2 InsertRepeatedBytes-EraseBytes-\r\n#7107174\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 111/902446 MS: 1 EraseBytes-\r\n#7108811\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 160/902446 MS: 1 EraseBytes-\r\n#7109018\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 5278/902446 MS: 2 InsertByte-EraseBytes-\r\n#7109675\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 42/902446 MS: 2 ChangeBinInt-EraseBytes-\r\n```\r\n",
      "created_at" : "2021-03-18T15:02:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802000364",
      "id" : 802000364,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMjAwMDM2NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-18T15:03:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802000364",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I quickly ran 15kk iterations (double the 7kk iterations of yours) and it did hit a valid tx.\r\n\r\n```\r\n#15766688\tREDUCE cov: 3250 ft: 28506 corp: 8582/1579Kb lim: 4096 exec/s: 2341 rss: 98Mb L: 49/4096 MS: 1 EraseBytes-\r\n```\r\n\r\nHowever, I pushed a patch, where you should see a valid tx within ~100k iterations.\r\n\r\nAll feedback has been addressed, this is now ready for re-ACKs.\r\n",
      "created_at" : "2021-03-18T17:57:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802165733",
      "id" : 802165733,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMjE2NTczMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-18T17:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802165733",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Valid tx within a few seconds with latest push.\r\n\r\n```\r\n#35708\tNEW    cov: 5635 ft: 14652 corp: 159/22Kb lim: 163 exec/s: 2975 rss: 587Mb L: 163/163 MS: 3 ShuffleBytes-InsertRepeatedBytes-CrossOver-\r\n#36093\tREDUCE cov: 5635 ft: 14652 corp: 159/22Kb lim: 163 exec/s: 3007 rss: 587Mb L: 136/163 MS: 5 ChangeBinInt-CrossOver-PersAutoDict-ChangeByte-InsertRepeatedBytes- DE: \"\\x15\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"-\r\n\r\n*********************** SUCCESS ***************************\r\n\r\n\tNEW_FUNC[1/335]: 0x559b1920a260 in std::vector<int, std::allocator<int> >::~vector() /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/stl_vector.h:679\r\n\tNEW_FUNC[2/335]: 0x559b1920a870 in std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl() /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/stl_vector.h:134\r\n```\r\n\r\nEdit: and many valid txs.",
      "created_at" : "2021-03-18T18:59:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802209684",
      "id" : 802209684,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMjIwOTY4NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-18T19:01:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802209684",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "reACK faa9ef49d18da9223220afcc263ac91a74c291a6\r\n\r\nGetting a better overall coverage profile (though I have been running for a lot longer and probably have better seeds by now)\r\n\r\n```\r\nSummary coverage rate:                                              \r\n  lines......: 66.4% (29127 of 43873 lines)                         \r\n  functions..: 68.3% (7960 of 11646 functions)                      \r\n  branches...: 31.5% (104949 of 333689 branches) \r\n```\r\n\r\nPlus got 378 accepted transactions for the `tx_pool` target between try `#65536` & `#131072`. ",
      "created_at" : "2021-03-19T02:40:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802495917",
      "id" : 802495917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMjQ5NTkxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-19T02:40:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802495917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10763569?v=4",
         "events_url" : "https://api.github.com/users/AnthonyRonning/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AnthonyRonning/followers",
         "following_url" : "https://api.github.com/users/AnthonyRonning/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AnthonyRonning/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AnthonyRonning",
         "id" : 10763569,
         "login" : "AnthonyRonning",
         "node_id" : "MDQ6VXNlcjEwNzYzNTY5",
         "organizations_url" : "https://api.github.com/users/AnthonyRonning/orgs",
         "received_events_url" : "https://api.github.com/users/AnthonyRonning/received_events",
         "repos_url" : "https://api.github.com/users/AnthonyRonning/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AnthonyRonning/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AnthonyRonning/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AnthonyRonning"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested ACK faa9ef49d18da9223220afcc263ac91a74c291a6\r\n\r\nVery nice fuzzing harness! Thanks @MarcoFalke!",
      "created_at" : "2021-03-20T23:07:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-803476239",
      "id" : 803476239,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMzQ3NjIzOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-20T23:07:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803476239",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599127042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599127042"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Question: Why can't you use a `static_cast` here instead?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-22T22:50:47Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599127042",
      "id" : 599127042,
      "line" : 99,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTEyNzA0Mg==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 99,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 99,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599127042",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599127881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599127881"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This can just be:\r\n```suggestion\r\n        Assert(amount_view.GetCoin(outpoint, c));\r\n```",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-22T22:52:57Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599127881",
      "id" : 599127881,
      "line" : 106,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTEyNzg4MQ==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : 105,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 106,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 105,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599127881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599143533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599143533"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Question: is the same `g_outpoints_coinbase_init` used for both the tx_pool and tx_pool_standard targets?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-22T23:31:57Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints_rbf.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints_rbf.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            tx_pool.RollingFeeUpdate();\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   tx->GetHash() :\n+                                   PickValue(fuzzed_data_provider, outpoints_rbf).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            tx_pool.PrioritiseTransaction(txid, delta);\n+        }\n+\n+        // Remember all removed and added transactions\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        } else {\n+            // Do not consider rejected transaction removed\n+            removed.erase(tx);\n+        }\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\n+        const auto insert_tx = [](Sets created_by_tx, Sets consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx.vout.size(); ++i) {\n+                for (auto& set : created_by_tx) {\n+                    Assert(set.get().emplace(tx.GetHash(), i).second);\n+                }\n+            }\n+            for (const auto& in : tx.vin) {\n+                for (auto& set : consumed_by_tx) {\n+                    Assert(set.get().insert(in.prevout).second);\n+                }\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            // Outpoints that no longer exist at all\n+            std::set<COutPoint> consumed_erased;\n+            // Outpoints that no longer count toward the total supply\n+            std::set<COutPoint> consumed_supply;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+            }\n+            for (const auto& p : consumed_erased) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+                Assert(outpoints_rbf.erase(p) == 1);\n+            }\n+            for (const auto& p : consumed_supply) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+            }\n+        }\n+    }\n+    WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    const auto info_all = tx_pool.infoAll();\n+    if (!info_all.empty()) {\n+        const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        std::vector<uint256> all_txids;\n+        tx_pool.queryHashes(all_txids);\n+        assert(all_txids.size() < info_all.size());\n+        WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599143533",
      "id" : 599143533,
      "line" : 257,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE0MzUzMw==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 257,
      "original_position" : 257,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 257,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599143533",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599143782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599143782"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Aren't the ones at the beginning the mature ones? \r\nIt could also be more clear to have two sets `g_outpoints_coinbases_mature` and `g_outpoints_coinbases_immature`.\r\n\r\n```suggestion\r\n        txids.push_back(g_outpoints_coinbase_init.at(COINBASE_MATURITY + i).hash);\r\n```",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-22T23:32:43Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints_rbf.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints_rbf.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            tx_pool.RollingFeeUpdate();\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   tx->GetHash() :\n+                                   PickValue(fuzzed_data_provider, outpoints_rbf).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            tx_pool.PrioritiseTransaction(txid, delta);\n+        }\n+\n+        // Remember all removed and added transactions\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        } else {\n+            // Do not consider rejected transaction removed\n+            removed.erase(tx);\n+        }\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\n+        const auto insert_tx = [](Sets created_by_tx, Sets consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx.vout.size(); ++i) {\n+                for (auto& set : created_by_tx) {\n+                    Assert(set.get().emplace(tx.GetHash(), i).second);\n+                }\n+            }\n+            for (const auto& in : tx.vin) {\n+                for (auto& set : consumed_by_tx) {\n+                    Assert(set.get().insert(in.prevout).second);\n+                }\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            // Outpoints that no longer exist at all\n+            std::set<COutPoint> consumed_erased;\n+            // Outpoints that no longer count toward the total supply\n+            std::set<COutPoint> consumed_supply;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+            }\n+            for (const auto& p : consumed_erased) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+                Assert(outpoints_rbf.erase(p) == 1);\n+            }\n+            for (const auto& p : consumed_supply) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+            }\n+        }\n+    }\n+    WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    const auto info_all = tx_pool.infoAll();\n+    if (!info_all.empty()) {\n+        const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        std::vector<uint256> all_txids;\n+        tx_pool.queryHashes(all_txids);\n+        assert(all_txids.size() < info_all.size());\n+        WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        txids.push_back(outpoint.hash);\n+        if (txids.size() >= COINBASE_MATURITY) break;\n+    }\n+    for (int i{0}; i <= 3; ++i) {\n+        // Add some immature and non-existent outpoints\n+        txids.push_back(g_outpoints_coinbase_init.at(i).hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599143782",
      "id" : 599143782,
      "line" : 263,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE0Mzc4Mg==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 263,
      "original_position" : 263,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 263,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599143782",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599148154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599148154"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why not use `PickValue` for this? It could take a bool to PickAndMaybeDelete?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-22T23:45:18Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599148154",
      "id" : 599148154,
      "line" : 134,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE0ODE1NA==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 134,
      "original_position" : 134,
      "original_start_line" : 132,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 134,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 132,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599148154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599149591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599149591"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why not make this a member function of `FuzzedDataProvider` like `PickValueInArray` is?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-22T23:48:54Z",
      "diff_hunk" : "@@ -48,6 +48,16 @@ void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n     return ((i++ == call_index ? callables() : void()), ...);\n }\n \n+template <typename Collection>\n+const auto& PickValue(FuzzedDataProvider& fuzzed_data_provider, const Collection& col)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599149591",
      "id" : 599149591,
      "line" : 52,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE0OTU5MQ==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 52,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.h",
      "position" : 5,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599149591",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599155394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599155394"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems a bit invasive to change all of these mempool members... can you just call something that automatically does `RollingFeeUpdate` like `tx_pool.GetMinFee()`? Or just set the members you need to `protected`?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T00:06:14Z",
      "diff_hunk" : "@@ -476,7 +476,7 @@ enum class MemPoolRemovalReason {\n  */\n class CTxMemPool\n {\n-private:\n+protected:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599155394",
      "id" : 599155394,
      "line" : 479,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE1NTM5NA==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 479,
      "original_position" : 5,
      "original_start_line" : 479,
      "path" : "src/txmempool.h",
      "position" : 5,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 479,
      "start_side" : "LEFT",
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599155394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599157262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599157262"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Add comments for the util functions?  e.g. I think it'd be helpful to document that `ConsumeTransaction` will give a tx that's well-formed but not necessarily valid, and it takes `prevout_txids` as input but won't necessarily use a txid from there.",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T00:11:02Z",
      "diff_hunk" : "@@ -125,11 +135,13 @@ template <typename WeakEnumType, size_t size>\n     return fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(time_min, time_max);\n }\n \n-[[nodiscard]] inline CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n-    return {b.begin(), b.end()};\n-}\n+[[nodiscard]] CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in = 10, const int max_num_out = 10) noexcept;\n+\n+[[nodiscard]] CScriptWitness ConsumeScriptWitness(FuzzedDataProvider& fuzzed_data_provider, const size_t max_stack_elem_size = 32) noexcept;\n+\n+[[nodiscard]] CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096, const bool maybe_p2wsh = false) noexcept;\n+\n+[[nodiscard]] uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599157262",
      "id" : 599157262,
      "line" : 144,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE1NzI2Mg==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 144,
      "original_position" : 32,
      "original_start_line" : 138,
      "path" : "src/test/fuzz/util.h",
      "position" : 32,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 138,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599157262",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599160321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599160321"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In some places you do braced, and in some places you do `=` ð¤· \r\n```suggestion\r\n    for (int i{0}; i < num_in; ++i) {\r\n```",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T00:20:08Z",
      "diff_hunk" : "@@ -23,3 +26,78 @@ void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_v\n         node.m_tx_relay->fRelayTxes = filter_txs;\n     }\n }\n+\n+CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in, const int max_num_out) noexcept\n+{\n+    CMutableTransaction tx_mut;\n+    const auto p2wsh_op_true = fuzzed_data_provider.ConsumeBool();\n+    tx_mut.nVersion = fuzzed_data_provider.ConsumeBool() ?\n+                          CTransaction::CURRENT_VERSION :\n+                          fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    tx_mut.nLockTime = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_in);\n+    const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_out);\n+    for (int i = 0; i < num_in; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599160321",
      "id" : 599160321,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE2MDMyMQ==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 40,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : 27,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599160321",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599165512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599165512"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These comments are confusing ð¢\r\n`outpoints_rbf` includes all spendable outpoints including ones that would be RBFs, but \"RBF-spendable\" sounds like they're only the ones in the mempool.\r\n`outpoints_supply` doesn't actually include all the outpoints that count towards total supply. It doesn't include the mempool inputs which is why we need to add mempool `GetTotalFee` to it...",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T00:36:36Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599165512",
      "id" : 599165512,
      "line" : 88,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE2NTUxMg==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : 85,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 88,
      "pull_request_review_id" : 618037462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 85,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T00:39:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599165512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403634"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wouldn't that make `PickValue` unsuitable for collections that can't erase elements. E.g. `std::array`",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:31:24Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403634",
      "id" : 599403634,
      "in_reply_to_id" : 599148154,
      "line" : 134,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwMzYzNA==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 134,
      "original_position" : 134,
      "original_start_line" : 132,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 134,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 132,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403634",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403815"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403815"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, done in follow-up",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:31:38Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403815",
      "id" : 599403815,
      "in_reply_to_id" : 599127042,
      "line" : 99,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwMzgxNQ==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 99,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 99,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403866"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, done in follow-up",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:31:42Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403866",
      "id" : 599403866,
      "in_reply_to_id" : 599127881,
      "line" : 106,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwMzg2Ng==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : 105,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 106,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 105,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403866",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599407215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599407215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> outpoints_rbf\r\n\r\nHappy to rename if you have suggestions.\r\n\r\n> It doesn't include the mempool inputs which is why we need to add mempool GetTotalFee to it...\r\n\r\nI don't understand what you mean with \"mempool inputs\". `outpoints_supply` does include all outpoints from the mempool. The reason that `GetTotalFee` needs to be added is that the fee in the mempool isn't assigned to an outpoint (yet). The fee is collected in the coinbase transaction in a block, which doesn't exist because this fuzz target doesn't mine any blocks with mempool txs.",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:36:17Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599407215",
      "id" : 599407215,
      "in_reply_to_id" : 599165512,
      "line" : 88,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwNzIxNQ==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : 85,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 88,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 85,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599407215",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599408013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599408013"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:37:19Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints_rbf.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints_rbf.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            tx_pool.RollingFeeUpdate();\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   tx->GetHash() :\n+                                   PickValue(fuzzed_data_provider, outpoints_rbf).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            tx_pool.PrioritiseTransaction(txid, delta);\n+        }\n+\n+        // Remember all removed and added transactions\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        } else {\n+            // Do not consider rejected transaction removed\n+            removed.erase(tx);\n+        }\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\n+        const auto insert_tx = [](Sets created_by_tx, Sets consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx.vout.size(); ++i) {\n+                for (auto& set : created_by_tx) {\n+                    Assert(set.get().emplace(tx.GetHash(), i).second);\n+                }\n+            }\n+            for (const auto& in : tx.vin) {\n+                for (auto& set : consumed_by_tx) {\n+                    Assert(set.get().insert(in.prevout).second);\n+                }\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            // Outpoints that no longer exist at all\n+            std::set<COutPoint> consumed_erased;\n+            // Outpoints that no longer count toward the total supply\n+            std::set<COutPoint> consumed_supply;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+            }\n+            for (const auto& p : consumed_erased) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+                Assert(outpoints_rbf.erase(p) == 1);\n+            }\n+            for (const auto& p : consumed_supply) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+            }\n+        }\n+    }\n+    WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    const auto info_all = tx_pool.infoAll();\n+    if (!info_all.empty()) {\n+        const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        std::vector<uint256> all_txids;\n+        tx_pool.queryHashes(all_txids);\n+        assert(all_txids.size() < info_all.size());\n+        WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599408013",
      "id" : 599408013,
      "in_reply_to_id" : 599143533,
      "line" : 257,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwODAxMw==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 257,
      "original_position" : 257,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 257,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599408013",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599408488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599408488"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ouch :facepalm: . Good catch.",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:37:52Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints_rbf.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints_rbf.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            tx_pool.RollingFeeUpdate();\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   tx->GetHash() :\n+                                   PickValue(fuzzed_data_provider, outpoints_rbf).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            tx_pool.PrioritiseTransaction(txid, delta);\n+        }\n+\n+        // Remember all removed and added transactions\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        } else {\n+            // Do not consider rejected transaction removed\n+            removed.erase(tx);\n+        }\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\n+        const auto insert_tx = [](Sets created_by_tx, Sets consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx.vout.size(); ++i) {\n+                for (auto& set : created_by_tx) {\n+                    Assert(set.get().emplace(tx.GetHash(), i).second);\n+                }\n+            }\n+            for (const auto& in : tx.vin) {\n+                for (auto& set : consumed_by_tx) {\n+                    Assert(set.get().insert(in.prevout).second);\n+                }\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            // Outpoints that no longer exist at all\n+            std::set<COutPoint> consumed_erased;\n+            // Outpoints that no longer count toward the total supply\n+            std::set<COutPoint> consumed_supply;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+            }\n+            for (const auto& p : consumed_erased) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+                Assert(outpoints_rbf.erase(p) == 1);\n+            }\n+            for (const auto& p : consumed_supply) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+            }\n+        }\n+    }\n+    WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    const auto info_all = tx_pool.infoAll();\n+    if (!info_all.empty()) {\n+        const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        std::vector<uint256> all_txids;\n+        tx_pool.queryHashes(all_txids);\n+        assert(all_txids.size() < info_all.size());\n+        WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        txids.push_back(outpoint.hash);\n+        if (txids.size() >= COINBASE_MATURITY) break;\n+    }\n+    for (int i{0}; i <= 3; ++i) {\n+        // Add some immature and non-existent outpoints\n+        txids.push_back(g_outpoints_coinbase_init.at(i).hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599408488",
      "id" : 599408488,
      "in_reply_to_id" : 599143782,
      "line" : 263,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwODQ4OA==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 263,
      "original_position" : 263,
      "original_start_line" : null,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 263,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599408488",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599409795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599409795"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right, this isn't consistent. Though, I'll leave as is for now and remember to write `for (int i{0}; i < ...` in the future.",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:39:43Z",
      "diff_hunk" : "@@ -23,3 +26,78 @@ void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_v\n         node.m_tx_relay->fRelayTxes = filter_txs;\n     }\n }\n+\n+CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in, const int max_num_out) noexcept\n+{\n+    CMutableTransaction tx_mut;\n+    const auto p2wsh_op_true = fuzzed_data_provider.ConsumeBool();\n+    tx_mut.nVersion = fuzzed_data_provider.ConsumeBool() ?\n+                          CTransaction::CURRENT_VERSION :\n+                          fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    tx_mut.nLockTime = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_in);\n+    const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_out);\n+    for (int i = 0; i < num_in; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599409795",
      "id" : 599409795,
      "in_reply_to_id" : 599160321,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwOTc5NQ==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 40,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : 27,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599409795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599410447"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599410447"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`FuzzedDataProvider` is taken from upstream, so someone needs to submit this to upstream first.",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:40:37Z",
      "diff_hunk" : "@@ -48,6 +48,16 @@ void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n     return ((i++ == call_index ? callables() : void()), ...);\n }\n \n+template <typename Collection>\n+const auto& PickValue(FuzzedDataProvider& fuzzed_data_provider, const Collection& col)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599410447",
      "id" : 599410447,
      "in_reply_to_id" : 599149591,
      "line" : 52,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQxMDQ0Nw==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 52,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.h",
      "position" : 5,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599410447",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599413946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599413946"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`tx_pool.GetMinFee` exists early because of `!blockSinceLastRollingFeeBump`, so I can't use that. `protected` as a replacement for `private` seems fine generally, because it allows tests to mock any private member without having to mark each member individually or add a `friend TestClass01` for each class that mocks the mempool. Since mempool isn't derived outside of tests, `protected` shouldn't come with any risks either.",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:45:32Z",
      "diff_hunk" : "@@ -476,7 +476,7 @@ enum class MemPoolRemovalReason {\n  */\n class CTxMemPool\n {\n-private:\n+protected:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599413946",
      "id" : 599413946,
      "in_reply_to_id" : 599155394,
      "line" : 479,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQxMzk0Ng==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 479,
      "original_position" : 5,
      "original_start_line" : 479,
      "path" : "src/txmempool.h",
      "position" : 5,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 479,
      "start_side" : "LEFT",
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599413946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599415562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599415562"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If `prevout_txids` is passed, it should only pick from there. As none of the functions in this file have doxygen comments, so I'll skip them for now. Though, I am more than happy to review a pull adding docs :)",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T09:47:39Z",
      "diff_hunk" : "@@ -125,11 +135,13 @@ template <typename WeakEnumType, size_t size>\n     return fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(time_min, time_max);\n }\n \n-[[nodiscard]] inline CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n-    return {b.begin(), b.end()};\n-}\n+[[nodiscard]] CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in = 10, const int max_num_out = 10) noexcept;\n+\n+[[nodiscard]] CScriptWitness ConsumeScriptWitness(FuzzedDataProvider& fuzzed_data_provider, const size_t max_stack_elem_size = 32) noexcept;\n+\n+[[nodiscard]] CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096, const bool maybe_p2wsh = false) noexcept;\n+\n+[[nodiscard]] uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599415562",
      "id" : 599415562,
      "in_reply_to_id" : 599157262,
      "line" : 144,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQxNTU2Mg==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 144,
      "original_position" : 32,
      "original_start_line" : 138,
      "path" : "src/test/fuzz/util.h",
      "position" : 32,
      "pull_request_review_id" : 618372168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 138,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T09:59:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599415562",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599553077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599553077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why not `for (auto i{0} ...`? :eyes: ",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T13:11:33Z",
      "diff_hunk" : "@@ -23,3 +26,78 @@ void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_v\n         node.m_tx_relay->fRelayTxes = filter_txs;\n     }\n }\n+\n+CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in, const int max_num_out) noexcept\n+{\n+    CMutableTransaction tx_mut;\n+    const auto p2wsh_op_true = fuzzed_data_provider.ConsumeBool();\n+    tx_mut.nVersion = fuzzed_data_provider.ConsumeBool() ?\n+                          CTransaction::CURRENT_VERSION :\n+                          fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    tx_mut.nLockTime = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_in);\n+    const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_out);\n+    for (int i = 0; i < num_in; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599553077",
      "id" : 599553077,
      "in_reply_to_id" : 599160321,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1MzA3Nw==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 40,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : 27,
      "pull_request_review_id" : 618568409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T13:11:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599553077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599555332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599555332"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Isn't it better to not have side-effects from asserts?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T13:14:34Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599555332",
      "id" : 599555332,
      "in_reply_to_id" : 599127881,
      "line" : 106,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1NTMzMg==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 106,
      "original_position" : 106,
      "original_start_line" : 105,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 106,
      "pull_request_review_id" : 618571692,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 105,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T13:14:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599555332",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599558374"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599558374"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`int` is one character shorter :shorts: ",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T13:18:22Z",
      "diff_hunk" : "@@ -23,3 +26,78 @@ void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_v\n         node.m_tx_relay->fRelayTxes = filter_txs;\n     }\n }\n+\n+CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in, const int max_num_out) noexcept\n+{\n+    CMutableTransaction tx_mut;\n+    const auto p2wsh_op_true = fuzzed_data_provider.ConsumeBool();\n+    tx_mut.nVersion = fuzzed_data_provider.ConsumeBool() ?\n+                          CTransaction::CURRENT_VERSION :\n+                          fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    tx_mut.nLockTime = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_in);\n+    const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_out);\n+    for (int i = 0; i < num_in; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599558374",
      "id" : 599558374,
      "in_reply_to_id" : 599160321,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1ODM3NA==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 40,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.cpp",
      "position" : 27,
      "pull_request_review_id" : 618575700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T13:18:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599558374",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599578593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599578593"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh, is it not src/test/fuzz/FuzzedDataProvider.h?",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T13:42:28Z",
      "diff_hunk" : "@@ -48,6 +48,16 @@ void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n     return ((i++ == call_index ? callables() : void()), ...);\n }\n \n+template <typename Collection>\n+const auto& PickValue(FuzzedDataProvider& fuzzed_data_provider, const Collection& col)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599578593",
      "id" : 599578593,
      "in_reply_to_id" : 599149591,
      "line" : 52,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU3ODU5Mw==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 52,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.h",
      "position" : 5,
      "pull_request_review_id" : 618602663,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T13:42:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599578593",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599578827"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599578827"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sure, makes sense ð ",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T13:42:46Z",
      "diff_hunk" : "@@ -476,7 +476,7 @@ enum class MemPoolRemovalReason {\n  */\n class CTxMemPool\n {\n-private:\n+protected:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599578827",
      "id" : 599578827,
      "in_reply_to_id" : 599155394,
      "line" : 479,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU3ODgyNw==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 479,
      "original_position" : 5,
      "original_start_line" : 479,
      "path" : "src/txmempool.h",
      "position" : 5,
      "pull_request_review_id" : 618602965,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 479,
      "start_side" : "LEFT",
      "updated_at" : "2021-03-23T13:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599578827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599579500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599579500"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> outpoints_supply does include all outpoints from the mempool.\r\n\r\nA right ð¤¦ I was confoozed",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T13:43:33Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599579500",
      "id" : 599579500,
      "in_reply_to_id" : 599165512,
      "line" : 88,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU3OTUwMA==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : 85,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 88,
      "pull_request_review_id" : 618603896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 85,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T13:43:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599579500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599581054"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599581054"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It is, but it is only synced from upstream: https://github.com/llvm/llvm-project/blob/main/compiler-rt/include/fuzzer/FuzzedDataProvider.h",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T13:45:24Z",
      "diff_hunk" : "@@ -48,6 +48,16 @@ void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n     return ((i++ == call_index ? callables() : void()), ...);\n }\n \n+template <typename Collection>\n+const auto& PickValue(FuzzedDataProvider& fuzzed_data_provider, const Collection& col)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599581054",
      "id" : 599581054,
      "in_reply_to_id" : 599149591,
      "line" : 52,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU4MTA1NA==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 52,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/test/fuzz/util.h",
      "position" : 5,
      "pull_request_review_id" : 618606067,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-23T13:45:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599581054",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599590631"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599590631"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ahhh true",
      "commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "created_at" : "2021-03-23T13:56:26Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599590631",
      "id" : 599590631,
      "in_reply_to_id" : 599148154,
      "line" : 134,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU5MDYzMQ==",
      "original_commit_id" : "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_line" : 134,
      "original_position" : 134,
      "original_start_line" : 132,
      "path" : "src/test/fuzz/tx_pool.cpp",
      "position" : 134,
      "pull_request_review_id" : 618619340,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
      "side" : "RIGHT",
      "start_line" : 132,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-23T13:56:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599590631",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
