[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r256676622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256676622"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for the txindex test fix. This should be a separate pull request, since the issue is already present (intermittent)",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-14T03:10:05Z",
      "diff_hunk" : "@@ -70,6 +71,8 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n     }\n \n     txindex.Stop(); // Stop thread before calling destructor\n+    LOCK(cs_main);\n+    txindex_ptr.reset(nullptr);\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r256676622",
      "id" : 256676622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjY3NjYyMg==",
      "original_commit_id" : "756568b92887c08cf1c2f8ad75bdde36849cf819",
      "original_position" : 16,
      "path" : "src/test/txindex_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 203552578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256676622",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r256676871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256676871"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, I was wondering how it could be related...",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-14T03:11:38Z",
      "diff_hunk" : "@@ -70,6 +71,8 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n     }\n \n     txindex.Stop(); // Stop thread before calling destructor\n+    LOCK(cs_main);\n+    txindex_ptr.reset(nullptr);\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r256676871",
      "id" : 256676871,
      "in_reply_to_id" : 256676622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NjY3Njg3MQ==",
      "original_commit_id" : "756568b92887c08cf1c2f8ad75bdde36849cf819",
      "original_position" : 16,
      "path" : "src/test/txindex_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 203552861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/256676871",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15494](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15494.html) (rpc: Return whether the block was invalidated on invalidateblock by promag)\n* [#15305](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15305.html) ([validation] Crash if disconnecting a block fails by sdaftuar)\n* [#14193](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14193.html) (validation: Add missing mempool locks by MarcoFalke)\n* [#13582](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13582.html) (Extract AppInitLoadBlockIndex from AppInitMain by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-02-14T04:44:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-463487740",
      "id" : 463487740,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MzQ4Nzc0MA==",
      "updated_at" : "2019-03-01T00:13:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463487740",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257741475"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257741475"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit 119cd3df2a31eb9e70863c1863c194a45d43e5c1 \r\n\r\nAdd or remove depending on `ret`. ",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T15:35:24Z",
      "diff_hunk" : "@@ -2789,60 +2789,55 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    while (true) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool; try to add these\n+        // back to the mempool.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257741475",
      "id" : 257741475,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc0MTQ3NQ==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 35,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 204846163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257741475",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257741820"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257741820"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit 119cd3df2a31eb9e70863c1863c194a45d43e5c1 \r\n\r\nnit, could add `/* fAddToMempool = */ ret`.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T15:36:18Z",
      "diff_hunk" : "@@ -2789,60 +2789,55 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    while (true) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool; try to add these\n+        // back to the mempool.\n+        UpdateMempoolForReorg(disconnectpool, ret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257741820",
      "id" : 257741820,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc0MTgyMA==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 36,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 204846163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257741820",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257745697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257745697"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit 119cd3df2a31eb9e70863c1863c194a45d43e5c1 \r\n\r\nShould relax current thread between unlock/lock on each cycle?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T15:46:39Z",
      "diff_hunk" : "@@ -2789,60 +2789,55 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    while (true) {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257745697",
      "id" : 257745697,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc0NTY5Nw==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 18,
      "path" : "src/validation.cpp",
      "position" : 84,
      "pull_request_review_id" : 204846163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257745697",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257747997"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257747997"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit ebe6eebab3b3a42da70ec99c1f30568ae0abb16f\r\n\r\nMaybe calling `ShutdownRequested` is enough.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T15:53:01Z",
      "diff_hunk" : "@@ -2789,60 +2789,55 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    while (true) {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257747997",
      "id" : 257747997,
      "in_reply_to_id" : 257745697,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc0Nzk5Nw==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 18,
      "path" : "src/validation.cpp",
      "position" : 84,
      "pull_request_review_id" : 204846163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257747997",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257749210"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257749210"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit ebe6eebab3b3a42da70ec99c1f30568ae0abb16f\r\n\r\nCould bring `invalid_walk_tip` to this scope instead?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T15:56:12Z",
      "diff_hunk" : "@@ -2789,9 +2789,12 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n+    CBlockIndex* to_mark_failed = pindex;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257749210",
      "id" : 257749210,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc0OTIxMA==",
      "original_commit_id" : "ebe6eebab3b3a42da70ec99c1f30568ae0abb16f",
      "original_position" : 4,
      "path" : "src/validation.cpp",
      "position" : 64,
      "pull_request_review_id" : 204846163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257749210",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257750539"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257750539"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit 119cd3df2a31eb9e70863c1863c194a45d43e5c1 \r\n\r\nShould be singular `and then mark the block as invalid.`?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T15:59:56Z",
      "diff_hunk" : "@@ -2789,60 +2789,55 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    while (true) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool; try to add these\n+        // back to the mempool.\n+        UpdateMempoolForReorg(disconnectpool, ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We first disconnect and then mark the blocks as invalid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257750539",
      "id" : 257750539,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc1MDUzOQ==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 43,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 204846163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257750539",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257751203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257751203"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit ebe6eebab3b3a42da70ec99c1f30568ae0abb16f \r\n\r\nUpdate comment? I mean, can be a different block?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T16:01:43Z",
      "diff_hunk" : "@@ -2816,15 +2819,20 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n         setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n     {\n         // Mark the block itself as invalid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257751203",
      "id" : 257751203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc1MTIwMw==",
      "original_commit_id" : "ebe6eebab3b3a42da70ec99c1f30568ae0abb16f",
      "original_position" : 25,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 204846163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257751203",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257753394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257753394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit 1b9518cc7c48750559a39fad4a5056d6a029ee8a\r\n\r\nCare to elaborate? Looks like this code could be in a function or something?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T16:07:32Z",
      "diff_hunk" : "@@ -2795,6 +2795,11 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     while (true) {\n         if (ShutdownRequested()) break;\n \n+        // Make sure the validation callbacks don't overflow",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257753394",
      "id" : 257753394,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc1MzM5NA==",
      "original_commit_id" : "1b9518cc7c48750559a39fad4a5056d6a029ee8a",
      "original_position" : 4,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 204846163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257753394",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257755253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257755253"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit 3af503b4a86f3743c8660f15c0a62de0289b7d94\r\n\r\nCare to elaborate this optimization here? Looks like it could be:\r\n```cpp\r\nbool ret = DisconnectTip(state, chainparams, ++disconnected <= 10 ? &disconnectpool : nullptr);\r\n...\r\nif (disconnected <= 10) UpdateMempoolForReorg(disconnectpool, ret)\r\n```",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T16:12:30Z",
      "diff_hunk" : "@@ -2811,7 +2812,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n         // DisconnectTip will add transactions to disconnectpool; try to add these\n         // back to the mempool.\n-        UpdateMempoolForReorg(disconnectpool, ret);\n+        UpdateMempoolForReorg(disconnectpool, (++disconnected <= 10) && ret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257755253",
      "id" : 257755253,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc1NTI1Mw==",
      "original_commit_id" : "3af503b4a86f3743c8660f15c0a62de0289b7d94",
      "original_position" : 13,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 204846163,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257755253",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257761923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257761923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit 78122f3d7ed059b00bdaed585:\r\n\r\nI think this is invalid cpp and wouldn't compile",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T16:31:07Z",
      "diff_hunk" : "@@ -1583,15 +1583,15 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n \n+    CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n         CBlockIndex* pblockindex = LookupBlockIndex(hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257761923",
      "id" : 257761923,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc2MTkyMw==",
      "original_commit_id" : "78122f3d7ed059b00bdaed58538ccde31b124782",
      "original_position" : 7,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 204872288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257761923",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257765225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257765225"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You mean should just be `pblockindex = LookupBlockIndex(hash);`?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T16:40:13Z",
      "diff_hunk" : "@@ -1583,15 +1583,15 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n \n+    CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n         CBlockIndex* pblockindex = LookupBlockIndex(hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257765225",
      "id" : 257765225,
      "in_reply_to_id" : 257761923,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc2NTIyNQ==",
      "original_commit_id" : "78122f3d7ed059b00bdaed58538ccde31b124782",
      "original_position" : 7,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 204876311,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257765225",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257767612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257767612"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, I guess it compiles, but it might do the wrong thing.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T16:47:11Z",
      "diff_hunk" : "@@ -1583,15 +1583,15 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n \n+    CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n         CBlockIndex* pblockindex = LookupBlockIndex(hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257767612",
      "id" : 257767612,
      "in_reply_to_id" : 257761923,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc2NzYxMg==",
      "original_commit_id" : "78122f3d7ed059b00bdaed58538ccde31b124782",
      "original_position" : 7,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 204879312,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257767612",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257769907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257769907"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This should be in previous commit.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-18T16:54:12Z",
      "diff_hunk" : "@@ -1586,7 +1586,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = LookupBlockIndex(hash);\n+        pblockindex = LookupBlockIndex(hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257769907",
      "id" : 257769907,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1Nzc2OTkwNw==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 5,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 8,
      "pull_request_review_id" : 204882125,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/257769907",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259389733"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259389733"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This bit seems to be new behaviour. Can it safely be moved into a separate commit? (I guess not because you wouldn't get to these branches when walking down from the tip)",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-22T15:31:11Z",
      "diff_hunk" : "@@ -4168,37 +4170,105 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);\n+    }\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n+    CBlockIndex *tip;\n \n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n-\n     int nHeight = 1;\n-    while (nHeight <= chainActive.Height()) {\n-        // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-        // blocks in ConnectBlock, we don't need to go back and\n-        // re-download/re-verify blocks from before segwit actually activated.\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-            break;\n+    {\n+        LOCK(cs_main);\n+        while (nHeight <= chainActive.Height()) {\n+            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n+            // blocks in ConnectBlock, we don't need to go back and\n+            // re-download/re-verify blocks from before segwit actually activated.\n+            if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+                break;\n+            }\n+            nHeight++;\n         }\n-        nHeight++;\n-    }\n \n+        // Immediately erase post-segwit blocks without witness not in the main chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259389733",
      "id" : 259389733,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTM4OTczMw==",
      "original_commit_id" : "8994e394c0b4e76616c10acdd309d0225eabad9e",
      "original_position" : 80,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 206878468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259389733",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259393078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259393078"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe explain the big picture here: first we walk from genesis to the tip to look for the first block with missing data, i.e. the first block after SegWit activation without BLOCK_OPT_WITNESS. Then we walk from the tip down to this, winding back and deleting each block.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-22T15:39:01Z",
      "diff_hunk" : "@@ -4168,37 +4170,105 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);\n+    }\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n+    CBlockIndex *tip;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259393078",
      "id" : 259393078,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTM5MzA3OA==",
      "original_commit_id" : "8994e394c0b4e76616c10acdd309d0225eabad9e",
      "original_position" : 55,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 206878468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259393078",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259396779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259396779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This note seems out of place now; it used to be above `if (IsWitnessEnabled(pindexIter->pprev, params.GetConsensus()) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(pindexIter))`",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-22T15:47:48Z",
      "diff_hunk" : "@@ -4168,37 +4170,105 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);\n+    }\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n+    CBlockIndex *tip;\n \n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n-\n     int nHeight = 1;\n-    while (nHeight <= chainActive.Height()) {\n-        // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-        // blocks in ConnectBlock, we don't need to go back and\n-        // re-download/re-verify blocks from before segwit actually activated.\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-            break;\n+    {\n+        LOCK(cs_main);\n+        while (nHeight <= chainActive.Height()) {\n+            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n+            // blocks in ConnectBlock, we don't need to go back and\n+            // re-download/re-verify blocks from before segwit actually activated.\n+            if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+                break;\n+            }\n+            nHeight++;\n         }\n-        nHeight++;\n-    }\n \n+        // Immediately erase post-segwit blocks without witness not in the main chain.\n+        // Active blocks will be dealt with below.\n+        for (const auto& entry : mapBlockIndex) {\n+            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(entry.second)) {\n+                EraseBlockData(entry.second);\n+            }\n+        }\n+\n+        tip = chainActive.Tip();\n+    }\n     // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+\n+    // Loop until the tip is below nHeight, or we reach a pruned block.\n     CValidationState state;\n-    CBlockIndex* pindex = chainActive.Tip();\n-    while (chainActive.Height() >= nHeight) {\n-        if (fPruneMode && !(chainActive.Tip()->nStatus & BLOCK_HAVE_DATA)) {\n-            // If pruning, don't try rewinding past the HAVE_DATA point;\n-            // since older blocks can't be served anyway, there's\n-            // no need to walk further, and trying to DisconnectTip()\n-            // will fail (and require a needless reindex/redownload\n-            // of the blockchain).\n-            break;\n-        }\n-        if (!DisconnectTip(state, params, nullptr)) {\n-            return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", pindex->nHeight, FormatStateMessage(state));\n+    while (true) {\n+        {\n+            LOCK(cs_main);\n+            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n+            assert(tip == chainActive.Tip());\n+            if (chainActive.Height() < nHeight) break;\n+            if (fPruneMode && !(chainActive.Tip()->nStatus & BLOCK_HAVE_DATA)) {\n+                // If pruning, don't try rewinding past the HAVE_DATA point;\n+                // since older blocks can't be served anyway, there's\n+                // no need to walk further, and trying to DisconnectTip()\n+                // will fail (and require a needless reindex/redownload\n+                // of the blockchain).\n+                break;\n+            }\n+\n+            // Disconnect block\n+            if (!DisconnectTip(state, params, nullptr)) {\n+                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n+            }\n+\n+            // Reduce validity flag and have-data flags.\n+            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n+            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n+            // Note: If we encounter an insufficiently validated block that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259396779",
      "id" : 259396779,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTM5Njc3OQ==",
      "original_commit_id" : "8994e394c0b4e76616c10acdd309d0225eabad9e",
      "original_position" : 129,
      "path" : "src/validation.cpp",
      "position" : 308,
      "pull_request_review_id" : 206878468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259396779",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259426840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259426840"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Release cs_main during RewindBlockIndex operation\" (8994e394c0b4e76616c10acdd309d0225eabad9e)\r\n\r\nCould you add some rationale in this comment saying why this is done here? Previous behavior of erasing in one place instead of two places seems simpler. Is this an optimization? Is it needed for correctness for some reason now that cs_main is released?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-22T16:57:14Z",
      "diff_hunk" : "@@ -4168,37 +4170,105 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);\n+    }\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n+    CBlockIndex *tip;\n \n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n-\n     int nHeight = 1;\n-    while (nHeight <= chainActive.Height()) {\n-        // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-        // blocks in ConnectBlock, we don't need to go back and\n-        // re-download/re-verify blocks from before segwit actually activated.\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-            break;\n+    {\n+        LOCK(cs_main);\n+        while (nHeight <= chainActive.Height()) {\n+            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n+            // blocks in ConnectBlock, we don't need to go back and\n+            // re-download/re-verify blocks from before segwit actually activated.\n+            if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+                break;\n+            }\n+            nHeight++;\n         }\n-        nHeight++;\n-    }\n \n+        // Immediately erase post-segwit blocks without witness not in the main chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259426840",
      "id" : 259426840,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTQyNjg0MA==",
      "original_commit_id" : "8994e394c0b4e76616c10acdd309d0225eabad9e",
      "original_position" : 80,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 206923731,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259426840",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259636532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259636532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Should relax current thread between unlock/lock on each cycle?\r\n\r\nI don't understand.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T19:31:46Z",
      "diff_hunk" : "@@ -2789,60 +2789,55 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    while (true) {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259636532",
      "id" : 259636532,
      "in_reply_to_id" : 257745697,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTYzNjUzMg==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 18,
      "path" : "src/validation.cpp",
      "position" : 84,
      "pull_request_review_id" : 207167894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259636532",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259636612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259636612"
         }
      },
      "author_association" : "MEMBER",
      "body" : "To which scope?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T19:33:54Z",
      "diff_hunk" : "@@ -2789,9 +2789,12 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n+    CBlockIndex* to_mark_failed = pindex;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259636612",
      "id" : 259636612,
      "in_reply_to_id" : 257749210,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTYzNjYxMg==",
      "original_commit_id" : "ebe6eebab3b3a42da70ec99c1f30568ae0abb16f",
      "original_position" : 4,
      "path" : "src/validation.cpp",
      "position" : 64,
      "pull_request_review_id" : 207167982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259636612",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259637167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259637167"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, we still need to call UpdateMempoolForReorg, even if we don't want to add the disconnected transactions back to the mempool.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T19:49:07Z",
      "diff_hunk" : "@@ -2811,7 +2812,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n         // DisconnectTip will add transactions to disconnectpool; try to add these\n         // back to the mempool.\n-        UpdateMempoolForReorg(disconnectpool, ret);\n+        UpdateMempoolForReorg(disconnectpool, (++disconnected <= 10) && ret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259637167",
      "id" : 259637167,
      "in_reply_to_id" : 257755253,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTYzNzE2Nw==",
      "original_commit_id" : "3af503b4a86f3743c8660f15c0a62de0289b7d94",
      "original_position" : 13,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 207168565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259637167",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641740"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't know what you're referring to? Is the logic wrong or are you suggested an improvement to the comments?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:32:48Z",
      "diff_hunk" : "@@ -2789,60 +2789,55 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    while (true) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool; try to add these\n+        // back to the mempool.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641740",
      "id" : 259641740,
      "in_reply_to_id" : 257741475,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MTc0MA==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 35,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 207173168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641740",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641781"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641781"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:33:30Z",
      "diff_hunk" : "@@ -2789,60 +2789,55 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    while (true) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool; try to add these\n+        // back to the mempool.\n+        UpdateMempoolForReorg(disconnectpool, ret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641781",
      "id" : 259641781,
      "in_reply_to_id" : 257741820,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MTc4MQ==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 36,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 207173199,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641781",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641797"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641797"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Improved the comments.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:33:53Z",
      "diff_hunk" : "@@ -2789,60 +2789,55 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    while (true) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool; try to add these\n+        // back to the mempool.\n+        UpdateMempoolForReorg(disconnectpool, ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We first disconnect and then mark the blocks as invalid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641797",
      "id" : 259641797,
      "in_reply_to_id" : 257750539,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MTc5Nw==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 43,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 207173217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641797",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Clarified the comment.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:34:07Z",
      "diff_hunk" : "@@ -2816,15 +2819,20 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n         setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n     {\n         // Mark the block itself as invalid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641808",
      "id" : 259641808,
      "in_reply_to_id" : 257751203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MTgwOA==",
      "original_commit_id" : "ebe6eebab3b3a42da70ec99c1f30568ae0abb16f",
      "original_position" : 25,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 207173226,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641808",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641834"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've created a small function, and improved the comments (\"overflow\" wasn't really correct and certainly confusing).",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:34:44Z",
      "diff_hunk" : "@@ -2795,6 +2795,11 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     while (true) {\n         if (ShutdownRequested()) break;\n \n+        // Make sure the validation callbacks don't overflow",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641834",
      "id" : 259641834,
      "in_reply_to_id" : 257753394,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MTgzNA==",
      "original_commit_id" : "1b9518cc7c48750559a39fad4a5056d6a029ee8a",
      "original_position" : 4,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 207173247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641834",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641851"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641851"
         }
      },
      "author_association" : "MEMBER",
      "body" : "FIxed. This was fixed, but in a later commit.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:35:04Z",
      "diff_hunk" : "@@ -1583,15 +1583,15 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n \n+    CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n         CBlockIndex* pblockindex = LookupBlockIndex(hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641851",
      "id" : 259641851,
      "in_reply_to_id" : 257761923,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MTg1MQ==",
      "original_commit_id" : "78122f3d7ed059b00bdaed58538ccde31b124782",
      "original_position" : 7,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 207173263,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641851",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641857"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:35:11Z",
      "diff_hunk" : "@@ -1586,7 +1586,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = LookupBlockIndex(hash);\n+        pblockindex = LookupBlockIndex(hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641857",
      "id" : 259641857,
      "in_reply_to_id" : 257769907,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MTg1Nw==",
      "original_commit_id" : "119cd3df2a31eb9e70863c1863c194a45d43e5c1",
      "original_position" : 5,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 8,
      "pull_request_review_id" : 207173266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259641857",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259642084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259642084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've split that commit into 4 separate ones. I think the flow of changes should be a lot clearer now.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:39:51Z",
      "diff_hunk" : "@@ -4168,37 +4170,105 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);\n+    }\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n+    CBlockIndex *tip;\n \n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n-\n     int nHeight = 1;\n-    while (nHeight <= chainActive.Height()) {\n-        // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-        // blocks in ConnectBlock, we don't need to go back and\n-        // re-download/re-verify blocks from before segwit actually activated.\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-            break;\n+    {\n+        LOCK(cs_main);\n+        while (nHeight <= chainActive.Height()) {\n+            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n+            // blocks in ConnectBlock, we don't need to go back and\n+            // re-download/re-verify blocks from before segwit actually activated.\n+            if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+                break;\n+            }\n+            nHeight++;\n         }\n-        nHeight++;\n-    }\n \n+        // Immediately erase post-segwit blocks without witness not in the main chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259642084",
      "id" : 259642084,
      "in_reply_to_id" : 259389733,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MjA4NA==",
      "original_commit_id" : "8994e394c0b4e76616c10acdd309d0225eabad9e",
      "original_position" : 80,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 207173467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259642084",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259642103"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259642103"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've improved the comments, let me know if it's clear now.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:40:12Z",
      "diff_hunk" : "@@ -4168,37 +4170,105 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);\n+    }\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n+    CBlockIndex *tip;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259642103",
      "id" : 259642103,
      "in_reply_to_id" : 259393078,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MjEwMw==",
      "original_commit_id" : "8994e394c0b4e76616c10acdd309d0225eabad9e",
      "original_position" : 55,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 207173486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259642103",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259642041"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259642041"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've moved to to a separate step instead of lumping it together with the nHeight calculation loop.\r\n\r\nThere's no need for it to be done while holding the lock. The reason it's separate is because the disconnect/erase of active blocks should be done simultaneously (so that things get erased even when interrupted, and erasing can't be done before disconnecting), but for non-mainchain blocks we need a separate loop still.\r\n\r\nI've added some comments to elaborate, but I'll leave it to you to comment further or marking it as resolved.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-24T21:41:32Z",
      "diff_hunk" : "@@ -4168,37 +4170,105 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);\n+    }\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n+    CBlockIndex *tip;\n \n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n-\n     int nHeight = 1;\n-    while (nHeight <= chainActive.Height()) {\n-        // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-        // blocks in ConnectBlock, we don't need to go back and\n-        // re-download/re-verify blocks from before segwit actually activated.\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-            break;\n+    {\n+        LOCK(cs_main);\n+        while (nHeight <= chainActive.Height()) {\n+            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n+            // blocks in ConnectBlock, we don't need to go back and\n+            // re-download/re-verify blocks from before segwit actually activated.\n+            if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+                break;\n+            }\n+            nHeight++;\n         }\n-        nHeight++;\n-    }\n \n+        // Immediately erase post-segwit blocks without witness not in the main chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259642041",
      "id" : 259642041,
      "in_reply_to_id" : 259426840,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTY0MjA0MQ==",
      "original_commit_id" : "8994e394c0b4e76616c10acdd309d0225eabad9e",
      "original_position" : 80,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 207173422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259642041",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259804901"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259804901"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IIUC this now happens every block rather than only at the end. I assume there's no other thread potentially messing with `setBlockIndexCandidates` in a way that we care about?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-25T12:38:50Z",
      "diff_hunk" : "@@ -4168,6 +4170,42 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259804901",
      "id" : 259804901,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTgwNDkwMQ==",
      "original_commit_id" : "9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
      "original_position" : 48,
      "path" : "src/validation.cpp",
      "position" : 224,
      "pull_request_review_id" : 207369423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259804901",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259893955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259893955"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This happens with cs_main held.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-25T16:02:24Z",
      "diff_hunk" : "@@ -4168,6 +4170,42 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259893955",
      "id" : 259893955,
      "in_reply_to_id" : 259804901,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTg5Mzk1NQ==",
      "original_commit_id" : "9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
      "original_position" : 48,
      "path" : "src/validation.cpp",
      "position" : 224,
      "pull_request_review_id" : 207479149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259893955",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259986290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259986290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah I see, the loop over `mapBlockIndex` that calls `EraseBlockData` is entirely inside `LOCK(cs_main)`. So that's indeed the same as before 9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-25T19:39:39Z",
      "diff_hunk" : "@@ -4168,6 +4170,42 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259986290",
      "id" : 259986290,
      "in_reply_to_id" : 259804901,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTk4NjI5MA==",
      "original_commit_id" : "9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
      "original_position" : 48,
      "path" : "src/validation.cpp",
      "position" : 224,
      "pull_request_review_id" : 207592517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259986290",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259986955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259986955"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, that too, but that doesn't matter. The entire operation in this function could be called with a different lock per invocation.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-25T19:41:26Z",
      "diff_hunk" : "@@ -4168,6 +4170,42 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259986955",
      "id" : 259986955,
      "in_reply_to_id" : 259804901,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTk4Njk1NQ==",
      "original_commit_id" : "9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
      "original_position" : 48,
      "path" : "src/validation.cpp",
      "position" : 224,
      "pull_request_review_id" : 207593337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/259986955",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260506459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/260506459"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 32b2696ab4b079db736074b57bbc24deaee0b3d9\r\n\r\nI don't quite understand the comment, nor why the for loop was moved up.\r\n\r\n* Is it because the loop is cheaper to do before the DisconnectTip calls than after?\r\n* Is it because the DisconnectTip calls are cheaper after the loop ran?\r\n* ...",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-26T21:58:37Z",
      "diff_hunk" : "@@ -4209,9 +4209,18 @@ void CChainState::EraseBlockData(CBlockIndex* index)\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n-\n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n \n+    // First erase all post-segwit blocks without witness not in the main chain,\n+    // as this can we done without costly DisconnectTip calls. Active",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260506459",
      "id" : 260506459,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MDUwNjQ1OQ==",
      "original_commit_id" : "32b2696ab4b079db736074b57bbc24deaee0b3d9",
      "original_position" : 8,
      "path" : "src/validation.cpp",
      "position" : 240,
      "pull_request_review_id" : 208231683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/260506459",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260514325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/260514325"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I see it is needed for the next commit",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-26T22:20:58Z",
      "diff_hunk" : "@@ -4209,9 +4209,18 @@ void CChainState::EraseBlockData(CBlockIndex* index)\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n-\n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n \n+    // First erase all post-segwit blocks without witness not in the main chain,\n+    // as this can we done without costly DisconnectTip calls. Active",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260514325",
      "id" : 260514325,
      "in_reply_to_id" : 260506459,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MDUxNDMyNQ==",
      "original_commit_id" : "32b2696ab4b079db736074b57bbc24deaee0b3d9",
      "original_position" : 8,
      "path" : "src/validation.cpp",
      "position" : 240,
      "pull_request_review_id" : 208231683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/260514325",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260516998"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/260516998"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb\r\n\r\nstyle-nit: FlushStateToDisk will lock `cs_main` anyway, so I don't see a need for limiting the scope of this `cs_main` in the first place and adding unnecessary indentation.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-26T22:28:21Z",
      "diff_hunk" : "@@ -4208,77 +4208,89 @@ void CChainState::EraseBlockData(CBlockIndex* index)\n \n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n \n     // First erase all post-segwit blocks without witness not in the main chain,\n     // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below.\n-    for (const auto& entry : mapBlockIndex) {\n-        if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(entry.second)) {\n-            EraseBlockData(entry.second);\n+    // blocks will be dealt with below (releasing cs_main in between).\n+    {\n+        LOCK(cs_main);\n+        for (const auto& entry : mapBlockIndex) {\n+            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(entry.second)) {\n+                EraseBlockData(entry.second);\n+            }\n         }\n     }\n \n     // Find what height we need to reorganize to.\n+    CBlockIndex *tip;\n     int nHeight = 1;\n-    while (nHeight <= chainActive.Height()) {\n-        // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-        // blocks in ConnectBlock, we don't need to go back and\n-        // re-download/re-verify blocks from before segwit actually activated.\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-            break;\n+    {\n+        LOCK(cs_main);\n+        while (nHeight <= chainActive.Height()) {\n+            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n+            // blocks in ConnectBlock, we don't need to go back and\n+            // re-download/re-verify blocks from before segwit actually activated.\n+            if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+                break;\n+            }\n+            nHeight++;\n         }\n-        nHeight++;\n-    }\n \n+        tip = chainActive.Tip();\n+    }\n     // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+\n     CValidationState state;\n-    CBlockIndex* tip = chainActive.Tip();\n     // Loop until the tip is below nHeight, or we reach a pruned block.\n     while (true) {\n-        // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-        assert(tip == chainActive.Tip());\n-        if (tip == nullptr || tip->nHeight < nHeight) break;\n-        if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-            // If pruning, don't try rewinding past the HAVE_DATA point;\n-            // since older blocks can't be served anyway, there's\n-            // no need to walk further, and trying to DisconnectTip()\n-            // will fail (and require a needless reindex/redownload\n-            // of the blockchain).\n-            break;\n-        }\n-\n-        // Disconnect block\n-        if (!DisconnectTip(state, params, nullptr)) {\n-            return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n-        }\n+        {\n+            LOCK(cs_main);\n+            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n+            assert(tip == chainActive.Tip());\n+            if (tip == nullptr || tip->nHeight < nHeight) break;\n+            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n+                // If pruning, don't try rewinding past the HAVE_DATA point;\n+                // since older blocks can't be served anyway, there's\n+                // no need to walk further, and trying to DisconnectTip()\n+                // will fail (and require a needless reindex/redownload\n+                // of the blockchain).\n+                break;\n+            }\n \n-        // Reduce validity flag and have-data flags.\n-        // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-        // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-        // Note: If we encounter an insufficiently validated block that\n-        // is on chainActive, it must be because we are a pruning node, and\n-        // this block or some successor doesn't HAVE_DATA, so we were unable to\n-        // rewind all the way.  Blocks remaining on chainActive at this point\n-        // must not have their validity reduced.\n-        EraseBlockData(tip);\n+            // Disconnect block\n+            if (!DisconnectTip(state, params, nullptr)) {\n+                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n+            }\n \n-        tip = tip->pprev;\n+            // Reduce validity flag and have-data flags.\n+            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n+            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n+            // Note: If we encounter an insufficiently validated block that\n+            // is on chainActive, it must be because we are a pruning node, and\n+            // this block or some successor doesn't HAVE_DATA, so we were unable to\n+            // rewind all the way.  Blocks remaining on chainActive at this point\n+            // must not have their validity reduced.\n+            EraseBlockData(tip);\n \n+            tip = tip->pprev;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260516998",
      "id" : 260516998,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MDUxNjk5OA==",
      "original_commit_id" : "436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb",
      "original_position" : 110,
      "path" : "src/validation.cpp",
      "position" : 316,
      "pull_request_review_id" : 208231683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/260516998",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260527614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/260527614"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, I see this is required in a later commit",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-02-26T23:01:05Z",
      "diff_hunk" : "@@ -4208,77 +4208,89 @@ void CChainState::EraseBlockData(CBlockIndex* index)\n \n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n \n     // First erase all post-segwit blocks without witness not in the main chain,\n     // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below.\n-    for (const auto& entry : mapBlockIndex) {\n-        if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(entry.second)) {\n-            EraseBlockData(entry.second);\n+    // blocks will be dealt with below (releasing cs_main in between).\n+    {\n+        LOCK(cs_main);\n+        for (const auto& entry : mapBlockIndex) {\n+            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(entry.second)) {\n+                EraseBlockData(entry.second);\n+            }\n         }\n     }\n \n     // Find what height we need to reorganize to.\n+    CBlockIndex *tip;\n     int nHeight = 1;\n-    while (nHeight <= chainActive.Height()) {\n-        // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-        // blocks in ConnectBlock, we don't need to go back and\n-        // re-download/re-verify blocks from before segwit actually activated.\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-            break;\n+    {\n+        LOCK(cs_main);\n+        while (nHeight <= chainActive.Height()) {\n+            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n+            // blocks in ConnectBlock, we don't need to go back and\n+            // re-download/re-verify blocks from before segwit actually activated.\n+            if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+                break;\n+            }\n+            nHeight++;\n         }\n-        nHeight++;\n-    }\n \n+        tip = chainActive.Tip();\n+    }\n     // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+\n     CValidationState state;\n-    CBlockIndex* tip = chainActive.Tip();\n     // Loop until the tip is below nHeight, or we reach a pruned block.\n     while (true) {\n-        // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-        assert(tip == chainActive.Tip());\n-        if (tip == nullptr || tip->nHeight < nHeight) break;\n-        if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-            // If pruning, don't try rewinding past the HAVE_DATA point;\n-            // since older blocks can't be served anyway, there's\n-            // no need to walk further, and trying to DisconnectTip()\n-            // will fail (and require a needless reindex/redownload\n-            // of the blockchain).\n-            break;\n-        }\n-\n-        // Disconnect block\n-        if (!DisconnectTip(state, params, nullptr)) {\n-            return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n-        }\n+        {\n+            LOCK(cs_main);\n+            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n+            assert(tip == chainActive.Tip());\n+            if (tip == nullptr || tip->nHeight < nHeight) break;\n+            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n+                // If pruning, don't try rewinding past the HAVE_DATA point;\n+                // since older blocks can't be served anyway, there's\n+                // no need to walk further, and trying to DisconnectTip()\n+                // will fail (and require a needless reindex/redownload\n+                // of the blockchain).\n+                break;\n+            }\n \n-        // Reduce validity flag and have-data flags.\n-        // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-        // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-        // Note: If we encounter an insufficiently validated block that\n-        // is on chainActive, it must be because we are a pruning node, and\n-        // this block or some successor doesn't HAVE_DATA, so we were unable to\n-        // rewind all the way.  Blocks remaining on chainActive at this point\n-        // must not have their validity reduced.\n-        EraseBlockData(tip);\n+            // Disconnect block\n+            if (!DisconnectTip(state, params, nullptr)) {\n+                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n+            }\n \n-        tip = tip->pprev;\n+            // Reduce validity flag and have-data flags.\n+            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n+            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n+            // Note: If we encounter an insufficiently validated block that\n+            // is on chainActive, it must be because we are a pruning node, and\n+            // this block or some successor doesn't HAVE_DATA, so we were unable to\n+            // rewind all the way.  Blocks remaining on chainActive at this point\n+            // must not have their validity reduced.\n+            EraseBlockData(tip);\n \n+            tip = tip->pprev;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260527614",
      "id" : 260527614,
      "in_reply_to_id" : 260516998,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MDUyNzYxNA==",
      "original_commit_id" : "436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb",
      "original_position" : 110,
      "path" : "src/validation.cpp",
      "position" : 316,
      "pull_request_review_id" : 208231683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/260527614",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested:\r\n - concurrent `invalidateblock` calls\r\n - shutdown during `invalidateblock`\r\n\r\nAfter these tests I felt that `invalidateblock` could return whether the invalidation finished or not, or other meaningful data (other PR).\r\n\r\nHowever when testing concurrent `invalidateblock` and `reconsiderblock`, got the following assertion on start:\r\n```\r\n...\r\n2019-02-27T11:53:54Z Checking all blk files are present...\r\n2019-02-27T11:53:54Z Opening LevelDB in /Users/joao/Library/Application Support/Bitcoin/regtest/chainstate\r\n2019-02-27T11:53:54Z Opened LevelDB successfully\r\n2019-02-27T11:53:54Z Using obfuscation key for /Users/joao/Library/Application Support/Bitcoin/regtest/chainstate: 326eeb3c93ca8734\r\nAssertion failed: (!setBlockIndexCandidates.empty()), function PruneBlockIndexCandidates, file validation.cpp, line 2534.\r\n```\r\n\r\nTo reproduce apply the patch \r\n```diff\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -2840,6 +2840,8 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\r\n         to_mark_failed = invalid_walk_tip;\r\n     }\r\n\r\n+    MilliSleep(10000);\r\n+\r\n     {\r\n         // Mark pindex itself as invalid, regardless of whether it was in the main chain or not.\r\n         LOCK(cs_main);\r\n```\r\nThen:\r\n - `invalidateblock <old block hash>`\r\n - during the above sleep call `reconsiderblock <previous tip>` \r\n - restart `bitcoind`.",
      "created_at" : "2019-02-27T12:01:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-467836040",
      "id" : 467836040,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NzgzNjA0MA==",
      "updated_at" : "2019-02-27T12:06:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/467836040",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Conceptually, should `InvalidateBlock` interrupt/error if it disconnects the same tip twice? Or should `invalidateblock` and `reconsiderblock` be exclusive? Something to think and probably tackle in a different PR.",
      "created_at" : "2019-02-27T12:19:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-467841269",
      "id" : 467841269,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2Nzg0MTI2OQ==",
      "updated_at" : "2019-02-27T12:19:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/467841269",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think `invalidateblock` and `reconsiderblock` should be exclusive (in a later PR). `invalidateblock` can be interrupted by exiting `bitcoind` (thanks to this PR), which is good enough UX for something as rare as that. I've only used `invalidateblock` for testing rollback behavior; the only other use case I can think of is a DIY soft fork :-) Well, and recovering from [CVE-2018-17144]( https://bitcoincore.org/en/2018/09/20/notice/) if it had been exploited.",
      "created_at" : "2019-02-27T13:43:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-467866350",
      "id" : 467866350,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2Nzg2NjM1MA==",
      "updated_at" : "2019-02-27T13:46:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/467866350",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@promag I think I found what was causing the issue you observed when running reconsiderblock and invalidateblock simultaneously. The final step in the invalidation process would unconditionally mark the last disconnected block as invalid - even if reconsiderblock had made it the active block again at the same time.\r\n\r\nWould you mind trying again? Another useful thing to test is to put a sleep inside the first loop in invalidblock (before the cs_main grab), to test the effect of a reconsiderblock in the middle of that loop.",
      "created_at" : "2019-02-28T22:10:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-468459148",
      "id" : 468459148,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2ODQ1OTE0OA==",
      "updated_at" : "2019-02-28T22:10:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/468459148",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa I did that, sleeps all over the place, and that case sounded like scratching the chain. I'll repeat the tests.",
      "created_at" : "2019-02-28T22:18:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-468461580",
      "id" : 468461580,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2ODQ2MTU4MA==",
      "updated_at" : "2019-02-28T22:18:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/468461580",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@promag An alternative is only sleeping when \"disconnected==1\" (which would be in the middle for any invalidate that's longer than 1 deep, but not sleep all the time).\r\n\r\nIt's possible that the resulting effect is a reconsider and invalidate that start fighting with eachother and disconnect/connect the same blocks over and over again. It's not too hard to detect this scenario inside invalidateblock and bail out, but I'd rather not overload the change here further with such edge cases.",
      "created_at" : "2019-02-28T22:21:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-468462469",
      "id" : 468462469,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2ODQ2MjQ2OQ==",
      "updated_at" : "2019-02-28T22:21:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/468462469",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261574233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261574233"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit, move this comment below the interference check, replace \"something is interfering\" with \"some other thread may have interfered before we reestablished the cs_main lock\".",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-03-01T11:46:51Z",
      "diff_hunk" : "@@ -2789,64 +2789,74 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n+    CBlockIndex* to_mark_failed = pindex;\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n+\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful.\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n         invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    {\n+        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261574233",
      "id" : 261574233,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTU3NDIzMw==",
      "original_commit_id" : "9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
      "original_position" : 71,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 209545946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261574233",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261576212"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261576212"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unchanged behavior, but I'm confused why we only reconsider candidate blocks with `IsValid(BLOCK_VALID_TRANSACTIONS)` && `HaveTxsDownloaded()`, rather than any candidate with just more proof of work that's wasn't marked as invalid. Maybe the answer is: because such block candidates would never have been removed from `setBlockIndexCandidates` in the first place?",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-03-01T11:54:06Z",
      "diff_hunk" : "@@ -2789,64 +2789,74 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n+    CBlockIndex* to_mark_failed = pindex;\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n+\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful.\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n         invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    {\n+        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.\n+        LOCK(cs_main);\n+        if (chainActive.Contains(to_mark_failed)) {\n+            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n+            return false;\n+        }\n \n-    // DisconnectTip will add transactions to disconnectpool; try to add these\n-    // back to the mempool.\n-    UpdateMempoolForReorg(disconnectpool, true);\n+        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;\n+        setDirtyBlockIndex.insert(to_mark_failed);\n+        setBlockIndexCandidates.erase(to_mark_failed);\n+        m_failed_blocks.insert(to_mark_failed);\n \n-    // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n-    // add it again.\n-    BlockMap::iterator it = mapBlockIndex.begin();\n-    while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n-            setBlockIndexCandidates.insert(it->second);\n+        // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n+        // add it again.\n+        BlockMap::iterator it = mapBlockIndex.begin();\n+        while (it != mapBlockIndex.end()) {\n+            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261576212",
      "id" : 261576212,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTU3NjIxMg==",
      "original_commit_id" : "9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
      "original_position" : 96,
      "path" : "src/validation.cpp",
      "position" : 167,
      "pull_request_review_id" : 209545946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261576212",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261702510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261702510"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's the definition of `setBlockIndexCandidates`: all blocks with valid downloaded transactions (with optionally the ones that are less cumulative work than the chain tip removed).",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-03-01T18:05:23Z",
      "diff_hunk" : "@@ -2789,64 +2789,74 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n+    CBlockIndex* to_mark_failed = pindex;\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n+\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful.\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n         invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    {\n+        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.\n+        LOCK(cs_main);\n+        if (chainActive.Contains(to_mark_failed)) {\n+            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n+            return false;\n+        }\n \n-    // DisconnectTip will add transactions to disconnectpool; try to add these\n-    // back to the mempool.\n-    UpdateMempoolForReorg(disconnectpool, true);\n+        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;\n+        setDirtyBlockIndex.insert(to_mark_failed);\n+        setBlockIndexCandidates.erase(to_mark_failed);\n+        m_failed_blocks.insert(to_mark_failed);\n \n-    // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n-    // add it again.\n-    BlockMap::iterator it = mapBlockIndex.begin();\n-    while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n-            setBlockIndexCandidates.insert(it->second);\n+        // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n+        // add it again.\n+        BlockMap::iterator it = mapBlockIndex.begin();\n+        while (it != mapBlockIndex.end()) {\n+            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261702510",
      "id" : 261702510,
      "in_reply_to_id" : 261576212,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTcwMjUxMA==",
      "original_commit_id" : "9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
      "original_position" : 96,
      "path" : "src/validation.cpp",
      "position" : 167,
      "pull_request_review_id" : 209712843,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261702510",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261721986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261721986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think I got confused with setBlockIndexHeaderCandidates from #13937.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-03-01T19:05:10Z",
      "diff_hunk" : "@@ -2789,64 +2789,74 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n+    CBlockIndex* to_mark_failed = pindex;\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n+\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful.\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n         invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    {\n+        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.\n+        LOCK(cs_main);\n+        if (chainActive.Contains(to_mark_failed)) {\n+            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n+            return false;\n+        }\n \n-    // DisconnectTip will add transactions to disconnectpool; try to add these\n-    // back to the mempool.\n-    UpdateMempoolForReorg(disconnectpool, true);\n+        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;\n+        setDirtyBlockIndex.insert(to_mark_failed);\n+        setBlockIndexCandidates.erase(to_mark_failed);\n+        m_failed_blocks.insert(to_mark_failed);\n \n-    // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n-    // add it again.\n-    BlockMap::iterator it = mapBlockIndex.begin();\n-    while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n-            setBlockIndexCandidates.insert(it->second);\n+        // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n+        // add it again.\n+        BlockMap::iterator it = mapBlockIndex.begin();\n+        while (it != mapBlockIndex.end()) {\n+            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261721986",
      "id" : 261721986,
      "in_reply_to_id" : 261576212,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTcyMTk4Ng==",
      "original_commit_id" : "9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
      "original_position" : 96,
      "path" : "src/validation.cpp",
      "position" : 167,
      "pull_request_review_id" : 209737924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261721986",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK",
      "created_at" : "2019-03-02T14:28:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-468925371",
      "id" : 468925371,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2ODkyNTM3MQ==",
      "updated_at" : "2019-03-02T14:28:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/468925371",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261875216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261875216"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just noting that return value is not used.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-03-03T16:36:43Z",
      "diff_hunk" : "@@ -2787,64 +2795,80 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    AssertLockHeld(cs_main);\n+    CBlockIndex* to_mark_failed = pindex;\n+    bool pindex_was_in_chain = false;\n+    int disconnected = 0;\n \n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n \n-    bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n+        LimitValidationInterfaceQueue();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful,\n+        // and we're not doing a very deep invalidation (in which case\n+        // keeping the mempool up to date is probably futile anyway).\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n         invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    {\n+        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.\n+        LOCK(cs_main);\n+        if (chainActive.Contains(to_mark_failed)) {\n+            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n+            return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261875216",
      "id" : 261875216,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTg3NTIxNg==",
      "original_commit_id" : "8d220417cd7bc34464e28a4861a885193ec091c2",
      "original_position" : 139,
      "path" : "src/validation.cpp",
      "position" : 145,
      "pull_request_review_id" : 209918973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261875216",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261875421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261875421"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Couldn't this be inside the loop above, in line 2810?\r\n```cpp\r\nif (ShutdownRequested() || !chainActive.Contains(pindex)) {\r\n    ...\r\n    return\r\n}\r\n```\r\nwhich would avoid the unlock+lock.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-03-03T16:39:42Z",
      "diff_hunk" : "@@ -2787,64 +2795,80 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    AssertLockHeld(cs_main);\n+    CBlockIndex* to_mark_failed = pindex;\n+    bool pindex_was_in_chain = false;\n+    int disconnected = 0;\n \n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n \n-    bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n+        LimitValidationInterfaceQueue();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful,\n+        // and we're not doing a very deep invalidation (in which case\n+        // keeping the mempool up to date is probably futile anyway).\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n         invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    {\n+        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.\n+        LOCK(cs_main);\n+        if (chainActive.Contains(to_mark_failed)) {\n+            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n+            return false;\n+        }\n \n-    // DisconnectTip will add transactions to disconnectpool; try to add these\n-    // back to the mempool.\n-    UpdateMempoolForReorg(disconnectpool, true);\n+        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261875421",
      "id" : 261875421,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTg3NTQyMQ==",
      "original_commit_id" : "8d220417cd7bc34464e28a4861a885193ec091c2",
      "original_position" : 145,
      "path" : "src/validation.cpp",
      "position" : 152,
      "pull_request_review_id" : 209918973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261875421",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261886933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261886933"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This whole lock scope could indeed be merged into the loop above, but I think it's clearer when it's separate (the loop only deals with disconnecting the main chain if it were to contain pindex, the section afterwards deals with cleanups that are necessary regardless of whether pindex was in the main chain).\r\n\r\nGiven that we're already locking/unlocking for each disconnected block, I don't think getting rid of one extra lock/unlock matter much.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-03-03T21:04:20Z",
      "diff_hunk" : "@@ -2787,64 +2795,80 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    AssertLockHeld(cs_main);\n+    CBlockIndex* to_mark_failed = pindex;\n+    bool pindex_was_in_chain = false;\n+    int disconnected = 0;\n \n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n \n-    bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n+        LimitValidationInterfaceQueue();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful,\n+        // and we're not doing a very deep invalidation (in which case\n+        // keeping the mempool up to date is probably futile anyway).\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n         invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    {\n+        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.\n+        LOCK(cs_main);\n+        if (chainActive.Contains(to_mark_failed)) {\n+            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n+            return false;\n+        }\n \n-    // DisconnectTip will add transactions to disconnectpool; try to add these\n-    // back to the mempool.\n-    UpdateMempoolForReorg(disconnectpool, true);\n+        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261886933",
      "id" : 261886933,
      "in_reply_to_id" : 261875421,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTg4NjkzMw==",
      "original_commit_id" : "8d220417cd7bc34464e28a4861a885193ec091c2",
      "original_position" : 145,
      "path" : "src/validation.cpp",
      "position" : 152,
      "pull_request_review_id" : 209930650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:04:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261886933",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261887126"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261887126"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, makes sense.",
      "commit_id" : "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "created_at" : "2019-03-03T21:07:49Z",
      "diff_hunk" : "@@ -2787,64 +2795,80 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    AssertLockHeld(cs_main);\n+    CBlockIndex* to_mark_failed = pindex;\n+    bool pindex_was_in_chain = false;\n+    int disconnected = 0;\n \n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n \n-    bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n+        LimitValidationInterfaceQueue();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful,\n+        // and we're not doing a very deep invalidation (in which case\n+        // keeping the mempool up to date is probably futile anyway).\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n         invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    {\n+        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.\n+        LOCK(cs_main);\n+        if (chainActive.Contains(to_mark_failed)) {\n+            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n+            return false;\n+        }\n \n-    // DisconnectTip will add transactions to disconnectpool; try to add these\n-    // back to the mempool.\n-    UpdateMempoolForReorg(disconnectpool, true);\n+        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261887126",
      "id" : 261887126,
      "in_reply_to_id" : 261875421,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTg4NzEyNg==",
      "original_commit_id" : "8d220417cd7bc34464e28a4861a885193ec091c2",
      "original_position" : 145,
      "path" : "src/validation.cpp",
      "position" : 152,
      "pull_request_review_id" : 209930827,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15402",
      "updated_at" : "2019-03-03T21:07:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261887126",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I added an extra commit that solves the situation where if you used `invalidateblock`, had a cache flush before it completed, then had your node crash, and then restarted with `-checkblockindex` would assert with a state corruption.\r\n\r\nI've now tested a few more `invalidateblock` scenarios (with `-checkblockindex` and `-checkmempool` enabled), including interrupting it in the middle, killing/crashing it, and running `reconsiderblock` in parallel. They all seem to work fine. The RewindBlockIndex changes are untested still.",
      "created_at" : "2019-03-03T21:13:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-469064826",
      "id" : 469064826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2OTA2NDgyNg==",
      "updated_at" : "2019-03-03T23:17:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/469064826",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK",
      "created_at" : "2019-03-04T17:51:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-469349180",
      "id" : 469349180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2OTM0OTE4MA==",
      "updated_at" : "2019-03-04T17:51:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/469349180",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think this is ready.",
      "created_at" : "2019-03-06T21:57:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-470293746",
      "id" : 470293746,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15402",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3MDI5Mzc0Ng==",
      "updated_at" : "2019-03-06T21:57:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/470293746",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
