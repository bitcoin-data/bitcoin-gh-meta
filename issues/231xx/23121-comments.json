[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Further motivation:\r\n\r\n(1) The restriction of only allowing confirmed UTXOs for funding a fee-bump doesn't necessarily help our mempool validation logic, but hurts users trying to fee-bump their transactions. If the original transaction's output value isn't sufficient to fund a fee-bump and/or all of the user's other UTXOs are unconfirmed, they might not be able to fee bump. Wallet developers also need to treat self-owned unconfirmed UTXOs as unusable for fee-bumping, which is an unnecessary complication.\r\n\r\n(2) BIP125#2 can also be bypassed: @jnewbery recently pointed out to me that an attacker can simply split a 1-input 1-output transaction off from the replacement transaction, then broadcast the transaction as is. This can always be done, and quite cheaply.\r\n\r\nTo illustrate, Example L shows how BIP125#2 can be bypassed in all cases where the replacement transaction has enough fees to be split into multiple transactions. Example L1 is blocked by BIP125#2 because C is not allowed to spend an output of B. The owner of transaction C can bypass BIP125#2 as shown in example L2. Simply create a 1-input 1-output transaction, C*, that spends the output from B, and replace it with C.\r\n\r\n![image](https://user-images.githubusercontent.com/25183001/135102103-8fc3e943-2a05-48ba-840c-66c05007d5d3.png)\r\n\r\nThis might be a good hack for people who need to RBF transactions and only have unconfirmed UTXOs available, like scenario M, where we want to replace A (a 100vB transaction paying 1000sats), but our only UTXOs are in unconfirmed transactions B and C. We can simply create D*, an intermediary transaction spending the outputs we want from B and C, and then replace that with D. This just means that D needs to pay some additional fees for replacing D* (which can be at the mempool minimum feerate).\r\n\r\n![image](https://user-images.githubusercontent.com/25183001/135105526-0c384e20-a52d-4aa3-8fb5-f14bc2f79df1.png)\r\n\r\nHowever, Example N shows how this strategy can cause us to accept an replacement transaction that is actually less economical to mine than the original. Assume all transactions have a vsize of 100vB. A user wants to replace A, which has an ancestor score of 10sat/vB, with transaction C. Suppose they want to spend an unconfirmed output from transaction B, which has an ancestor score of 1sat/vB (maybe their wallet doesn't have enough funds to provide a higher fee using only confirmed inputs). BIP125#2 prevents scenario N1, where the inclusion of another unconfirmed input means C has an ancestor score of 8sat/vB and thus less economical to mine than A. However, it does not prevent scenario M2, where the user splits off a 1-input 1-output transaction, C*, in order to be able to include the output from B. This causes us to incorrectly accept C (7.5sat/vB including its parent B) in favor of A (10sat/vB).\r\n\r\n![image](https://user-images.githubusercontent.com/25183001/135104603-9e775062-5c8d-4d55-9bc9-6e9db92cfe6d.png)\r\n\r\nAgain, credit to @jnewbery for this discovery.\r\n\r\n(3) I believe package RBF requires removal of BIP125#2, (explained [here](https://gist.github.com/glozow/dc4e9d5c5b14ade7cdfac40f43adb18a#new-unconfirmed-inputs-rule-2) if you're interested). I know this is not a super robust argument, but it would be a much better interface if the two sets of RBF rules are the same.",
      "created_at" : "2021-09-28T17:33:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-929475999",
      "id" : 929475999,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843Zq2f",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-28T17:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929475999",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23711](https://github.com/bitcoin/bitcoin/pull/23711) (docs: RBF policy and mempool limit exemptions by glozow)\n* [#22867](https://github.com/bitcoin/bitcoin/pull/22867) (test: Extend test coverage of BIP125 and document confusing/inconsistent behavior by mjdietzx)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-09-28T18:05:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-929498773",
      "id" : 929498773,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843ZwaV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929498773/reactions"
      },
      "updated_at" : "2021-12-17T13:03:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929498773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow @jnewbery If you think this discovery has safety implications, have you done a responsible disclosure of this defect not only to the maintainers of this project but also potentially affected ecosystem stakeholders e.g maintainers of other full-nodes implementations ?\r\n\r\n-------------------\r\n\r\nGood finding! IIUC, the bypass trick relies on extending the set of replaced transactions with a 1 input/1 output \"bridge\" transaction spending a targeted new unconfirmed intput. A new replacement candidate tries to replace the bridge and original (the `setConflicts`  computed L620). As `HasNoNewUnconfirmed` considers the parent set of `iters_conflicting` any parent of the bridge and original are qualified of old inputs  and thus allowed to be spend by the replacement candidate. I think the bridge transaction can be extended to N new unconfirmed inputs within package limits ? The bypass trick isn't zero-cost as the Rule#4 penalty must still be paid.\r\n\r\nI think this Rule#2 bypass doesn't present obvious safety implications for LN, even with \"anchor output\" channel type. If an adversary needs currently unconfirmed UTXOs to be used as fee-bumping ones to succeed an attack, she can waits to have them confirmed before to initiate any malicious operation. That's an adversary \"first-move\" advantage anyway. In a pinch, unconfirmed UTXOs could be used to increase the rate of attacks launched sequentially if the UTXOs resources are limited...",
      "created_at" : "2021-09-29T00:07:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-929711645",
      "id" : 929711645,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843akYd",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T00:08:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929711645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> If you think this discovery has safety implications, have you done a responsible disclosure of this defect not only to the maintainers of this project but also potentially affected ecosystem stakeholders e.g maintainers of other full-nodes implementations ?\r\n\r\n@ariard I didn't think this is a safety issue for Bitcoin nodes, just a limitation that we no longer have. The \"trick\" isn't completely cost-free and the replacement transaction still needs to be higher fees due to the other BIP125 rules, it's just lower priority for mining than the mempool code thinks it is. Worst case scenario is if the original transaction was going to be in the next block and the replacement transaction isn't. That's unfortunate for the miner of _this_ block since they _might_ lose a bit on fees depending on the next-highest feerate packages, and not incentive-compatible behavior, so I think we should fix this.\r\n\r\n> The disclosed fee decrease (good catch) is a breach against the fee-bumping protocol for Revault and really any other protocol that broadcasts ANYONECANPAY-signed inputs. Sure you can always re-RBF it but in the end we can't assume honest node to engage in (and win) a race for fee-bumping.\r\n\r\n@darosior Attempting to summarize, please correct me if I'm misunderstanding: when a transaction has all inputs signed `ANYONECANPAY` and RBF opt-in, any attacker can create a replacement transaction by adding any input they want. Coupled with the strategy mentioned above, they can reduce the ancestor score of this transaction, thereby pinning it. You can re-RBF it, but might need to pay more fees. :scream:",
      "created_at" : "2021-09-29T14:16:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-930220389",
      "id" : 930220389,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843cgll",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930220389/reactions"
      },
      "updated_at" : "2021-10-01T13:41:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930220389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Coupled with the strategy mentioned above, they can reduce the ancestor score of this transaction, thereby pinning it\r\n\r\nYes.\r\n\r\n> You can re-RBF it, but might need to pay more fees. scream\r\n\r\nYes, and they can do that again and again (paying more fee at each iteration though so it's a limiting factor). Since nodes will accept any of the low-feerate package or the higher-feerate one it's a game of who will be able to connect to the miners' nodes and maintain their version of the package: at this game we can expect an attacker running a custom software has a much higher success probability than a honest watchtower trying to feebump.",
      "created_at" : "2021-09-29T14:27:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-930230217",
      "id" : 930230217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843ci_J",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T14:27:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930230217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't suppose it's reasonable to recommend opting out of RBF for now? In any case, I think we need to add this ancestor score checking before we try to do full RBF, since it would leave all `ANYONECANPAY`-signed transactions vulnerable to this pinning attack.",
      "created_at" : "2021-09-29T14:51:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-930252121",
      "id" : 930252121,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843coVZ",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T14:51:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930252121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-09-30T07:12:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-930901338",
      "id" : 930901338,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843fG1a",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-30T07:12:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930901338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @glozow @jnewbery If you think this discovery has safety implications, have you done a responsible disclosure of this defect not only to the maintainers of this project but also potentially affected ecosystem stakeholders e.g maintainers of other full-nodes implementations ?\r\n\r\n> @ariard I didn't think this is a safety issue for Bitcoin nodes, just slightly incentive-incompatible behavior. The trick isn't completely cost-free and the replacement transaction still needs to be higher fees due to the other BIP125 rules, it's just lower priority for mining than the mempool code thinks it is. Worst case scenario is if the original transaction was going to be in the next block and the replacement transaction isn't. That's unfortunate for the miner of this block since they might lose a bit on fees, and definitely incentive-incompatible mempool behavior, so I think we should fix this.\r\n\r\n@glozow @ariard even if this doesn't involve any security issues we should inform others who are not following each pull request in this repository every day. This looks like an important bug which needs a fix. Although I am still trying to understand everything involved.\r\n\r\nAnd thanks for the diagrams, they are helpful.\r\n",
      "created_at" : "2021-09-30T10:14:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-931186706",
      "id" : 931186706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843gMgS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931186706/reactions"
      },
      "updated_at" : "2021-09-30T10:14:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931186706",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow \r\n\r\nFor public records, before to open this PR, have you informed Bitcoin Core maintainers of your discovery yes or no ?\r\n\r\n----------------------------------\r\n\r\nI think by the past this project have always been careful about leveling the field in the miners block race (e.g [ASICBOOST](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/013996.html)) and I think defects or bugs in our mempool code could be silently exploited by a miner to gain an advantage on the rest of the ecosystem. Of course, I understand to miss a potential safety impact on the mining ecosystem. Really, no one has a complete overview of the base-layer threats model, without even mentioning the layers above.\r\n\r\nA responsible disclosure in the Bitcoin ecosystem is a really complex or hard task. If you are not aware about it, I would invite you to read the informative [pieces](https://medium.com/mit-media-lab-digital-currency-initiative/http-coryfields-com-cash-48a99b85aad4) written by MIT DCI. Going further, as soon as we're talking about security disclosures it's a grey area. I believe it's  not a matter of who is wrong or right as an individual contributor. Instead, I believe the leading principle should be to follow a process minimizing the risks of harm inflicted to Bitcoin stakeholders. Where \"harm\" should be interpreted in the large sense as negative consequences, especially when those consequences are significant and unjust.\r\n\r\nEven if this software is released as an \"experimental\" digital currency, and that users should be fully-aware it's a FOSS project and we _don't_ engage our responsibility as contributors, I think we should keep in mind that our acts could provoke irrecoverable disruptions in the life of real people, even indirectly or unintentionally.\r\n\r\nI think that's why we should be careful. I hold the belief that communicating to a crypto-currency project maintainers a vulnerability is one piece of such harm-minimization process and helpful to fully assess the safety risks and what can be done to remedy. A lightweight bug could reveal itself as a serious vulnerability affecting far more users than the initial thoughts of the discoverer let it imagine. For sure, if you communicate a vulnerability to a project maintainers and they don't reply back or take any action to patch a vulnerability, I believe it's a good behavior to disclose it to the wider public,  instead of letting propagate a false sense of security and safety-critical problems to worsen.\r\n\r\nThat said, we all know we're working in a highly-dynamic environment, that our resources are limited and that 100% of \"security\" certainty is a lure. And that's okay to do mistakes, as long as we're learning from then. From my experience working on Lightning, I can testify I've done few of them by lack of patience.\r\n\r\nI think it's good to time to reflect on how we do security disclosures in this ecosystem, notably with having more and more funds backed by newer \"L2\" security models. I would say the \"unseen\" impact of this current breach on Revault is a good proof of that. Even if I think the project philosophy is fluctuating about what components are safety-critical and thus require special care, what we do when we find vulnerabilities send a strong signal towards downstream project maintainers if Bitcoin Core and the community around are reliable for their use-cases or not.\r\n\r\nFurther, let's remember, one of the most nasty bug in the recent years ([CVE-2018-17144](https://bitcoincore.org/en/2018/09/20/notice/)) have been discovered by a developer of another full-node implementation. Lacking considerations towards the safety and reliability of their projects is likely to damage their good-will and kindness to share back future vulnerabilities that they might discover first and also affecting us. \r\n\r\nIMHO, those are good reasons to express high-standards of behaviors among us, as otherwise we might as a group pay the indelicacies of one contributor.\r\n\r\nI think it's important to have a safety-first mindset to contribute to Bitcoin protocols development.",
      "created_at" : "2021-09-30T17:29:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-931521654",
      "id" : 931521654,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843heR2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931521654/reactions"
      },
      "updated_at" : "2021-09-30T17:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931521654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "1. Policy is a per-node and per-miner decision. What they choose should never be a security concern to anyone else - if it is, the \"someone else\" has the security flaw, not the node/miner imposing the policy. The \"something else\" in question should be fixed regardless of what policy nodes/miners choose.\r\n2. If policies were based on what is good for the network, Bitcoin Core wouldn't make blocks over ~300k. Rather, unfortunately the policy here has been what certain devs expect to make miners the most short-term profit at the expense of the rest of the network and long-term.\r\n\r\nI don't think @glozow did anything wrong by opening this PR here.",
      "created_at" : "2021-10-03T18:36:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-933003261",
      "id" : 933003261,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843nH_9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933003261/reactions"
      },
      "updated_at" : "2021-10-03T18:36:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933003261",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @glozow For public records, before to open this PR, have you informed Bitcoin Core maintainers of your discovery yes or no ?\r\n\r\nNo, because this is not a security vulnerability or even a bug in Bitcoin Core. A disclosure that boils down to \"if your transaction is signed with ANYONECANPAY and opts in to RBF, anyone can pay to RBF it. Our mempool evaluates its fees according to the rules specified in BIP125\" is unnecessary.\r\n\r\nThank you for the education on disclosing security issues delicately. If I find an issue that could cause mempool resource exhaustion, deviation from p2p protocol or consensus, or acceptance of uneconomical replacements, I'll keep it in mind.\r\n\r\nAs described in the OP, this PR implements a TODO item documented in the code. Code review and testing is welcome.",
      "created_at" : "2021-10-04T13:33:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-933491274",
      "id" : 933491274,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843o_JK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933491274/reactions"
      },
      "updated_at" : "2021-10-04T13:33:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933491274",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@luke-jr\r\n\r\nSure, I think it's one stand to recommend users or downstream projects to minimize assumptions on node policies, as it's ultimately not (and can't be) uniform on the p2p network. But I would say it's another thinking when we find a defect or bug in our code behavior, of which correctness signaling is present (AFAICT bip125, including the rule 2, is present in `doc/bips.md`). Without going as far as safety implications, a mempool behavior bug might disrupt the availability of some bitcoin services providers or even alter their economic units, as this knowledge could constitute a  competitive advantage. E.g being able to fee-bump your transactions thanks to unconfirmed inputs to deliver withdraws faster than your competitors.\r\n\r\nAs your second point seems to indicate, policies design philosophy is a subject of discussions among devs. Advocating my position, I think we should aim to guarantee a high quality of service to upper layers and downstream projects, aligned with Bitcoin principles. And aiming to this end, promote good software engineering practices such as documenting our transaction relay behavior (see #22806).\r\n\r\nAs the project philosophy is still fluctuating w.r.t if and how we should handle newer security models, I agree that @glozow isn't wrong by opening this PR.\r\n\r\n@glozow\r\n\r\n> No, because this is not a security vulnerability or even a bug in Bitcoin Core. A disclosure that boils down to \"if your transaction is signed with ANYONECANPAY and opts in to RBF, anyone can pay to RBF it. Our mempool evaluates its fees according to the rules specified in BIP125\" is unnecessary.\r\n\r\nWell, I think that qualifies as a breach of the fee-bumping protocol of any protocols that broadcasts `ANYONECANPAY`-signed inputs ? As of today, I would say we're lucky it's not deployed (yet) in production :)\r\n\r\nBut in the coming years, if we have billions of funds secured by assumptions around mempool behavior,  I think it's better to have a more defined security process than failing in a really noisy ecosystem drama. Better safe than sorry :/\r\n\r\n> If I find an issue that could cause mempool resource exhaustion, deviation from p2p protocol or consensus, or acceptance of uneconomical replacements, I'll keep it in mind.\r\n\r\nYeah, even if you have an established security model well in-mind, the public perception of how you handle *potentially* security-sensitive information is another thing. The question of \"Oh shit we can lose money that way ?\" can turn quickly as a not-that-clear one in Bitcoin. E.g, before the 2013 LevelDB bug ([CVE-2013-3220](https://en.bitcoin.it/wiki/BIP_0050)), it wasn't really in developers common knowledge that a database change could provoke a consensus failure. So sharing the information with project maintainers or other regular contributors is a way to protect your reputation in case of after-the-fact issues.\r\n\r\nOverall, thanks to John and you for this discovery, please find more of them and Concept ACK on this PR.",
      "created_at" : "2021-10-04T21:00:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-933850746",
      "id" : 933850746,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843qW56",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933850746/reactions"
      },
      "updated_at" : "2021-10-04T21:00:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933850746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "User @prayank23 is having difficulty commenting on this PR for some reason, so I am relaying his comments/questions from IRC:\r\n\r\n> Two questions for PR author:\r\n> 1. Unconfirmed UTXO are discouraged in Core. Does this PR change default behaviour? Context: https://github.com/bitcoin-core/gui/issues/242\r\n> 2. Why do you think it's not a bug if attacker can confirm a tx with less fee rate by replacing? It can be exploited if we had on chain DeFi but I am not sure what all projects are currently impacted",
      "created_at" : "2021-10-05T07:47:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-934154169",
      "id" : 934154169,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843rg-5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934154169/reactions"
      },
      "updated_at" : "2021-10-05T07:47:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934154169",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-10-22T11:29:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-949543686",
      "id" : 949543686,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5844mOMG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949543686/reactions"
      },
      "updated_at" : "2021-10-22T11:29:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949543686",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "rebased and added documentation for our RBF policy + difference with BIP125",
      "created_at" : "2021-10-22T13:50:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-949650522",
      "id" : 949650522,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5844moRa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949650522/reactions"
      },
      "updated_at" : "2021-10-22T13:50:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949650522",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-11-09T17:05:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-964351324",
      "id" : 964351324,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5845etVc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964351324/reactions"
      },
      "updated_at" : "2021-11-09T17:05:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964351324",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased",
      "created_at" : "2021-11-09T20:37:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-964522620",
      "id" : 964522620,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5845fXJ8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964522620/reactions"
      },
      "updated_at" : "2021-11-09T20:37:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964522620",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r746469903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746469903"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n\r\n```suggestion\r\n        tx.vin[i].prevout.n = input_indices[i];\r\n```\r\n\r\nI'm not sure it's worth having this mechanism of fallback to `0` but only for the last inputs, it's a bit confusing.\r\nMaybe just making `input_indices` completely optional (in which case you'd use `0` for all inputs) is better?\r\nAnd if it's provided then it should be provided for all inputs.\r\nIn that case it would be:\r\n\r\n```suggestion\r\n        tx.vin[i].prevout.n = input_indices.size() > 0 ? input_indices[i] : 0;\r\n```\r\n\r\nFeel free to ignore though if you disagree.",
      "commit_id" : "3847e4178676ebf041f3bda6ff9e9b8c5733cb48",
      "created_at" : "2021-11-10T10:49:00Z",
      "diff_hunk" : "@@ -0,0 +1,115 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <policy/policy.h>\n+#include <policy/rbf.h>\n+#include <txmempool.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <optional>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(rbf_tests, TestingSetup)\n+\n+inline CTransactionRef make_tx(std::vector<CAmount>&& output_values,\n+                               std::vector<CTransactionRef>&& inputs=std::vector<CTransactionRef>(),\n+                               std::vector<uint32_t>&& input_indices=std::vector<uint32_t>())\n+{\n+    CMutableTransaction tx = CMutableTransaction();\n+    tx.vin.resize(inputs.size());\n+    tx.vout.resize(output_values.size());\n+    for (size_t i = 0; i < inputs.size(); ++i) {\n+        tx.vin[i].prevout.hash = inputs[i]->GetHash();\n+        tx.vin[i].prevout.n = input_indices.size() > i ? input_indices[i] : 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r746469903",
      "id" : 746469903,
      "line" : 27,
      "node_id" : "PRRC_kwDOABII584sfjoP",
      "original_commit_id" : "3847e4178676ebf041f3bda6ff9e9b8c5733cb48",
      "original_line" : 27,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/test/rbf_tests.cpp",
      "position" : 27,
      "pull_request_review_id" : 802421550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746469903/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-10T10:55:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746469903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r746474581"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746474581"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be worth documenting the CPFP carve-out rule (in the `doc` folder, similarly to RBF)?\r\nEspecially now that it does require no new unconfirmed inputs which RBF doesn't?\r\nIt can be done in a separate PR though.",
      "commit_id" : "3847e4178676ebf041f3bda6ff9e9b8c5733cb48",
      "created_at" : "2021-11-10T10:55:10Z",
      "diff_hunk" : "@@ -763,7 +763,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     ws.m_iters_conflicting = m_pool.GetIterSet(ws.m_conflicts);\n     // Calculate in-mempool ancestors, up to a limit.\n-    if (ws.m_conflicts.size() == 1) {\n+    if (ws.m_conflicts.size() == 1 && HasNoNewUnconfirmed(tx, m_pool, ws.m_iters_conflicting)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r746474581",
      "id" : 746474581,
      "line" : 766,
      "node_id" : "PRRC_kwDOABII584sfkxV",
      "original_commit_id" : "3847e4178676ebf041f3bda6ff9e9b8c5733cb48",
      "original_line" : 766,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 5,
      "pull_request_review_id" : 802421550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746474581/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-10T10:55:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746474581",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/31281497?v=4",
         "events_url" : "https://api.github.com/users/t-bast/events{/privacy}",
         "followers_url" : "https://api.github.com/users/t-bast/followers",
         "following_url" : "https://api.github.com/users/t-bast/following{/other_user}",
         "gists_url" : "https://api.github.com/users/t-bast/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/t-bast",
         "id" : 31281497,
         "login" : "t-bast",
         "node_id" : "MDQ6VXNlcjMxMjgxNDk3",
         "organizations_url" : "https://api.github.com/users/t-bast/orgs",
         "received_events_url" : "https://api.github.com/users/t-bast/received_events",
         "repos_url" : "https://api.github.com/users/t-bast/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/t-bast/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/t-bast/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/t-bast"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r765561187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765561187"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry it took me so long to get to this - added in #23711",
      "commit_id" : "3847e4178676ebf041f3bda6ff9e9b8c5733cb48",
      "created_at" : "2021-12-09T08:56:23Z",
      "diff_hunk" : "@@ -763,7 +763,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     ws.m_iters_conflicting = m_pool.GetIterSet(ws.m_conflicts);\n     // Calculate in-mempool ancestors, up to a limit.\n-    if (ws.m_conflicts.size() == 1) {\n+    if (ws.m_conflicts.size() == 1 && HasNoNewUnconfirmed(tx, m_pool, ws.m_iters_conflicting)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r765561187",
      "id" : 765561187,
      "in_reply_to_id" : 746474581,
      "line" : 766,
      "node_id" : "PRRC_kwDOABII584toYlj",
      "original_commit_id" : "3847e4178676ebf041f3bda6ff9e9b8c5733cb48",
      "original_line" : 766,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 5,
      "pull_request_review_id" : 827374002,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765561187/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-09T08:56:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765561187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-12-20T09:43:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-997759943",
      "id" : 997759943,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5847eJvH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997759943/reactions"
      },
      "updated_at" : "2021-12-20T09:43:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997759943",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r777130812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777130812"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In this function, we should be thinking about the \"ancestor score\" of a transaction as the minimum of its ancestor feerate and its own feerate.  A transaction should never sort higher in the ancestor scoring comparison than its own feerate, because the parent transactions can be included without the child.\r\n",
      "commit_id" : "3847e4178676ebf041f3bda6ff9e9b8c5733cb48",
      "created_at" : "2022-01-01T19:04:26Z",
      "diff_hunk" : "@@ -174,3 +167,35 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckAncestorScores(CAmount replacement_fees,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r777130812",
      "id" : 777130812,
      "line" : 167,
      "node_id" : "PRRC_kwDOABII584uUhM8",
      "original_commit_id" : "258f184a6a8955398a1666f22562a0c173d499cf",
      "original_line" : 171,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 19,
      "pull_request_review_id" : 842354501,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777130812/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-01T19:27:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777130812",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r777131366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777131366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If we want to fix the issue where a replacement transaction might have a worse mining score than some transactions it replaces, then I think the conservative thing to do would be to compare the ancestor score of the replacement transaction with the actual feerates of the conflicted transactions themselves (ie not the ancestor feerate of the conflicted transactions).\r\n\r\nThe rationale is that you never know if some sibling transaction might exist in the mempool that would cause the ancestors of a target transaction to be mined, allowing the target transaction to be considered using its own feerate (rather than being weighed down by low feerate parents). \r\n\r\nThis may be overly conservative; I think the real question that we're trying to answer with the feerate checks is something like \"are the fees expected to be paid in the next (N?) blocks higher or lower if we process this transaction\", which is not very easy to answer with the tools we have at our disposal.  If we're okay being conservative here for the use cases that we're trying to support, then I think comparing ancestor score to actual feerates would be an easy fix.",
      "commit_id" : "3847e4178676ebf041f3bda6ff9e9b8c5733cb48",
      "created_at" : "2022-01-01T19:12:34Z",
      "diff_hunk" : "@@ -174,3 +167,35 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckAncestorScores(CAmount replacement_fees,\n+                                               int64_t replacement_vsize,\n+                                               const CTxMemPool::setEntries& ancestors,\n+                                               const CTxMemPool::setEntries& all_conflicts)\n+{\n+    assert(!all_conflicts.empty());\n+    // Ancestor score is the total modified fees divided by the total size.\n+    // To get the ancestor score, add up all the individual modified fees and sizes. Don't try to\n+    // use the cached ancestor fees and sizes, because entries may have overlapping ancestors.\n+    for (CTxMemPool::txiter it : ancestors) {\n+        replacement_fees += it->GetModifiedFee();\n+        replacement_vsize += it->GetTxSize();\n+    }\n+    const CFeeRate replacement_ancestor_score(replacement_fees, replacement_vsize);\n+    for (CTxMemPool::txiter it : all_conflicts) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#discussion_r777131366",
      "id" : 777131366,
      "line" : 181,
      "node_id" : "PRRC_kwDOABII584uUhVm",
      "original_commit_id" : "258f184a6a8955398a1666f22562a0c173d499cf",
      "original_line" : 185,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/policy/rbf.cpp",
      "position" : 33,
      "pull_request_review_id" : 842354501,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23121",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777131366/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-01T19:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777131366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review @sdaftuar!\r\n\r\n> If we want to fix the issue where a replacement transaction might have a worse mining score than some transactions it replaces, then I think the conservative thing to do would be to compare the ancestor score of the replacement transaction with the actual feerates of the conflicted transactions themselves (ie not the ancestor feerate of the conflicted transactions).\r\n\r\n> The rationale is that you never know if some sibling transaction might exist in the mempool that would cause the ancestors of a target transaction to be mined, allowing the target transaction to be considered using its own feerate (rather than being weighed down by low feerate parents).\r\n\r\nMy understanding is:  When a _future_ block template is built, a transaction's mining score may include none, some, or all of its *current* mempool ancestors, e.g. because of a high feerate sibling.\r\nTo ensure that our replacement transaction is not a worse mining candidate than the conflicting transactions in a *conservative* manner, we'll require `worst-case replacement tx feerate` >= `best-case conflicting tx feerate` for every conflicting tx (best-case meaning highest feerate, and worst-case meaning lowest feerate).\r\n\r\nSince `individual feerate` always >= `ancestor feerate` for any tx, this means we require\r\n`replacement tx ancestor feerate` >= `conflicting tx individual feerate` for every conflicting transaction.\r\n\r\nTo clarify, we would need to do this comparison with every conflicting transaction and all their descendants (not just direct conflicts), since they may have high-feerate descendants? Or do we only consider directly conflicting transactions, and perhaps the other RBF rules are sufficient to ensure we are being incentive-compatible (based on this [comment](https://github.com/bitcoin/bitcoin/blob/2211fe712d2d3d7669b083752f1a8facb8bc4a29/src/policy/rbf.cpp#L137-L139))?\r\n\r\nIf we compare with all conflicts, this could be too conservative, at least for package RBF. For example:\r\n\r\nAlice (adversary) and Bob (honest) have a LN channel, where Alice has commitment tx A1, Bob has commitment tx B1.\r\n\r\nAlice broadcasts A1 <- A2 <- A3, where A2 is a very large child of A1, and A3 is a very small child of A2.\r\nA2 has a low feerate and A3 has an extremely high feerate. This package, as a whole, has a low ancestor feerate.\r\n\r\nBob broadcasts a package, B1 <- B2, where B2 is a fee-bumping child of B1.\r\nPerhaps Bob's package is higher feerate than Alice's package, but since B2's ancestor feerate must be higher than A3's individual feerate, Bob's package is rejected.\r\n\r\n===\r\n\r\n> I think the real question that we're trying to answer with the feerate checks is something like \"are the fees expected to be paid in the next (N?) blocks higher or lower if we process this transaction\", which is not very easy to answer with the tools we have at our disposal.\r\n\r\nI suppose if N=1, we can just compare ancestor feerates? Only when N>1, the transaction's future mining score may be different from its current ancestor feerate.",
      "created_at" : "2022-01-04T12:38:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-1004774370",
      "id" : 1004774370,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII584746Pi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004774370/reactions"
      },
      "updated_at" : "2022-01-04T13:02:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004774370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "<snip summary of block construction and feerate scores, which all sounds correct to me>\r\n\r\n> To clarify, we would need to do this comparison with every conflicting transaction and all their descendants (not just direct conflicts), since they may have high-feerate descendants? Or do we only consider directly conflicting transactions, and perhaps the other RBF rules are sufficient to ensure we are being incentive-compatible (based on this comment)?\r\n\r\nSo if we only compare ancestor feerates to the direct conflicts' actual feerates, then we might very well replace a transaction that would be included in the next block:\r\n\r\nConsider a set of transactions: A1 <- A2 where A2 is a child of A1, and suppose that A1 is small and very low fee, and A2 is small and very high fee.  We can do this so that (A1, A2) would be a candidate for inclusion in the next block.\r\n\r\nThen construct a transaction B that conflicts with A1, and is much larger than A1 and A2 and pays a low feerate (and greater total fee than A1+A2).  It could satisfy the RBF total fee requirement and the requirement that its ancestor feerate exceed A1's actual feerate, without being a candidate for inclusion in any blocks in the near future, even though (A1, A2) might already be in our set of transactions to include in the next block.  \r\n\r\nSo that seems like it wouldn't be incentive compatible.\r\n\r\n> If we compare with all conflicts, this could be too conservative, at least for package RBF. For example:\r\n>\r\n> Alice (adversary) and Bob (honest) have a LN channel, where Alice has commitment tx A1, Bob has commitment tx B1.\r\n> \r\n> Alice broadcasts A1 <- A2 <- A3, where A2 is a very large child of A1, and A3 is a very small child of A2. A2 has a low feerate and A3 has an extremely high feerate. This package, as a whole, has a low ancestor feerate.\r\n> \r\n> Bob broadcasts a package, B1 <- B2, where B2 is a fee-bumping child of B1. Perhaps Bob's package is higher feerate than Alice's package, but since B2's ancestor feerate must be higher than A3's individual feerate, Bob's package is rejected.\r\n\r\nThanks for bringing up a concrete example to consider.  (I'm just taking it as an assumption that any other issues around package RBF have already been solved -- I haven't thought it all through in a while.). In this example, since A3 is very small and B2+B1 already have pay enough total fee to exceed A1+A2+A3, isn't it a pretty small economic difference to further require that B2 have an ancestor feerate greater than A3's actual feerate?\r\n\r\nI think the underlying issue is that we may already want to be relaxing the total fee requirement somehow, because transaction pinning with our current RBF rules -- ie, requiring that B1+B2 actually pay more total fee than A1+A2+A3, even though that package is low value to miners -- has been a problem for some time, and I think people would like a solution to that.  However it's a bit tough to consider what the RBF feerate requirements should be in the absence of a concrete proposal of what we might do differently for the total fees as well.  (If we relaxed both, then I think it'd be easy to construct examples where miners are reducing their fees in the next block, which wouldn't be incentive compatible.)\r\n\r\nFrom a practical perspective, it seems to me like we could \"solve\" the issues around incentive compatibility with our current RBF rules (along the lines of what I described above of requiring ancestor feerates to be greater than actual feerates of all transactions which would be replaced), and then later address the pinning problems.  However, I don't know if this is actually good for the ecosystem as a whole, since other Bitcoin transaction creators might care a lot about the precise relay behavior here, so making multiple changes -- and particularly, making transaction replacement worse somehow in the interim by becoming more conservative -- might be pretty unwelcome.  So maybe it would be better to craft a new proposal that addresses both problems, try to solicit feedback about whether it would solve the issues people are running into, and then fix both?",
      "created_at" : "2022-01-04T13:55:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-1004831407",
      "id" : 1004831407,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII58475IKv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004831407/reactions"
      },
      "updated_at" : "2022-01-04T14:04:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004831407",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   }
]
