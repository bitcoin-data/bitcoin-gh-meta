{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "Iâve been working on a coin selection algorithm using Evolutionary Algorithm. I am creating this issue to discuss the possibilities related to it. If here is not the best place to discuss it, feel free to close this issue. \r\n\r\nIf you donât know what an Evolutionary Algorithm is, here is a good definition: \"EA is a subset of evolutionary computation, a generic population-based metaheuristic optimization algorithm. An EA uses mechanisms inspired by biological evolution, such as reproduction, mutation, recombination, and selection. Candidate solutions to the optimization problem play the role of individuals in a population, and the fitness function determines the quality of the solutions (see also loss function). Evolution of the population then takes place after the repeated application of the above operators\". Anyway, I recommend you to study more about EA before trying to understand this proposal. \r\n\r\nIn Evolutionary Algorithms we have genes, chromosomes, and population, for example:\r\n![image](https://user-images.githubusercontent.com/19480819/135721326-4b8213c5-e9ad-4656-b6ef-f68dbbb5ddac.png)\r\n\r\nSo, to begin our algorithm, we must first create an initial population. The population will contain an arbitrary number of possible solutions to the problem, oftentimes called members. In this case, a gene is a UTXO, so, every chromosome is a set of UTXOs. \r\n\r\n```\r\nmember1 = [utxo1, utxo2, utxo3]\r\nmember2 = [uxto2, utxo5, utxo6, utxo7, utxo8]\r\n...\r\n```\r\n\r\nTo create the initial population, we can use the following approach (considering 5 members per population):\r\n\r\n- 1 member composed of all UTXOs\r\n- 1 member that selects randomly from the shuffled UTXOs until the target is exceeded\r\n- 3 random members\r\n\r\nObs.: Most evolutionary algorithms set a length for the chromosome. However, for this approach, we donât do it because we don't know how many UTXOs our final solution will use. \r\n\r\nOk, having our initial population, it is time to evaluate each solution (fitness). To do it, we can use the waste metric, introduced in Bitcoin Core recently. So, our metric to evaluate the members is the cost of creating change, the excess selection amount, and the cost of spending inputs now as opposed to sometime in the future (when we expect to be able to consolidate inputs). See more: https://bitcoincore.reviews/22009\r\n\r\nAfter evaluating each member, we can define what is the best one among them and build our next population (new generation).\r\n\r\nOur new population will have (considering 5 members): \r\n\r\n- 3 members from mutation\r\n- 1 member keeping the same chromosome of the best solution from the previous generation\r\n- 1 new random member\r\n\r\nConsidering 50% mutation rate, we create 3 members copying the same chromosome of the best solution from the previous generation and applying mutation, like:\r\n\r\n```\r\nfor (gene in chromosome) {\r\n  const random_value = getRandomValueBetween0and1()\r\n  if (random_value == 1) {\r\n    gene = getRandomUtxo()\r\n  }\r\n}\r\n```\r\n\r\nOk, now we have a new population, and then, we can repeat all the processes (fitness and mutation) N times (being N the number of generations), the best member of the last generation will be our final solution.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23164/comments",
   "created_at" : "2021-10-03T02:00:38Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23164/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/23164",
   "id" : 1014229762,
   "labels" : [
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23164/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII5848c-sC",
   "number" : 23164,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23164/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23164/timeline",
   "title" : "Coin selection algorithm proposal",
   "updated_at" : "2021-10-03T02:00:38Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23164",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
      "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
      "followers_url" : "https://api.github.com/users/brunoerg/followers",
      "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/brunoerg",
      "id" : 19480819,
      "login" : "brunoerg",
      "node_id" : "MDQ6VXNlcjE5NDgwODE5",
      "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
      "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
      "repos_url" : "https://api.github.com/users/brunoerg/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/brunoerg"
   }
}
