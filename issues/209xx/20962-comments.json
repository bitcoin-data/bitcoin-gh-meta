[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25172](https://github.com/bitcoin/bitcoin/pull/25172) (refactor: use std:: prefix for std lib funcs by fanquake)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-01-24T23:59:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-766463849",
      "id" : 766463849,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2NjQ2Mzg0OQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766463849/reactions"
      },
      "updated_at" : "2022-05-24T08:14:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766463849",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-01-26T09:06:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-767404737",
      "id" : 767404737,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2NzQwNDczNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-26T09:06:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767404737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2021-01-29T08:47:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-769666976",
      "id" : 769666976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2OTY2Njk3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-29T08:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769666976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa @jonasschnelli Is there a reason why this PR has stalled?",
      "created_at" : "2021-05-23T17:36:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-846598517",
      "id" : 846598517,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NjU5ODUxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-23T17:36:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/846598517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659021347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659021347"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should this be `K_2`?",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-25T20:32:30Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659021347",
      "id" : 659021347,
      "line" : 76,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTAyMTM0Nw==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 76,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 125,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659021347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659066917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659066917"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(nit): \"AEAD state changes (can't be called multiple times)\" -> \"AAD keystream will advance. As a result, DecryptLength() cannot be called multiple times to get the same result. The caller must cache the result for re-use.\"",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-25T22:29:19Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.\n+*/\n+\n+const int KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20ReKey4096 {\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+public:\n+    ~ChaCha20ReKey4096();\n+    void SetKey(const unsigned char* key, size_t keylen);\n+    void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n+};\n \n class ChaCha20Poly1305AEAD\n {\n private:\n-    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n-    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n-    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n-    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+    ChaCha20ReKey4096 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20ReKey4096 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n \n public:\n     ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n \n     explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n \n     /** Encrypts/decrypts a packet\n-        seqnr_payload, the message sequence number\n-        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n-        aad_pos, position to use in the AAD keystream to encrypt the AAD\n         dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n         destlen, length of the destination buffer\n         src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n         src_len, the length of the source buffer\n         is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n         */\n-    bool Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n+    bool Crypt(unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n \n-    /** decrypts the 3 bytes AAD data and decodes it into a uint32_t field */\n-    bool GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext);\n+    /** decrypts the 3 bytes AAD data (the packet length) and decodes it into a uint32_t field\n+        the ciphertext will not be manipulated but the AEAD state changes (can't be called multiple times)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659066917",
      "id" : 659066917,
      "line" : 136,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTA2NjkxNw==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 136,
      "original_position" : 195,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 195,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659066917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659072624"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659072624"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `[[nodiscard]]` ?\r\n\r\nAlso, can we add to the comments: \"Returns true if encipher succeeds. Upon failure, the data at `dest` should not be used\"",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-25T22:49:13Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.\n+*/\n+\n+const int KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20ReKey4096 {\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+public:\n+    ~ChaCha20ReKey4096();\n+    void SetKey(const unsigned char* key, size_t keylen);\n+    void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n+};\n \n class ChaCha20Poly1305AEAD\n {\n private:\n-    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n-    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n-    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n-    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+    ChaCha20ReKey4096 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20ReKey4096 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n \n public:\n     ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n \n     explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n \n     /** Encrypts/decrypts a packet\n-        seqnr_payload, the message sequence number\n-        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n-        aad_pos, position to use in the AAD keystream to encrypt the AAD\n         dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n         destlen, length of the destination buffer\n         src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n         src_len, the length of the source buffer\n         is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n         */\n-    bool Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n+    bool Crypt(unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659072624",
      "id" : 659072624,
      "line" : 133,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTA3MjYyNA==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 133,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 190,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659072624",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659072639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659072639"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could this function signature be `[[nodiscard]] uint32_t DecryptLength(const uint8_t* ciphertext)` ? I'm curious why we return value using the pointer argument ?",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-25T22:49:19Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.\n+*/\n+\n+const int KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20ReKey4096 {\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+public:\n+    ~ChaCha20ReKey4096();\n+    void SetKey(const unsigned char* key, size_t keylen);\n+    void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n+};\n \n class ChaCha20Poly1305AEAD\n {\n private:\n-    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n-    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n-    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n-    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+    ChaCha20ReKey4096 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20ReKey4096 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n \n public:\n     ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n \n     explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n \n     /** Encrypts/decrypts a packet\n-        seqnr_payload, the message sequence number\n-        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n-        aad_pos, position to use in the AAD keystream to encrypt the AAD\n         dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n         destlen, length of the destination buffer\n         src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n         src_len, the length of the source buffer\n         is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n         */\n-    bool Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n+    bool Crypt(unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n \n-    /** decrypts the 3 bytes AAD data and decodes it into a uint32_t field */\n-    bool GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext);\n+    /** decrypts the 3 bytes AAD data (the packet length) and decodes it into a uint32_t field\n+        the ciphertext will not be manipulated but the AEAD state changes (can't be called multiple times)\n+        Ciphertext needs to stay encrypted due to the MAC check that will follow (requires encrypted length)\n+        */\n+    bool DecryptLength(uint32_t* len24_out, const uint8_t* ciphertext);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659072639",
      "id" : 659072639,
      "line" : 139,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTA3MjYzOQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 139,
      "original_position" : 198,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 198,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659072639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659089284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659089284"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it make sense for this to be done in a constructor since this class implements re-keying internally and ideally, the user should not call this function more than once on an instance?",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-26T00:07:58Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.\n+*/\n+\n+const int KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20ReKey4096 {\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+public:\n+    ~ChaCha20ReKey4096();\n+    void SetKey(const unsigned char* key, size_t keylen);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659089284",
      "id" : 659089284,
      "line" : 111,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTA4OTI4NA==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 111,
      "original_position" : 160,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 160,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659089284",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659123550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659123550"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "To make sure I am understanding this correctly (did try it in godbolt): \r\n\r\n`ReadLE32(&m_keystream[m_keystream_pos])` will interpret 4 bytes starting at `m_keystream_pos` as a little endian encoded `uint32_t`. This means the LSB of the `uint32_t` will be the byte at `m_keystream[m_keystream_pos]`. The XOR with unsigned char will only use this LSB. Perhaps this was done for batching but not needed right now?\r\n\r\nI applied the patch below and `crypto_tests/chacha20_poly1305_aead_testvector` passed.\r\n\r\n```diff\r\ndiff --git a/src/crypto/chacha_poly_aead.cpp b/src/crypto/chacha_poly_aead.cpp\r\nindex bf261df55..139168fd7 100644\r\n--- a/src/crypto/chacha_poly_aead.cpp\r\n+++ b/src/crypto/chacha_poly_aead.cpp\r\n@@ -46,8 +46,7 @@ void ChaCha20ReKey4096::Crypt(const unsigned char* input, unsigned char* output,\r\n \r\n     // TODO: speedup with a block approach (rather then looping over every byte)\r\n     while (bytes > message_pos) {\r\n-        output[message_pos] = input[message_pos] ^ ReadLE32(&m_keystream[m_keystream_pos]);\r\n-        m_keystream_pos++;\r\n+        output[message_pos] = input[message_pos] ^ m_keystream[m_keystream_pos++];\r\n         message_pos++;\r\n         if (m_keystream_pos == KEYSTREAM_SIZE-CHACHA20_POLY1305_AEAD_KEY_LEN) {\r\n             // we reached the end of the keystream\r\n```",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-26T05:40:07Z",
      "diff_hunk" : "@@ -27,19 +28,52 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n+void ChaCha20ReKey4096::SetKey(const unsigned char* key, size_t keylen) {\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20ReKey4096::Crypt(const unsigned char* input, unsigned char* output, size_t bytes) {\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ ReadLE32(&m_keystream[m_keystream_pos]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659123550",
      "id" : 659123550,
      "line" : 49,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTEyMzU1MA==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 49,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 30,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659123550",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659123909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659123909"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could we leave a comment here that `SetKey()` also sets the counter and IV to zero?",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-26T05:44:24Z",
      "diff_hunk" : "@@ -27,19 +28,52 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n+void ChaCha20ReKey4096::SetKey(const unsigned char* key, size_t keylen) {\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20ReKey4096::Crypt(const unsigned char* input, unsigned char* output, size_t bytes) {\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ ReadLE32(&m_keystream[m_keystream_pos]);\n+        m_keystream_pos++;\n+        message_pos++;\n+        if (m_keystream_pos == KEYSTREAM_SIZE-CHACHA20_POLY1305_AEAD_KEY_LEN) {\n+            // we reached the end of the keystream\n+            // rekey with the remaining and last 32 bytes and precompute the next 4096 bytes\n+            m_ctx.SetKey(&m_keystream[m_keystream_pos], CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659123909",
      "id" : 659123909,
      "line" : 55,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTEyMzkwOQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 55,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 36,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659123909",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659124563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659124563"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be useful to completely hide the details of the encrypted length from the user of this class? \r\n\r\nThat way, for encryption:\r\n`src=plaintext; dest=encrypted length + ciphertext + MAC`\r\n\r\nfor decryption:\r\n`src=encrypted length + ciphertext + MAC; dest=plaintext`\r\n\r\nThis would:\r\n- Eliminate the awkwardness around the user of this class accidentally calling `DecryptLength` multiple times.\r\n- Eliminate the possibility that the user of this class forgets to terminate the connection if the decrypted length does not match the length of the payload.\r\n\r\nOr perhaps I am missing a reason the user of the class might need to know the decrypted length.",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-26T05:51:55Z",
      "diff_hunk" : "@@ -27,19 +28,52 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n+void ChaCha20ReKey4096::SetKey(const unsigned char* key, size_t keylen) {\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20ReKey4096::Crypt(const unsigned char* input, unsigned char* output, size_t bytes) {\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ ReadLE32(&m_keystream[m_keystream_pos]);\n+        m_keystream_pos++;\n+        message_pos++;\n+        if (m_keystream_pos == KEYSTREAM_SIZE-CHACHA20_POLY1305_AEAD_KEY_LEN) {\n+            // we reached the end of the keystream\n+            // rekey with the remaining and last 32 bytes and precompute the next 4096 bytes\n+            m_ctx.SetKey(&m_keystream[m_keystream_pos], CHACHA20_POLY1305_AEAD_KEY_LEN);\n+            m_ctx.SetIV(++m_seqnr);\n+            m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+            // reset keystream position\n+            m_keystream_pos = 0;\n+        }\n+    }\n+}\n+\n+ChaCha20ReKey4096::~ChaCha20ReKey4096() {\n+    memory_cleanse(m_keystream, KEYSTREAM_SIZE);\n+}\n+\n ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n {\n     assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n     assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n     m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n     m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n-\n-    // set the cached sequence number to uint64 max which hints for an unset cache.\n-    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n-    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n }\n \n-bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+bool ChaCha20Poly1305AEAD::Crypt(unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659124563",
      "id" : 659124563,
      "line" : 76,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTEyNDU2Mw==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 76,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 62,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659124563",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659125693"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659125693"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "should this be \"the length has already been decrypted\"?",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-26T06:01:59Z",
      "diff_hunk" : "@@ -52,18 +86,24 @@ bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int\n \n     unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n     memset(poly_key, 0, sizeof(poly_key));\n-    m_chacha_main.SetIV(seqnr_payload);\n \n-    // block counter 0 for the poly1305 key\n-    // use lower 32bytes for the poly1305 key\n-    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n-    m_chacha_main.Seek(0);\n-    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));\n+    // 1. AAD (the encrypted packet length), use the header-keystream\n+    if (is_encrypt) {\n+        m_chacha_header.Crypt(src, dest, 3);\n+    } else {\n+        // we must use ChaCha20Poly1305AEAD::DecryptLength before calling ChaCha20Poly1305AEAD::Crypt\n+        // thus the length has already been encrypted, avoid doing it again and messing up the keystream position",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659125693",
      "id" : 659125693,
      "line" : 95,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTEyNTY5Mw==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 95,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 82,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659125693",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659179980"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659179980"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(nit): \"IV of 0 and a block counter of 0 and a sequence number 0 as IV\" -> \"sequence number 0 as IV and a block counter of 0\"",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-26T15:22:14Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659179980",
      "id" : 659179980,
      "line" : 60,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTE3OTk4MA==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 60,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 109,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659179980",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659180419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659180419"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In #18242, I see that the bytes are accessible as a `Span` and `Span::size()` seems available. Would it be useful to say something like: \"If the decrypted length does not match the payload length, the connection MUST be immediately terminated?\" \r\n\r\nAt first I thought that is implicitly delegated to the MAC, but we don't seem to confirm that the length is correct when encrypting either.",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-26T15:27:30Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659180419",
      "id" : 659180419,
      "line" : 84,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTE4MDQxOQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 84,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 133,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659180419",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659180737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659180737"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(nit): \"Finally, calculate a MAC tag and append it.\" -> \"Finally, calculate a MAC tag(using poly1305 key from stream keyed with K_1) and append it.\"",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-26T15:30:22Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659180737",
      "id" : 659180737,
      "line" : 98,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTE4MDczNw==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 98,
      "original_position" : 147,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 147,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659180737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659181005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659181005"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "should \"(with K_2, the packet sequence number as nonce and a starting block counter of 1)\" now be just \"(using stream keyed with K_2)\"? IIUC, the block counter could be anything in `[0, 7]` (since 8 * 512 = 4096), right?",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-26T15:32:54Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659181005",
      "id" : 659181005,
      "line" : 90,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTE4MTAwNQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 90,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 139,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/659181005",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r660004965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/660004965"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This line implies that the decrypted length is len(AAD) + len(payload). I interpreted, [this](https://gist.github.com/jonasschnelli/c530ea8421b8d0e80c51486325587c52#v2-messages-structure) to mean that the decrypted length is the length of the ciphertext of the payload alone.\r\n\r\nIf this is intentional, can we make it clearer in the BIP? IIUC, typically, in other protocols, the length in the preamble is the length of the payload that follows. Did we want to do it that way?",
      "commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "created_at" : "2021-06-28T18:01:16Z",
      "diff_hunk" : "@@ -629,56 +616,27 @@ static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aa\n     BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n     BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n \n-    // manually construct the AAD keystream\n-    cmp_ctx.SetIV(seqnr_aad);\n-    cmp_ctx.Seek(0);\n-    cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n-    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n-    // crypt the 3 length bytes and compare the length\n-    uint32_t len_cmp = 0;\n-    len_cmp = (ciphertext_buf[0] ^ cmp_ctx_buffer[aad_pos + 0]) |\n-              (ciphertext_buf[1] ^ cmp_ctx_buffer[aad_pos + 1]) << 8 |\n-              (ciphertext_buf[2] ^ cmp_ctx_buffer[aad_pos + 2]) << 16;\n-    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n-\n-    // encrypt / decrypt 1000 packets\n+    BOOST_CHECK(aead_in.DecryptLength(&out_len, ciphertext_buf.data()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r660004965",
      "id" : 660004965,
      "line" : 619,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDAwNDk2NQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 619,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 59,
      "pull_request_review_id" : 693173094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-28T18:11:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/660004965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-08-19T03:18:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-901577870",
      "id" : 901577870,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII5841vPyO",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-19T03:18:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/901577870",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694251569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694251569"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:32:06Z",
      "diff_hunk" : "@@ -27,19 +28,52 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n+void ChaCha20ReKey4096::SetKey(const unsigned char* key, size_t keylen) {\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20ReKey4096::Crypt(const unsigned char* input, unsigned char* output, size_t bytes) {\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ ReadLE32(&m_keystream[m_keystream_pos]);\n+        m_keystream_pos++;\n+        message_pos++;\n+        if (m_keystream_pos == KEYSTREAM_SIZE-CHACHA20_POLY1305_AEAD_KEY_LEN) {\n+            // we reached the end of the keystream\n+            // rekey with the remaining and last 32 bytes and precompute the next 4096 bytes\n+            m_ctx.SetKey(&m_keystream[m_keystream_pos], CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694251569",
      "id" : 694251569,
      "in_reply_to_id" : 659123909,
      "line" : 57,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1MTU2OQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 57,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 41,
      "pull_request_review_id" : 736492544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:32:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694251569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694252767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694252767"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Or perhaps I am missing a reason the user of the class might need to know the decrypted length.\r\n\r\nI was missing the reason: Tried to do this and realized that the interface for `TransportDeserializer` actually requires the client of this class to be aware of the length because the bytes come in as a stream. ",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:33:59Z",
      "diff_hunk" : "@@ -27,19 +28,52 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n+void ChaCha20ReKey4096::SetKey(const unsigned char* key, size_t keylen) {\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20ReKey4096::Crypt(const unsigned char* input, unsigned char* output, size_t bytes) {\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ ReadLE32(&m_keystream[m_keystream_pos]);\n+        m_keystream_pos++;\n+        message_pos++;\n+        if (m_keystream_pos == KEYSTREAM_SIZE-CHACHA20_POLY1305_AEAD_KEY_LEN) {\n+            // we reached the end of the keystream\n+            // rekey with the remaining and last 32 bytes and precompute the next 4096 bytes\n+            m_ctx.SetKey(&m_keystream[m_keystream_pos], CHACHA20_POLY1305_AEAD_KEY_LEN);\n+            m_ctx.SetIV(++m_seqnr);\n+            m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+            // reset keystream position\n+            m_keystream_pos = 0;\n+        }\n+    }\n+}\n+\n+ChaCha20ReKey4096::~ChaCha20ReKey4096() {\n+    memory_cleanse(m_keystream, KEYSTREAM_SIZE);\n+}\n+\n ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n {\n     assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n     assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n     m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n     m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n-\n-    // set the cached sequence number to uint64 max which hints for an unset cache.\n-    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n-    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n }\n \n-bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+bool ChaCha20Poly1305AEAD::Crypt(unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694252767",
      "id" : 694252767,
      "in_reply_to_id" : 659124563,
      "line" : 82,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1Mjc2Nw==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 82,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 72,
      "pull_request_review_id" : 736494013,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:33:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694252767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255045"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thinking through this more, I realized that:\r\n- Sender errors in encrypted length cannot be corrected since the bytes for multiple p2p messages are in a single TCP stream. Such sender errors are protocol errors.\r\n- MITM errors/attacks will be caught by the MAC check.\r\n",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:37:20Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255045",
      "id" : 694255045,
      "in_reply_to_id" : 659180419,
      "line" : 84,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NTA0NQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 84,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 133,
      "pull_request_review_id" : 736496703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:37:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255584"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:38:14Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255584",
      "id" : 694255584,
      "in_reply_to_id" : 659021347,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NTU4NA==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 76,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 736497369,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:38:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255584",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255829"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:38:37Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.\n+*/\n+\n+const int KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20ReKey4096 {\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+public:\n+    ~ChaCha20ReKey4096();\n+    void SetKey(const unsigned char* key, size_t keylen);\n+    void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n+};\n \n class ChaCha20Poly1305AEAD\n {\n private:\n-    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n-    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n-    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n-    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+    ChaCha20ReKey4096 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20ReKey4096 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n \n public:\n     ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n \n     explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n \n     /** Encrypts/decrypts a packet\n-        seqnr_payload, the message sequence number\n-        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n-        aad_pos, position to use in the AAD keystream to encrypt the AAD\n         dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n         destlen, length of the destination buffer\n         src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n         src_len, the length of the source buffer\n         is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n         */\n-    bool Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n+    bool Crypt(unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n \n-    /** decrypts the 3 bytes AAD data and decodes it into a uint32_t field */\n-    bool GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext);\n+    /** decrypts the 3 bytes AAD data (the packet length) and decodes it into a uint32_t field\n+        the ciphertext will not be manipulated but the AEAD state changes (can't be called multiple times)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255829",
      "id" : 694255829,
      "in_reply_to_id" : 659066917,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NTgyOQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 136,
      "original_position" : 195,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 736497647,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:38:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255829",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255914"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255914"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:38:45Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.\n+*/\n+\n+const int KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20ReKey4096 {\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+public:\n+    ~ChaCha20ReKey4096();\n+    void SetKey(const unsigned char* key, size_t keylen);\n+    void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n+};\n \n class ChaCha20Poly1305AEAD\n {\n private:\n-    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n-    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n-    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n-    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+    ChaCha20ReKey4096 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20ReKey4096 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n \n public:\n     ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n \n     explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n \n     /** Encrypts/decrypts a packet\n-        seqnr_payload, the message sequence number\n-        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n-        aad_pos, position to use in the AAD keystream to encrypt the AAD\n         dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n         destlen, length of the destination buffer\n         src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n         src_len, the length of the source buffer\n         is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n         */\n-    bool Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n+    bool Crypt(unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255914",
      "id" : 694255914,
      "in_reply_to_id" : 659072624,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NTkxNA==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 133,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 736497751,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:38:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255961"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:38:52Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.\n+*/\n+\n+const int KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20ReKey4096 {\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+public:\n+    ~ChaCha20ReKey4096();\n+    void SetKey(const unsigned char* key, size_t keylen);\n+    void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n+};\n \n class ChaCha20Poly1305AEAD\n {\n private:\n-    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n-    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n-    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n-    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+    ChaCha20ReKey4096 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20ReKey4096 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n \n public:\n     ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n \n     explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n \n     /** Encrypts/decrypts a packet\n-        seqnr_payload, the message sequence number\n-        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n-        aad_pos, position to use in the AAD keystream to encrypt the AAD\n         dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n         destlen, length of the destination buffer\n         src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n         src_len, the length of the source buffer\n         is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n         */\n-    bool Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n+    bool Crypt(unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n \n-    /** decrypts the 3 bytes AAD data and decodes it into a uint32_t field */\n-    bool GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext);\n+    /** decrypts the 3 bytes AAD data (the packet length) and decodes it into a uint32_t field\n+        the ciphertext will not be manipulated but the AEAD state changes (can't be called multiple times)\n+        Ciphertext needs to stay encrypted due to the MAC check that will follow (requires encrypted length)\n+        */\n+    bool DecryptLength(uint32_t* len24_out, const uint8_t* ciphertext);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255961",
      "id" : 694255961,
      "in_reply_to_id" : 659072639,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NTk2MQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 139,
      "original_position" : 198,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 736497826,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:38:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694255961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256303"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694256303"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:39:27Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.\n+*/\n+\n+const int KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20ReKey4096 {\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+public:\n+    ~ChaCha20ReKey4096();\n+    void SetKey(const unsigned char* key, size_t keylen);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256303",
      "id" : 694256303,
      "in_reply_to_id" : 659089284,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NjMwMw==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 111,
      "original_position" : 160,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 736498251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:39:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694256303",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256461"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694256461"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:39:44Z",
      "diff_hunk" : "@@ -27,19 +28,52 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n+void ChaCha20ReKey4096::SetKey(const unsigned char* key, size_t keylen) {\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20ReKey4096::Crypt(const unsigned char* input, unsigned char* output, size_t bytes) {\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ ReadLE32(&m_keystream[m_keystream_pos]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256461",
      "id" : 694256461,
      "in_reply_to_id" : 659123550,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NjQ2MQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 49,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 736498448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:39:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694256461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694256688"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:40:06Z",
      "diff_hunk" : "@@ -52,18 +86,24 @@ bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int\n \n     unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n     memset(poly_key, 0, sizeof(poly_key));\n-    m_chacha_main.SetIV(seqnr_payload);\n \n-    // block counter 0 for the poly1305 key\n-    // use lower 32bytes for the poly1305 key\n-    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n-    m_chacha_main.Seek(0);\n-    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));\n+    // 1. AAD (the encrypted packet length), use the header-keystream\n+    if (is_encrypt) {\n+        m_chacha_header.Crypt(src, dest, 3);\n+    } else {\n+        // we must use ChaCha20Poly1305AEAD::DecryptLength before calling ChaCha20Poly1305AEAD::Crypt\n+        // thus the length has already been encrypted, avoid doing it again and messing up the keystream position",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256688",
      "id" : 694256688,
      "in_reply_to_id" : 659125693,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NjY4OA==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 95,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 736498726,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:40:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694256688",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694256838"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:40:21Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256838",
      "id" : 694256838,
      "in_reply_to_id" : 659179980,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NjgzOA==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 60,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 736498917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694256838",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694257137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694257137"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:40:52Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as\n+* nonce and a starting block counter of 1).\n+*\n+* Detection of an invalid MAC MUST lead to immediate connection termination.\n+*\n+* To send a packet, first encode the 3 byte length and encrypt it using the\n+* ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+* (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+* length. Finally, calculate a MAC tag and append it.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694257137",
      "id" : 694257137,
      "in_reply_to_id" : 659180737,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NzEzNw==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 98,
      "original_position" : 147,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 736499289,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:40:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694257137",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694257391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694257391"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:41:18Z",
      "diff_hunk" : "@@ -36,111 +37,106 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)\n+*\n+* The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+* keyed with K_1 and K_2 and IV of 0 and a block counter of 0 and a sequence\n+* number 0 as IV. After encrypting 4064 bytes, the following 32 bytes are used to\n+* re-key the ChaCha20 context.\n+*\n+* Byte-level forward security is possible by precomputing 4096 bytes of stream\n+* output, caching it, resetting the key to the final 32 bytes of the output, and\n+* then wiping the remaining 4064 bytes of cached data as it gets used.\n+*\n+* For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+* K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+* generate a Poly1305 key.\n+*\n+* If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+* 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+* incrementing the sequence number + 1 and set is as IV (little endian encoding).\n+*\n+* For the payload, use the ChaCha20 stream keyed with K_1 and apply the same\n+* re-key rules.\n+*\n+*\n+* ==== Packet Handling ====\n+*\n+* When receiving a packet, the length must be decrypted first. When 3 bytes of\n+* ciphertext length have been received, they MUST be decrypted.\n+*\n+* Once the entire packet has been received, the MAC MUST be checked before\n+* decryption. A per-packet Poly1305 key is generated as described above and the\n+* MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n+* packet length and the payload together. The calculated MAC is then compared in\n+* constant time with the one appended to the packet and the packet decrypted\n+* using ChaCha20 as described above (with K_2, the packet sequence number as",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694257391",
      "id" : 694257391,
      "in_reply_to_id" : 659181005,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1NzM5MQ==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 90,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 736499604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:41:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694257391",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694258297"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694258297"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The BIP, the unit test and the bench test have been updated to be consistently clear that the encrypted length is `len(ciphertext_payload)` and not `len(ciphertext_payload + ciphertext_aad)`",
      "commit_id" : "1a868b11b04f6701f0b739d4e039ea1e343de233",
      "created_at" : "2021-08-23T19:42:54Z",
      "diff_hunk" : "@@ -629,56 +616,27 @@ static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aa\n     BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n     BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n \n-    // manually construct the AAD keystream\n-    cmp_ctx.SetIV(seqnr_aad);\n-    cmp_ctx.Seek(0);\n-    cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n-    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n-    // crypt the 3 length bytes and compare the length\n-    uint32_t len_cmp = 0;\n-    len_cmp = (ciphertext_buf[0] ^ cmp_ctx_buffer[aad_pos + 0]) |\n-              (ciphertext_buf[1] ^ cmp_ctx_buffer[aad_pos + 1]) << 8 |\n-              (ciphertext_buf[2] ^ cmp_ctx_buffer[aad_pos + 2]) << 16;\n-    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n-\n-    // encrypt / decrypt 1000 packets\n+    BOOST_CHECK(aead_in.DecryptLength(&out_len, ciphertext_buf.data()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694258297",
      "id" : 694258297,
      "in_reply_to_id" : 660004965,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDI1ODI5Nw==",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 619,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 736500815,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-23T19:42:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694258297",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I will be taking on this PR. Rebased with master. Addressed my own comments. Ready for further review.",
      "created_at" : "2021-08-23T20:39:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-904108753",
      "id" : 904108753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII584145rR",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-23T20:39:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904108753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696008360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696008360"
         }
      },
      "author_association" : "NONE",
      "body" : "`AAD_PACKAGES_PER_ROUND` is defined but not used anywhere. Couldn't we remove it?",
      "commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "created_at" : "2021-08-25T18:23:49Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n #define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n \n #include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n \n #include <cmath>\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696008360",
      "id" : 696008360,
      "line" : 12,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjAwODM2MA==",
      "original_commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "original_line" : 12,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 7,
      "pull_request_review_id" : 738693637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-25T19:14:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696008360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696015556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696015556"
         }
      },
      "author_association" : "NONE",
      "body" : "Since we're already initialising `m_seqnr` with 0 in the class definition of `ChaCha20Forward4064`, https://github.com/bitcoin/bitcoin/blob/424e0100fbea0ac8106b25a9b23698f2c2cd7a4f/src/crypto/chacha_poly_aead.h#L107  Couldn't we remove this line from the constructor?",
      "commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "created_at" : "2021-08-25T18:33:58Z",
      "diff_hunk" : "@@ -27,20 +28,58 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n-ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+ChaCha20Forward4064::ChaCha20Forward4064(const unsigned char* key, size_t keylen)\n {\n-    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696015556",
      "id" : 696015556,
      "line" : 37,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjAxNTU1Ng==",
      "original_commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "original_line" : 37,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 21,
      "pull_request_review_id" : 738693637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-25T19:14:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696015556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696016509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696016509"
         }
      },
      "author_association" : "NONE",
      "body" : "Since we're already initialising `m_keystream_pos` with 0 in the class definition of `ChaCha20Forward4064`, https://github.com/bitcoin/bitcoin/blob/424e0100fbea0ac8106b25a9b23698f2c2cd7a4f/src/crypto/chacha_poly_aead.h#L108 Couldn't we remove this line from the constructor?",
      "commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "created_at" : "2021-08-25T18:35:28Z",
      "diff_hunk" : "@@ -27,20 +28,58 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n-ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+ChaCha20Forward4064::ChaCha20Forward4064(const unsigned char* key, size_t keylen)\n {\n-    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696016509",
      "id" : 696016509,
      "line" : 42,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjAxNjUwOQ==",
      "original_commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "original_line" : 42,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 26,
      "pull_request_review_id" : 738693637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-25T19:14:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696016509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696022694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696022694"
         }
      },
      "author_association" : "NONE",
      "body" : "We are checking whether the key length is 32 on this line https://github.com/bitcoin/bitcoin/blob/424e0100fbea0ac8106b25a9b23698f2c2cd7a4f/src/crypto/chacha_poly_aead.cpp#L33 when the constructors of `m_chacha_header` and `m_chacha_main` get called. So couldn't we remove these 2 lines?",
      "commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "created_at" : "2021-08-25T18:44:41Z",
      "diff_hunk" : "@@ -27,20 +28,58 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n-ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+ChaCha20Forward4064::ChaCha20Forward4064(const unsigned char* key, size_t keylen)\n {\n-    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20Forward4064::Crypt(const unsigned char* input, unsigned char* output, size_t bytes)\n+{\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ m_keystream[m_keystream_pos];\n+        m_keystream_pos++;\n+        message_pos++;\n+        if (m_keystream_pos == KEYSTREAM_SIZE - CHACHA20_POLY1305_AEAD_KEY_LEN) {\n+            // we reached the end of the keystream\n+            // rekey with the remaining and last 32 bytes and precompute the next 4096 bytes\n+            m_ctx.SetKey(&m_keystream[m_keystream_pos], CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+            // m_ctx.SetKey() sets both IV and counter to zero, but we need the IV to increment.\n+            m_ctx.SetIV(++m_seqnr);\n+            m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+            // reset keystream position\n+            m_keystream_pos = 0;\n+        }\n+    }\n+}\n \n-    m_chacha_header.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    m_chacha_main.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+ChaCha20Forward4064::~ChaCha20Forward4064()\n+{\n+    memory_cleanse(m_keystream, KEYSTREAM_SIZE);\n+}\n \n-    // set the cached sequence number to uint64 max which hints for an unset cache.\n-    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n-    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1,\n+                                           size_t K_1_len,\n+                                           const unsigned char* K_2,\n+                                           size_t K_2_len) : m_chacha_header(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN), m_chacha_main(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696022694",
      "id" : 696022694,
      "line" : 79,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjAyMjY5NA==",
      "original_commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "original_line" : 79,
      "original_position" : 68,
      "original_start_line" : 78,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 68,
      "pull_request_review_id" : 738693637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : 78,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-25T19:14:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696022694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706917217"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch. Fixed.",
      "commit_id" : "8a9daf57ed7e9f1b3ce2524ff6a5797293bfa9de",
      "created_at" : "2021-09-12T21:47:09Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n #define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n \n #include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n \n #include <cmath>\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917217",
      "id" : 706917217,
      "in_reply_to_id" : 696008360,
      "line" : 12,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjkxNzIxNw==",
      "original_commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "original_line" : 12,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 7,
      "pull_request_review_id" : 752218440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-12T21:47:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706917217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917227"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706917227"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "8a9daf57ed7e9f1b3ce2524ff6a5797293bfa9de",
      "created_at" : "2021-09-12T21:47:15Z",
      "diff_hunk" : "@@ -27,20 +28,58 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n-ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+ChaCha20Forward4064::ChaCha20Forward4064(const unsigned char* key, size_t keylen)\n {\n-    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917227",
      "id" : 706917227,
      "in_reply_to_id" : 696015556,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjkxNzIyNw==",
      "original_commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "original_line" : 37,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 752218448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-12T21:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706917227",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706917252"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "8a9daf57ed7e9f1b3ce2524ff6a5797293bfa9de",
      "created_at" : "2021-09-12T21:47:30Z",
      "diff_hunk" : "@@ -27,20 +28,58 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n-ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+ChaCha20Forward4064::ChaCha20Forward4064(const unsigned char* key, size_t keylen)\n {\n-    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917252",
      "id" : 706917252,
      "in_reply_to_id" : 696016509,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjkxNzI1Mg==",
      "original_commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "original_line" : 42,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 752218464,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-12T21:47:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706917252",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706917333"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I find these asserts clarifying and afaict, C++ asserts are optimized away in release builds so it's not slowing anything down. Leaving these in here for now.",
      "commit_id" : "8a9daf57ed7e9f1b3ce2524ff6a5797293bfa9de",
      "created_at" : "2021-09-12T21:48:21Z",
      "diff_hunk" : "@@ -27,20 +28,58 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n-ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+ChaCha20Forward4064::ChaCha20Forward4064(const unsigned char* key, size_t keylen)\n {\n-    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20Forward4064::Crypt(const unsigned char* input, unsigned char* output, size_t bytes)\n+{\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ m_keystream[m_keystream_pos];\n+        m_keystream_pos++;\n+        message_pos++;\n+        if (m_keystream_pos == KEYSTREAM_SIZE - CHACHA20_POLY1305_AEAD_KEY_LEN) {\n+            // we reached the end of the keystream\n+            // rekey with the remaining and last 32 bytes and precompute the next 4096 bytes\n+            m_ctx.SetKey(&m_keystream[m_keystream_pos], CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+            // m_ctx.SetKey() sets both IV and counter to zero, but we need the IV to increment.\n+            m_ctx.SetIV(++m_seqnr);\n+            m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+            // reset keystream position\n+            m_keystream_pos = 0;\n+        }\n+    }\n+}\n \n-    m_chacha_header.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    m_chacha_main.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+ChaCha20Forward4064::~ChaCha20Forward4064()\n+{\n+    memory_cleanse(m_keystream, KEYSTREAM_SIZE);\n+}\n \n-    // set the cached sequence number to uint64 max which hints for an unset cache.\n-    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n-    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1,\n+                                           size_t K_1_len,\n+                                           const unsigned char* K_2,\n+                                           size_t K_2_len) : m_chacha_header(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN), m_chacha_main(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917333",
      "id" : 706917333,
      "in_reply_to_id" : 696022694,
      "line" : 77,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjkxNzMzMw==",
      "original_commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "original_line" : 77,
      "original_position" : 68,
      "original_start_line" : 78,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 66,
      "pull_request_review_id" : 752218529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : 76,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-12T21:48:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706917333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Comments from @stratospher addressed. Ready for further review.",
      "created_at" : "2021-09-12T21:48:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-917716402",
      "id" : 917716402,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII5842sz2y",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-12T21:48:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917716402",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r710606026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/710606026"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Update: Turns out this was mistaken. assert() is not optimized away in optimized Bitcoin Core builds.",
      "commit_id" : "8a9daf57ed7e9f1b3ce2524ff6a5797293bfa9de",
      "created_at" : "2021-09-17T00:27:34Z",
      "diff_hunk" : "@@ -27,20 +28,58 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n-ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+ChaCha20Forward4064::ChaCha20Forward4064(const unsigned char* key, size_t keylen)\n {\n-    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20Forward4064::Crypt(const unsigned char* input, unsigned char* output, size_t bytes)\n+{\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ m_keystream[m_keystream_pos];\n+        m_keystream_pos++;\n+        message_pos++;\n+        if (m_keystream_pos == KEYSTREAM_SIZE - CHACHA20_POLY1305_AEAD_KEY_LEN) {\n+            // we reached the end of the keystream\n+            // rekey with the remaining and last 32 bytes and precompute the next 4096 bytes\n+            m_ctx.SetKey(&m_keystream[m_keystream_pos], CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+            // m_ctx.SetKey() sets both IV and counter to zero, but we need the IV to increment.\n+            m_ctx.SetIV(++m_seqnr);\n+            m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+            // reset keystream position\n+            m_keystream_pos = 0;\n+        }\n+    }\n+}\n \n-    m_chacha_header.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n-    m_chacha_main.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+ChaCha20Forward4064::~ChaCha20Forward4064()\n+{\n+    memory_cleanse(m_keystream, KEYSTREAM_SIZE);\n+}\n \n-    // set the cached sequence number to uint64 max which hints for an unset cache.\n-    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n-    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1,\n+                                           size_t K_1_len,\n+                                           const unsigned char* K_2,\n+                                           size_t K_2_len) : m_chacha_header(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN), m_chacha_main(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r710606026",
      "id" : 710606026,
      "in_reply_to_id" : 696022694,
      "line" : 77,
      "node_id" : "PRRC_kwDOABII584qWvzK",
      "original_commit_id" : "424e0100fbea0ac8106b25a9b23698f2c2cd7a4f",
      "original_line" : 77,
      "original_position" : 68,
      "original_start_line" : 78,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 66,
      "pull_request_review_id" : 756952958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "side" : "RIGHT",
      "start_line" : 76,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-17T00:27:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/710606026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed https://github.com/bitcoin/bitcoin/pull/23233#discussion_r725442331 - ready for further review",
      "created_at" : "2021-10-10T04:52:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-939406631",
      "id" : 939406631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII5843_jUn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939406631/reactions"
      },
      "updated_at" : "2021-10-10T04:52:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939406631",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729853355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729853355"
         }
      },
      "author_association" : "NONE",
      "body" : "`#include <crypto/poly1305.h>` could be removed since `#include <crypto/chacha_poly_aead.h>` already imports poly1305.h.\r\n\r\nSimilar reasoning for removing [#include <crypto/chacha20.h>](https://github.com/bitcoin/bitcoin/blob/0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54/src/test/crypto_tests.cpp#L6) and [#include <crypto/poly1305.h>](https://github.com/bitcoin/bitcoin/blob/0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54/src/test/crypto_tests.cpp#L11) from src/test/crypto_tests.cpp since they get imported with `#include <crypto/chacha_poly_aead.h>`",
      "commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "created_at" : "2021-10-15T14:07:29Z",
      "diff_hunk" : "@@ -4,6 +4,7 @@\n \n #include <crypto/chacha_poly_aead.h>\n \n+#include <crypto/common.h>\n #include <crypto/poly1305.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729853355",
      "id" : 729853355,
      "line" : 8,
      "node_id" : "PRRC_kwDOABII584rgK2r",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 8,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 5,
      "pull_request_review_id" : 780869719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729853355/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-15T15:41:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729853355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729856909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729856909"
         }
      },
      "author_association" : "NONE",
      "body" : " `#include <cmath>` isn't being used.",
      "commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "created_at" : "2021-10-15T14:11:57Z",
      "diff_hunk" : "@@ -6,13 +6,13 @@\n #define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n \n #include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n \n #include <cmath>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729856909",
      "id" : 729856909,
      "line" : 11,
      "node_id" : "PRRC_kwDOABII584rgLuN",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 11,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 6,
      "pull_request_review_id" : 780869719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729856909/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-15T15:41:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729856909",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729859127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729859127"
         }
      },
      "author_association" : "NONE",
      "body" : "a typo for semantics? :)",
      "commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "created_at" : "2021-10-15T14:14:46Z",
      "diff_hunk" : "@@ -36,111 +36,113 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729859127",
      "id" : 729859127,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII584rgMQ3",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 56,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 113,
      "pull_request_review_id" : 780869719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729859127/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-15T15:41:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729859127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729868620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729868620"
         }
      },
      "author_association" : "NONE",
      "body" : "These imports can be removed since they aren't used:\r\n\r\n- `#include <string.h>`\r\n- `#include <cstdio>`\r\n- `#include <limits>`",
      "commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "created_at" : "2021-10-15T14:25:50Z",
      "diff_hunk" : "@@ -4,6 +4,7 @@\n \n #include <crypto/chacha_poly_aead.h>\n \n+#include <crypto/common.h>\n #include <crypto/poly1305.h>\n #include <support/cleanse.h>\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729868620",
      "id" : 729868620,
      "line" : 10,
      "node_id" : "PRRC_kwDOABII584rgOlM",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 10,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 7,
      "pull_request_review_id" : 780869719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729868620/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-15T15:41:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729868620",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729912610"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729912610"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These header files aren't used too and can be removed:\r\n\r\n- [`#include <cassert>`](https://github.com/bitcoin/bitcoin/blob/89b2499014fdf6b097e53119ae44e8376d957aef/src/test/fuzz/crypto_chacha20_poly1305_aead.cpp#L11)\r\n- [`#include <limits>`](https://github.com/bitcoin/bitcoin/blob/89b2499014fdf6b097e53119ae44e8376d957aef/src/test/fuzz/crypto_chacha20_poly1305_aead.cpp#L13)\r\n\r\nEDIT: I'm a bit confused about whether cassert needs to be removed. Even though an assert statement isn't used anywhere in the fuzz test file, it maybe needed in the fuzzing environment? ",
      "commit_id" : "0de3cb941f082bbe05fb9787dba8ec002213b67c",
      "created_at" : "2021-10-15T15:17:00Z",
      "diff_hunk" : "@@ -21,9 +21,6 @@ FUZZ_TARGET(crypto_chacha20_poly1305_aead)\n     const std::vector<uint8_t> k2 = ConsumeFixedLengthByteVector(fuzzed_data_provider, CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729912610",
      "id" : 729912610,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII584rgZUi",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 19,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20_poly1305_aead.cpp",
      "position" : 11,
      "pull_request_review_id" : 780869719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729912610/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-17T19:00:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729912610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729913514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729913514"
         }
      },
      "author_association" : "NONE",
      "body" : "`#include <limits>` can be removed since it's [usage](https://github.com/bitcoin/bitcoin/blob/281cf995547f7683a9e9186bc6384a9fb6035d10/src/bench/chacha_poly_aead.cpp#L53) in the file has been removed.",
      "commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "created_at" : "2021-10-15T15:18:10Z",
      "diff_hunk" : "@@ -19,43 +19,29 @@ static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n static const unsigned char k1[32] = {0};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729913514",
      "id" : 729913514,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII584rgZiq",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 19,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : 1,
      "pull_request_review_id" : 780869719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729913514/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-15T15:41:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729913514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729913698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729913698"
         }
      },
      "author_association" : "NONE",
      "body" : "`#include <crypto/poly1305.h>` could also be removed since `#include <crypto/chacha_poly_aead.h>` already imports `poly1305.h`.",
      "commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "created_at" : "2021-10-15T15:18:25Z",
      "diff_hunk" : "@@ -19,43 +19,29 @@ static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n static const unsigned char k1[32] = {0};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729913698",
      "id" : 729913698,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII584rgZli",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 19,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : 1,
      "pull_request_review_id" : 780869719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729913698/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-15T15:41:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729913698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729916359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729916359"
         }
      },
      "author_association" : "NONE",
      "body" : "[This comment](https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-939406631) suggestion can be applied here too.",
      "commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "created_at" : "2021-10-15T15:22:01Z",
      "diff_hunk" : "@@ -19,43 +19,29 @@ static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n static const unsigned char k1[32] = {0};\n static const unsigned char k2[32] = {0};\n \n-static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n-\n static void CHACHA20_POLY1305_AEAD(benchmark::Bench& bench, size_t buffersize, bool include_decryption)\n {\n-    std::vector<unsigned char> in(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n-    std::vector<unsigned char> out(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n-    uint64_t seqnr_payload = 0;\n-    uint64_t seqnr_aad = 0;\n-    int aad_pos = 0;\n-    uint32_t len = 0;\n+    ChaCha20Poly1305AEAD aead_in(k1, 32, k2, 32);\n+    ChaCha20Poly1305AEAD aead_out(k1, 32, k2, 32);\n+\n+    auto plaintext_len = buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    auto ciphertext_len = plaintext_len + POLY1305_TAGLEN;\n+\n+    std::vector<unsigned char> in(plaintext_len, 0);\n+    std::vector<unsigned char> out(ciphertext_len, 0);\n+\n     bench.batch(buffersize).unit(\"byte\").run([&] {\n         // encrypt or decrypt the buffer with a static key\n-        const bool crypt_ok_1 = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true);\n+        const bool crypt_ok_1 = aead_out.Crypt(out.data(), ciphertext_len, in.data(), plaintext_len, true);\n         assert(crypt_ok_1);\n \n         if (include_decryption) {\n             // if we decrypt, include the GetLength\n-            const bool get_length_ok = aead.GetLength(&len, seqnr_aad, aad_pos, in.data());\n-            assert(get_length_ok);\n-            const bool crypt_ok_2 = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true);\n+            auto len = aead_in.DecryptLength(out.data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729916359",
      "id" : 729916359,
      "line" : 40,
      "node_id" : "PRRC_kwDOABII584rgaPH",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 40,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : 34,
      "pull_request_review_id" : 780869719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729916359/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-15T15:41:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729916359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/44024636?v=4",
         "events_url" : "https://api.github.com/users/stratospher/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stratospher/followers",
         "following_url" : "https://api.github.com/users/stratospher/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stratospher/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stratospher",
         "id" : 44024636,
         "login" : "stratospher",
         "node_id" : "MDQ6VXNlcjQ0MDI0NjM2",
         "organizations_url" : "https://api.github.com/users/stratospher/orgs",
         "received_events_url" : "https://api.github.com/users/stratospher/received_events",
         "repos_url" : "https://api.github.com/users/stratospher/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stratospher/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stratospher/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stratospher"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-10-21T20:42:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-948987808",
      "id" : 948987808,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII5844kGeg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/948987808/reactions"
      },
      "updated_at" : "2021-10-21T20:42:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/948987808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734750164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734750164"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "0de3cb941f082bbe05fb9787dba8ec002213b67c",
      "created_at" : "2021-10-22T18:10:52Z",
      "diff_hunk" : "@@ -6,13 +6,13 @@\n #define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n \n #include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n \n #include <cmath>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734750164",
      "id" : 734750164,
      "in_reply_to_id" : 729856909,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584ry2XU",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 11,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 787142011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734750164/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-22T18:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734750164",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734750236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734750236"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : ":) done.",
      "commit_id" : "0de3cb941f082bbe05fb9787dba8ec002213b67c",
      "created_at" : "2021-10-22T18:11:00Z",
      "diff_hunk" : "@@ -36,111 +36,113 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+* instances of chacha20.\n+*\n+* The instance keyed by K_1 is a stream cipher that is used for the per-message\n+* metadata, specifically for the poly1305 authentication key as well as for the\n+* length encryption. The second instance, keyed by K_2, is used to encrypt the\n+* entire payload.\n+*\n+* Two separate cipher instances are used here so as to keep the packet lengths\n+* confidential (best effort; for passive observing) but not create an oracle for\n+* the packet payload cipher by decrypting and using the packet length prior to\n+* checking the MAC. By using an independently-keyed cipher instance to encrypt\n+* the length, an active attacker seeking to exploit the packet input handling as\n+* a decryption oracle can learn nothing about the payload contents or its MAC\n+* (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+* can still obtain the message length (ex. active ciphertext bit flipping or\n+* traffic shemantics analysis)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734750236",
      "id" : 734750236,
      "in_reply_to_id" : 729859127,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584ry2Yc",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 56,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 787142121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734750236/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-22T18:11:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734750236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734751354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734751354"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Need `string.h` for `size_t`: https://en.cppreference.com/w/c/types/size_t\r\nAdded `cstring` for `memset`: https://en.cppreference.com/w/cpp/string/byte/memset\r\n\r\nRemoved `cstdio` and `limits`",
      "commit_id" : "0de3cb941f082bbe05fb9787dba8ec002213b67c",
      "created_at" : "2021-10-22T18:12:54Z",
      "diff_hunk" : "@@ -4,6 +4,7 @@\n \n #include <crypto/chacha_poly_aead.h>\n \n+#include <crypto/common.h>\n #include <crypto/poly1305.h>\n #include <support/cleanse.h>\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734751354",
      "id" : 734751354,
      "in_reply_to_id" : 729868620,
      "line" : 10,
      "node_id" : "PRRC_kwDOABII584ry2p6",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 10,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 7,
      "pull_request_review_id" : 787143636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734751354/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-22T18:13:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734751354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734752019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734752019"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "0de3cb941f082bbe05fb9787dba8ec002213b67c",
      "created_at" : "2021-10-22T18:14:00Z",
      "diff_hunk" : "@@ -21,9 +21,6 @@ FUZZ_TARGET(crypto_chacha20_poly1305_aead)\n     const std::vector<uint8_t> k2 = ConsumeFixedLengthByteVector(fuzzed_data_provider, CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734752019",
      "id" : 734752019,
      "in_reply_to_id" : 729912610,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII584ry20T",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 19,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/test/fuzz/crypto_chacha20_poly1305_aead.cpp",
      "position" : 11,
      "pull_request_review_id" : 787144510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734752019/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-22T18:14:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734752019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734752108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734752108"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "0de3cb941f082bbe05fb9787dba8ec002213b67c",
      "created_at" : "2021-10-22T18:14:06Z",
      "diff_hunk" : "@@ -19,43 +19,29 @@ static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n static const unsigned char k1[32] = {0};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734752108",
      "id" : 734752108,
      "in_reply_to_id" : 729913514,
      "line" : 18,
      "node_id" : "PRRC_kwDOABII584ry21s",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 18,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : 9,
      "pull_request_review_id" : 787144598,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734752108/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-22T18:14:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734752108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734752398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734752398"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, I was looking for another place this was useful and didn't remember correctly. Thanks, @stratospher !",
      "commit_id" : "0de3cb941f082bbe05fb9787dba8ec002213b67c",
      "created_at" : "2021-10-22T18:14:33Z",
      "diff_hunk" : "@@ -19,43 +19,29 @@ static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n static const unsigned char k1[32] = {0};\n static const unsigned char k2[32] = {0};\n \n-static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n-\n static void CHACHA20_POLY1305_AEAD(benchmark::Bench& bench, size_t buffersize, bool include_decryption)\n {\n-    std::vector<unsigned char> in(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n-    std::vector<unsigned char> out(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n-    uint64_t seqnr_payload = 0;\n-    uint64_t seqnr_aad = 0;\n-    int aad_pos = 0;\n-    uint32_t len = 0;\n+    ChaCha20Poly1305AEAD aead_in(k1, 32, k2, 32);\n+    ChaCha20Poly1305AEAD aead_out(k1, 32, k2, 32);\n+\n+    auto plaintext_len = buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    auto ciphertext_len = plaintext_len + POLY1305_TAGLEN;\n+\n+    std::vector<unsigned char> in(plaintext_len, 0);\n+    std::vector<unsigned char> out(ciphertext_len, 0);\n+\n     bench.batch(buffersize).unit(\"byte\").run([&] {\n         // encrypt or decrypt the buffer with a static key\n-        const bool crypt_ok_1 = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true);\n+        const bool crypt_ok_1 = aead_out.Crypt(out.data(), ciphertext_len, in.data(), plaintext_len, true);\n         assert(crypt_ok_1);\n \n         if (include_decryption) {\n             // if we decrypt, include the GetLength\n-            const bool get_length_ok = aead.GetLength(&len, seqnr_aad, aad_pos, in.data());\n-            assert(get_length_ok);\n-            const bool crypt_ok_2 = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true);\n+            auto len = aead_in.DecryptLength(out.data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734752398",
      "id" : 734752398,
      "in_reply_to_id" : 729916359,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584ry26O",
      "original_commit_id" : "0b93e3d2e8ec8f495bc316df6dd6dcc690fc4b54",
      "original_line" : 40,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 787144980,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734752398/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-22T18:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734752398",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you for the great diagrams, @stratospher ! They'll come in handy at a future review club meeting and in docs.\r\n\r\nReview comments addressed. Rebased. Ready for further review.",
      "created_at" : "2021-10-22T18:15:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-949861062",
      "id" : 949861062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII5844nbrG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949861062/reactions"
      },
      "updated_at" : "2021-10-22T18:15:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949861062",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734937517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734937517"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "indention seem to be off-by-one for the remainder of this comment and a `*` is missing in line 37",
      "commit_id" : "0de3cb941f082bbe05fb9787dba8ec002213b67c",
      "created_at" : "2021-10-23T07:31:27Z",
      "diff_hunk" : "@@ -36,111 +34,113 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734937517",
      "id" : 734937517,
      "line" : 38,
      "node_id" : "PRRC_kwDOABII584rzkGt",
      "original_commit_id" : "380b137556b5b14ba9de45db850cfdbd1c43991d",
      "original_line" : 38,
      "original_position" : 97,
      "original_start_line" : 37,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 97,
      "pull_request_review_id" : 787368071,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734937517/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 37,
      "start_side" : "RIGHT",
      "updated_at" : "2021-10-23T07:31:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734937517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r743145219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743145219"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks for the catch. fixed.",
      "commit_id" : "6a651b5352e7444ad55e04e2738d241f8ef72518",
      "created_at" : "2021-11-04T19:34:35Z",
      "diff_hunk" : "@@ -36,111 +34,113 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  *\n  * ==== Detailed Construction ====\n  *\n- * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n- * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n- * instances of chacha20.\n- *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n- *\n- * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n- *\n- * ==== Packet Handling ====\n- *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n- *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n- *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n- *\n- * Once the entire packet has been received, the MAC MUST be checked before\n- * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n- * packet length and the payload together. The calculated MAC is then compared in\n- * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n- *\n- * Detection of an invalid MAC MUST lead to immediate connection termination.\n- *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n- */\n+The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+* output from the key exchange. Each key (K_1 and K_2) are used by two separate",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r743145219",
      "id" : 743145219,
      "in_reply_to_id" : 734937517,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sS38D",
      "original_commit_id" : "380b137556b5b14ba9de45db850cfdbd1c43991d",
      "original_line" : 38,
      "original_position" : 97,
      "original_start_line" : 37,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 798182555,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743145219/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-11-04T19:34:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743145219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed comments. Rebased against master to get the changes from #22735 which are needed to bring them into #23233 (downstream of this PR branch). Ready for further review.",
      "created_at" : "2021-11-04T19:35:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-961356337",
      "id" : 961356337,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII5845TSIx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/961356337/reactions"
      },
      "updated_at" : "2021-11-04T19:35:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/961356337",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed some comments for this PR left over at #23233 by @laanwj:\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/23233#discussion_r771579687\r\nhttps://github.com/bitcoin/bitcoin/pull/23233#discussion_r771538159\r\n\r\nI also rebased against master because at one point I had trouble running fuzz tests(but it turned out to be unrelated).\r\n\r\nReady for further review.\r\n",
      "created_at" : "2022-01-21T04:46:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-1018176974",
      "id" : 1018176974,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII5848sCXO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018176974/reactions"
      },
      "updated_at" : "2022-01-21T04:46:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018176974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-01-31T08:08:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-1025473107",
      "id" : 1025473107,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII5849H3pT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025473107/reactions"
      },
      "updated_at" : "2022-01-31T08:08:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025473107",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased. Ready for further review.\r\n\r\n`git range-diff 02e1d8d06f 41deee4 8b474d1`",
      "created_at" : "2022-02-02T02:50:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-1027525478",
      "id" : 1027525478,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII5849Pstm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1027525478/reactions"
      },
      "updated_at" : "2022-02-02T02:51:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1027525478",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, will review soon.",
      "created_at" : "2022-03-03T15:28:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-1058157143",
      "id" : 1058157143,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII584_EjJX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1058157143/reactions"
      },
      "updated_at" : "2022-03-03T15:28:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1058157143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks to @stratospher for finding a bug in the test code. We were using `WriteLE32` to write the 3 byte header plaintext _after_ the payload. This was overwriting the first byte in the payload.\r\n\r\n`git range-diff 91d12344b 8b474d1 97b768f`\r\n\r\nReady for further review.",
      "created_at" : "2022-03-21T20:12:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-1074367550",
      "id" : 1074367550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII585ACYw-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1074367550/reactions"
      },
      "updated_at" : "2022-03-21T22:04:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1074367550",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887864881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887864881"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The `ChaCha20Poly1305AEAD::Crypt` function uses argument order `dest`, `len`, `src`\r\nThe `ChaCha20Forward4064::Crypt` function uses argument order `input`, `output`, `bytes`\r\nLet's standardize on one, please.",
      "commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "created_at" : "2022-06-02T11:52:17Z",
      "diff_hunk" : "@@ -53,18 +85,24 @@ bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int\n \n     unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n     memset(poly_key, 0, sizeof(poly_key));\n-    m_chacha_main.SetIV(seqnr_payload);\n \n-    // block counter 0 for the poly1305 key\n-    // use lower 32bytes for the poly1305 key\n-    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n-    m_chacha_main.Seek(0);\n-    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));\n+    // 1. AAD (the encrypted packet length), use the header-keystream\n+    if (is_encrypt) {\n+        m_chacha_header.Crypt(src, dest, 3);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887864881",
      "id" : 887864881,
      "line" : 91,
      "node_id" : "PRRC_kwDOABII5840674x",
      "original_commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "original_line" : 91,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 94,
      "pull_request_review_id" : 993416434,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887864881/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T11:52:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887864881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887873124"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887873124"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, I had a similar idea, it's a bit awkward like this. But apparently there's a good reason.",
      "commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "created_at" : "2022-06-02T12:02:32Z",
      "diff_hunk" : "@@ -27,19 +28,52 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n+void ChaCha20ReKey4096::SetKey(const unsigned char* key, size_t keylen) {\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20ReKey4096::Crypt(const unsigned char* input, unsigned char* output, size_t bytes) {\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ ReadLE32(&m_keystream[m_keystream_pos]);\n+        m_keystream_pos++;\n+        message_pos++;\n+        if (m_keystream_pos == KEYSTREAM_SIZE-CHACHA20_POLY1305_AEAD_KEY_LEN) {\n+            // we reached the end of the keystream\n+            // rekey with the remaining and last 32 bytes and precompute the next 4096 bytes\n+            m_ctx.SetKey(&m_keystream[m_keystream_pos], CHACHA20_POLY1305_AEAD_KEY_LEN);\n+            m_ctx.SetIV(++m_seqnr);\n+            m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+            // reset keystream position\n+            m_keystream_pos = 0;\n+        }\n+    }\n+}\n+\n+ChaCha20ReKey4096::~ChaCha20ReKey4096() {\n+    memory_cleanse(m_keystream, KEYSTREAM_SIZE);\n+}\n+\n ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n {\n     assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n     assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n     m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n     m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n-\n-    // set the cached sequence number to uint64 max which hints for an unset cache.\n-    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n-    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n }\n \n-bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+bool ChaCha20Poly1305AEAD::Crypt(unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887873124",
      "id" : 887873124,
      "in_reply_to_id" : 659124563,
      "line" : 75,
      "node_id" : "PRRC_kwDOABII5840695k",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 75,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 77,
      "pull_request_review_id" : 993428109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887873124/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T12:02:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887873124",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887876110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887876110"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Having this mutable is slightly risky. Can we add `const` or `constexpr`?\r\nEdit: ok, this is \"only\" bench code, but still.",
      "commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "created_at" : "2022-06-02T12:06:30Z",
      "diff_hunk" : "@@ -3,59 +3,43 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n \n+#include <assert.h>\n #include <bench/bench.h>\n #include <crypto/chacha_poly_aead.h>\n #include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n #include <hash.h>\n \n-#include <assert.h>\n-#include <limits>\n+#include <vector>\n \n /* Number of bytes to process per iteration */\n static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n \n-static const unsigned char k1[32] = {0};\n-static const unsigned char k2[32] = {0};\n-\n-static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+static std::vector<unsigned char> zero_key(32, 0x00);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887876110",
      "id" : 887876110,
      "line" : 19,
      "node_id" : "PRRC_kwDOABII58406-oO",
      "original_commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "original_line" : 19,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : 23,
      "pull_request_review_id" : 993432468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887876110/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T12:07:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887876110",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887878270"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887878270"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If your intent is to have the contents of the Span const (which I think it is), this should be `Span<const unsigned char>`.\r\n(more of these below)",
      "commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "created_at" : "2022-06-02T12:09:10Z",
      "diff_hunk" : "@@ -27,20 +26,53 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n-ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+ChaCha20Forward4064::ChaCha20Forward4064(const Span<unsigned char> key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887878270",
      "id" : 887878270,
      "line" : 29,
      "node_id" : "PRRC_kwDOABII58406_J-",
      "original_commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "original_line" : 29,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 23,
      "pull_request_review_id" : 993435603,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887878270/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T12:10:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887878270",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887881231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887881231"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is \"encipher\" a word? If it means the same, I prefer \"encrypt or decrypt\".",
      "commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "created_at" : "2022-06-02T12:12:39Z",
      "diff_hunk" : "@@ -40,107 +39,109 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n  * instances of chacha20.\n  *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n+ * The instance keyed by K_1 is a stream cipher that is used for the per-message\n+ * metadata, specifically for the poly1305 authentication key as well as for the\n+ * length encryption. The second instance, keyed by K_2, is used to encrypt the\n+ * entire payload.\n  *\n  * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n+ * confidential (best effort; for passive observing) but not create an oracle for\n+ * the packet payload cipher by decrypting and using the packet length prior to\n+ * checking the MAC. By using an independently-keyed cipher instance to encrypt\n+ * the length, an active attacker seeking to exploit the packet input handling as\n+ * a decryption oracle can learn nothing about the payload contents or its MAC\n+ * (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+ * can still obtain the message length (ex. active ciphertext bit flipping or\n+ * traffic semantics analysis)\n  *\n- * ==== Packet Handling ====\n+ * The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+ * keyed with K_1 and K_2 and sequence number 0 as IV and a block counter of 0.\n+ * After encrypting 4064 bytes, the following 32 bytes are used to\n+ * re-key the ChaCha20 context.\n  *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n+ * Byte-level forward security is possible by precomputing 4096 bytes of stream\n+ * output, caching it, resetting the key to the final 32 bytes of the output, and\n+ * then wiping the remaining 4064 bytes of cached data as it gets used.\n+ *\n+ * For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+ * K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+ * generate a Poly1305 key.\n  *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n+ * If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+ * 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+ * incrementing the sequence number + 1 and set is as IV (little endian encoding).\n  *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n+ * For the payload, use the ChaCha20 stream keyed with K_2 and apply the same\n+ * re-key rules.\n+ *\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they MUST be decrypted.\n  *\n  * Once the entire packet has been received, the MAC MUST be checked before\n  * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n  * packet length and the payload together. The calculated MAC is then compared in\n  * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n+ * using ChaCha20 as described above (using stream keyed with K_2).\n  *\n  * Detection of an invalid MAC MUST lead to immediate connection termination.\n  *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n+ * To send a packet, first encode the 3 byte length and encrypt it using the\n+ * ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+ * (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+ * length. Finally, calculate a MAC tag (using poly1305 key from stream keyed with K_1)\n+ * and append it.\n  */\n \n+const size_t KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20Forward4064\n+{\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+\n+public:\n+    ChaCha20Forward4064(const Span<unsigned char> key);\n+    ~ChaCha20Forward4064();\n+    void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n+};\n+\n class ChaCha20Poly1305AEAD\n {\n private:\n-    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length) and poly1305 key-derivation cipher instance\n-    ChaCha20 m_chacha_main;                                      // payload\n-    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n-    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+    ChaCha20Forward4064 m_chacha_header; // AAD cipher instance (encrypted length) and poly1305 key-derivation cipher instance\n+    ChaCha20Forward4064 m_chacha_main;   // payload\n \n public:\n-    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+    ChaCha20Poly1305AEAD(const Span<unsigned char> K_F, const Span<unsigned char> K_V);\n \n     explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n \n     /** Encrypts/decrypts a packet\n-        seqnr_payload, the message sequence number\n-        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n-        aad_pos, position to use in the AAD keystream to encrypt the AAD\n         dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n         destlen, length of the destination buffer\n         src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n         src_len, the length of the source buffer\n         is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n+\n+        Returns true if encipher succeeds. Upon failure, the data at dest should not be used.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r887881231",
      "id" : 887881231,
      "line" : 133,
      "node_id" : "PRRC_kwDOABII58406_4P",
      "original_commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "original_line" : 133,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 177,
      "pull_request_review_id" : 993439660,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887881231/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T12:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887881231",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895303646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895303646"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done. New implementation uses spans and I went with `input, output` everywhere.",
      "commit_id" : "b6166568a306ef41da33b5f97623d9678dd1a36c",
      "created_at" : "2022-06-13T03:43:51Z",
      "diff_hunk" : "@@ -53,18 +85,24 @@ bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int\n \n     unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n     memset(poly_key, 0, sizeof(poly_key));\n-    m_chacha_main.SetIV(seqnr_payload);\n \n-    // block counter 0 for the poly1305 key\n-    // use lower 32bytes for the poly1305 key\n-    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n-    m_chacha_main.Seek(0);\n-    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));\n+    // 1. AAD (the encrypted packet length), use the header-keystream\n+    if (is_encrypt) {\n+        m_chacha_header.Crypt(src, dest, 3);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895303646",
      "id" : 895303646,
      "in_reply_to_id" : 887864881,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841XT_e",
      "original_commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "original_line" : 91,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 1003753351,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895303646/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-13T03:43:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895303646",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895303936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895303936"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done across the board.",
      "commit_id" : "b6166568a306ef41da33b5f97623d9678dd1a36c",
      "created_at" : "2022-06-13T03:45:05Z",
      "diff_hunk" : "@@ -27,20 +26,53 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n-ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+ChaCha20Forward4064::ChaCha20Forward4064(const Span<unsigned char> key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895303936",
      "id" : 895303936,
      "in_reply_to_id" : 887878270,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841XUEA",
      "original_commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "original_line" : 29,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 1003753751,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895303936/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-13T03:45:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895303936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895304058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895304058"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "b6166568a306ef41da33b5f97623d9678dd1a36c",
      "created_at" : "2022-06-13T03:45:31Z",
      "diff_hunk" : "@@ -40,107 +39,109 @@ static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n  * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n  * instances of chacha20.\n  *\n- * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n- * byte packet length field and has its own sequence number. The second instance,\n- * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n- * (Authenticated Encryption with Associated Data) that is used to encrypt and\n- * authenticate the entire packet.\n+ * The instance keyed by K_1 is a stream cipher that is used for the per-message\n+ * metadata, specifically for the poly1305 authentication key as well as for the\n+ * length encryption. The second instance, keyed by K_2, is used to encrypt the\n+ * entire payload.\n  *\n  * Two separate cipher instances are used here so as to keep the packet lengths\n- * confidential but not create an oracle for the packet payload cipher by\n- * decrypting and using the packet length prior to checking the MAC. By using an\n- * independently-keyed cipher instance to encrypt the length, an active attacker\n- * seeking to exploit the packet input handling as a decryption oracle can learn\n- * nothing about the payload contents or its MAC (assuming key derivation,\n- * ChaCha20 and Poly1305 are secure).\n- *\n- * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n- * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n- * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n- * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n- * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n- * is used for encryption of the packet payload.\n+ * confidential (best effort; for passive observing) but not create an oracle for\n+ * the packet payload cipher by decrypting and using the packet length prior to\n+ * checking the MAC. By using an independently-keyed cipher instance to encrypt\n+ * the length, an active attacker seeking to exploit the packet input handling as\n+ * a decryption oracle can learn nothing about the payload contents or its MAC\n+ * (assuming key derivation, ChaCha20 and Poly1305 are secure). Active observers\n+ * can still obtain the message length (ex. active ciphertext bit flipping or\n+ * traffic semantics analysis)\n  *\n- * ==== Packet Handling ====\n+ * The AEAD is constructed as follows: generate two ChaCha20 streams, initially\n+ * keyed with K_1 and K_2 and sequence number 0 as IV and a block counter of 0.\n+ * After encrypting 4064 bytes, the following 32 bytes are used to\n+ * re-key the ChaCha20 context.\n  *\n- * When receiving a packet, the length must be decrypted first. When 3 bytes of\n- * ciphertext length have been received, they may be decrypted.\n+ * Byte-level forward security is possible by precomputing 4096 bytes of stream\n+ * output, caching it, resetting the key to the final 32 bytes of the output, and\n+ * then wiping the remaining 4064 bytes of cached data as it gets used.\n+ *\n+ * For each packet, use 3 bytes from the remaining ChaCha20 stream generated using\n+ * K_1 to encrypt the length. Use additional 32 bytes of the same stream to\n+ * generate a Poly1305 key.\n  *\n- * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n- * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n- * thus be used 21 times (keystream caching).\n+ * If we reach bytes 4064 on the ChaCha20 stream, use the next 32 bytes (byte\n+ * 4065-4096) and set is as the new ChaCha20 key, reset the counter to 0 while\n+ * incrementing the sequence number + 1 and set is as IV (little endian encoding).\n  *\n- * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n- * K_1 defined by block counter 0, the length field sequence number in little\n- * endian and a keystream position from 0 to 60.\n+ * For the payload, use the ChaCha20 stream keyed with K_2 and apply the same\n+ * re-key rules.\n+ *\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they MUST be decrypted.\n  *\n  * Once the entire packet has been received, the MAC MUST be checked before\n  * decryption. A per-packet Poly1305 key is generated as described above and the\n- * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * MAC tag is calculated using Poly1305 with this key over the ciphertext of the\n  * packet length and the payload together. The calculated MAC is then compared in\n  * constant time with the one appended to the packet and the packet decrypted\n- * using ChaCha20 as described above (with K_2, the packet sequence number as\n- * nonce and a starting block counter of 1).\n+ * using ChaCha20 as described above (using stream keyed with K_2).\n  *\n  * Detection of an invalid MAC MUST lead to immediate connection termination.\n  *\n- * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n- * described above. Encrypt the packet payload (using K_2) and append it to the\n- * encrypted length. Finally, calculate a MAC tag and append it.\n- *\n- * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n- * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n- * the receive channel.\n- *\n- * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n- * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n- * on the send channel.\n- *\n- * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n- * general, therefore it is very likely that encrypted messages require not more\n- * CPU cycles per bytes then the current unencrypted p2p message format\n- * (ChaCha20/Poly1305 versus double SHA256).\n- *\n- * The initial packet sequence numbers are 0.\n- *\n- * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n- * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n- * {key, nonce}.\n- *\n- * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n- * position-in-keystream} for encryption nor may it be used to encrypt more than\n- * 2^70 bytes under the same {key, nonce}.\n- *\n- * We use message sequence numbers for both communication directions.\n+ * To send a packet, first encode the 3 byte length and encrypt it using the\n+ * ChaCha20 stream keyed with K_1 as described above. Encrypt the packet payload\n+ * (using the ChaCha20 stream keyed with K_2) and append it to the encrypted\n+ * length. Finally, calculate a MAC tag (using poly1305 key from stream keyed with K_1)\n+ * and append it.\n  */\n \n+const size_t KEYSTREAM_SIZE = 4096;\n+\n+class ChaCha20Forward4064\n+{\n+private:\n+    ChaCha20 m_ctx;\n+    uint64_t m_seqnr{0};\n+    size_t m_keystream_pos{0};\n+    unsigned char m_keystream[KEYSTREAM_SIZE] = {0};\n+\n+public:\n+    ChaCha20Forward4064(const Span<unsigned char> key);\n+    ~ChaCha20Forward4064();\n+    void Crypt(const unsigned char* input, unsigned char* output, size_t bytes);\n+};\n+\n class ChaCha20Poly1305AEAD\n {\n private:\n-    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length) and poly1305 key-derivation cipher instance\n-    ChaCha20 m_chacha_main;                                      // payload\n-    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n-    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+    ChaCha20Forward4064 m_chacha_header; // AAD cipher instance (encrypted length) and poly1305 key-derivation cipher instance\n+    ChaCha20Forward4064 m_chacha_main;   // payload\n \n public:\n-    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+    ChaCha20Poly1305AEAD(const Span<unsigned char> K_F, const Span<unsigned char> K_V);\n \n     explicit ChaCha20Poly1305AEAD(const ChaCha20Poly1305AEAD&) = delete;\n \n     /** Encrypts/decrypts a packet\n-        seqnr_payload, the message sequence number\n-        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n-        aad_pos, position to use in the AAD keystream to encrypt the AAD\n         dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n         destlen, length of the destination buffer\n         src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n         src_len, the length of the source buffer\n         is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n+\n+        Returns true if encipher succeeds. Upon failure, the data at dest should not be used.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895304058",
      "id" : 895304058,
      "in_reply_to_id" : 887881231,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841XUF6",
      "original_commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "original_line" : 133,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : null,
      "pull_request_review_id" : 1003753908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895304058/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-13T03:45:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895304058",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895305398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895305398"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "b6166568a306ef41da33b5f97623d9678dd1a36c",
      "created_at" : "2022-06-13T03:50:43Z",
      "diff_hunk" : "@@ -3,59 +3,43 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n \n+#include <assert.h>\n #include <bench/bench.h>\n #include <crypto/chacha_poly_aead.h>\n #include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n #include <hash.h>\n \n-#include <assert.h>\n-#include <limits>\n+#include <vector>\n \n /* Number of bytes to process per iteration */\n static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n \n-static const unsigned char k1[32] = {0};\n-static const unsigned char k2[32] = {0};\n-\n-static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+static std::vector<unsigned char> zero_key(32, 0x00);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895305398",
      "id" : 895305398,
      "in_reply_to_id" : 887876110,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841XUa2",
      "original_commit_id" : "97b768f95236c8460673fa9122bce19b89753399",
      "original_line" : 19,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 1003755623,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895305398/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-13T03:50:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895305398",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "First commit is from #25354 and should be reviewed there. This PR just depends on it.\r\n\r\nUpdated the implementation of the BIP324 Cipher Suite to be in accordance with the latest draft in the working group(still pending public release). The changes to intent and code from the original PR are large and since I didn't originally open this PR, I can't change the PR description. I suspect it makes sense to close this PR and open a new one, but we'd lose the history. I'd welcome thoughts on that from reviewers and maintainers.\r\n\r\nReady for further review.",
      "created_at" : "2022-06-13T03:53:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-1153434783",
      "id" : 1153434783,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20962",
      "node_id" : "IC_kwDOABII585EwASf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1153434783/reactions"
      },
      "updated_at" : "2022-06-13T04:00:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1153434783",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895306515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895306515"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, we need a way to know the boundaries of the messages coming in a single stream.",
      "commit_id" : "b6166568a306ef41da33b5f97623d9678dd1a36c",
      "created_at" : "2022-06-13T03:55:10Z",
      "diff_hunk" : "@@ -27,19 +28,52 @@ int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n \n #endif // TIMINGSAFE_BCMP\n \n+void ChaCha20ReKey4096::SetKey(const unsigned char* key, size_t keylen) {\n+    assert(keylen == 32);\n+    m_ctx.SetKey(key, keylen);\n+\n+    // set initial sequence number\n+    m_seqnr = 0;\n+    m_ctx.SetIV(m_seqnr);\n+\n+    // precompute first chunk of keystream\n+    m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+    m_keystream_pos = 0;\n+}\n+\n+void ChaCha20ReKey4096::Crypt(const unsigned char* input, unsigned char* output, size_t bytes) {\n+    size_t message_pos = 0;\n+\n+    // TODO: speedup with a block approach (rather then looping over every byte)\n+    while (bytes > message_pos) {\n+        output[message_pos] = input[message_pos] ^ ReadLE32(&m_keystream[m_keystream_pos]);\n+        m_keystream_pos++;\n+        message_pos++;\n+        if (m_keystream_pos == KEYSTREAM_SIZE-CHACHA20_POLY1305_AEAD_KEY_LEN) {\n+            // we reached the end of the keystream\n+            // rekey with the remaining and last 32 bytes and precompute the next 4096 bytes\n+            m_ctx.SetKey(&m_keystream[m_keystream_pos], CHACHA20_POLY1305_AEAD_KEY_LEN);\n+            m_ctx.SetIV(++m_seqnr);\n+            m_ctx.Keystream(m_keystream, KEYSTREAM_SIZE);\n+            // reset keystream position\n+            m_keystream_pos = 0;\n+        }\n+    }\n+}\n+\n+ChaCha20ReKey4096::~ChaCha20ReKey4096() {\n+    memory_cleanse(m_keystream, KEYSTREAM_SIZE);\n+}\n+\n ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n {\n     assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n     assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n     m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n     m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n-\n-    // set the cached sequence number to uint64 max which hints for an unset cache.\n-    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n-    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n }\n \n-bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+bool ChaCha20Poly1305AEAD::Crypt(unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20962#discussion_r895306515",
      "id" : 895306515,
      "in_reply_to_id" : 659124563,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841XUsT",
      "original_commit_id" : "c22f607b62af59969b9378d4cd8ed72b866dec11",
      "original_line" : 75,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 1003757071,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20962",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895306515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-13T03:55:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/895306515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   }
]
