{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "This issue is meant to be a general issue covering what fee bumping Core wallet does, and what it doesn't, and discussion of how to achieve future goals. I have not seen this all aggregated in any one place, and though it appropriate here. This is by no means exhaustive, and is to start a conversation after a couple personal false-starts on improving the situation.\r\n\r\nWhat is supported today(through 0.16):\r\n- Fee bumping through RBF when:\r\n-- There are no descendants in the wallet or mempool(even if they're yours)\r\n-- You control all inputs(`ISMINE_SPENDABLE`)\r\n-- There is a change output in your transaction large enough to pay for the bump\r\n- Manual CPFP, using coin control\r\n-- Set new transaction feerate high enough to bump whole package\r\n\r\nScenarios I think are reasonable to attempt support:\r\n- No change output (depending on utxo load and future optimization of coin selection this scenario can jump to quite a high %)\r\n-- Ideally run coin selection one more time with the original inputs required, residual required, selecting new inputs as needed\r\n-- Requires \"effective value\" framework to be sane but we should be doing that anyways.\r\n-- Change relay rules to allow sourcing an unconfirmed input for the bump(not bip125 issue, just Core implementation detail IIRC)\r\n- Change output exists, but descendants exist\r\n-- These scenarios are trickier to me, as they involved much more unknowns to the user\r\n--- If wallet descendants only, replace all of them, pay the DoS fee, and likely end up saving overall due to cut-through change outputs. bip125 rules can make this cost more since replacement must have higher absolute fee of all the things you replaced, but a small enough feerate can make this worth it.\r\n--- CPFP via spend of unconfirmed change output, when descendants are in mempool.\r\n--- RBF with descendants in mempool that aren't yours. This can get expensive fast due to \"pinning\", or unconfirmed low-fee sweeps by your recipients.\r\n\r\n------------\r\n\r\nMy general thinking is that in the qt case as long as the resulting feerate of the wallet's package increases, the wallet should try a number of strategies to bump, and select the immediate cheapest, presenting the required fee to the user.\r\n\r\nFar future thoughts:\r\nIn future wallet functionality we can go further, where \"optional sends\" put destinations in a queue, and opportunistically send out with more immediate sends if it ends up being cheaper to do so. For example, someone RBF'ing a stuck transaction could also append on the bytes to send to optional destinations. CPFP'ing could also include the additional outputs. Optional sends also allow for much more aggressive change output-saving opportunities, but this is a bit sidetracking...\r\n\r\ncc @morcos @gmaxwell ",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12271/comments",
   "created_at" : "2018-01-25T19:59:06Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12271/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/12271",
   "id" : 291696610,
   "labels" : [
      {
         "color" : "ebd775",
         "default" : false,
         "id" : 64584,
         "name" : "Brainstorming",
         "node_id" : "MDU6TGFiZWw2NDU4NA==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      },
      {
         "color" : "5319e7",
         "default" : false,
         "id" : 82428251,
         "name" : "TX fees and policy",
         "node_id" : "MDU6TGFiZWw4MjQyODI1MQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12271/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWUyOTE2OTY2MTA=",
   "number" : 12271,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Improving fee bumping in Core",
   "updated_at" : "2018-03-22T20:56:50Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12271",
   "user" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
      "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
      "followers_url" : "https://api.github.com/users/instagibbs/followers",
      "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/instagibbs",
      "id" : 5767891,
      "login" : "instagibbs",
      "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
      "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
      "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
      "repos_url" : "https://api.github.com/users/instagibbs/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/instagibbs"
   }
}
