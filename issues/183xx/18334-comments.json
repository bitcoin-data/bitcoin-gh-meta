[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18446 (test: Add test for wtxid transaction relay by fjahr)\n* #18261 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 18334](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18334/total.coverage/index.html), 70f8cf0ac76a483f4e5784bb303e081688206e40) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html), e2d36639ca87b980b147047e4e47cf160b2c9406)   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.1081 %            | 90.0780 %        |\n| Functions | +0.2643 %            | 85.8297 %        |\n| Branches  | +0.0528 %            | 51.6976 %        |\n\n<sup>Updated at: 2020-03-12T20:53:06.964444.</sup>\n",
      "created_at" : "2020-03-12T20:53:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-598413317",
      "id" : 598413317,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5ODQxMzMxNw==",
      "updated_at" : "2020-03-27T07:36:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598413317",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r396134933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396134933"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could add a short comment on what this filter's dimensions are based upon (w.r.t. target parameters number of elements N, false positive rate P)?",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-22T20:03:20Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r396134933",
      "id" : 396134933,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNDkzMw==",
      "original_commit_id" : "fabf37381c4b62fc057ca0df4e77f2f2deb0e428",
      "original_position" : 31,
      "path" : "test/functional/p2p_filter.py",
      "position" : 32,
      "pull_request_review_id" : 379042104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396134933",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r396139141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396139141"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This looks fishy, can two consecutive `sync_with_ping()` calls actually help more for synchronization than just one? To my understanding, `sync_with_ping` is only helpful whenever a node is already processing a received message and we want to guarantee that the processing is finished. I don't see how you could \"wait for messages\" with that.\r\nWe neither know that at the start of the first `sync_with_ping()` call the expected _inv_ message from node0 has already arrived, nor that at the second `sync_with_ping()` call _merkleblock_ has arrived (or even getdata was received from node0 before). I had a similar problem while working on https://github.com/bitcoin/bitcoin/pull/17461 (see https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-590772489) with an adequate but still not 100% satisfactory waiting solution.\r\n\r\nTo prove my point, the test fails without the immediate tx relay enabled (which should only serve as speed-up, but not as synchronization mechanism, in my humble opinion).",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-22T20:48:52Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, filter_address)\n+        filter_node.sync_with_ping()  # wait for inv\n+        filter_node.sync_with_ping()  # wait for merkleblock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r396139141",
      "id" : 396139141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzOTE0MQ==",
      "original_commit_id" : "fabf37381c4b62fc057ca0df4e77f2f2deb0e428",
      "original_position" : 74,
      "path" : "test/functional/p2p_filter.py",
      "position" : null,
      "pull_request_review_id" : 379042104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396139141",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397156367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397156367"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, extended the comment to state the filter parameters.",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-24T13:36:34Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397156367",
      "id" : 397156367,
      "in_reply_to_id" : 396134933,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1NjM2Nw==",
      "original_commit_id" : "fabf37381c4b62fc057ca0df4e77f2f2deb0e428",
      "original_position" : 31,
      "path" : "test/functional/p2p_filter.py",
      "position" : 32,
      "pull_request_review_id" : 380313714,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397156367",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397157123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397157123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, replaced with `filter_node.wait_for_tx(txid)`, which is a stricter check that also passes when immediate tx relay is disabled.",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-24T13:37:38Z",
      "diff_hunk" : "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, filter_address)\n+        filter_node.sync_with_ping()  # wait for inv\n+        filter_node.sync_with_ping()  # wait for merkleblock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397157123",
      "id" : 397157123,
      "in_reply_to_id" : 396139141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1NzEyMw==",
      "original_commit_id" : "fabf37381c4b62fc057ca0df4e77f2f2deb0e428",
      "original_position" : 74,
      "path" : "test/functional/p2p_filter.py",
      "position" : null,
      "pull_request_review_id" : 380314688,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397157123",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed feedback by @theStack ",
      "created_at" : "2020-03-24T13:38:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-603243555",
      "id" : 603243555,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMzI0MzU1NQ==",
      "updated_at" : "2020-03-24T13:38:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603243555",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397459811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397459811"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think `sync_with_ping()` doesn't help here for reliable synchronization as well, as in theory there could still arrive a new message at the filter node after the asserts (same argumentation as my code-review comment a few lines above). Maybe using `wait_until` on `filter_node.merkleblock_received` would make it more robust?",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-24T21:04:15Z",
      "diff_hunk" : "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397459811",
      "id" : 397459811,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1OTgxMQ==",
      "original_commit_id" : "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "original_position" : 83,
      "path" : "test/functional/p2p_filter.py",
      "position" : null,
      "pull_request_review_id" : 380695135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397459811",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397465360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397465360"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think this helps for synchronization here, see code-review comment above.",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-24T21:14:52Z",
      "diff_hunk" : "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received\n+\n+        self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397465360",
      "id" : 397465360,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NTM2MA==",
      "original_commit_id" : "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "original_position" : 90,
      "path" : "test/functional/p2p_filter.py",
      "position" : 90,
      "pull_request_review_id" : 380695135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397465360",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397529298"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397529298"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A wait_until on `filter_node.merkleblock_received` does return immediately when the `        assert filter_node.merkleblock_received` has passed. I don't see how this could help anything.",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-24T23:47:51Z",
      "diff_hunk" : "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397529298",
      "id" : 397529298,
      "in_reply_to_id" : 397459811,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTI5OA==",
      "original_commit_id" : "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "original_position" : 83,
      "path" : "test/functional/p2p_filter.py",
      "position" : null,
      "pull_request_review_id" : 380773777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397529298",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  Just out of curiousity, how did you create the bloom filter data in practice? Is there like a toolset available for playing around with bloom filters? Or did you go for the manual, programmatic way, i.e. creating CBloomFilter instance based on the bitcoind codebase, insert()ing the scriptPubKey and hex-dumping the filter's vData contents?\r\n\r\nI did what you assumed. Instead of hexdump I sent it to a python mininode and made it `print()` the repr.",
      "created_at" : "2020-03-24T23:49:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-603563025",
      "id" : 603563025,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMzU2MzAyNQ==",
      "updated_at" : "2020-03-24T23:49:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603563025",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Just to be make sure: This test is not complete and can be extended/improved in the future. Though, I don't have any interest in doing that myself atm. This task will be opened as a good first issue.",
      "created_at" : "2020-03-24T23:50:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-603563323",
      "id" : 603563323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMzU2MzMyMw==",
      "updated_at" : "2020-03-24T23:50:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603563323",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397735934"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397735934"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What I meant was removing the `sync_with_ping()`s completely (as they effectively only serve as hidden delays, they don't do anything for reliable synchronization -- the expected messages could in theory still appear after) and replacing the `assert filter_node.merkleblock_received` with a `wait_until`-pendant, similar like you did on the subtests 1 and 4 on the latest force-push (https://github.com/bitcoin/bitcoin/compare/fabf37381c4b62fc057ca0df4e77f2f2deb0e428..fa64441bd7a284a99c0e637e33e6aff690718d75).\r\n\r\nOr did I overlook something and the situation for subtests 2 and 3 is different?",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-25T10:05:45Z",
      "diff_hunk" : "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397735934",
      "id" : 397735934,
      "in_reply_to_id" : 397459811,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTkzNA==",
      "original_commit_id" : "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "original_position" : 83,
      "path" : "test/functional/p2p_filter.py",
      "position" : null,
      "pull_request_review_id" : 381005693,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397735934",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397760775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397760775"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Replaced with `filter_node.wait_for_merkleblock()`.",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-25T10:47:13Z",
      "diff_hunk" : "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397760775",
      "id" : 397760775,
      "in_reply_to_id" : 397459811,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2MDc3NQ==",
      "original_commit_id" : "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "original_position" : 83,
      "path" : "test/functional/p2p_filter.py",
      "position" : null,
      "pull_request_review_id" : 381035073,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:47:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397760775",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397761055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397761055"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This can not be replaced with a `wait_for` unless I am mistaken",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-25T10:47:41Z",
      "diff_hunk" : "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received\n+\n+        self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397761055",
      "id" : 397761055,
      "in_reply_to_id" : 397465360,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2MTA1NQ==",
      "original_commit_id" : "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "original_position" : 90,
      "path" : "test/functional/p2p_filter.py",
      "position" : 90,
      "pull_request_review_id" : 381035398,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T10:47:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397761055",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397787108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397787108"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agreed, `wait_for` is not an option here -- it's always problematic to assert that something was _not_ received, as we never know for sure that it couldn't still come in in the future. I don't know a better way here than to just wait for some arbitrary time between the `.sendtoaddress()` call and the `asserts` :confused:",
      "commit_id" : "fa156999695ddaeb016d8320bee62f8d96679d55",
      "created_at" : "2020-03-25T11:34:42Z",
      "diff_hunk" : "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received\n+\n+        self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397787108",
      "id" : 397787108,
      "in_reply_to_id" : 397465360,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4NzEwOA==",
      "original_commit_id" : "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "original_position" : 90,
      "path" : "test/functional/p2p_filter.py",
      "position" : 90,
      "pull_request_review_id" : 381065999,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
      "updated_at" : "2020-03-25T11:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397787108",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Anything left to do here?",
      "created_at" : "2020-03-27T23:55:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605360868",
      "id" : 605360868,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTM2MDg2OA==",
      "updated_at" : "2020-03-27T23:55:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605360868",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Anything left to do here?\r\n\r\nI am still sceptical about the point of the two remaining `.sync_with_ping()`s in the context of this test. Having skimmed through all of its uses in other functional tests, I identified three use-cases for `.sync_with_ping()`:\r\n* ensuring that the version exchange with the test node already happened\r\n* ensuring that messages that have been sent from the test node itself to the peer have been processed, with the following pattern: `peer.send_message(...)`, following `peer.sync_with_ping()`\r\n* checking if a peer is still alive or keeping connections alive, respectively\r\n\r\nIn this test none of this really applies, the `.sync_with_ping()`s just serve as implicit delay, so I'd prefer to make the delay explicit. Thats at least my undestanding of the situation, maybe someone with more experience with the P2P tests can comment here.",
      "created_at" : "2020-03-29T10:51:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605617660",
      "id" : 605617660,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTYxNzY2MA==",
      "updated_at" : "2020-03-29T10:51:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605617660",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The rationale is the same, I assume that an \"imaginary\" message (obviously it doesn't exist on the wire, because that would be a bug) can at most take 3 ping-pong round trips. (Assuming also immediate tx relay). I am not sure what I could replace the delay with that would make more sense. If I use a plain `time.sleep`, I wouldn't know what to pass as argument, because I don't know the time it takes for a round trip. Also, with immediate tx relay disabled, I can not predict the poisson delay on top of that.\r\n\r\nI think the best solution is to remove the test, if it is too controversial.",
      "created_at" : "2020-03-29T11:50:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605624202",
      "id" : 605624202,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTYyNDIwMg==",
      "updated_at" : "2020-03-29T11:50:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605624202",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK fa156999695ddaeb016d8320bee62f8d96679d55 -- more testing coverage is better than less testing coverage\r\n\r\nImprovements can be done in a followup.",
      "created_at" : "2020-03-29T12:31:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605628907",
      "id" : 605628907,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTYyODkwNw==",
      "updated_at" : "2020-03-29T12:32:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605628907",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift I don't want to just merge this as long as there are outstanding concerns from @theStack . I don't know how to address them, so removing that test case temporarily and adding it back when they are figured out would be an option.",
      "created_at" : "2020-03-29T15:37:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605655656",
      "id" : 605655656,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTY1NTY1Ng==",
      "updated_at" : "2020-03-29T15:37:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605655656",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke: It was not my intention to block this PR -- indeed I think _not_ merging this PR would be far worse than having a test with a small synchronization controversy (that only comes from one single person so far). The pattern of `sync_with_ping()`ing the same node more than once in a row for synchronization purposes has never been used so far in any functional tests, which raised my doubts if its the right tool. But with your description of \"at most taking that many ping-pong roundtrips\" it makes a bit more sense to me now. \r\n\r\n(I still think that in an ideal world all those P2P tests should also work with immediate tx relay disabled, but on the other hand I also have no idea how to realize this.)",
      "created_at" : "2020-03-29T16:17:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605661086",
      "id" : 605661086,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTY2MTA4Ng==",
      "updated_at" : "2020-03-29T16:17:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605661086",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   }
]
