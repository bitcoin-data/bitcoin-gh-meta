[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Configure and run as:\r\n`./configure --with-sanitizers=thread`\r\n`./src/test/test_bitcoin --run_test=\"txvalidationcache_tests/checkinputs_test\"`\r\n\r\nI confirm the following:\r\n* Latest master @ ce87d5613 shows the [use-after-free](https://travis-ci.org/github/bitcoin/bitcoin/jobs/663676100#L4588) bug\r\n* This PR fixes the bug\r\n* Reverting fadafb83c on top of the latest master `git show fadafb83c |git apply -R -3` (+ trivial conflict resolution) fixes the bug\r\n* The failure seems to be deterministic\r\n\r\nSo, this was introduced in https://github.com/bitcoin/bitcoin/pull/18289. I have no clue why travis [was green](https://travis-ci.org/github/bitcoin/bitcoin/builds/660635839?utm_source=github_status&utm_medium=notification) for it.\r\n\r\n```diff\r\n-    scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\r\n+    scheduler.scheduleEvery([&] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\r\n```\r\n\r\nIndeed `std::bind()` copies the arguments whereas the introduced lambda function passes them by reference and will brick if the argument is destroyed before the function is called.",
      "created_at" : "2020-03-18T12:58:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600607726",
      "id" : 600607726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDYwNzcyNg==",
      "updated_at" : "2020-03-18T12:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600607726",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394349862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18376"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394349862"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this can  be made `=` to just mirror what `std::bind` did. (`this` is a pointer, so it shouldn't matter whether it is copied or referenced, and for consensusParams we want it to be copied).\r\n\r\n```suggestion\r\n    scheduler.scheduleEvery([=] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\r\n```",
      "commit_id" : "7d8e1dec3b26074df1533f715871f79c956cc224",
      "created_at" : "2020-03-18T13:35:57Z",
      "diff_hunk" : "@@ -1127,7 +1127,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // combine them in one function and schedule at the quicker (peer-eviction)\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n-    scheduler.scheduleEvery([&] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n+    scheduler.scheduleEvery([this, consensusParams] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394349862",
      "id" : 394349862,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM0OTg2Mg==",
      "original_commit_id" : "7d8e1dec3b26074df1533f715871f79c956cc224",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 376867594,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18376",
      "updated_at" : "2020-03-18T13:36:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394349862",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394360305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18376"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394360305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The `=` is also what is recommended in the \"Tutorial\" (written by me, so count that against me):\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/3a8d25064e700ff2e69600cc1ede597751283a85/src/scheduler.h#L28",
      "commit_id" : "7d8e1dec3b26074df1533f715871f79c956cc224",
      "created_at" : "2020-03-18T13:51:09Z",
      "diff_hunk" : "@@ -1127,7 +1127,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // combine them in one function and schedule at the quicker (peer-eviction)\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n-    scheduler.scheduleEvery([&] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n+    scheduler.scheduleEvery([this, consensusParams] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394360305",
      "id" : 394360305,
      "in_reply_to_id" : 394349862,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2MDMwNQ==",
      "original_commit_id" : "7d8e1dec3b26074df1533f715871f79c956cc224",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 376881055,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18376",
      "updated_at" : "2020-03-18T13:51:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394360305",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394425068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18376"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394425068"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Doh! I was about to apply this suggestion, but then realized that [The implicit capture of *this when the capture default is = is deprecated. (since C++20)](https://en.cppreference.com/w/cpp/language/lambda#Lambda_capture) :-/ Indeed:\r\n\r\n```cpp\r\n        auto m() {\r\n            return [=](){\r\n                std::cout << \"lambda: this=\" << this << std::endl;\r\n            };\r\n        }\r\n```\r\n\r\nProduces:\r\n```\r\nclang++10 -std=c++20 -Wdeprecated t.cc -o t\r\nt.cc:96:49: warning: implicit capture of 'this' with a capture default of '=' is deprecated\r\n      [-Wdeprecated-this-capture]\r\n                std::cout << \"lambda: this=\" << this << std::endl;\r\n                                                ^\r\nt.cc:95:21: note: add an explicit capture of 'this' to capture '*this' by reference\r\n            return [=](){\r\n                    ^\r\n                     , this\r\n```\r\n\r\nBetter not add code that would have to be fixed later, so I would rather keep it as is.\r\n\r\nWhat do you think?\r\n\r\nPS `this` is always captured by reference and I think all of the following do the same wrt `this`: `[=]`, `[this]`, `[&]`, `std::bind`",
      "commit_id" : "7d8e1dec3b26074df1533f715871f79c956cc224",
      "created_at" : "2020-03-18T15:16:19Z",
      "diff_hunk" : "@@ -1127,7 +1127,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // combine them in one function and schedule at the quicker (peer-eviction)\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n-    scheduler.scheduleEvery([&] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n+    scheduler.scheduleEvery([this, consensusParams] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394425068",
      "id" : 394425068,
      "in_reply_to_id" : 394349862,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQyNTA2OA==",
      "original_commit_id" : "7d8e1dec3b26074df1533f715871f79c956cc224",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 376964779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18376",
      "updated_at" : "2020-03-18T15:16:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394425068",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394487550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18376"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394487550"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In that case I'd prefer to use `[=, this]`, but this might not compile either on our current C++ target? According to the page you linked:\r\n\r\n```cpp\r\n    [=, this] {};   // until C++20: Error: this when = is the default\r\n                    // since C++20: OK, same as [=]\r\n```\r\n\r\nSo, given that we won't be switching to C++20 any time soon, I'd still prefer the `[=]`. Then it can be changed, if and when we switch to C++20?\r\n\r\nJust a nit, though. ACK from me either way.",
      "commit_id" : "7d8e1dec3b26074df1533f715871f79c956cc224",
      "created_at" : "2020-03-18T16:39:54Z",
      "diff_hunk" : "@@ -1127,7 +1127,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // combine them in one function and schedule at the quicker (peer-eviction)\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n-    scheduler.scheduleEvery([&] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n+    scheduler.scheduleEvery([this, consensusParams] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18376#discussion_r394487550",
      "id" : 394487550,
      "in_reply_to_id" : 394349862,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzU1MA==",
      "original_commit_id" : "7d8e1dec3b26074df1533f715871f79c956cc224",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 377043713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18376",
      "updated_at" : "2020-03-18T16:39:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394487550",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK -- premature optimisation is the root of many lifetime issues :)\r\n\r\nSomewhat related: [Investigate potential lifetime issues in cases where we are returning \"const std::string&\"](https://github.com/bitcoin/bitcoin/issues/17198).\r\n\r\nThis is a great talk about recurring C++ bugs at Facebook: [this segment on lifetime issues due to premature optimization](https://www.youtube.com/watch?v=lkgszkPnV8g&t=876) might have some relevance here :)",
      "created_at" : "2020-03-18T16:59:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600748411",
      "id" : 600748411,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDc0ODQxMQ==",
      "updated_at" : "2020-03-18T16:59:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600748411",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift I don't think it is helpful to call this premature optimization. This was not an optimization attempt. `GetConsensus` returns a const reference because this global is assumed to be initialized once and then never changed. It has been that way for years, and I presume well known by myself and all reviewers of the pull. See also bd006110fb51f1fc0cbbeef3ed6eaae66b296d8c. And logically, it wouldn't make sense for a running Bitcoin Core instance to change the consensus rules \"on the fly\" in a running process.\r\n\r\nI think it was reasonable to keep it a reference and pass it along in the scheduler. And I assume the four people who reviewed my pull request agreed with me.\r\n\r\nThat some unit tests spin up a PeerLogicValidation and then change the consensus parameters while running is documented as a temporary hack in the test code. And the oversight was that not everyone had this temporary hack in mind while writing/reviewing the code.",
      "created_at" : "2020-03-18T17:53:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600775702",
      "id" : 600775702,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDc3NTcwMg==",
      "updated_at" : "2020-03-18T17:53:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600775702",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 7d8e1dec3b26074df1533f715871f79c956cc224",
      "created_at" : "2020-03-18T20:11:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600835511",
      "id" : 600835511,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDgzNTUxMQ==",
      "updated_at" : "2020-03-18T20:11:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600835511",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 7d8e1dec3b26074df1533f715871f79c956cc224\r\n\r\n> > [â¦] premature optimisation is the root of many lifetime issues :)\r\n>\r\n> I don't think it is helpful to call this premature optimization. \r\n\r\nPoint taken :)",
      "created_at" : "2020-03-18T20:35:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18376#issuecomment-600845629",
      "id" : 600845629,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDg0NTYyOQ==",
      "updated_at" : "2020-03-18T20:35:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600845629",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
