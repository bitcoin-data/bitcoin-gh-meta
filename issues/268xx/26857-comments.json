[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept NACK | [1440000bytes](https://github.com/bitcoin/bitcoin/pull/26857#pullrequestreview-1269747286) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26762](https://github.com/bitcoin/bitcoin/pull/26762) (refactor: Make `CCheckQueue` RAII-styled by hebasto)\n* [#26749](https://github.com/bitcoin/bitcoin/pull/26749) (refactor: Use move semantics instead of custom swap functions by hebasto)\n* [#26345](https://github.com/bitcoin/bitcoin/pull/26345) (refactor: modernize the implementation of uint256.* by PastaPastaPasta)\n* [#26201](https://github.com/bitcoin/bitcoin/pull/26201) (Remove Taproot activation height by Sjors)\n* [#26177](https://github.com/bitcoin/bitcoin/pull/26177) (refactor / kernel: Move non-gArgs chainparams functionality to kernel by TheCharlatan)\n* [#26101](https://github.com/bitcoin/bitcoin/pull/26101) (script: create V1SigVersion for functions which should only accept taproot/tapscript by theuni)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-01-09T16:46:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#issuecomment-1375934926",
      "id" : 1375934926,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26857",
      "node_id" : "IC_kwDOABII585SAxnO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1375934926/reactions"
      },
      "updated_at" : "2023-02-04T05:43:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1375934926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Great to see this, I hope this functionality comes into Bitcoin one way or another, and this seems like a decent attempt. Your listing of the features makes sense, and I currently don't think a more optimal way to achieve them.\r\n\r\nBy no means blockers, but rather some thoughts I wanted to share on the design:\r\n1. I'm personally not sure batching withdrawals is that compelling... It's a nice-to-have, but I'd think about the benefits dropping this feature would provide.\r\n2. Or, from a different angle, the issue of malicious de-batching should not stop this idea from moving forward, as I'm not convinced this use case would be that widespread. I want to think more about use cases (solo user cold wallet, exchange cold wallet, fund cold wallet) and what their setups would look like.",
      "created_at" : "2023-01-10T10:07:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#issuecomment-1377014412",
      "id" : 1377014412,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26857",
      "node_id" : "IC_kwDOABII585SE5KM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1377014412/reactions"
      },
      "updated_at" : "2023-01-10T10:07:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1377014412",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I plan to comment about the design on the ML, but just a note about @naumenkogs' comment above.\r\n\r\nOn the contrary i think the batching feature is very compelling. The impossibility to batch Unvaults in Revault is a major drawback: it significantly increases the cost of any realistic operation (you need one whole additional transaction per input, and each have likely more than one output). It also potentially increases the cost on the network (you'd likely want some sort of anchor output on each Unvault tx, that you might not spend, so that's `2*n` outputs created with `n` the number of coins spent): we definitely don't want to prevent batching. The ability to batch the recovery transactions (what we called Emergency tx in Revault) is also very compelling but i think your comment was only about batched withdrawals.",
      "created_at" : "2023-01-10T11:28:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#issuecomment-1377114377",
      "id" : 1377114377,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26857",
      "node_id" : "IC_kwDOABII585SFRkJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1377114377/reactions"
      },
      "updated_at" : "2023-01-10T11:28:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1377114377",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-01-16T17:11:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#issuecomment-1384343970",
      "id" : 1384343970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26857",
      "node_id" : "IC_kwDOABII585Sg2mi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1384343970/reactions"
      },
      "updated_at" : "2023-01-16T17:11:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1384343970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I second most (if not all) of the comments thus far. Especially this from @ariard. \r\n\r\n> From a procedural viewpoint, recently there has been proposed the bitcoin-inquisition\r\nfork of Core as an experimental platform to test, iterate and play with Script interpreter extensions, notably also aiming to support package relay and ephemeral outputs to observe the fee-bumping primitives trade-offs\r\n\r\nThanks also for keeping this in draft for now @jamesob. For it to be moved out of draft I'd like to see a convergence on this being the best proposal to enable this functionality and proofs of concept on bitcoin-inquisition seem like a good step towards that (assuming the bitcoin-inquisition maintainer(s) think this is ready to be merged there).\r\n\r\n",
      "created_at" : "2023-01-16T18:09:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#issuecomment-1384405553",
      "id" : 1384405553,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26857",
      "node_id" : "IC_kwDOABII585ShFox",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1384405553/reactions"
      },
      "updated_at" : "2023-01-16T18:09:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1384405553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071570474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071570474"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In fbf344931a2224dc3ace0011c1a4cb5cd4187f3e \"wip: draft implementation\"\r\n\r\nOP_2?",
      "commit_id" : "a8323b9cea602f4af8206f86c0193d189b721904",
      "created_at" : "2023-01-16T20:46:16Z",
      "diff_hunk" : "@@ -1781,6 +2096,132 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+//! Check that\n+//!\n+//!   1. The number of outputs is either 1 or 2.\n+//!   2. The total value of the vault is preserved.\n+//!   3. If there is a second output, it is a 0-value ephemeral anchor output.\n+//!   4. The recovery scriptPubKey is as expected.\n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckVaultSpendToRecoveryOutputs(\n+    const uint256& recovery_spk_hash) const\n+{\n+    if (!this->txdata) return HandleMissingData(m_mdb);\n+    const auto& txd{*this->txdata};\n+    const auto& vout = this->txTo->vout;\n+\n+    const auto num_outs = vout.size();\n+    if (num_outs < 1 || num_outs > 2) {\n+        return false;\n+    }\n+\n+    const CTxOut& value_out = vout[0];\n+    if (value_out.nValue != txd.m_total_in) {\n+        return false;\n+    }\n+\n+    // Ensure the second output, if one exists, is a 0-value ephemeral anchor.\n+    if (num_outs == 2 && !IsOutputEphemeralAnchor(vout[1])) {\n+        return false;\n+    }\n+\n+    return (VaultScriptHash(HASHER_VAULT_RECOVERY_SPK, value_out.scriptPubKey) ==\n+            recovery_spk_hash);\n+}\n+\n+\n+//! Return true if the given output is a 0-value anchor output.\n+static bool IsOutputEphemeralAnchor(const CTxOut& out)\n+{\n+    if (out.nValue != 0) {\n+        return false;\n+    }\n+    const CScript& spk = out.scriptPubKey;\n+    if (!(spk.size() == 1 && spk[0] == OP_2)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071570474",
      "id" : 1071570474,
      "line" : 2140,
      "node_id" : "PRRC_kwDOABII584_3t4q",
      "original_commit_id" : "a8323b9cea602f4af8206f86c0193d189b721904",
      "original_line" : 2140,
      "original_position" : 401,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 401,
      "pull_request_review_id" : 1250651157,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071570474/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-16T21:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071570474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071577974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071577974"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In fbf344931a2224dc3ace0011c1a4cb5cd4187f3e \"wip: draft implementation\"\r\n\r\nI think it makes sense to disallow recursive OP_VAULTs in the OP_VAULT trigger script (? this was called unvault script in the paper). They necessarily have to have the same recovery spk hash and delay as the top level OP_VAULT, and at the end, would have some witness script which is what we actually care about at this point. So really all that would do is waste resources.",
      "commit_id" : "a8323b9cea602f4af8206f86c0193d189b721904",
      "created_at" : "2023-01-16T21:03:41Z",
      "diff_hunk" : "@@ -1213,6 +1342,185 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 }\n                 break;\n \n+                case OP_VAULT:\n+                {\n+                    // only available post-segwit\n+                    if (sigversion == SigVersion::BASE) return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n+\n+                    // <recovery-spk-hash> <spend-delay> <trigger-spk-hash>\n+                    if (stack.size() < 3) return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    valtype& hash_from_stack = stacktop(-3);\n+                    if (hash_from_stack.size() != 32) {\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                    }\n+                    const uint256 recovery_spk_hash{hash_from_stack};\n+\n+                    // `spend-delay` is a CScriptNum, up to 4 bytes, that is interpreted\n+                    // in the same way as the first 23 bits of nSequence are per\n+                    // BIP 68 (relative time-locks). This enables users of vaults to\n+                    // express spend delays in either wall time or block count, and reuse\n+                    // the same machinery as OP_CHECKSEQUENCEVERIFY.\n+                    const CScriptNum spend_delay(stacktop(-2), fRequireMinimal);\n+\n+                    hash_from_stack = stacktop(-1);\n+                    if (hash_from_stack.size() != 32) {\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                    }\n+                    const uint256 expected_trigger_spk_hash{hash_from_stack};\n+\n+                    popstack(stack);\n+                    popstack(stack);\n+                    popstack(stack);\n+\n+                    // Case 1: sweep to recovery\n+                    if (checker.CheckVaultSpendToRecoveryOutputs(recovery_spk_hash)) {\n+                        stack.push_back(vchTrue);\n+                        break;\n+                    }\n+\n+                    // Case 2: spend to compatible OP_UNVAULT\n+\n+                    // [trigger witness stack ...] <trigger-spk> [prev stack items]\n+                    if (stack.size() < 2) {\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                    }\n+\n+                    CScript unvault_output_spk;\n+\n+                    if (!checker.CheckUnvaultTriggerOutputsCommon(\n+                            recovery_spk_hash,\n+                            spend_delay,\n+                            fRequireMinimal,\n+                            unvault_output_spk)) {\n+                        return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n+                    }\n+                    assert(unvault_output_spk.size() > 0);\n+\n+                    // Determine the type of the proposed OP_UNVAULT script.\n+                    // If it lives behind a scripthash, we will have to construct\n+                    // a specific expected scriptPubKey and compare to that. Otherwise\n+                    // we'll analyze its prefix as a bare script.\n+                    int opuv_witversion;\n+                    valtype opuv_witprogram;\n+                    const bool is_unvault_output_wit =\n+                        unvault_output_spk.IsWitnessProgram(opuv_witversion, opuv_witprogram);\n+\n+                    if (!is_unvault_output_wit) {\n+                        // Validate the OP_UNVAULT output as a bare script.\n+                        if (!CheckUnvaultTriggerOutputsBare(\n+                                unvault_output_spk,\n+                                recovery_spk_hash, spend_delay, fRequireMinimal)) {\n+                            return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n+                        }\n+                    } else {\n+                        // We now expect an additional item on the stack, <target-hash>,\n+                        // which is used to validate the proposed OP_UNVAULT witness\n+                        // output sPK - which hides the actual OP_UNVAULT script behind a\n+                        // scripthash.\n+                        if (stack.size() < 3) {\n+                            return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                        }\n+                        valtype& hash_from_stack = stacktop(-1);\n+                        if (hash_from_stack.size() != 32) {\n+                            return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                        }\n+                        const uint256 target_hash{hash_from_stack};\n+                        popstack(stack);\n+\n+                        if (!CheckUnvaultTriggerOutputsWitness(\n+                                opuv_witversion, opuv_witprogram,\n+                                recovery_spk_hash, spend_delay, target_hash,\n+                                fRequireMinimal, flags, serror)) {\n+                            return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n+                        }\n+                    }\n+\n+                    // Now that we have verified the structure of the outputs, verify\n+                    // the signature authorizing the beginning of the unvault.\n+                    //\n+                    // Check that a valid trigger signature has been put on the witness\n+                    // stack.\n+                    const valtype& trigger_witness_program = stacktop(-1);\n+                    auto trigger_witness_spk = CScript(\n+                        trigger_witness_program.begin(), trigger_witness_program.end());\n+\n+                    const uint256 trigger_spk_hash = VaultScriptHash(\n+                            HASHER_VAULT_UNVAULT_SPK, trigger_witness_spk);\n+\n+                    if (trigger_spk_hash != expected_trigger_spk_hash) {\n+                        return set_error(serror, SCRIPT_ERR_VAULT_WRONG_TRIGGER_WITNESS_PROGRAM);\n+                    }\n+                    popstack(stack);\n+                    // Everything remaining on the stack is the witness stack\n+                    // to be fed into the witness program above.\n+\n+                    CScriptWitness witness;\n+                    witness.stack = stack;\n+                    int witnessversion;\n+                    std::vector<unsigned char> witnessprogram;\n+\n+                    if (!trigger_witness_spk.IsWitnessProgram(witnessversion, witnessprogram)) {\n+                        return set_error(serror, SCRIPT_ERR_VAULT_INVALID_TRIGGER_WITNESS_PROGRAM);\n+                    }\n+                    // Note that this will recursively call EvalScript. We could get\n+                    // into a further recursion if OP_VAULT spends are included in the\n+                    // trigger witness program; the recursion depth is limited\n+                    // solely by script size constraints.\n+                    //\n+                    // TODO: think more about whether to limit recursive OP_VAULT\n+                    // evaluations in trigger witness programs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071577974",
      "id" : 1071577974,
      "line" : 1472,
      "node_id" : "PRRC_kwDOABII584_3vt2",
      "original_commit_id" : "a8323b9cea602f4af8206f86c0193d189b721904",
      "original_line" : 1472,
      "original_position" : 287,
      "original_start_line" : 1471,
      "path" : "src/script/interpreter.cpp",
      "position" : 287,
      "pull_request_review_id" : 1250651157,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071577974/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1471,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-16T21:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071577974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071580298"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071580298"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In fbf344931a2224dc3ace0011c1a4cb5cd4187f3e \"wip: draft implementation\"\r\n\r\nNote that this is a different serialization from the one described in the paper. The paper says to serialize the scriptPubKey first, then nValue. However `GetOutputsSHA256` serializes each output as nValue then scriptPubKey. I'm going to assume this is an error in the paper as I think it is better the way it is implemented rather than described.",
      "commit_id" : "a8323b9cea602f4af8206f86c0193d189b721904",
      "created_at" : "2023-01-16T21:09:44Z",
      "diff_hunk" : "@@ -1781,6 +1910,136 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckVaultSpendToRecoveryOutputs(\n+    const uint256& recovery_spk_hash) const\n+{\n+    if (!this->txdata) return HandleMissingData(m_mdb);\n+    const auto& txd{*this->txdata};\n+\n+    if (!CommonVaultSpendChecks(txd, this->txTo->vout)) {\n+        return false;\n+    }\n+    const CTxOut& value_out = this->txTo->vout[0];\n+\n+    return (VaultScriptHash(HASHER_VAULT_RECOVERY_SPK, value_out.scriptPubKey) ==\n+            recovery_spk_hash);\n+}\n+\n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckUnvaultTriggerOutputs(\n+    const uint256& recovery_spk_hash,\n+    const CScriptNum& spend_delay,\n+    bool require_minimal) const\n+{\n+    if (!this->txdata) return HandleMissingData(m_mdb);\n+    const auto& txd{*this->txdata};\n+\n+    if (!CommonVaultSpendChecks(txd, this->txTo->vout)) {\n+        return false;\n+    }\n+    const CTxOut& value_out = this->txTo->vout[0];\n+    const CScript& value_spk = value_out.scriptPubKey;\n+\n+    auto pc = value_spk.begin();\n+    valtype pushdata;\n+    opcodetype opcode;\n+\n+    // Check for 32 bytes of recovery-spk-hash.\n+    if (!value_spk.GetOp(pc, opcode, pushdata) || opcode != 0x20) {\n+        return false;\n+    }\n+    uint256 proposed_recovery_spk_hash{pushdata};\n+\n+    if (proposed_recovery_spk_hash != recovery_spk_hash) {\n+        return false;\n+    }\n+\n+    // Check for spend-delay; must be between 1 and 4 bytes.\n+    if (!value_spk.GetOp(pc, opcode, pushdata)) {\n+        return false;\n+    }\n+    CScriptNum proposed_spend_delay{0};\n+\n+    // TODO: this is ugly, but basically we have to replicate EvalScript's parsing\n+    // of numbers here. If the number is between [1, 16], it will be OP_[n], but\n+    // if it's larger it's encoded as pushdata.\n+    if (opcode >= OP_1 && opcode <= OP_16) {\n+        proposed_spend_delay = (int)opcode - (int)(OP_1 - 1);\n+    } else {\n+        if (pushdata.size() < 1 || pushdata.size() > CScriptNum::nDefaultMaxNumSize) {\n+            return false;\n+        }\n+        proposed_spend_delay = CScriptNum(pushdata, require_minimal);\n+    }\n+\n+    if (proposed_spend_delay != spend_delay) {\n+        return false;\n+    }\n+\n+    // Check for target-hash; we don't care what it is as long as it's 32 bytes.\n+    if (!value_spk.GetOp(pc, opcode) || opcode != 0x20) {\n+        return false;\n+    }\n+\n+    // Finally, check that OP_UNVAULT is the last opcode.\n+    if (!value_spk.GetOp(pc, opcode) || opcode != OP_UNVAULT || pc != value_spk.end()) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckUnvaultTarget(\n+    const uint256& target_outputs_hash) const\n+{\n+    // We can't use precomputed transaction data here because, since the input lacks a\n+    // witness, the precomputation routines don't run. I.e. `txdata.hashOutputs` is blank.\n+    return SHA256Uint256(GetOutputsSHA256(*this->txTo)) == target_outputs_hash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071580298",
      "id" : 1071580298,
      "line" : 2222,
      "node_id" : "PRRC_kwDOABII584_3wSK",
      "original_commit_id" : "fbf344931a2224dc3ace0011c1a4cb5cd4187f3e",
      "original_line" : 1999,
      "original_position" : 251,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 251,
      "pull_request_review_id" : 1250651157,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071580298/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-16T21:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071580298",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071585163"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071585163"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In a9db7392bf9d4d69d5a7a91db32dda7bd50479d8 \"consensus: allow OP_UNVAULT outputs to be behind scripthash\"\r\n\r\nIs it useful to allow OP_UNVAULT as a bare script? ISTM it would be simpler to just require that the the unvault script must be one of P2WSH or P2TR. It's not clear to me that it's actually useful to allow it as a bare script, especially since that requires further policy changes to allow such transactions to even be relayed.",
      "commit_id" : "a8323b9cea602f4af8206f86c0193d189b721904",
      "created_at" : "2023-01-16T21:22:14Z",
      "diff_hunk" : "@@ -1267,12 +1385,62 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     if (stack.size() < 2) {\n                         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n                     }\n-                    if (!checker.CheckUnvaultTriggerOutputs(\n-                            recovery_spk_hash, spend_delay, fRequireMinimal)) {\n+\n+                    CScript unvault_output_spk;\n+\n+                    if (!checker.CheckUnvaultTriggerOutputsCommon(\n+                            recovery_spk_hash,\n+                            spend_delay,\n+                            fRequireMinimal,\n+                            unvault_output_spk)) {\n                         return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n                     }\n+                    assert(unvault_output_spk.size() > 0);\n+\n+                    // Determine the type of the proposed OP_UNVAULT script.\n+                    // If it lives behind a scripthash, we will have to construct\n+                    // a specific expected scriptPubKey and compare to that. Otherwise\n+                    // we'll analyze its prefix as a bare script.\n+                    int opuv_witversion;\n+                    valtype opuv_witprogram;\n+                    const bool is_unvault_output_wit =\n+                        unvault_output_spk.IsWitnessProgram(opuv_witversion, opuv_witprogram);\n+\n+                    if (!is_unvault_output_wit) {\n+                        // Validate the OP_UNVAULT output as a bare script.\n+                        if (!CheckUnvaultTriggerOutputsBare(\n+                                unvault_output_spk,\n+                                recovery_spk_hash, spend_delay, fRequireMinimal)) {\n+                            return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n+                        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071585163",
      "id" : 1071585163,
      "line" : 1415,
      "node_id" : "PRRC_kwDOABII584_3xeL",
      "original_commit_id" : "a9db7392bf9d4d69d5a7a91db32dda7bd50479d8",
      "original_line" : 1415,
      "original_position" : 165,
      "original_start_line" : 1409,
      "path" : "src/script/interpreter.cpp",
      "position" : 165,
      "pull_request_review_id" : 1250651157,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071585163/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1409,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-16T21:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071585163",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071588874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071588874"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In c00dad503d7dfa990afd24c9fde2555482cc247b \"consensus: allow one revault output during unvault\"\r\n\r\nI don't see why the OP_UNVAULT output has to be the 0th output if the optional ones can be in any order.",
      "commit_id" : "a8323b9cea602f4af8206f86c0193d189b721904",
      "created_at" : "2023-01-16T21:31:07Z",
      "diff_hunk" : "@@ -2137,11 +2166,49 @@ bool GenericTransactionSignatureChecker<T>::CheckUnvaultTriggerOutputsCommon(\n     if (!this->txdata) return HandleMissingData(m_mdb);\n     const auto& txd{*this->txdata};\n \n-    if (!CommonVaultSpendChecks(txd, this->txTo->vout)) {\n+    const auto num_outs = this->txTo->vout.size();\n+    if (num_outs < 1 || num_outs > 3) {\n         return false;\n     }\n \n-    unvault_output_spk = this->txTo->vout[0].scriptPubKey;\n+    CAmount total_val_out_to_vaults{0};\n+\n+    assert(txd.m_spent_outputs_ready);\n+    const CScript& vault_spk = txd.m_spent_outputs[this->nIn].scriptPubKey;\n+\n+    bool has_ea{false};\n+    bool has_revault{false};\n+\n+    // Verify that all optional outputs are either an ephemeral anchor or a revault.\n+    // Permit the optional outputs to appear in any order.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1071588874",
      "id" : 1071588874,
      "line" : 2183,
      "node_id" : "PRRC_kwDOABII584_3yYK",
      "original_commit_id" : "c00dad503d7dfa990afd24c9fde2555482cc247b",
      "original_line" : 2183,
      "original_position" : 85,
      "original_start_line" : 2182,
      "path" : "src/script/interpreter.cpp",
      "position" : 85,
      "pull_request_review_id" : 1250651157,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071588874/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2182,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-16T21:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1071588874",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Any plans for a `vault()` descriptor? For Our wallet currently isn't designed for a two-stage transaction, which is necessary for the unvaulting part, so it'd be interesting to see someone attempting to implement a working vault in our wallet. Not saying you should be the one doing that, and it deserves a separate PR.",
      "created_at" : "2023-01-19T13:26:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#issuecomment-1396974683",
      "id" : 1396974683,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26857",
      "node_id" : "IC_kwDOABII585TRCRb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1396974683/reactions"
      },
      "updated_at" : "2023-01-19T13:27:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1396974683",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1081533018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081533018"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, this is a good point. I think I'll remove this.",
      "commit_id" : "aefe75178ab433d3fd66e27eceb73afba6dcc582",
      "created_at" : "2023-01-19T16:36:43Z",
      "diff_hunk" : "@@ -1267,12 +1385,62 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     if (stack.size() < 2) {\n                         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n                     }\n-                    if (!checker.CheckUnvaultTriggerOutputs(\n-                            recovery_spk_hash, spend_delay, fRequireMinimal)) {\n+\n+                    CScript unvault_output_spk;\n+\n+                    if (!checker.CheckUnvaultTriggerOutputsCommon(\n+                            recovery_spk_hash,\n+                            spend_delay,\n+                            fRequireMinimal,\n+                            unvault_output_spk)) {\n                         return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n                     }\n+                    assert(unvault_output_spk.size() > 0);\n+\n+                    // Determine the type of the proposed OP_UNVAULT script.\n+                    // If it lives behind a scripthash, we will have to construct\n+                    // a specific expected scriptPubKey and compare to that. Otherwise\n+                    // we'll analyze its prefix as a bare script.\n+                    int opuv_witversion;\n+                    valtype opuv_witprogram;\n+                    const bool is_unvault_output_wit =\n+                        unvault_output_spk.IsWitnessProgram(opuv_witversion, opuv_witprogram);\n+\n+                    if (!is_unvault_output_wit) {\n+                        // Validate the OP_UNVAULT output as a bare script.\n+                        if (!CheckUnvaultTriggerOutputsBare(\n+                                unvault_output_spk,\n+                                recovery_spk_hash, spend_delay, fRequireMinimal)) {\n+                            return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n+                        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1081533018",
      "id" : 1081533018,
      "in_reply_to_id" : 1071585163,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AduJa",
      "original_commit_id" : "a9db7392bf9d4d69d5a7a91db32dda7bd50479d8",
      "original_line" : 1434,
      "original_position" : 165,
      "original_start_line" : 1409,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 1262159625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081533018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-19T16:36:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081533018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1081688225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081688225"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe that's what the current ephemeral anchors draft PR uses:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/04778d12898e226c0818b3317ac83cddd8348777/src/script/script.cpp#L201-L204",
      "commit_id" : "aefe75178ab433d3fd66e27eceb73afba6dcc582",
      "created_at" : "2023-01-19T18:52:45Z",
      "diff_hunk" : "@@ -1781,6 +2096,132 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+//! Check that\n+//!\n+//!   1. The number of outputs is either 1 or 2.\n+//!   2. The total value of the vault is preserved.\n+//!   3. If there is a second output, it is a 0-value ephemeral anchor output.\n+//!   4. The recovery scriptPubKey is as expected.\n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckVaultSpendToRecoveryOutputs(\n+    const uint256& recovery_spk_hash) const\n+{\n+    if (!this->txdata) return HandleMissingData(m_mdb);\n+    const auto& txd{*this->txdata};\n+    const auto& vout = this->txTo->vout;\n+\n+    const auto num_outs = vout.size();\n+    if (num_outs < 1 || num_outs > 2) {\n+        return false;\n+    }\n+\n+    const CTxOut& value_out = vout[0];\n+    if (value_out.nValue != txd.m_total_in) {\n+        return false;\n+    }\n+\n+    // Ensure the second output, if one exists, is a 0-value ephemeral anchor.\n+    if (num_outs == 2 && !IsOutputEphemeralAnchor(vout[1])) {\n+        return false;\n+    }\n+\n+    return (VaultScriptHash(HASHER_VAULT_RECOVERY_SPK, value_out.scriptPubKey) ==\n+            recovery_spk_hash);\n+}\n+\n+\n+//! Return true if the given output is a 0-value anchor output.\n+static bool IsOutputEphemeralAnchor(const CTxOut& out)\n+{\n+    if (out.nValue != 0) {\n+        return false;\n+    }\n+    const CScript& spk = out.scriptPubKey;\n+    if (!(spk.size() == 1 && spk[0] == OP_2)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1081688225",
      "id" : 1081688225,
      "in_reply_to_id" : 1071570474,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585AeUCh",
      "original_commit_id" : "a8323b9cea602f4af8206f86c0193d189b721904",
      "original_line" : 2118,
      "original_position" : 401,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 1262415312,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081688225/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-19T18:52:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1081688225",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/116917595?v=4",
         "events_url" : "https://api.github.com/users/john-moffett/events{/privacy}",
         "followers_url" : "https://api.github.com/users/john-moffett/followers",
         "following_url" : "https://api.github.com/users/john-moffett/following{/other_user}",
         "gists_url" : "https://api.github.com/users/john-moffett/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/john-moffett",
         "id" : 116917595,
         "login" : "john-moffett",
         "node_id" : "U_kgDOBvgFWw",
         "organizations_url" : "https://api.github.com/users/john-moffett/orgs",
         "received_events_url" : "https://api.github.com/users/john-moffett/received_events",
         "repos_url" : "https://api.github.com/users/john-moffett/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/john-moffett/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/john-moffett/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/john-moffett"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the overall approach is sound for vault-specific functionality.\r\n\r\nI understand the implementation is a draft at this point, so you may already be aware of these issues, but I thought I'd flag them just in case. My apologies if these are premature!\r\n\r\nI believe the recursion [here](https://github.com/bitcoin/bitcoin/blob/f8d55bb32c267f2f02e67ad1dec1af65c6f16881/src/script/interpreter.cpp#L1334) ought to be explicitly limited. As it stands, an attacker could crash a node by crafting a transaction spending from a vault that has, as its `recov_spk_script`, a P2WSH scriptPubkey with a `witnessScript` of:\r\n\r\n`OP_3 OP_PICK OP_3 OP_PICK OP_3 OP_PICK OP_3 OP_PICK OP_VAULT`\r\n\r\nIf you supply `witnessScript, recovery_params, delay, 0x00*32, witnessScript` to the witness stack (in addition to the initial witness stack [here](https://github.com/bitcoin/bitcoin/blob/f8d55bb32c267f2f02e67ad1dec1af65c6f16881/test/functional/feature_vaults.py#L671-L676)), it'll recurse infinitely and crash. (See diff at the end of this comment for my addition to the test code.)\r\n\r\nA potential attacker could also perform almost any arbitrary computation using a similar method.\r\n\r\nThe recursion also doesn't count any potential additional signature operations toward the `sigOps` limits from what I can tell. (Maybe this is by design, though?)\r\n\r\nFinally, I don't think implementing these opcodes as `OP_NOPs` is workable as a soft fork. The current implementation is actually (I think) a hard fork, given that the stack will not be clean for old nodes and they'll reject most transactions using these opcodes. Even absent the cleanstack rule for witness scripts, the top element could be `false` in this case for old nodes yet the script would succeed in this PR, since it [pushes](https://github.com/bitcoin/bitcoin/blob/f8d55bb32c267f2f02e67ad1dec1af65c6f16881/src/script/interpreter.cpp#L1341) a `true`.\r\n\r\nI think it's generally unsafe for a reimplemented `NOP` to push to or pop the stack. My suggestion would be restricting `OP_VAULT` / `OP_UNVAULT` to be Tapscript only and using `OP_SUCCESSx` codes.  \r\n\r\nDiff for `feature_vaults.py`:\r\n\r\n```diff\r\n\r\n@@ -21,0 +22 @@ from test_framework.util import assert_equal, assert_raises_rpc_error\r\n+from test_framework.script_util import script_to_p2wsh_script\r\n@@ -64,0 +66,3 @@ class VaultsTest(BitcoinTestFramework):\r\n+            title(\"testing recursive attack sweep\")\r\n+            self.single_vault_test(node, wallet, sweep_from_vault=True)\r\n+\r\n@@ -447 +451,3 @@ DEFAULT_UNVAULT_SECRET = 3\r\n-\r\n+def get_recursive_witness_script() -> CScript:\r\n+    return CScript([script.OP_3, script.OP_PICK, script.OP_3, script.OP_PICK, script.OP_3,\r\n+                    script.OP_PICK, script.OP_3, script.OP_PICK, script.OP_VAULT])\r\n@@ -465 +471,3 @@ class VaultSpec:\r\n-        self.recovery_spk = CScript([script.OP_TRUE])\r\n+        recursive_script = get_recursive_witness_script()\r\n+        recursive_program = script_to_p2wsh_script(recursive_script)\r\n+        self.recovery_spk = recursive_program\r\n@@ -672,0 +681,5 @@ def get_sweep_to_recovery_tx(\r\n+                get_recursive_witness_script(),\r\n+                vault.recovery_params,\r\n+                CScript([vault.spend_delay]),\r\n+                CScript(b'\\x00' * 32),\r\n+                get_recursive_witness_script(),\r\n\r\n\r\n```",
      "created_at" : "2023-01-22T21:22:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#issuecomment-1399612075",
      "id" : 1399612075,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26857",
      "node_id" : "IC_kwDOABII585TbGKr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1399612075/reactions"
      },
      "updated_at" : "2023-01-22T21:22:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1399612075",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/116917595?v=4",
         "events_url" : "https://api.github.com/users/john-moffett/events{/privacy}",
         "followers_url" : "https://api.github.com/users/john-moffett/followers",
         "following_url" : "https://api.github.com/users/john-moffett/following{/other_user}",
         "gists_url" : "https://api.github.com/users/john-moffett/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/john-moffett",
         "id" : 116917595,
         "login" : "john-moffett",
         "node_id" : "U_kgDOBvgFWw",
         "organizations_url" : "https://api.github.com/users/john-moffett/orgs",
         "received_events_url" : "https://api.github.com/users/john-moffett/received_events",
         "repos_url" : "https://api.github.com/users/john-moffett/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/john-moffett/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/john-moffett/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/john-moffett"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Any plans for a vault() descriptor?\r\n\r\nThat'd be great, though if no one else wants to do that work I'll have spend some time learning more about descriptors.\r\n\r\n> I understand the implementation is a draft at this point, so you may already be aware of these issues, but I thought I'd flag them just in case. My apologies if these are premature!\r\n\r\n@john-moffett this is all great! I'd planned to move OP_VAULT/OP_UNVAULT to OP_SUCCESSx as of late last week, and was vaguely aware that the recursion probably facilitates Bad Things, but your detailed explanations and test cases (!) are very valuable. Never too early to point out a crash bug! Thank you for your help.\r\n\r\nI'll remedy these things in the coming days.",
      "created_at" : "2023-01-23T16:35:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#issuecomment-1400642052",
      "id" : 1400642052,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26857",
      "node_id" : "IC_kwDOABII585TfBoE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 1,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400642052/reactions"
      },
      "updated_at" : "2023-01-23T16:35:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400642052",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1096477805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096477805"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```c++\r\ntemplate<typename T1, typename T2>\r\nvoid move_to_end(T1& dest, T2& src)\r\n{\r\n    dest.insert(\r\n        dest.end(), \r\n        std::make_move_iterator(src.begin()),\r\n        std::make_move_iterator(src.end()));\r\n}\r\n\r\nmove_to_end(results, *check.m_deferred_checks);\r\n```\r\n?",
      "commit_id" : "aefe75178ab433d3fd66e27eceb73afba6dcc582",
      "created_at" : "2023-02-04T04:07:30Z",
      "diff_hunk" : "@@ -122,10 +136,28 @@ class CCheckQueue\n                 fOk = fAllOk;\n             }\n             // execute work\n-            for (T& check : vChecks)\n-                if (fOk)\n+            for (T& check : vChecks) {\n+                if (fOk) {\n                     fOk = check();\n+\n+                    if (fOk && check.m_deferred_checks && check.m_deferred_checks->size() > 0) {\n+                        auto& dc = *check.m_deferred_checks;\n+                        results.insert(\n+                            results.end(),\n+                            std::make_move_iterator(dc.begin()),\n+                            std::make_move_iterator(dc.end()));\n+                    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1096477805",
      "id" : 1096477805,
      "line" : 149,
      "node_id" : "PRRC_kwDOABII585BWuxt",
      "original_commit_id" : "a3ad8ecf96808a75431d98227fcb42d19d029606",
      "original_line" : 149,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/checkqueue.h",
      "position" : 92,
      "pull_request_review_id" : 1284012870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096477805/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-04T09:58:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096477805",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1096478197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096478197"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`std::variant`?",
      "commit_id" : "aefe75178ab433d3fd66e27eceb73afba6dcc582",
      "created_at" : "2023-02-04T04:09:57Z",
      "diff_hunk" : "@@ -193,6 +193,29 @@ enum class SigVersion\n     TAPSCRIPT = 3,   //!< Witness v1 with 32-byte program, not BIP16 P2SH-wrapped, script path spending, leaf version 0xc0; see BIP 342\n };\n \n+\n+//! Data that is accumulated during the script verification of a single input and then\n+//! used to perform aggregate checks after all inputs have been run through\n+//! `VerifyScript()`.\n+//!\n+//! TODO I realize this is kind of a hacky polymorphic-union thing; if there's a nicer\n+//! way to do this, please someone let me know.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1096478197",
      "id" : 1096478197,
      "line" : 241,
      "node_id" : "PRRC_kwDOABII585BWu31",
      "original_commit_id" : "a3ad8ecf96808a75431d98227fcb42d19d029606",
      "original_line" : 202,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 10,
      "pull_request_review_id" : 1284012870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096478197/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-04T09:58:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096478197",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1096480622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096480622"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could just be a `std::optional<std::vector>` -- `nullopt` is false, empty vector is true, non-empty vector is conditionally true.",
      "commit_id" : "aefe75178ab433d3fd66e27eceb73afba6dcc582",
      "created_at" : "2023-02-04T04:35:02Z",
      "diff_hunk" : "@@ -26,9 +28,12 @@ class CCheckQueueControl;\n   * the master is done adding work, it temporarily joins the worker pool\n   * as an N'th worker, until all jobs are done.\n   */\n-template <typename T>\n+template <typename T, typename R>\n class CCheckQueue\n {\n+public:\n+    using ChecksReturn = std::pair<bool, std::optional<std::vector<R>>>;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1096480622",
      "id" : 1096480622,
      "line" : 35,
      "node_id" : "PRRC_kwDOABII585BWvdu",
      "original_commit_id" : "a3ad8ecf96808a75431d98227fcb42d19d029606",
      "original_line" : 35,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/checkqueue.h",
      "position" : 23,
      "pull_request_review_id" : 1284012870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096480622/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-04T09:58:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096480622",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1096511595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096511595"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the way you're setting this up is that you give `CCheckQueue` a bunch of work, and it then returns a batch of deferred work back to you, that you then finish off. But if you're doing a whole block at once, maybe that's bad, because you're doing all the deferred checks for all txns in a single thread, rather than in parallel.\r\n\r\nMaybe it would be better to expand `CCheckQueue` into being more of a map/reduce model -- you map the scripts to many processes getting deferred checks in response, then you sort the deferred checks so related ones (from the same tx) all go to the same thread, then reduce/accumulate the results from them so that you've got your conclusion.\r\n\r\nCould be really clever and do the reduce work in parallel with mapping, I think; though you'd need some way of maintaining the accumulator state.",
      "commit_id" : "aefe75178ab433d3fd66e27eceb73afba6dcc582",
      "created_at" : "2023-02-04T09:52:25Z",
      "diff_hunk" : "@@ -193,6 +193,29 @@ enum class SigVersion\n     TAPSCRIPT = 3,   //!< Witness v1 with 32-byte program, not BIP16 P2SH-wrapped, script path spending, leaf version 0xc0; see BIP 342\n };\n \n+\n+//! Data that is accumulated during the script verification of a single input and then\n+//! used to perform aggregate checks after all inputs have been run through\n+//! `VerifyScript()`.\n+//!\n+//! TODO I realize this is kind of a hacky polymorphic-union thing; if there's a nicer\n+//! way to do this, please someone let me know.\n+struct DeferredCheck\n+{\n+    //! Set when script execution happens asynchronously so that we can associate\n+    //! deferred checks with their related transaction when a block's worth of\n+    //! script executions are performed in batch.\n+    const CTransaction* m_tx_to;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1096511595",
      "id" : 1096511595,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BW3Br",
      "original_commit_id" : "a3ad8ecf96808a75431d98227fcb42d19d029606",
      "original_line" : 208,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 16,
      "pull_request_review_id" : 1284012870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096511595/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-04T09:58:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1096511595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-02-06T20:24:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#issuecomment-1419702004",
      "id" : 1419702004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26857",
      "node_id" : "IC_kwDOABII585Unu70",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1419702004/reactions"
      },
      "updated_at" : "2023-02-06T20:24:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1419702004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1108665794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108665794"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good cleanup, done - thanks.",
      "commit_id" : "5f16b9549c7b618fa9f630f212157d37fc8cf8fa",
      "created_at" : "2023-02-16T15:42:11Z",
      "diff_hunk" : "@@ -122,10 +136,28 @@ class CCheckQueue\n                 fOk = fAllOk;\n             }\n             // execute work\n-            for (T& check : vChecks)\n-                if (fOk)\n+            for (T& check : vChecks) {\n+                if (fOk) {\n                     fOk = check();\n+\n+                    if (fOk && check.m_deferred_checks && check.m_deferred_checks->size() > 0) {\n+                        auto& dc = *check.m_deferred_checks;\n+                        results.insert(\n+                            results.end(),\n+                            std::make_move_iterator(dc.begin()),\n+                            std::make_move_iterator(dc.end()));\n+                    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1108665794",
      "id" : 1108665794,
      "in_reply_to_id" : 1096477805,
      "line" : 154,
      "node_id" : "PRRC_kwDOABII585CFOXC",
      "original_commit_id" : "a3ad8ecf96808a75431d98227fcb42d19d029606",
      "original_line" : 154,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/checkqueue.h",
      "position" : 97,
      "pull_request_review_id" : 1301750326,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108665794/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-16T15:42:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1108665794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1110150658"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1110150658"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is good feedback, and in the general case you're right. In the specific case of the deferred checks being introduced here, they don't include any of the computationally expensive stuff that motivates parallelizing checks in the case of CScriptCheck - i.e. we're not doing any cryptographic ops or signature checking here; OP_VAULT deferred checks consist of summing and comparing integers.\r\n\r\nSo I'm not necessarily averse to doing the deferred-check parallelization in this changeset, but (i) I don't think it's strictly necessary from a resource standpoint and (ii) I can't think of a straightforward way to do it without introducing another thread pool devoted to the deferred checks, which is a decent amount of work.",
      "commit_id" : "3fe1cc5220dd407762f2cb65ca5f6cdbe4d8df3c",
      "created_at" : "2023-02-17T17:54:14Z",
      "diff_hunk" : "@@ -193,6 +193,29 @@ enum class SigVersion\n     TAPSCRIPT = 3,   //!< Witness v1 with 32-byte program, not BIP16 P2SH-wrapped, script path spending, leaf version 0xc0; see BIP 342\n };\n \n+\n+//! Data that is accumulated during the script verification of a single input and then\n+//! used to perform aggregate checks after all inputs have been run through\n+//! `VerifyScript()`.\n+//!\n+//! TODO I realize this is kind of a hacky polymorphic-union thing; if there's a nicer\n+//! way to do this, please someone let me know.\n+struct DeferredCheck\n+{\n+    //! Set when script execution happens asynchronously so that we can associate\n+    //! deferred checks with their related transaction when a block's worth of\n+    //! script executions are performed in batch.\n+    const CTransaction* m_tx_to;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1110150658",
      "id" : 1110150658,
      "in_reply_to_id" : 1096511595,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CK44C",
      "original_commit_id" : "a3ad8ecf96808a75431d98227fcb42d19d029606",
      "original_line" : 208,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 1303948103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1110150658/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-17T17:54:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1110150658",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1110154588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1110154588"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I looked at using `std::variant` but the end use in `ValidateDeferredChecks` winds up being much hairier. I've changed the specific checks from `std::unique_ptr` to `std::optional` for simplicity's sake. If we eventually decide that the memory implications of this approach are too heavyweight, we could do something with std::variant - but I think they're comparable, and given that we'll never have more than a few thousand deferred checks in flight at any given time, I think it's probably okay to leave this representation as-is.",
      "commit_id" : "3fe1cc5220dd407762f2cb65ca5f6cdbe4d8df3c",
      "created_at" : "2023-02-17T17:57:43Z",
      "diff_hunk" : "@@ -193,6 +193,29 @@ enum class SigVersion\n     TAPSCRIPT = 3,   //!< Witness v1 with 32-byte program, not BIP16 P2SH-wrapped, script path spending, leaf version 0xc0; see BIP 342\n };\n \n+\n+//! Data that is accumulated during the script verification of a single input and then\n+//! used to perform aggregate checks after all inputs have been run through\n+//! `VerifyScript()`.\n+//!\n+//! TODO I realize this is kind of a hacky polymorphic-union thing; if there's a nicer\n+//! way to do this, please someone let me know.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1110154588",
      "id" : 1110154588,
      "in_reply_to_id" : 1096478197,
      "line" : 245,
      "node_id" : "PRRC_kwDOABII585CK51c",
      "original_commit_id" : "a3ad8ecf96808a75431d98227fcb42d19d029606",
      "original_line" : 245,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 74,
      "pull_request_review_id" : 1303952342,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1110154588/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-17T17:57:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1110154588",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1113120278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1113120278"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. This has been done; see the `limit_recursion` parameter. Thanks to @john-moffett for outlining a particular test case to ensure that recursion is limited to a single call.",
      "commit_id" : "b7620a98946265e63bc1db1680c7e28225b5e47b",
      "created_at" : "2023-02-21T14:11:24Z",
      "diff_hunk" : "@@ -1213,6 +1342,185 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 }\n                 break;\n \n+                case OP_VAULT:\n+                {\n+                    // only available post-segwit\n+                    if (sigversion == SigVersion::BASE) return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n+\n+                    // <recovery-spk-hash> <spend-delay> <trigger-spk-hash>\n+                    if (stack.size() < 3) return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    valtype& hash_from_stack = stacktop(-3);\n+                    if (hash_from_stack.size() != 32) {\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                    }\n+                    const uint256 recovery_spk_hash{hash_from_stack};\n+\n+                    // `spend-delay` is a CScriptNum, up to 4 bytes, that is interpreted\n+                    // in the same way as the first 23 bits of nSequence are per\n+                    // BIP 68 (relative time-locks). This enables users of vaults to\n+                    // express spend delays in either wall time or block count, and reuse\n+                    // the same machinery as OP_CHECKSEQUENCEVERIFY.\n+                    const CScriptNum spend_delay(stacktop(-2), fRequireMinimal);\n+\n+                    hash_from_stack = stacktop(-1);\n+                    if (hash_from_stack.size() != 32) {\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                    }\n+                    const uint256 expected_trigger_spk_hash{hash_from_stack};\n+\n+                    popstack(stack);\n+                    popstack(stack);\n+                    popstack(stack);\n+\n+                    // Case 1: sweep to recovery\n+                    if (checker.CheckVaultSpendToRecoveryOutputs(recovery_spk_hash)) {\n+                        stack.push_back(vchTrue);\n+                        break;\n+                    }\n+\n+                    // Case 2: spend to compatible OP_UNVAULT\n+\n+                    // [trigger witness stack ...] <trigger-spk> [prev stack items]\n+                    if (stack.size() < 2) {\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                    }\n+\n+                    CScript unvault_output_spk;\n+\n+                    if (!checker.CheckUnvaultTriggerOutputsCommon(\n+                            recovery_spk_hash,\n+                            spend_delay,\n+                            fRequireMinimal,\n+                            unvault_output_spk)) {\n+                        return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n+                    }\n+                    assert(unvault_output_spk.size() > 0);\n+\n+                    // Determine the type of the proposed OP_UNVAULT script.\n+                    // If it lives behind a scripthash, we will have to construct\n+                    // a specific expected scriptPubKey and compare to that. Otherwise\n+                    // we'll analyze its prefix as a bare script.\n+                    int opuv_witversion;\n+                    valtype opuv_witprogram;\n+                    const bool is_unvault_output_wit =\n+                        unvault_output_spk.IsWitnessProgram(opuv_witversion, opuv_witprogram);\n+\n+                    if (!is_unvault_output_wit) {\n+                        // Validate the OP_UNVAULT output as a bare script.\n+                        if (!CheckUnvaultTriggerOutputsBare(\n+                                unvault_output_spk,\n+                                recovery_spk_hash, spend_delay, fRequireMinimal)) {\n+                            return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n+                        }\n+                    } else {\n+                        // We now expect an additional item on the stack, <target-hash>,\n+                        // which is used to validate the proposed OP_UNVAULT witness\n+                        // output sPK - which hides the actual OP_UNVAULT script behind a\n+                        // scripthash.\n+                        if (stack.size() < 3) {\n+                            return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                        }\n+                        valtype& hash_from_stack = stacktop(-1);\n+                        if (hash_from_stack.size() != 32) {\n+                            return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                        }\n+                        const uint256 target_hash{hash_from_stack};\n+                        popstack(stack);\n+\n+                        if (!CheckUnvaultTriggerOutputsWitness(\n+                                opuv_witversion, opuv_witprogram,\n+                                recovery_spk_hash, spend_delay, target_hash,\n+                                fRequireMinimal, flags, serror)) {\n+                            return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n+                        }\n+                    }\n+\n+                    // Now that we have verified the structure of the outputs, verify\n+                    // the signature authorizing the beginning of the unvault.\n+                    //\n+                    // Check that a valid trigger signature has been put on the witness\n+                    // stack.\n+                    const valtype& trigger_witness_program = stacktop(-1);\n+                    auto trigger_witness_spk = CScript(\n+                        trigger_witness_program.begin(), trigger_witness_program.end());\n+\n+                    const uint256 trigger_spk_hash = VaultScriptHash(\n+                            HASHER_VAULT_UNVAULT_SPK, trigger_witness_spk);\n+\n+                    if (trigger_spk_hash != expected_trigger_spk_hash) {\n+                        return set_error(serror, SCRIPT_ERR_VAULT_WRONG_TRIGGER_WITNESS_PROGRAM);\n+                    }\n+                    popstack(stack);\n+                    // Everything remaining on the stack is the witness stack\n+                    // to be fed into the witness program above.\n+\n+                    CScriptWitness witness;\n+                    witness.stack = stack;\n+                    int witnessversion;\n+                    std::vector<unsigned char> witnessprogram;\n+\n+                    if (!trigger_witness_spk.IsWitnessProgram(witnessversion, witnessprogram)) {\n+                        return set_error(serror, SCRIPT_ERR_VAULT_INVALID_TRIGGER_WITNESS_PROGRAM);\n+                    }\n+                    // Note that this will recursively call EvalScript. We could get\n+                    // into a further recursion if OP_VAULT spends are included in the\n+                    // trigger witness program; the recursion depth is limited\n+                    // solely by script size constraints.\n+                    //\n+                    // TODO: think more about whether to limit recursive OP_VAULT\n+                    // evaluations in trigger witness programs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1113120278",
      "id" : 1113120278,
      "in_reply_to_id" : 1071577974,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CWN4W",
      "original_commit_id" : "a8323b9cea602f4af8206f86c0193d189b721904",
      "original_line" : 1428,
      "original_position" : 287,
      "original_start_line" : 1471,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 1307509728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1113120278/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-21T14:11:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1113120278",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1113121652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1113121652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed. Vault opcodes now only exist as OP_SUCCESSx overrides in tapscript. ",
      "commit_id" : "b7620a98946265e63bc1db1680c7e28225b5e47b",
      "created_at" : "2023-02-21T14:12:33Z",
      "diff_hunk" : "@@ -1267,12 +1385,62 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     if (stack.size() < 2) {\n                         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n                     }\n-                    if (!checker.CheckUnvaultTriggerOutputs(\n-                            recovery_spk_hash, spend_delay, fRequireMinimal)) {\n+\n+                    CScript unvault_output_spk;\n+\n+                    if (!checker.CheckUnvaultTriggerOutputsCommon(\n+                            recovery_spk_hash,\n+                            spend_delay,\n+                            fRequireMinimal,\n+                            unvault_output_spk)) {\n                         return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n                     }\n+                    assert(unvault_output_spk.size() > 0);\n+\n+                    // Determine the type of the proposed OP_UNVAULT script.\n+                    // If it lives behind a scripthash, we will have to construct\n+                    // a specific expected scriptPubKey and compare to that. Otherwise\n+                    // we'll analyze its prefix as a bare script.\n+                    int opuv_witversion;\n+                    valtype opuv_witprogram;\n+                    const bool is_unvault_output_wit =\n+                        unvault_output_spk.IsWitnessProgram(opuv_witversion, opuv_witprogram);\n+\n+                    if (!is_unvault_output_wit) {\n+                        // Validate the OP_UNVAULT output as a bare script.\n+                        if (!CheckUnvaultTriggerOutputsBare(\n+                                unvault_output_spk,\n+                                recovery_spk_hash, spend_delay, fRequireMinimal)) {\n+                            return set_error(serror, SCRIPT_ERR_UNVAULT_MISMATCH);\n+                        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1113121652",
      "id" : 1113121652,
      "in_reply_to_id" : 1071585163,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CWON0",
      "original_commit_id" : "a9db7392bf9d4d69d5a7a91db32dda7bd50479d8",
      "original_line" : 1434,
      "original_position" : 165,
      "original_start_line" : 1409,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 1307511788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1113121652/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-21T14:12:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1113121652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1113122540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1113122540"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed. OP_UNVAULT outputs (and recovery outputs) are now specified explicitly by an index on the witness stack. Thanks for this feedback.",
      "commit_id" : "b7620a98946265e63bc1db1680c7e28225b5e47b",
      "created_at" : "2023-02-21T14:13:20Z",
      "diff_hunk" : "@@ -2137,11 +2166,49 @@ bool GenericTransactionSignatureChecker<T>::CheckUnvaultTriggerOutputsCommon(\n     if (!this->txdata) return HandleMissingData(m_mdb);\n     const auto& txd{*this->txdata};\n \n-    if (!CommonVaultSpendChecks(txd, this->txTo->vout)) {\n+    const auto num_outs = this->txTo->vout.size();\n+    if (num_outs < 1 || num_outs > 3) {\n         return false;\n     }\n \n-    unvault_output_spk = this->txTo->vout[0].scriptPubKey;\n+    CAmount total_val_out_to_vaults{0};\n+\n+    assert(txd.m_spent_outputs_ready);\n+    const CScript& vault_spk = txd.m_spent_outputs[this->nIn].scriptPubKey;\n+\n+    bool has_ea{false};\n+    bool has_revault{false};\n+\n+    // Verify that all optional outputs are either an ephemeral anchor or a revault.\n+    // Permit the optional outputs to appear in any order.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26857#discussion_r1113122540",
      "id" : 1113122540,
      "in_reply_to_id" : 1071588874,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585CWObs",
      "original_commit_id" : "c00dad503d7dfa990afd24c9fde2555482cc247b",
      "original_line" : 2160,
      "original_position" : 85,
      "original_start_line" : 2182,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 1307513132,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26857",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1113122540/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-02-21T14:13:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1113122540",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
