[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`gettransaction` is for wallet transactions and the node doesn't know anything about `MiniWallet`. ",
      "created_at" : "2020-12-17T22:58:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20692#issuecomment-747751719",
      "id" : 747751719,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20692",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0Nzc1MTcxOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-17T22:58:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747751719",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/127973?v=4",
         "events_url" : "https://api.github.com/users/lontivero/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lontivero/followers",
         "following_url" : "https://api.github.com/users/lontivero/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lontivero/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lontivero",
         "id" : 127973,
         "login" : "lontivero",
         "node_id" : "MDQ6VXNlcjEyNzk3Mw==",
         "organizations_url" : "https://api.github.com/users/lontivero/orgs",
         "received_events_url" : "https://api.github.com/users/lontivero/received_events",
         "repos_url" : "https://api.github.com/users/lontivero/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lontivero/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lontivero"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> `gettransaction` is for wallet transactions and the node doesn't know anything about `MiniWallet`.\r\n\r\nReally? What about here: https://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/wallet.py#L74\r\n\r\nThe transactions are definitely in the node's mempool (ie here: https://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/wallet.py#L76)",
      "created_at" : "2020-12-18T00:24:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20692#issuecomment-747789804",
      "id" : 747789804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20692",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0Nzc4OTgwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-18T00:24:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747789804",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`MiniWallet` is not a wallet handled by the node, it is an \"external\" wallet coded in python for testing. `gettransaction` only works for those wallets handled by the node, that's why the error says: `non-wallet transaction id`   ",
      "created_at" : "2020-12-18T01:06:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20692#issuecomment-747802638",
      "id" : 747802638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20692",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NzgwMjYzOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-18T01:06:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747802638",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/127973?v=4",
         "events_url" : "https://api.github.com/users/lontivero/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lontivero/followers",
         "following_url" : "https://api.github.com/users/lontivero/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lontivero/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lontivero",
         "id" : 127973,
         "login" : "lontivero",
         "node_id" : "MDQ6VXNlcjEyNzk3Mw==",
         "organizations_url" : "https://api.github.com/users/lontivero/orgs",
         "received_events_url" : "https://api.github.com/users/lontivero/received_events",
         "repos_url" : "https://api.github.com/users/lontivero/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lontivero/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lontivero"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> `MiniWallet` is not a wallet handled by the node, it is an \"external\" wallet coded in python for testing. `gettransaction` only works for those wallets handled by the node, that's why the error says: `non-wallet transaction id`\r\n\r\nAh I got it - thanks for the explanation. I fixed and pushed/rebased",
      "created_at" : "2020-12-18T03:32:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20692#issuecomment-747846576",
      "id" : 747846576,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20692",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0Nzg0NjU3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-18T03:32:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747846576",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK. Good job.",
      "created_at" : "2020-12-21T13:25:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20692#issuecomment-748971704",
      "id" : 748971704,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20692",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0ODk3MTcwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-21T13:25:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748971704",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/127973?v=4",
         "events_url" : "https://api.github.com/users/lontivero/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lontivero/followers",
         "following_url" : "https://api.github.com/users/lontivero/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lontivero/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lontivero",
         "id" : 127973,
         "login" : "lontivero",
         "node_id" : "MDQ6VXNlcjEyNzk3Mw==",
         "organizations_url" : "https://api.github.com/users/lontivero/orgs",
         "received_events_url" : "https://api.github.com/users/lontivero/received_events",
         "repos_url" : "https://api.github.com/users/lontivero/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lontivero/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lontivero/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lontivero"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 11a32722f09f1d81f34bd09b26248ba99f2e7f07",
      "created_at" : "2020-12-21T14:23:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20692#issuecomment-748999018",
      "id" : 748999018,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20692",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0ODk5OTAxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-21T14:23:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748999018",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20692#discussion_r546739608"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20692"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546739608"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, missed this\r\n\r\n`blocks` needs to be assigned here. See #20737   ",
      "commit_id" : "11a32722f09f1d81f34bd09b26248ba99f2e7f07",
      "created_at" : "2020-12-21T14:35:18Z",
      "diff_hunk" : "@@ -4,66 +4,59 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\"\n \n-from test_framework.blocktools import create_raw_transaction\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n \n class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n-        node0_address = self.nodes[0].getnewaddress()\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+\n+        # Add enough mature utxos to the wallet so that all txs spend confirmed coins\n+        wallet.generate(3)\n+        node.generate(100)\n+\n         # Spend block 1/2/3's coinbase transactions\n-        # Mine a block.\n+        # Mine a block\n         # Create three more transactions, spending the spends\n-        # Mine another block.\n+        # Mine another block\n         # ... make sure all the transactions are confirmed\n         # Invalidate both blocks\n         # ... make sure all the transactions are put back in the mempool\n         # Mine a new block\n-        # ... make sure all the transactions are confirmed again.\n-\n-        b = [self.nodes[0].getblockhash(n) for n in range(1, 4)]\n-        coinbase_txids = [self.nodes[0].getblock(h)['tx'][0] for h in b]\n-        spends1_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.99) for txid in coinbase_txids]\n-        spends1_id = [self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw]\n-\n+        # ... make sure all the transactions are confirmed again\n         blocks = []\n-        blocks.extend(self.nodes[0].generate(1))\n-\n-        spends2_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.98) for txid in spends1_id]\n-        spends2_id = [self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw]\n+        spends1_ids = [wallet.send_self_transfer(from_node=node)['txid'] for _ in range(3)]\n+        blocks.extend(node.generate(1))\n+        spends2_ids = [wallet.send_self_transfer(from_node=node)['txid'] for _ in range(3)]\n+        blocks.extend(node.generate(1))\n \n-        blocks.extend(self.nodes[0].generate(1))\n+        spends_ids = set(spends1_ids + spends2_ids)\n \n         # mempool should be empty, all txns confirmed\n-        assert_equal(set(self.nodes[0].getrawmempool()), set())\n-        for txid in spends1_id+spends2_id:\n-            tx = self.nodes[0].gettransaction(txid)\n-            assert tx[\"confirmations\"] > 0\n+        assert_equal(set(node.getrawmempool()), set())\n+        confirmed_txns = set(node.getblock(blocks[0])['tx'] + node.getblock(blocks[1])['tx'])\n+        # Checks that all spend txns are contained in the mined blocks\n+        assert(spends_ids < confirmed_txns)\n \n         # Use invalidateblock to re-org back\n-        for node in self.nodes:\n-            node.invalidateblock(blocks[0])\n+        node.invalidateblock(blocks[0])\n \n         # All txns should be back in mempool with 0 confirmations\n-        assert_equal(set(self.nodes[0].getrawmempool()), set(spends1_id+spends2_id))\n-        for txid in spends1_id+spends2_id:\n-            tx = self.nodes[0].gettransaction(txid)\n-            assert tx[\"confirmations\"] == 0\n+        assert_equal(set(node.getrawmempool()), spends_ids)\n \n         # Generate another block, they should all get mined\n-        self.nodes[0].generate(1)\n+        node.generate(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20692#discussion_r546739608",
      "id" : 546739608,
      "line" : 55,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjczOTYwOA==",
      "original_commit_id" : "11a32722f09f1d81f34bd09b26248ba99f2e7f07",
      "original_line" : 55,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/mempool_resurrect.py",
      "position" : 82,
      "pull_request_review_id" : 556422965,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20692",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-21T14:35:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546739608",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20692#discussion_r546789961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20692"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546789961"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Great catch ð",
      "commit_id" : "11a32722f09f1d81f34bd09b26248ba99f2e7f07",
      "created_at" : "2020-12-21T16:04:30Z",
      "diff_hunk" : "@@ -4,66 +4,59 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\"\n \n-from test_framework.blocktools import create_raw_transaction\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n \n class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n-        node0_address = self.nodes[0].getnewaddress()\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+\n+        # Add enough mature utxos to the wallet so that all txs spend confirmed coins\n+        wallet.generate(3)\n+        node.generate(100)\n+\n         # Spend block 1/2/3's coinbase transactions\n-        # Mine a block.\n+        # Mine a block\n         # Create three more transactions, spending the spends\n-        # Mine another block.\n+        # Mine another block\n         # ... make sure all the transactions are confirmed\n         # Invalidate both blocks\n         # ... make sure all the transactions are put back in the mempool\n         # Mine a new block\n-        # ... make sure all the transactions are confirmed again.\n-\n-        b = [self.nodes[0].getblockhash(n) for n in range(1, 4)]\n-        coinbase_txids = [self.nodes[0].getblock(h)['tx'][0] for h in b]\n-        spends1_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.99) for txid in coinbase_txids]\n-        spends1_id = [self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw]\n-\n+        # ... make sure all the transactions are confirmed again\n         blocks = []\n-        blocks.extend(self.nodes[0].generate(1))\n-\n-        spends2_raw = [create_raw_transaction(self.nodes[0], txid, node0_address, amount=49.98) for txid in spends1_id]\n-        spends2_id = [self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw]\n+        spends1_ids = [wallet.send_self_transfer(from_node=node)['txid'] for _ in range(3)]\n+        blocks.extend(node.generate(1))\n+        spends2_ids = [wallet.send_self_transfer(from_node=node)['txid'] for _ in range(3)]\n+        blocks.extend(node.generate(1))\n \n-        blocks.extend(self.nodes[0].generate(1))\n+        spends_ids = set(spends1_ids + spends2_ids)\n \n         # mempool should be empty, all txns confirmed\n-        assert_equal(set(self.nodes[0].getrawmempool()), set())\n-        for txid in spends1_id+spends2_id:\n-            tx = self.nodes[0].gettransaction(txid)\n-            assert tx[\"confirmations\"] > 0\n+        assert_equal(set(node.getrawmempool()), set())\n+        confirmed_txns = set(node.getblock(blocks[0])['tx'] + node.getblock(blocks[1])['tx'])\n+        # Checks that all spend txns are contained in the mined blocks\n+        assert(spends_ids < confirmed_txns)\n \n         # Use invalidateblock to re-org back\n-        for node in self.nodes:\n-            node.invalidateblock(blocks[0])\n+        node.invalidateblock(blocks[0])\n \n         # All txns should be back in mempool with 0 confirmations\n-        assert_equal(set(self.nodes[0].getrawmempool()), set(spends1_id+spends2_id))\n-        for txid in spends1_id+spends2_id:\n-            tx = self.nodes[0].gettransaction(txid)\n-            assert tx[\"confirmations\"] == 0\n+        assert_equal(set(node.getrawmempool()), spends_ids)\n \n         # Generate another block, they should all get mined\n-        self.nodes[0].generate(1)\n+        node.generate(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20692#discussion_r546789961",
      "id" : 546789961,
      "in_reply_to_id" : 546739608,
      "line" : 55,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4OTk2MQ==",
      "original_commit_id" : "11a32722f09f1d81f34bd09b26248ba99f2e7f07",
      "original_line" : 55,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/mempool_resurrect.py",
      "position" : 82,
      "pull_request_review_id" : 556488079,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20692",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-21T16:04:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546789961",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   }
]
