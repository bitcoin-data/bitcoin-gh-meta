[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23549](https://github.com/bitcoin/bitcoin/pull/23549) (Add scanblocks RPC call (attempt 2) by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-12-16T06:06:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-745787257",
      "id" : 745787257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTc4NzI1Nw==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745787257/reactions"
      },
      "updated_at" : "2021-11-19T14:06:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745787257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550247480"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550247480"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`scanblockfilters`",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T16:14:53Z",
      "diff_hunk" : "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scantxoutset rpc call.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550247480",
      "id" : 550247480,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0NzQ4MA==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : null,
      "pull_request_review_id" : 560111078,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550247480",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550247720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550247720"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add a node without this index and test that the RPC call fails.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T16:15:36Z",
      "diff_hunk" : "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scantxoutset rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class ScanblockfiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-blockfilterindex=1\"]]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550247720",
      "id" : 550247720,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0NzcyMA==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 12,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : null,
      "pull_request_review_id" : 560111078,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550247720",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550248324"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550248324"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a bit hard to read, maybe start with `start_height = self.nodes[0].getblockheader(blockhash_new)['height']`",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T16:17:25Z",
      "diff_hunk" : "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scantxoutset rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class ScanblockfiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-blockfilterindex=1\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        addr_1 = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_1, 1.0)\n+        assert_equal(self.nodes[0].scanblockfilters([\"addr(\"+addr_1+\")\"]), [])\n+        blockhash = self.nodes[0].generate(1)[0]\n+        assert(blockhash in self.nodes[0].scanblockfilters([\"addr(\"+addr_1+\")\"]))\n+        blockhash_new = self.nodes[0].generate(1)[0]\n+        self.log.info(\"Test scanblockfilters startheight...\")\n+        assert(blockhash not in self.nodes[0].scanblockfilters([\"addr(\"+addr_1+\")\"], self.nodes[0].getblockheader(blockhash_new)['height']))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550248324",
      "id" : 550248324,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0ODMyNA==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : null,
      "pull_request_review_id" : 560111078,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550248324",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550249111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550249111"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would be good to add an object descriptor too.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T16:19:53Z",
      "diff_hunk" : "@@ -2284,6 +2284,108 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+\n+static RPCHelpMan scanblockfilters()\n+{\n+    return RPCHelpMan{\"scanblockfilters\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\",\n+                {\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"startheight\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\") +",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550249111",
      "id" : 550249111,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0OTExMQ==",
      "original_commit_id" : "94722b9fd07864829504f3eaa18456ef7a517da2",
      "original_line" : 2314,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 560111078,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550249111",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550250917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550250917"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is worth logging in general rather than RPC only, just like `rescanwallet`. It took a few seconds between issuing the RPC command and seeing these log entries, any idea why?",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T16:25:04Z",
      "diff_hunk" : "@@ -2284,6 +2284,108 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+\n+static RPCHelpMan scanblockfilters()\n+{\n+    return RPCHelpMan{\"scanblockfilters\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\",\n+                {\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"startheight\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\") +\n+                    HelpExampleRpc(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::string filtertype_name = \"basic\";\n+    if (!request.params[2].isNull()) {\n+        filtertype_name = request.params[1].get_str();\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+    }\n+\n+    // set the stop-height\n+    const CBlockIndex* block = nullptr;\n+    {\n+        LOCK(cs_main);\n+        block = ::ChainActive().Tip();\n+        if (!request.params[1].isNull()) {\n+            block = ::ChainActive()[request.params[1].get_int()];\n+            if (!block) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stopheight\");\n+            }\n+        }\n+    }\n+    CHECK_NONFATAL(block);\n+\n+    // loop through the scan objects, add scripts to the element_set\n+    GCSFilter::ElementSet needle_set;\n+    for (const UniValue& scanobject : request.params[0].get_array().getValues()) {\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+        for (const CScript& script : scripts) {\n+            needle_set.emplace(script.begin(), script.end());\n+        }\n+    }\n+    NodeContext& node = EnsureNodeContext(request.context);\n+    UniValue ret(UniValue::VARR);\n+    const int amount_per_chunk = 10000;\n+    const CBlockIndex* start_index = block;\n+    std::vector<BlockFilter> filters;\n+    while (block) {\n+        node.rpc_interruption_point(); // allow a clean shutdown\n+        const CBlockIndex* next = nullptr;\n+        {\n+            LOCK(cs_main);\n+            next = ChainActive().Next(block);\n+        }\n+        if (start_index->nHeight+amount_per_chunk == block->nHeight || next == nullptr) {\n+            LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550250917",
      "id" : 550250917,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MDkxNw==",
      "original_commit_id" : "94722b9fd07864829504f3eaa18456ef7a517da2",
      "original_line" : 2367,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 560115072,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550250917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550297373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550297373"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like the example is missing quotes\r\n```suggestion\r\n                    HelpExampleCli(\"scanblockfilters\", \"'[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]' 300000\") +\r\n```\r\n```\r\n$ bitcoin-cli -signet scanblockfilters [\"addr(tb1qdydhyacp7tj2asc0u4mhtf6rn65dfjxclrdd7a)\"] 0\r\nerror: Error parsing JSON: [addr(tb1qdydhyacp7tj2asc0u4mhtf6rn65dfjxclrdd7a)]\r\n```\r\n```\r\n$ bitcoin-cli -signet scanblockfilters '[\"addr(tb1qdydhyacp7tj2asc0u4mhtf6rn65dfjxclrdd7a)\"]' 0\r\n[\r\n  \"0000013b318daf6e8d4c531b8293ebf800871f4220fc4b7b25cc6798ec5cb155\",\r\n  \"000001003f625cbecd53924713929b5a91b12edf4eb844f33781ecb6bb78e69b\",\r\n  \"000000840904ea8ff963d4f776c0175a622228738cdf9ebd481e3ef483ccdff0\"\r\n]\r\n",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T19:06:18Z",
      "diff_hunk" : "@@ -2284,6 +2284,108 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+\n+static RPCHelpMan scanblockfilters()\n+{\n+    return RPCHelpMan{\"scanblockfilters\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\",\n+                {\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"startheight\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\") +",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550297373",
      "id" : 550297373,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NzM3Mw==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 2314,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 560168090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550297373",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550299205"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550299205"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The actual default start height currently seems to be the tip, not 0.\r\n```cpp\r\nblock = ::ChainActive().Tip();\r\n```",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T19:13:33Z",
      "diff_hunk" : "@@ -2284,6 +2284,108 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+\n+static RPCHelpMan scanblockfilters()\n+{\n+    return RPCHelpMan{\"scanblockfilters\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\",\n+                {\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"startheight\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550299205",
      "id" : 550299205,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5OTIwNQ==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 2305,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 560168090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550299205",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550300920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550300920"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like this should be `params[2]`\r\n```suggestion\r\n        filtertype_name = request.params[2].get_str();\r\n```\r\n\r\nIn the functional test, suggest asserting that a call with \"basic\" and another with no arg return the same result:\r\n```\r\nbitcoin-cli -signet scanblockfilters \\\r\n  '[\"addr(tb1qdydhyacp7tj2asc0u4mhtf6rn65dfjxclrdd7a)\"]' 0 basic\r\n[\r\n  \"0000013b318daf6e8d4c531b8293ebf800871f4220fc4b7b25cc6798ec5cb155\",\r\n  \"000001003f625cbecd53924713929b5a91b12edf4eb844f33781ecb6bb78e69b\",\r\n  \"000000840904ea8ff963d4f776c0175a622228738cdf9ebd481e3ef483ccdff0\"\r\n]\r\n\r\nbitcoin-cli -signet scanblockfilters \\\r\n  '[\"addr(tb1qdydhyacp7tj2asc0u4mhtf6rn65dfjxclrdd7a)\"]' 0 \r\n[\r\n  \"0000013b318daf6e8d4c531b8293ebf800871f4220fc4b7b25cc6798ec5cb155\",\r\n  \"000001003f625cbecd53924713929b5a91b12edf4eb844f33781ecb6bb78e69b\",\r\n  \"000000840904ea8ff963d4f776c0175a622228738cdf9ebd481e3ef483ccdff0\"\r\n]\r\n```",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T19:19:47Z",
      "diff_hunk" : "@@ -2284,6 +2284,108 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+\n+static RPCHelpMan scanblockfilters()\n+{\n+    return RPCHelpMan{\"scanblockfilters\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\",\n+                {\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"startheight\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\") +\n+                    HelpExampleRpc(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::string filtertype_name = \"basic\";\n+    if (!request.params[2].isNull()) {\n+        filtertype_name = request.params[1].get_str();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550300920",
      "id" : 550300920,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwMDkyMA==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 2321,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 560168090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550300920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550301218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550301218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can be `const`\r\n```diff\r\n- std::string filtertype_name = \"basic\";\r\n- if (!request.params[2].isNull()) {\r\n-     filtertype_name = request.params[1].get_str();\r\n- }\r\n+ const std::string filtertype_name{request.params[2].isNull() ? \"basic\" : request.params[2].get_str()};\r\n```\r\n",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T19:21:02Z",
      "diff_hunk" : "@@ -2284,6 +2284,108 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+\n+static RPCHelpMan scanblockfilters()\n+{\n+    return RPCHelpMan{\"scanblockfilters\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\",\n+                {\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"startheight\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\") +\n+                    HelpExampleRpc(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::string filtertype_name = \"basic\";\n+    if (!request.params[2].isNull()) {\n+        filtertype_name = request.params[1].get_str();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550301218",
      "id" : 550301218,
      "in_reply_to_id" : 550300920,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwMTIxOA==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 2321,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 560168090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550301218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550304054"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550304054"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps also `assert_raises_rpc_error` on\r\n- \"Unknown filtertype\"\r\n- \"Index is not enabled for filtertype \" + filtertype_name\r\n- \"Invalid stopheight\"",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2020-12-30T19:31:53Z",
      "diff_hunk" : "@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scantxoutset rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class ScanblockfiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-blockfilterindex=1\"]]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550304054",
      "id" : 550304054,
      "in_reply_to_id" : 550247720,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNDA1NA==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 12,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : null,
      "pull_request_review_id" : 560168090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550304054",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Seems like block filters are just a potential implementation detail/optimisation here, not part of the fundamental concept...\r\n\r\nMaybe rename it to `scanblocks` (and consider supporting a slow scan when the filters are disabled?)",
      "created_at" : "2021-01-03T21:20:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-753677860",
      "id" : 753677860,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzY3Nzg2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T21:20:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753677860",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-01-06T00:11:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-754977795",
      "id" : 754977795,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDk3Nzc5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T00:11:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754977795",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Maybe rename it to scanblocks (and consider supporting a slow scan when the filters are disabled?)\r\n\r\nI can do that. But the call doesn't scan blocks (hence your proposed name `scanblocks`). It looks for relevant block**hashes** based on descriptors.\r\n`scanblocks` doesn't sound after what this call is doing.",
      "created_at" : "2021-01-06T08:51:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-755169858",
      "id" : 755169858,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTE2OTg1OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T08:51:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755169858",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r552445929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552445929"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nice. Will adapt this.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-01-06T08:57:29Z",
      "diff_hunk" : "@@ -2284,6 +2284,108 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+\n+static RPCHelpMan scanblockfilters()\n+{\n+    return RPCHelpMan{\"scanblockfilters\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\",\n+                {\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"startheight\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\") +\n+                    HelpExampleRpc(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::string filtertype_name = \"basic\";\n+    if (!request.params[2].isNull()) {\n+        filtertype_name = request.params[1].get_str();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r552445929",
      "id" : 552445929,
      "in_reply_to_id" : 550300920,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0NTkyOQ==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 2321,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 562418625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552445929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "maybe call it `findblockhashes` then? Or `findblocks` even?",
      "created_at" : "2021-01-06T10:17:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-755213223",
      "id" : 755213223,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTIxMzIyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T10:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755213223",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/425166?v=4",
         "events_url" : "https://api.github.com/users/flack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/flack/followers",
         "following_url" : "https://api.github.com/users/flack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/flack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/flack",
         "id" : 425166,
         "login" : "flack",
         "node_id" : "MDQ6VXNlcjQyNTE2Ng==",
         "organizations_url" : "https://api.github.com/users/flack/orgs",
         "received_events_url" : "https://api.github.com/users/flack/received_events",
         "repos_url" : "https://api.github.com/users/flack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/flack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/flack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/flack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think `scanblocks` is fine. Without filters it \"scans blocks\" and returns block hashes. With filter it doesn't scan raw block data, but it scans filters block by block.",
      "created_at" : "2021-01-06T12:03:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-755260665",
      "id" : 755260665,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTI2MDY2NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T12:03:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755260665",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Without filters it \"scans blocks\" and returns block hashes. With filter it doesn't scan raw block data, but it scans filters block by block.\r\n\r\nWouldn't it be inconsistent to have `scanblocks` (general) in relation to `rescanblockchain` (wallet)?\r\nBut yes... using `scanblock` perhaps is acceptable.",
      "created_at" : "2021-01-06T15:02:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-755350162",
      "id" : 755350162,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTM1MDE2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T15:02:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755350162",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r552733300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552733300"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-01-06T15:49:06Z",
      "diff_hunk" : "@@ -2284,6 +2284,108 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+\n+static RPCHelpMan scanblockfilters()\n+{\n+    return RPCHelpMan{\"scanblockfilters\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\",\n+                {\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"startheight\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblockfilters\", \"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"] 300000\") +",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r552733300",
      "id" : 552733300,
      "in_reply_to_id" : 550297373,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjczMzMwMA==",
      "original_commit_id" : "b245ecc148643a4d81185006c8ac3a9af09fd9f1",
      "original_line" : 2314,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 562817027,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552733300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Overhauled this PR. Fixed all the reported issues.\r\n\r\nAdded the same interface then `scantxoutset` (with action \"start\", \"abort\", \"status\"). Allows to get progress reports via a different RPC call (or abort the current scan). No concurrent scans possible.\r\n\r\nAlso added `stop_height`.\r\n\r\nSome performance reports on an `i7-8700 CPU @ 3.20GHz` with NVme disk:\r\n* Scanning an pkh xpub (`m/0/*` & `m/1/*`, range 0-220 == 440 sPUk) on mainnet from **genesis to tip**: `2m19.176s`\r\n* Same xpub, scan *only* the **last three years**: `1m0.729s`\r\n* Same xpub, \"catch up\"-scan the **last 5 weeks** (scan the 5040 latest blocks): `0m2.465s`\r\n\r\nSingle sPUk: \r\n* Scanning an single address on mainnet from **genesis to tip**: `1m20.258s`\r\n* Same address, scan *only* the **last three years**: `0m41.519s`\r\n* Same address, \"catch up\"-scan the **last 5 weeks**: `0m1.744s`",
      "created_at" : "2021-01-08T10:56:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-756692398",
      "id" : 756692398,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NjY5MjM5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T10:56:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756692398",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the update! Unfortunately unlike `rescanblockchain` we actually need the result of this call. Just having `status` is not enough to obtain the result if RPC times out. I think we need to store the result somewhere too, perhaps in a way that you can only read once. However if that's too difficult we could instead recommend that the user pays attention to the `start_height` and `stop_height` and calls the RPC in batches for very old wallets.",
      "created_at" : "2021-01-08T16:11:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-756843472",
      "id" : 756843472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Njg0MzQ3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T16:11:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756843472",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Thanks for the update! Unfortunately unlike rescanblockchain we actually need the result of this call. Just having status is not enough to obtain the result if RPC times out.\r\n\r\nI think we can handle this the same way as `scantxoutset` (both call are in the same group of how much time they consume).\r\nYou just need to set the rpctimeout correctly (as one has to do for the three `waitfor*` calls).\r\n\r\nI thought about adding dispatched threads. `start` could return a UUID where `status` and `abort` would take this as an argument. But it seems overengineering this.\r\n\r\nLet's just keep it identical to `scantxoutset` (they are pretty much identical, one scan the blocks, the other the utxo set).",
      "created_at" : "2021-01-08T16:59:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-756872327",
      "id" : 756872327,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Njg3MjMyNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T16:59:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756872327",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Having long running tasks that you can manage via a UUID does sound useful, but I agree it would be overkill in this PR.",
      "created_at" : "2021-01-08T17:11:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-756886762",
      "id" : 756886762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Njg4Njc2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T17:11:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756886762",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-01-28T18:58:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-769302283",
      "id" : 769302283,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2OTMwMjI4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-28T18:58:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769302283",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2021-01-29T09:00:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-769673951",
      "id" : 769673951,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2OTY3Mzk1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-29T09:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769673951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571630663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571630663"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\r\n\r\nYou can move this line outside the if..elseif, it's repeated each time.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T15:06:10Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571630663",
      "id" : 571630663,
      "line" : 2358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDY2Mw==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2358,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 79,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571630663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571630982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571630982"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\r\n\r\nnit: add something like \"(returns Null if there is no ongoing scan)\"",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T15:08:17Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571630982",
      "id" : 571630982,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDk4Mg==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2330,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571630982",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571637110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571637110"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in ab315e5294bdd01c839463b0736a67a326ba38b5:\r\n\r\nnit: Could put `[\"addr(\"+addr_1+\")\"]` in a variable since it's reused many times.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T15:48:21Z",
      "diff_hunk" : "@@ -0,0 +1,74 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex=1\"],[]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # send 1.0, mempool only\n+        addr_1 = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_1, 1.0)\n+\n+        # send 1.0, mempool only\n+        addr_2 = \"mkS4HXoTYWRTescLGaUTGbtTTYX5EjJyEE\" # childkey 5 of tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\n+        self.nodes[0].sendtoaddress(addr_2, 1.0)\n+\n+        # mine a block and assure that the mined blockhash is in the filterresult\n+        blockhash = self.nodes[0].generate(1)[0]\n+        out = self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571637110",
      "id" : 571637110,
      "line" : 27,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzNzExMA==",
      "original_commit_id" : "ab315e5294bdd01c839463b0736a67a326ba38b5",
      "original_line" : 27,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 27,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571637110",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571637628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571637628"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in ab315e5294bdd01c839463b0736a67a326ba38b5:\r\n\r\nWhere you going to use this addr in an assert explicitly? I don't think it is at the moment.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T15:52:17Z",
      "diff_hunk" : "@@ -0,0 +1,74 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex=1\"],[]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # send 1.0, mempool only\n+        addr_1 = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_1, 1.0)\n+\n+        # send 1.0, mempool only\n+        addr_2 = \"mkS4HXoTYWRTescLGaUTGbtTTYX5EjJyEE\" # childkey 5 of tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571637628",
      "id" : 571637628,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzNzYyOA==",
      "original_commit_id" : "ab315e5294bdd01c839463b0736a67a326ba38b5",
      "original_line" : 23,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : null,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571637628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571638024"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571638024"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in ab315e5294bdd01c839463b0736a67a326ba38b5:\r\n\r\nnit: 2020 - 2021",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T15:55:28Z",
      "diff_hunk" : "@@ -0,0 +1,74 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571638024",
      "id" : 571638024,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzODAyNA==",
      "original_commit_id" : "ab315e5294bdd01c839463b0736a67a326ba38b5",
      "original_line" : 2,
      "original_position" : 2,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : null,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571638024",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571639553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571639553"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\r\n\r\nCould put these into `else` blocks of the respective options so these calls only run when needed.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T16:06:08Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571639553",
      "id" : 571639553,
      "line" : 2399,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzOTU1Mw==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2399,
      "original_position" : 112,
      "original_start_line" : 2400,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 120,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : 2398,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571639553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571639839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571639839"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\r\n\r\nIs this meant to say `needle_set`?",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T16:07:49Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571639839",
      "id" : 571639839,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzOTgzOQ==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2417,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571639839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571642073"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571642073"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\r\n\r\nI think you could use `g_scanfilter_progress_height` here and remove `last_scanned_block` completely.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T16:25:19Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight+amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+                if (total_blocks_to_process > 0) { // avoid division by zero\n+                    g_scanfilter_progress = (int)(100.0 / total_blocks_to_process * blocks_processed);\n+                } else {\n+                    g_scanfilter_progress = 100;\n+                }\n+                g_scanfilter_progress_height = block->nHeight;\n+            }\n+            last_scanned_block = block;\n+            block = next;\n+        }\n+        ret.pushKV(\"from_height\", start_block->nHeight);\n+        ret.pushKV(\"to_height\", last_scanned_block->nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571642073",
      "id" : 571642073,
      "line" : 2472,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY0MjA3Mw==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2472,
      "original_position" : 185,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 193,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571642073",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571643067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571643067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Actually, I think it would have to be used because otherwise reported results could be inconsistent in case of the abort because it's not really the last scanned block but the last block that the `while(block)` loop has gone through.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T16:32:36Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight+amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+                if (total_blocks_to_process > 0) { // avoid division by zero\n+                    g_scanfilter_progress = (int)(100.0 / total_blocks_to_process * blocks_processed);\n+                } else {\n+                    g_scanfilter_progress = 100;\n+                }\n+                g_scanfilter_progress_height = block->nHeight;\n+            }\n+            last_scanned_block = block;\n+            block = next;\n+        }\n+        ret.pushKV(\"from_height\", start_block->nHeight);\n+        ret.pushKV(\"to_height\", last_scanned_block->nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571643067",
      "id" : 571643067,
      "in_reply_to_id" : 571642073,
      "line" : 2472,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY0MzA2Nw==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2472,
      "original_position" : 185,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 193,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571643067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571644271"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571644271"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\r\n\r\nformatting nit: spaces aroung the `+`",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-07T16:41:07Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight+amount_per_chunk == block->nHeight || next == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571644271",
      "id" : 571644271,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY0NDI3MQ==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2447,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 585023487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571644271",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578238932"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578238932"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could.. yes. But since there is no `else` (unknown action), I tend to keep it at that level.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-18T08:57:36Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578238932",
      "id" : 578238932,
      "in_reply_to_id" : 571630663,
      "line" : 2358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODIzODkzMg==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2358,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 79,
      "pull_request_review_id" : 592981234,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578238932",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578242000"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578242000"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes. That would be possible. But IMO it makes the code hard(er) to read and I guess performance wise is it almost no impact.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-18T09:02:04Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578242000",
      "id" : 578242000,
      "in_reply_to_id" : 571639553,
      "line" : 2399,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODI0MjAwMA==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2399,
      "original_position" : 112,
      "original_start_line" : 2400,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 120,
      "pull_request_review_id" : 592985226,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : 2398,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578242000",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578242215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578242215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch. Fixed.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-18T09:02:26Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578242215",
      "id" : 578242215,
      "in_reply_to_id" : 571639839,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODI0MjIxNQ==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2417,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 592985553,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578242215",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578245439"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578245439"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure about this. The interruption point is at the beginning of the while loop. Processing blocks (scanning filters) can't be done without setting `last_scanned_block = block;`. Shouldn't therefore `last_scanned_block` always point to `stopindex` of `LookupFilterRange()` (a.k.a. the last scanned block)? Or do I miss something?",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-18T09:07:23Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight+amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+                if (total_blocks_to_process > 0) { // avoid division by zero\n+                    g_scanfilter_progress = (int)(100.0 / total_blocks_to_process * blocks_processed);\n+                } else {\n+                    g_scanfilter_progress = 100;\n+                }\n+                g_scanfilter_progress_height = block->nHeight;\n+            }\n+            last_scanned_block = block;\n+            block = next;\n+        }\n+        ret.pushKV(\"from_height\", start_block->nHeight);\n+        ret.pushKV(\"to_height\", last_scanned_block->nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578245439",
      "id" : 578245439,
      "in_reply_to_id" : 571642073,
      "line" : 2472,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODI0NTQzOQ==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2472,
      "original_position" : 185,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 193,
      "pull_request_review_id" : 592989905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578245439",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578246170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578246170"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-18T09:08:21Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight+amount_per_chunk == block->nHeight || next == nullptr) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578246170",
      "id" : 578246170,
      "in_reply_to_id" : 571644271,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODI0NjE3MA==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2447,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 592990811,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578246170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578246706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578246706"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. Added.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-18T09:09:09Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578246706",
      "id" : 578246706,
      "in_reply_to_id" : 571630982,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODI0NjcwNg==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2330,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 592991517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578246706",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @fjahr for the review. Fixed the reported points (see also answer https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578245439).",
      "created_at" : "2021-02-18T09:09:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-781197518",
      "id" : 781197518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc4MTE5NzUxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-18T09:09:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/781197518",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "CI is unhappy. The \"prune wallet rescans\" comment in the description needs an update. Maybe add test for a pruned chain?\r\n\r\n~When I call `scanblocks status` the `progress` fields updates every now and then, but the `current_height` field is stuck at the initial height.~\r\n\r\nWhen I called `abort` it returned `true`, but then when I called `status` again it was still there. I guess that's because the abort command is asynchronous.",
      "created_at" : "2021-02-18T16:44:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-781478834",
      "id" : 781478834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc4MTQ3ODgzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-18T17:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/781478834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578596183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578596183"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add a hint here that `-debug=rpc` will show progress in the log (this behavior is different from `rescanblockchain` which always prints to the log)",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-18T17:10:30Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578596183",
      "id" : 578596183,
      "line" : 2323,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODU5NjE4Mw==",
      "original_commit_id" : "e0ea89f1ab9b70640da46f7110fe1d272254e1cb",
      "original_line" : 2323,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 44,
      "pull_request_review_id" : 593449683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578596183",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578599572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578599572"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: \"Invalid action argument\"",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-18T17:13:52Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight + amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+                if (total_blocks_to_process > 0) { // avoid division by zero\n+                    g_scanfilter_progress = (int)(100.0 / total_blocks_to_process * blocks_processed);\n+                } else {\n+                    g_scanfilter_progress = 100;\n+                }\n+                g_scanfilter_progress_height = block->nHeight;\n+            }\n+            last_scanned_block = block;\n+            block = next;\n+        }\n+        ret.pushKV(\"from_height\", start_block->nHeight);\n+        ret.pushKV(\"to_height\", last_scanned_block->nHeight);\n+        ret.pushKV(\"relevant_blocks\", blocks);\n+    }\n+    else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578599572",
      "id" : 578599572,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODU5OTU3Mg==",
      "original_commit_id" : "e0ea89f1ab9b70640da46f7110fe1d272254e1cb",
      "original_line" : 2476,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 593449683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578599572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578612412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578612412"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add ` (height)`",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-02-18T17:30:35Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight + amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578612412",
      "id" : 578612412,
      "line" : 2452,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODYxMjQxMg==",
      "original_commit_id" : "e0ea89f1ab9b70640da46f7110fe1d272254e1cb",
      "original_line" : 2452,
      "original_position" : 165,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 173,
      "pull_request_review_id" : 593449683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578612412",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r587322743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587322743"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would require to fetch the height from the hash (just for the sake of logging).",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-03-04T09:55:09Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight + amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r587322743",
      "id" : 587322743,
      "in_reply_to_id" : 578612412,
      "line" : 2452,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMyMjc0Mw==",
      "original_commit_id" : "e0ea89f1ab9b70640da46f7110fe1d272254e1cb",
      "original_line" : 2452,
      "original_position" : 165,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 173,
      "pull_request_review_id" : 603910141,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-04T10:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587322743",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Fixed the RPC test failure and implemented some of @Sjors suggestions.",
      "created_at" : "2021-03-04T16:19:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-790738691",
      "id" : 790738691,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5MDczODY5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-04T16:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790738691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r587930086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587930086"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sorry, that I didn't get around to answer earlier. I am trying to simplify so please ignore if I get some minor details wrong: Let's say we are scanning blocks 10.000 - 30.000. The while loop runs through every block and with each block `last_scanned_block` is updated. But no scanning is actually happening. At 20.000 it does the actual scanning for the first time, blocks 10k-20k. So at height 20k `last_scanned_block` is actually in sync with that, up to 20k was scanned and the `last_scanned_block` is 20k. From the next block on `last_scanned_block` increments with every loop again and is out of sync with what was actually synced. So if the interruption point is hit at, for example, 25k, then `to_height` would say 25k but actually, the scan was only done up to 20k. One very simple fix would be to move `last_scanned_block = block;\r\n` just 2 lines higher so it is only updated after an actual scan. But then it is just reports the same as `g_scanfilter_progress_height` so I think it can be dropped altogether. I don't see `last_scanned_block` being used anywhere aside for the `to_height` return value usage in this line here, so I am not sure what you mean by \"it can't be done without it\". And just fundamentally I don't see why this would not be the same: The progress height and the last scanned block are the same value to me.\r\n\r\nI just realized I am writing a whole paragraph for a 3 line change, code is probably much easier to reason about :) https://github.com/fjahr/bitcoin/commit/16c7cb5b67e95ba1c8050eacfd4099fad108acf3 Tests pass.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-03-05T00:14:51Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight+amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+                if (total_blocks_to_process > 0) { // avoid division by zero\n+                    g_scanfilter_progress = (int)(100.0 / total_blocks_to_process * blocks_processed);\n+                } else {\n+                    g_scanfilter_progress = 100;\n+                }\n+                g_scanfilter_progress_height = block->nHeight;\n+            }\n+            last_scanned_block = block;\n+            block = next;\n+        }\n+        ret.pushKV(\"from_height\", start_block->nHeight);\n+        ret.pushKV(\"to_height\", last_scanned_block->nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r587930086",
      "id" : 587930086,
      "in_reply_to_id" : 571642073,
      "line" : 2472,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkzMDA4Ng==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2472,
      "original_position" : 185,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 193,
      "pull_request_review_id" : 604689286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-05T00:14:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587930086",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "ACK 71b7cdb460e2d0179aa87bdd0d30a82a821f6d05\r\n\r\nI reviewed the code, ran the functional tests, and did some manual testing. This rpc call works great; I was able to scan 1000 addresses from genesis to tip on an M1 Macbook Air in 3 min 27 sec.\r\n\r\nThe only nit I have is that the `bitcoin-cli help scanblocks` examples don't work, but the functions that create the examples (`HelpExampleCli` and `HelpExampleRpc`) don't seem to accept an `action` argument, and I'm not sure what adding one would break. The other problem is that the examples use double quotes around the json list of scan objects, when the rpc api is expecting single quotes, as in the example in the comment at the top of this PR (that one works!).\r\n\r\nI'm super excited for this feature to get merged, as it will enable wallet trackers such as EPS and BWT to be practical with pruned nodes. Is it possible for this to be released in 0.22?\r\n\r\nThanks @jonasschnelli for making this happen!",
      "created_at" : "2021-03-12T02:03:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-797181308",
      "id" : 797181308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5NzE4MTMwOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-12T02:03:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797181308",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7445670?v=4",
         "events_url" : "https://api.github.com/users/chrisguida/events{/privacy}",
         "followers_url" : "https://api.github.com/users/chrisguida/followers",
         "following_url" : "https://api.github.com/users/chrisguida/following{/other_user}",
         "gists_url" : "https://api.github.com/users/chrisguida/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/chrisguida",
         "id" : 7445670,
         "login" : "chrisguida",
         "node_id" : "MDQ6VXNlcjc0NDU2NzA=",
         "organizations_url" : "https://api.github.com/users/chrisguida/orgs",
         "received_events_url" : "https://api.github.com/users/chrisguida/received_events",
         "repos_url" : "https://api.github.com/users/chrisguida/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/chrisguida/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/chrisguida/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/chrisguida"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593002948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593002948"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can we move the actual scanning code away from RPC land?",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-03-12T08:48:04Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593002948",
      "id" : 593002948,
      "line" : 2415,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzAwMjk0OA==",
      "original_commit_id" : "6a69dd267e4b96e6657de7b77521311994b2a902",
      "original_line" : 2415,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 136,
      "pull_request_review_id" : 610563008,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-12T09:16:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593002948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593018025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593018025"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This assertion fails frequently on my machine.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-03-12T09:11:57Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex=1\"],[]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # send 1.0, mempool only\n+        addr_1 = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_1, 1.0)\n+\n+        # send 1.0, mempool only\n+        self.nodes[0].sendtoaddress(\"mkS4HXoTYWRTescLGaUTGbtTTYX5EjJyEE\", 1.0) # childkey 5 of tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\n+\n+        # mine a block and assure that the mined blockhash is in the filterresult\n+        blockhash = self.nodes[0].generate(1)[0]\n+        out = self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"])\n+        assert(blockhash in out['relevant_blocks'])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593018025",
      "id" : 593018025,
      "line" : 28,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzAxODAyNQ==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 28,
      "pull_request_review_id" : 610563008,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-12T09:16:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593018025",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593018310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593018310"
         }
      },
      "author_association" : "MEMBER",
      "body" : "When the above assertion doesn't fail, then this one tends to fail.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-03-12T09:12:27Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex=1\"],[]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # send 1.0, mempool only\n+        addr_1 = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_1, 1.0)\n+\n+        # send 1.0, mempool only\n+        self.nodes[0].sendtoaddress(\"mkS4HXoTYWRTescLGaUTGbtTTYX5EjJyEE\", 1.0) # childkey 5 of tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\n+\n+        # mine a block and assure that the mined blockhash is in the filterresult\n+        blockhash = self.nodes[0].generate(1)[0]\n+        out = self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"])\n+        assert(blockhash in out['relevant_blocks'])\n+        assert_equal(self.nodes[0].getblockheader(blockhash)['height'], out['to_height'])\n+        assert_equal(0, out['from_height'])\n+\n+        # mine another block\n+        blockhash_new = self.nodes[0].generate(1)[0]\n+\n+        # make sure the blockhash is not in the filter result if we set the start_height to the just mined block (unlikely to hit a false positive)\n+        assert(blockhash not in self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"], self.nodes[0].getblockheader(blockhash_new)['height'])['relevant_blocks'])\n+\n+        # make sure the blockhash is present when using the first mined block as start_height",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593018310",
      "id" : 593018310,
      "line" : 38,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzAxODMxMA==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 38,
      "pull_request_review_id" : 610563008,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-12T09:16:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593018310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593282847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593282847"
         }
      },
      "author_association" : "NONE",
      "body" : "Was thinking this, I'm guessing we'll want it abstracted out if we want to be able to perform internal rescans, if, for example, the user decides to add an old wallet.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-03-12T16:03:25Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593282847",
      "id" : 593282847,
      "in_reply_to_id" : 593002948,
      "line" : 2415,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzI4Mjg0Nw==",
      "original_commit_id" : "6a69dd267e4b96e6657de7b77521311994b2a902",
      "original_line" : 2415,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 136,
      "pull_request_review_id" : 610930187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-12T16:03:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593282847",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7445670?v=4",
         "events_url" : "https://api.github.com/users/chrisguida/events{/privacy}",
         "followers_url" : "https://api.github.com/users/chrisguida/followers",
         "following_url" : "https://api.github.com/users/chrisguida/following{/other_user}",
         "gists_url" : "https://api.github.com/users/chrisguida/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/chrisguida",
         "id" : 7445670,
         "login" : "chrisguida",
         "node_id" : "MDQ6VXNlcjc0NDU2NzA=",
         "organizations_url" : "https://api.github.com/users/chrisguida/orgs",
         "received_events_url" : "https://api.github.com/users/chrisguida/received_events",
         "repos_url" : "https://api.github.com/users/chrisguida/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/chrisguida/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/chrisguida/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/chrisguida"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593365755"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593365755"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would also help with GUI support. I imagine soon (tm) to have a wizard where you can import a BIP39 seed and it recovers coins.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-03-12T18:10:54Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593365755",
      "id" : 593365755,
      "in_reply_to_id" : 593002948,
      "line" : 2415,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzM2NTc1NQ==",
      "original_commit_id" : "6a69dd267e4b96e6657de7b77521311994b2a902",
      "original_line" : 2415,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 136,
      "pull_request_review_id" : 611039129,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-12T18:11:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593365755",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Will test today.\r\n\r\nTwo questions:\r\n\r\n1. Can we include `-rpcclienttimeout=0` by default if not mentioned by the user because the call can take time?\r\n~~2. Do we have any RPC which scans mempool instead of blocks and return the transactions associated with it?~~ `getrawmempool` works for mempool",
      "created_at" : "2021-04-12T02:19:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-817433922",
      "id" : 817433922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxNzQzMzkyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-11T01:00:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/817433922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Compiled successfully on Ubuntu. Two functional tests failed:\r\n\r\n```\r\nfeature_config_args.py                             | â Failed  | 34 s\r\nfeature_pruning.py                                 | â Failed  | 480 s\r\n```",
      "created_at" : "2021-04-12T20:50:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-818223366",
      "id" : 818223366,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxODIyMzM2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-12T20:50:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818223366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "What is the combined log of the test failure? `./test/functional/combine_logs.py`",
      "created_at" : "2021-04-13T04:29:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-818428147",
      "id" : 818428147,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxODQyODE0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-13T04:29:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818428147",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Logs:\r\n\r\n1. feature_block.py  : https://ghostbin.com/paste/Q6fRX\r\n2. feature_pruning.py : https://ghostbin.com/paste/GQP81\r\n\r\n",
      "created_at" : "2021-04-13T13:24:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-818733325",
      "id" : 818733325,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxODczMzMyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-13T13:24:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818733325",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619279994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619279994"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: It seems to me that this line can be put out of `while` cycle. ",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-04-23T14:47:42Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight + amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619279994",
      "id" : 619279994,
      "line" : 2460,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTI3OTk5NA==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2460,
      "original_position" : 181,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 181,
      "pull_request_review_id" : 643378986,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T14:47:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619279994",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619281660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619281660"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be helpful to log that the scanning was aborted?",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-04-23T14:50:00Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619281660",
      "id" : 619281660,
      "line" : 2437,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTI4MTY2MA==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2437,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 158,
      "pull_request_review_id" : 643381203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T14:50:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619281660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619289075"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619289075"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"Height to start to filter from\"},\r\n```\r\n?\r\n\r\nIs `filter` correct verb here? `scan`?",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-04-23T14:59:22Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619289075",
      "id" : 619289075,
      "line" : 2341,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTI4OTA3NQ==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2341,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 62,
      "pull_request_review_id" : 643391078,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T14:59:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619289075",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619289292"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619289292"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Similar to above.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-04-23T14:59:39Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619289292",
      "id" : 619289292,
      "line" : 2342,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTI4OTI5Mg==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2342,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 63,
      "pull_request_review_id" : 643391359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T14:59:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619289292",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619289998"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619289998"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n                \"This call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\r\n```",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-04-23T15:00:31Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619289998",
      "id" : 619289998,
      "line" : 2323,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTI4OTk5OA==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2323,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 44,
      "pull_request_review_id" : 643392302,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T15:00:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619289998",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619298914"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619298914"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "For my information: This array seems to unbounded. The bound is probably some maximum size of RPC requests in general. Anyway, I wonder whether it is an issue or not. I guess not because nobody mentioned it here. Could anybody elaborate on this a bit, please?",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-04-23T15:12:39Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619298914",
      "id" : 619298914,
      "line" : 2417,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTI5ODkxNA==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2417,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 138,
      "pull_request_review_id" : 643404554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T15:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619298914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619310187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619310187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "For my information: Would it make sense to move this line to L2414 and to make the for-loop on L2417 abortable too? Or is it an overkill? I'm not sure how long the for loop can take for \"many scanobjects\".\r\n\r\nIf the for-loop can take a long time then this `g_scanfilter_should_abort_scan = false;` assignment may mean that a user abort request might be ignored.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-04-23T15:27:46Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619310187",
      "id" : 619310187,
      "line" : 2431,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTMxMDE4Nw==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2431,
      "original_position" : 152,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 152,
      "pull_request_review_id" : 643419374,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T15:29:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619310187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619313659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619313659"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: What about:\r\n\r\n```suggestion\r\n\"\"\"Test the scanblocks RPC call.\"\"\"\r\n```\r\n?\r\n\r\nIt looks like it is mostly written in this way in tests.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-04-23T15:32:37Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619313659",
      "id" : 619313659,
      "line" : 5,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTMxMzY1OQ==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 5,
      "pull_request_review_id" : 643424127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T15:32:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619313659",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619314758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619314758"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit:\r\n\r\n```suggestion\r\nclass ScanblocksTest(BitcoinTestFramework):\r\n```\r\n",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-04-23T15:34:14Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619314758",
      "id" : 619314758,
      "line" : 9,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTMxNDc1OA==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 9,
      "pull_request_review_id" : 643425610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T15:34:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619314758",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r629622396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629622396"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 6a69dd267e4b96e6657de7b77521311994b2a902 \"Add scanblocks RPC call - scan for relevant blocks with descriptors\"\r\n\r\nThis `RPCResult` does not reflect the actual results.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-05-10T19:20:45Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r629622396",
      "id" : 629622396,
      "line" : 2345,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTYyMjM5Ng==",
      "original_commit_id" : "6a69dd267e4b96e6657de7b77521311994b2a902",
      "original_line" : 2345,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 66,
      "pull_request_review_id" : 656005656,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-10T19:37:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629622396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r629625592"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629625592"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 6a69dd267e4b96e6657de7b77521311994b2a902 \"Add scanblocks RPC call - scan for relevant blocks with descriptors\"\r\n\r\nI agree with @fjahr here. `last_scanned_block` isn't actually the last block we have scanned, and if we abort, then `to_height` does not accurately reflect where we have actually scanned up to. It would be better to move it up into the `if` the guards the actual scanning. But in that case, it's the same as `g_scanfilter_progress_height`, so it can just be removed.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-05-10T19:26:25Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight+amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+                if (total_blocks_to_process > 0) { // avoid division by zero\n+                    g_scanfilter_progress = (int)(100.0 / total_blocks_to_process * blocks_processed);\n+                } else {\n+                    g_scanfilter_progress = 100;\n+                }\n+                g_scanfilter_progress_height = block->nHeight;\n+            }\n+            last_scanned_block = block;\n+            block = next;\n+        }\n+        ret.pushKV(\"from_height\", start_block->nHeight);\n+        ret.pushKV(\"to_height\", last_scanned_block->nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r629625592",
      "id" : 629625592,
      "in_reply_to_id" : 571642073,
      "line" : 2472,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTYyNTU5Mg==",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2472,
      "original_position" : 185,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 193,
      "pull_request_review_id" : 656005656,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-10T19:37:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629625592",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r629630832"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629630832"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 71b7cdb460e2d0179aa87bdd0d30a82a821f6d05 \"Add scanblock functional test\"\r\n\r\nSince the indexes are built asynchronously, it is possible that after generating the block, the block filter index has not updated to include the new block, so scanblocks might not find anything. Instead, we need to wait for it to become synced:\r\n\r\n```suggestion\r\n        blockhash = self.nodes[0].generate(1)[0]\r\n        self.wait_until(lambda: all(i[\"synced\"] for i in self.nodes[0].getindexinfo().values()))\r\n```",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-05-10T19:35:14Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex=1\"],[]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # send 1.0, mempool only\n+        addr_1 = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_1, 1.0)\n+\n+        # send 1.0, mempool only\n+        self.nodes[0].sendtoaddress(\"mkS4HXoTYWRTescLGaUTGbtTTYX5EjJyEE\", 1.0) # childkey 5 of tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\n+\n+        # mine a block and assure that the mined blockhash is in the filterresult\n+        blockhash = self.nodes[0].generate(1)[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r629630832",
      "id" : 629630832,
      "line" : 26,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTYzMDgzMg==",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 26,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 26,
      "pull_request_review_id" : 656005656,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-10T19:37:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629630832",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nThere have been various code reviews but no changes since months. @jonasschnelli: are you still working on this PR? (Just checking out before I start to code-review).",
      "created_at" : "2021-07-30T14:11:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-889919935",
      "id" : 889919935,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "IC_kwDOABII5841Cxm_",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-30T14:11:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/889919935",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Removed from high-prio for now, but can be added back any time.",
      "created_at" : "2021-07-31T07:59:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-890308534",
      "id" : 890308534,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "IC_kwDOABII5841EQe2",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-31T07:59:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/890308534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Compiled and tested Successfully 6a69dd267e4b96e6657de7b77521311994b2a902 at Ubuntu 18.04. \r\nStarted Bitcoin Core in regtest with keypool=5. Created and mined blocks to addresses in descriptor wallet after creating addresses more than the keypool size using getnewaddress. Scanned blocks for all the addresses using `scanblocks` RPC and were able to get the right blocks that contained the transactions in it for all the addresses.",
      "created_at" : "2021-08-24T07:17:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-904386712",
      "id" : 904386712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "IC_kwDOABII584159iY",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-24T07:17:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904386712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10723538?v=4",
         "events_url" : "https://api.github.com/users/Kirandevraj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Kirandevraj/followers",
         "following_url" : "https://api.github.com/users/Kirandevraj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Kirandevraj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Kirandevraj",
         "id" : 10723538,
         "login" : "Kirandevraj",
         "node_id" : "MDQ6VXNlcjEwNzIzNTM4",
         "organizations_url" : "https://api.github.com/users/Kirandevraj/orgs",
         "received_events_url" : "https://api.github.com/users/Kirandevraj/received_events",
         "repos_url" : "https://api.github.com/users/Kirandevraj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Kirandevraj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Kirandevraj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Kirandevraj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Would love to see this, or any other mechanism that allows performing wallet rescans in ~2min on good hardware, make it in.",
      "created_at" : "2021-10-05T01:54:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-933994002",
      "id" : 933994002,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "IC_kwDOABII5843q54S",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933994002/reactions"
      },
      "updated_at" : "2021-10-05T01:54:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933994002",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased here: https://github.com/bitcoin/bitcoin/compare/master...luke-jr:rpc_filterblocks",
      "created_at" : "2021-10-05T21:57:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-934907012",
      "id" : 934907012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "IC_kwDOABII5843uYyE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934907012/reactions"
      },
      "updated_at" : "2021-10-05T21:57:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934907012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Should this be marked \"up for grabs\" @jonasschnelli ?",
      "created_at" : "2021-10-06T11:03:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-935979926",
      "id" : 935979926,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "IC_kwDOABII5843yeuW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935979926/reactions"
      },
      "updated_at" : "2021-10-06T11:03:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/935979926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r725696957"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725696957"
         }
      },
      "author_association" : "MEMBER",
      "body" : "relevent ==> relevant",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-10-10T20:55:07Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex=1\"],[]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # send 1.0, mempool only\n+        addr_1 = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_1, 1.0)\n+\n+        # send 1.0, mempool only\n+        self.nodes[0].sendtoaddress(\"mkS4HXoTYWRTescLGaUTGbtTTYX5EjJyEE\", 1.0) # childkey 5 of tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\n+\n+        # mine a block and assure that the mined blockhash is in the filterresult\n+        blockhash = self.nodes[0].generate(1)[0]\n+        out = self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"])\n+        assert(blockhash in out['relevant_blocks'])\n+        assert_equal(self.nodes[0].getblockheader(blockhash)['height'], out['to_height'])\n+        assert_equal(0, out['from_height'])\n+\n+        # mine another block\n+        blockhash_new = self.nodes[0].generate(1)[0]\n+\n+        # make sure the blockhash is not in the filter result if we set the start_height to the just mined block (unlikely to hit a false positive)\n+        assert(blockhash not in self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"], self.nodes[0].getblockheader(blockhash_new)['height'])['relevant_blocks'])\n+\n+        # make sure the blockhash is present when using the first mined block as start_height\n+        assert(blockhash in self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"], self.nodes[0].getblockheader(blockhash)['height'])['relevant_blocks'])\n+\n+        # also test the stop height\n+        assert(blockhash in self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"], self.nodes[0].getblockheader(blockhash)['height'], self.nodes[0].getblockheader(blockhash)['height'])['relevant_blocks'])\n+\n+        # use the stop_height to exclude the relevent block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r725696957",
      "id" : 725696957,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII584rQUG9",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 44,
      "pull_request_review_id" : 775710031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725696957/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-10T20:55:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/725696957",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I haven't started review yet, but given @MarcoFalke has done some previous work on this, we should ensure that this change isn't subject to the bugs he points out here: https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-625768563",
      "created_at" : "2021-10-10T21:19:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-939554671",
      "id" : 939554671,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "IC_kwDOABII5844AHdv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939554671/reactions"
      },
      "updated_at" : "2021-10-10T21:19:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939554671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "For what it's worth, I'm working on resurrecting this PR. Hoping to have a branch pushed by end of day.",
      "created_at" : "2021-11-18T20:16:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-973226879",
      "id" : 973226879,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "IC_kwDOABII5846AkN_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 2,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/973226879/reactions"
      },
      "updated_at" : "2021-11-18T20:16:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/973226879",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752623127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752623127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd like to handle moving this code out of RPC land in a future change. It isn't a trivial move (given the global progress state), people are probably going to want unittests if we do the move, and IMO the important short-term objective here is getting fast rescans working ASAP. So if it's okay with you guys I'd like to save this move for a later PR once.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:02:59Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752623127",
      "id" : 752623127,
      "in_reply_to_id" : 593002948,
      "line" : 2415,
      "node_id" : "PRRC_kwDOABII584s3B4X",
      "original_commit_id" : "6a69dd267e4b96e6657de7b77521311994b2a902",
      "original_line" : 2415,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 136,
      "pull_request_review_id" : 810451671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752623127/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:02:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752623127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752623617"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752623617"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is only subject to authenticated RPC user input and isn't handled in previous RPC calls (e.g. `scantxoutset`) so if someone wants to DoS their own node with a massive input array that seems okay to me.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:03:49Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752623617",
      "id" : 752623617,
      "in_reply_to_id" : 619298914,
      "line" : 2417,
      "node_id" : "PRRC_kwDOABII584s3CAB",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2417,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 138,
      "pull_request_review_id" : 810452379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752623617/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752623617",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752624685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752624685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is overkill IMO; even for a long list, `EvalDescriptorStringOrObject` should be quite fast since it doesn't rely on any disk IO, unlike the calls below.",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:05:48Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752624685",
      "id" : 752624685,
      "in_reply_to_id" : 619310187,
      "line" : 2431,
      "node_id" : "PRRC_kwDOABII584s3CQt",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2431,
      "original_position" : 152,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 152,
      "pull_request_review_id" : 810454061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752624685/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:06:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752624685",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656192"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in https://github.com/bitcoin/bitcoin/pull/23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:57:16Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656192",
      "id" : 752656192,
      "in_reply_to_id" : 619289998,
      "line" : 2323,
      "node_id" : "PRRC_kwDOABII584s3J9A",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2323,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 44,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656192/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656192",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656256"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:57:23Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656256",
      "id" : 752656256,
      "in_reply_to_id" : 619289075,
      "line" : 2341,
      "node_id" : "PRRC_kwDOABII584s3J-A",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2341,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 62,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656256/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656256",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656322"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:57:28Z",
      "diff_hunk" : "@@ -2288,6 +2288,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656322",
      "id" : 752656322,
      "in_reply_to_id" : 629622396,
      "line" : 2345,
      "node_id" : "PRRC_kwDOABII584s3J_C",
      "original_commit_id" : "6a69dd267e4b96e6657de7b77521311994b2a902",
      "original_line" : 2345,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 66,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656322/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656322",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656439"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656439"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:57:38Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656439",
      "id" : 752656439,
      "in_reply_to_id" : 619281660,
      "line" : 2437,
      "node_id" : "PRRC_kwDOABII584s3KA3",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2437,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 158,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656439/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656439",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656509"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:57:44Z",
      "diff_hunk" : "@@ -2281,13 +2281,205 @@ static RPCHelpMan scantxoutset()\n         result.pushKV(\"unspents\", unspents);\n         result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n     } else {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid action argument\");\n     }\n     return result;\n },\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan (returns Null if there is no ongoing scan)\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the needle_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight + amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656509",
      "id" : 752656509,
      "in_reply_to_id" : 619279994,
      "line" : 2460,
      "node_id" : "PRRC_kwDOABII584s3KB9",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 2460,
      "original_position" : 181,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 181,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656509/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656549"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656549"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:57:48Z",
      "diff_hunk" : "@@ -2290,6 +2290,198 @@ static RPCHelpMan scantxoutset()\n     };\n }\n \n+/** RAII object to prevent concurrency issue when scanning blockfilters */\n+static std::atomic<int> g_scanfilter_progress;\n+static std::atomic<int> g_scanfilter_progress_height;\n+static std::atomic<bool> g_scanfilter_in_progress;\n+static std::atomic<bool> g_scanfilter_should_abort_scan;\n+class BlockFiltersScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit BlockFiltersScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        CHECK_NONFATAL(!m_could_reserve);\n+        if (g_scanfilter_in_progress.exchange(true)) {\n+            return false;\n+        }\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~BlockFiltersScanReserver() {\n+        if (m_could_reserve) {\n+            g_scanfilter_in_progress = false;\n+        }\n+    }\n+};\n+\n+static RPCHelpMan scanblocks()\n+{\n+    return RPCHelpMan{\"scanblocks\",\n+                \"\\nReturn relevant blockhashes for given descriptors.\\n\"\n+                \"This call may take serval minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)\",\n+                {\n+                    {\"action\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\"},\n+                    {\"scanobjects\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED, \"Array of scan objects.\\n\"\n+            \"                                  Every scan object is either a string descriptor or an object:\",\n+                        {\n+                            {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with output descriptor and metadata\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                                    {\"range\", RPCArg::Type::RANGE, /* default */ \"1000\", \"The range of HD chain indexes to explore (either end or [begin,end])\"},\n+                                },\n+                            },\n+                        },\n+                        \"[scanobjects,...]\"},\n+                    {\"start_height\", RPCArg::Type::NUM, /*default*/ \"0\", \"height to start to filter from\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, /*default*/ \"<tip>\", \"height to stop to scan\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"}\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"\", \"The blockhash\"},\n+                    }},\n+                RPCExamples{\n+                    HelpExampleCli(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\") +\n+                    HelpExampleRpc(\"scanblocks\", \"\\\"[\\\"addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\\\"]\\\" 300000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        ret.pushKV(\"progress\", g_scanfilter_progress);\n+        ret.pushKV(\"current_height\", g_scanfilter_progress_height);\n+        return ret;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        BlockFiltersScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_scanfilter_should_abort_scan = true;\n+        return true;\n+    }\n+    else if (request.params[0].get_str() == \"start\") {\n+        BlockFiltersScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        const std::string filtertype_name{request.params[4].isNull() ? \"basic\" : request.params[4].get_str()};\n+\n+        BlockFilterType filtertype;\n+        if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+        }\n+\n+        BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+        if (!index) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+        }\n+\n+        // set the start-height\n+        const CBlockIndex* block = nullptr;\n+        const CBlockIndex* stop_block = nullptr;\n+        {\n+            LOCK(cs_main);\n+            block = ::ChainActive().Genesis();\n+            stop_block = ::ChainActive().Tip();\n+            if (!request.params[2].isNull()) {\n+                block = ::ChainActive()[request.params[2].get_int()];\n+                if (!block) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid start_height\");\n+                }\n+            }\n+            if (!request.params[3].isNull()) {\n+                stop_block = ::ChainActive()[request.params[3].get_int()];\n+                if (!stop_block || stop_block->nHeight < block->nHeight) {\n+                    throw JSONRPCError(RPC_MISC_ERROR, \"Invalid stop_height\");\n+                }\n+            }\n+        }\n+        CHECK_NONFATAL(block);\n+\n+        // loop through the scan objects, add scripts to the element_set\n+        GCSFilter::ElementSet needle_set;\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            FlatSigningProvider provider;\n+            std::vector<CScript> scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const CScript& script : scripts) {\n+                needle_set.emplace(script.begin(), script.end());\n+            }\n+        }\n+        NodeContext& node = EnsureNodeContext(request.context);\n+        UniValue blocks(UniValue::VARR);\n+        const int amount_per_chunk = 10000;\n+        const CBlockIndex* start_index = block; // for remembering the start of a blockfilter range\n+        std::vector<BlockFilter> filters;\n+        const CBlockIndex* start_block = block; // for progress reporting\n+        const CBlockIndex* last_scanned_block = block;\n+        g_scanfilter_should_abort_scan = false;\n+        g_scanfilter_progress = 0;\n+        g_scanfilter_progress_height = start_block->nHeight;\n+        while (block) {\n+            node.rpc_interruption_point(); // allow a clean shutdown\n+            if (g_scanfilter_should_abort_scan) {\n+                break;\n+            }\n+            const CBlockIndex* next = nullptr;\n+            {\n+                LOCK(cs_main);\n+                next = ChainActive().Next(block);\n+                if (block == stop_block) next = nullptr;\n+            }\n+            if (start_index->nHeight+amount_per_chunk == block->nHeight || next == nullptr) {\n+                LogPrint(BCLog::RPC, \"Fetching blockfilters from height %d to height %d.\\n\", start_index->nHeight, block->nHeight);\n+                if (index->LookupFilterRange(start_index->nHeight, block, filters)) {\n+                    for (const BlockFilter& filter : filters) {\n+                        // compare the elements-set with each filter\n+                        if (filter.GetFilter().MatchAny(needle_set)) {\n+                            blocks.push_back(filter.GetBlockHash().GetHex());\n+                            LogPrint(BCLog::RPC, \"scanblocks: found match in %s\\n\", filter.GetBlockHash().GetHex());\n+                        }\n+                    }\n+                }\n+                start_index = block;\n+\n+                // update progress\n+                int blocks_processed = block->nHeight - start_block->nHeight;\n+                int total_blocks_to_process = stop_block->nHeight - start_block->nHeight;\n+                if (total_blocks_to_process > 0) { // avoid division by zero\n+                    g_scanfilter_progress = (int)(100.0 / total_blocks_to_process * blocks_processed);\n+                } else {\n+                    g_scanfilter_progress = 100;\n+                }\n+                g_scanfilter_progress_height = block->nHeight;\n+            }\n+            last_scanned_block = block;\n+            block = next;\n+        }\n+        ret.pushKV(\"from_height\", start_block->nHeight);\n+        ret.pushKV(\"to_height\", last_scanned_block->nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656549",
      "id" : 752656549,
      "in_reply_to_id" : 571642073,
      "line" : 2472,
      "node_id" : "PRRC_kwDOABII584s3KCl",
      "original_commit_id" : "7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c",
      "original_line" : 2472,
      "original_position" : 185,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 193,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656549/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656549",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656608"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656608"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:57:55Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656608",
      "id" : 752656608,
      "in_reply_to_id" : 619313659,
      "line" : 5,
      "node_id" : "PRRC_kwDOABII584s3KDg",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 5,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656608/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656608",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:57:58Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656652",
      "id" : 752656652,
      "in_reply_to_id" : 619314758,
      "line" : 9,
      "node_id" : "PRRC_kwDOABII584s3KEM",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 9,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656652/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656686"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656686"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:58:02Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex=1\"],[]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # send 1.0, mempool only\n+        addr_1 = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_1, 1.0)\n+\n+        # send 1.0, mempool only\n+        self.nodes[0].sendtoaddress(\"mkS4HXoTYWRTescLGaUTGbtTTYX5EjJyEE\", 1.0) # childkey 5 of tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\n+\n+        # mine a block and assure that the mined blockhash is in the filterresult\n+        blockhash = self.nodes[0].generate(1)[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656686",
      "id" : 752656686,
      "in_reply_to_id" : 629630832,
      "line" : 26,
      "node_id" : "PRRC_kwDOABII584s3KEu",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 26,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 26,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656686/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656686",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656745"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #23549",
      "commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "created_at" : "2021-11-18T21:58:07Z",
      "diff_hunk" : "@@ -0,0 +1,73 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scanblocks rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class scanblocksTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex=1\"],[]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # send 1.0, mempool only\n+        addr_1 = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(addr_1, 1.0)\n+\n+        # send 1.0, mempool only\n+        self.nodes[0].sendtoaddress(\"mkS4HXoTYWRTescLGaUTGbtTTYX5EjJyEE\", 1.0) # childkey 5 of tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\n+\n+        # mine a block and assure that the mined blockhash is in the filterresult\n+        blockhash = self.nodes[0].generate(1)[0]\n+        out = self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"])\n+        assert(blockhash in out['relevant_blocks'])\n+        assert_equal(self.nodes[0].getblockheader(blockhash)['height'], out['to_height'])\n+        assert_equal(0, out['from_height'])\n+\n+        # mine another block\n+        blockhash_new = self.nodes[0].generate(1)[0]\n+\n+        # make sure the blockhash is not in the filter result if we set the start_height to the just mined block (unlikely to hit a false positive)\n+        assert(blockhash not in self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"], self.nodes[0].getblockheader(blockhash_new)['height'])['relevant_blocks'])\n+\n+        # make sure the blockhash is present when using the first mined block as start_height\n+        assert(blockhash in self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"], self.nodes[0].getblockheader(blockhash)['height'])['relevant_blocks'])\n+\n+        # also test the stop height\n+        assert(blockhash in self.nodes[0].scanblocks(\"start\", [\"addr(\"+addr_1+\")\"], self.nodes[0].getblockheader(blockhash)['height'], self.nodes[0].getblockheader(blockhash)['height'])['relevant_blocks'])\n+\n+        # use the stop_height to exclude the relevent block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656745",
      "id" : 752656745,
      "in_reply_to_id" : 725696957,
      "line" : 44,
      "node_id" : "PRRC_kwDOABII584s3KFp",
      "original_commit_id" : "71b7cdb460e2d0179aa87bdd0d30a82a821f6d05",
      "original_line" : 44,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "test/functional/rpc_scanblockfilters.py",
      "position" : 44,
      "pull_request_review_id" : 810497204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20664",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656745/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-18T21:58:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/752656745",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Please see #23549 ",
      "created_at" : "2021-12-03T19:33:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-985775862",
      "id" : 985775862,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20664",
      "node_id" : "IC_kwDOABII5846wb72",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/985775862/reactions"
      },
      "updated_at" : "2021-12-03T19:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/985775862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   }
]
