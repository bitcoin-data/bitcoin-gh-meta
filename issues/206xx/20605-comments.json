[
   {
      "author_association" : "MEMBER",
      "body" : "That's an amazing hack. I didn't know it was allowed to call system library functions from a signal handler, but apparently POSIX mandates that some functions are callable - including read() and write().",
      "created_at" : "2020-12-08T21:19:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741050023",
      "id" : 741050023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTA1MDAyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-08T21:19:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741050023",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20487 (draft: Add syscall sandboxing using seccomp-bpf (Linux secure computing mode) by practicalswift)\n* #19461 (multiprocess: Add bitcoin-gui -ipcconnect option by ryanofsky)\n* #19460 (multiprocess: Add bitcoin-wallet -ipcconnect option by ryanofsky)\n* #19160 (multiprocess: Add basic spawn and IPC support by ryanofsky)\n* #10102 ([experimental] Multiprocess bitcoin by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-12-09T06:49:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741571875",
      "id" : 741571875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTU3MTg3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T06:45:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741571875",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nice!\r\nTested ACK f8585d59f1b0040765361eebd8a4544670de2f04 - (on macOS only)\r\n\r\nIs there a documentation what system function one can call in signal handler (to confirm with POSIX)?",
      "created_at" : "2020-12-09T08:09:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741607189",
      "id" : 741607189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTYwNzE4OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T08:09:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741607189",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Is there a documentation what system function one can call in signal handler (to confirm with POSIX)?\r\n\r\nThis is a good question, I wasn't able to find any *definitive* reference. The \"self-pipe trick\" is an incredibly common pattern in UNIX daemons though. It certainly works across Linux, Macos, modern BSDsâ¦ Fairly sure everything that can run Bitcoin Core. If it would be broken in principle then a lot of software would break.\r\n\r\nFor example Python uses this too, calls it a 'wakeup fd'. See https://github.com/python/cpython/blob/master/Modules/signalmodule.c#L294",
      "created_at" : "2020-12-09T09:26:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741647538",
      "id" : 741647538,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTY0NzUzOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T09:26:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741647538",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539232902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539232902"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've tried locally to just `close()` and it also works (tested on macos only). Note that `WaitForShutdown` is called twice so just one `read` succeeds, see https://github.com/promag/bitcoin/commit/c44a33c5532247d74cdaaf06d43a104ae2e36aa1.",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-09T11:36:21Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539232902",
      "id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzMjkwMg==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548094769,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-15T16:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539232902",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK eae384f8fa0215 on Debian 5.9.11-1 (2020-11-27) x86_64 GNU/Linux",
      "created_at" : "2020-12-09T11:53:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741723442",
      "id" : 741723442,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTcyMzQ0Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T11:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741723442",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539251402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539251402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you mean with \"WaitForShutdown is called twice\"? It isn't. It's called at the end of `AppInit` which itself is called once.",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-09T12:06:06Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539251402",
      "id" : 539251402,
      "in_reply_to_id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1MTQwMg==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548116229,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-15T16:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539251402",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539252303"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539252303"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Or if you mean the call in `AbortShutdown`, sure, yes but that's on purpose to reset the shutdown condition so it can be used again.\r\nI'd really prefer to use `read`/`write` and not close a socket under someone waiting on it !",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-09T12:07:36Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539252303",
      "id" : 539252303,
      "in_reply_to_id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1MjMwMw==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548117266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-15T16:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539252303",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539255824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539255824"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah right, the second call is In `AbortShutdown`. But that doesn't invalidate the point of just `close()` instead of `write()`, which looks enough to make `read()` return.",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-09T12:13:28Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539255824",
      "id" : 539255824,
      "in_reply_to_id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1NTgyNA==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548121371,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-15T16:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539255824",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539258627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539258627"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"looks enough\"\r\nYes, but we're dealing with a lot of possibilities in different OSes here, just because it works for you doesn't mean it's safe. This whole thing (try googling about signals and pipe tricks) is a controversial subject, so I prefer to mimic existing code instead of inventing our own.\r\nAlso, `close()` makes it more work to re-arm the condition in `AbortShutdown`.\r\n\r\nEdit: To be fair I do think it's a clever trick to use `close`, and it might be good in some circumstances, but probably not in this case.",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-09T12:17:41Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539258627",
      "id" : 539258627,
      "in_reply_to_id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1ODYyNw==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548124874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-15T16:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539258627",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK eae384f8fa0215cfd63235b8cb22077a0c356ee0 on macos 10.15.6, needs squash I guess.",
      "created_at" : "2020-12-09T12:20:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741735937",
      "id" : 741735937,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTczNTkzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T12:20:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741735937",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Squashed f8585d59f1b0040765361eebd8a4544670de2f04..eae384f8fa0215cfd63235b8cb22077a0c356ee0 â f628398631bc2a5b7839aeab5b3d89cbbff1f3fa",
      "created_at" : "2020-12-09T12:25:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741738579",
      "id" : 741738579,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTczODU3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T12:25:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741738579",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK â¤ï¸",
      "created_at" : "2020-12-10T06:39:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-742277014",
      "id" : 742277014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MjI3NzAxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-10T06:39:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742277014",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/60179867?v=4",
         "events_url" : "https://api.github.com/users/decryp2kanon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/decryp2kanon/followers",
         "following_url" : "https://api.github.com/users/decryp2kanon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/decryp2kanon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/decryp2kanon",
         "id" : 60179867,
         "login" : "decryp2kanon",
         "node_id" : "MDQ6VXNlcjYwMTc5ODY3",
         "organizations_url" : "https://api.github.com/users/decryp2kanon/orgs",
         "received_events_url" : "https://api.github.com/users/decryp2kanon/received_events",
         "repos_url" : "https://api.github.com/users/decryp2kanon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/decryp2kanon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/decryp2kanon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/decryp2kanon"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK: swift shutdown is more practical than non-swift shutdown",
      "created_at" : "2020-12-10T09:29:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-742398536",
      "id" : 742398536,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MjM5ODUzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-10T09:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742398536",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">On Windows, there are no signals so using a condition variable is safe.\r\n\r\nBut Windows *does* have signals...?",
      "created_at" : "2020-12-14T16:22:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-744551383",
      "id" : 744551383,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NDU1MTM4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-14T16:22:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744551383",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> But Windows does have signals...?\r\n\r\nBut not asynchronous ones like in POSIX. Windows always uses event loops.\r\n\r\nEdit: okay this is apparently not true, some notifications launch in a separate thread. It seems they are  not reentrant in the same sense as POSIX signals though.",
      "created_at" : "2020-12-14T16:59:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-744574287",
      "id" : 744574287,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NDU3NDI4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-14T20:24:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744574287",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "~~Closing this, might pick it up some day or someone else could.~~\r\n\r\nEdit: we only set a `SetConsoleCtrlHandler` on Windows and this [launches in a separate thread](https://docs.microsoft.com/en-us/windows/console/console-control-handlers) so this is exactly the right appreach.",
      "created_at" : "2020-12-14T17:38:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-744597909",
      "id" : 744597909,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NDU5NzkwOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-14T17:49:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744597909",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I suggest reopening, the approach here looks correct for Windows: https://docs.microsoft.com/en-us/windows/console/console-control-handlers (the control handlers are run in a separate thread).",
      "created_at" : "2020-12-14T17:48:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-744603261",
      "id" : 744603261,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NDYwMzI2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-14T17:48:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744603261",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r542836471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542836471"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"init: Signal-safe instant shutdown\" (f628398631bc2a5b7839aeab5b3d89cbbff1f3fa)\r\n\r\nCould set some initial values:\r\n\r\n```\r\nstatic int g_shutdown_pipe[2] = {-1, -1};\r\n```\r\n\r\nTo avoid possibility of code reading and writing to random pipes if someone forgets to call InitShutdownState.",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-14T21:53:02Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r542836471",
      "id" : 542836471,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzNjQ3MQ==",
      "original_commit_id" : "f628398631bc2a5b7839aeab5b3d89cbbff1f3fa",
      "original_line" : 29,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : null,
      "pull_request_review_id" : 551924120,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-15T16:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542836471",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r542879895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542879895"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"init: Signal-safe instant shutdown\" (f628398631bc2a5b7839aeab5b3d89cbbff1f3fa)\r\n\r\nI don't understand what AbortShutdown is supposed to do. Why would a caller request and abort a shutdown instead of just not requesting a shutdown until it wanted the shutdown? What prevents AppInit from exiting between the StartShutdown and AbortShutdown calls and causing AbortShutdown to hang forever? I could be misunderstanding, but it seems like AbortShutdown functionality was racy before this PR, and now racy and deadlocky after this PR.",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-14T22:34:29Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);\n+            if (result < 0) {\n+                // Failure. It's possible that the write was interrupted by another signal.\n+                // Other errors are unexpected here.\n+                assert(errno == EINTR);\n+            } else {\n+                assert(result == 1);\n+                break;\n+            }\n+        }\n+    }\n+#endif\n }\n+\n void AbortShutdown()\n {\n+    if (fRequestShutdown) {\n+        // Cancel existing shutdown by waiting for it, this will reset condition flags and remove\n+        // the shutdown token from the pipe.\n+        WaitForShutdown();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r542879895",
      "id" : 542879895,
      "line" : 83,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg3OTg5NQ==",
      "original_commit_id" : "f628398631bc2a5b7839aeab5b3d89cbbff1f3fa",
      "original_line" : 83,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 79,
      "pull_request_review_id" : 551924120,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-15T16:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/542879895",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r543468421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543468421"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm happy to see it go but it's a) used in the tests b) before WaitForShutdown() is called in init. Both uses are safe, and I mention this in the comment (in the header file).",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-15T15:56:58Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);\n+            if (result < 0) {\n+                // Failure. It's possible that the write was interrupted by another signal.\n+                // Other errors are unexpected here.\n+                assert(errno == EINTR);\n+            } else {\n+                assert(result == 1);\n+                break;\n+            }\n+        }\n+    }\n+#endif\n }\n+\n void AbortShutdown()\n {\n+    if (fRequestShutdown) {\n+        // Cancel existing shutdown by waiting for it, this will reset condition flags and remove\n+        // the shutdown token from the pipe.\n+        WaitForShutdown();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r543468421",
      "id" : 543468421,
      "in_reply_to_id" : 542879895,
      "line" : 83,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ2ODQyMQ==",
      "original_commit_id" : "f628398631bc2a5b7839aeab5b3d89cbbff1f3fa",
      "original_line" : 83,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 79,
      "pull_request_review_id" : 552607969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-15T16:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543468421",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r543469203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543469203"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea.\r\n(`0` is STDIN_FILENO so it should be more or less safe, but still, it'd be surprising behavior, it's better to raise an error)",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-15T15:57:50Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r543469203",
      "id" : 543469203,
      "in_reply_to_id" : 542836471,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ2OTIwMw==",
      "original_commit_id" : "f628398631bc2a5b7839aeab5b3d89cbbff1f3fa",
      "original_line" : 29,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : null,
      "pull_request_review_id" : 552608951,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-15T16:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543469203",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The GUI is already asynchronous so shouldn't need any polling/piping/condition variable stuff. Just some signals boilerplate like 73be44d (branch)\r\n\r\nWouldn't raising a Qt signal also, likely, be unsafe in a signal handler?\r\n\r\n>  could handle more runtime errors and avoid asserts\r\n\r\nHow do you suggest handling them? I used asserts because the program is in an unknown state if any of the conditions happen, it should only happen due to a coding bug or memory corruption, and there's not a sane way to continue, e.g. either we spend forever waiting for shutdown, or the shutdown sequence runs prematurely (thinking of it, the latter is safe? then again it would be unexpected, at least with an assert it's easier to see where something went wrong).",
      "created_at" : "2020-12-15T16:00:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-745387262",
      "id" : 745387262,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTM4NzI2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T16:23:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745387262",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added initializer for `g_shutdown_pipe`.\r\nf628398631bc2a5b7839aeab5b3d89cbbff1f3fa â cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-15T16:22:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-745401534",
      "id" : 745401534,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTQwMTUzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T16:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745401534",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK cd03513dc2fcccaa142e9632a28b38efd0056436 tested on Debian 5.9.11-1 (2020-11-27) x86_64 GNU/Linux\r\n\r\nWhen I read `while (true)` for some reason I think of `20 GOTO 10` or `JMP ($000A)`",
      "created_at" : "2020-12-15T22:52:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-745617494",
      "id" : 745617494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTYxNzQ5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T22:52:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745617494",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> When I read while (true) for some reason I think of 20 GOTO 10 or JMP ($000A)\r\n\r\nHeh, it could definitely be done without that, but I tend to write retry loops (especially those with complicated exit conditions, though that's not the case here) as infinite loops usually. Here it avoids having to define `result` outside the loop and think about what to initialize it with for the first iteration.",
      "created_at" : "2020-12-16T09:54:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-746010098",
      "id" : 746010098,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjAxMDA5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T09:54:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746010098",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r545075334"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545075334"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/20605#discussion_r543468421\r\n\r\n> I'm happy to see it go but it's a) used in the tests b) before WaitForShutdown() is called in init. Both uses are safe, and I mention this in the comment (in the header file).\r\n\r\nThanks for pointing out the comment. I missed that this was meant to be called *before* WaitForShutdown, so this makes much more sense now!",
      "commit_id" : "cd03513dc2fcccaa142e9632a28b38efd0056436",
      "created_at" : "2020-12-17T13:06:22Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);\n+            if (result < 0) {\n+                // Failure. It's possible that the write was interrupted by another signal.\n+                // Other errors are unexpected here.\n+                assert(errno == EINTR);\n+            } else {\n+                assert(result == 1);\n+                break;\n+            }\n+        }\n+    }\n+#endif\n }\n+\n void AbortShutdown()\n {\n+    if (fRequestShutdown) {\n+        // Cancel existing shutdown by waiting for it, this will reset condition flags and remove\n+        // the shutdown token from the pipe.\n+        WaitForShutdown();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r545075334",
      "id" : 545075334,
      "in_reply_to_id" : 542879895,
      "line" : 83,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA3NTMzNA==",
      "original_commit_id" : "f628398631bc2a5b7839aeab5b3d89cbbff1f3fa",
      "original_line" : 83,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 79,
      "pull_request_review_id" : 554584905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-17T13:15:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545075334",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
