[
   {
      "author_association" : "MEMBER",
      "body" : "For the record, cblockstore's download times from local nodes comes in reliably under master, but only by a very tiny margin.  This, on the other hand, comes in around 20% lower on tmpfs chain sync.\n",
      "created_at" : "2012-05-10T01:36:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5616222",
      "id" : 5616222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTYyMjI=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5616222/reactions"
      },
      "updated_at" : "2012-05-10T01:36:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5616222",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r812390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812390"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could comment out this line too, since the height is mentioned in debug.log just few lines before this line.\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-05-12T14:22:28Z",
      "diff_hunk" : "@@ -463,8 +506,8 @@ bool AppInit2(int argc, char* argv[])\n     printf(\"Done loading\\n\");\n \n     //// debug print\n-    printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n-    printf(\"nBestHeight = %d\\n\",            nBestHeight);\n+    //printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n+    printf(\"BestBlockHeight = %d\\n\",        pblockstore->GetBestBlockIndex()->nHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r812390",
      "id" : 812390,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMjM5MA==",
      "original_commit_id" : "c37ab81ce1480a0881be408e5bc94e0f68af55cb",
      "original_line" : null,
      "original_position" : 137,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812390/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-06-28T17:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812390",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "can this pull request be done in such a way that there isn't so much of a diff output? Did so much code need to move from main.cpp to protocol.cpp, for example?\n",
      "created_at" : "2012-05-12T14:28:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5668865",
      "id" : 5668865,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2Njg4NjU=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5668865/reactions"
      },
      "updated_at" : "2012-05-12T14:28:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5668865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Note that this pull is based on #771, which has radically different design goals.  This pull is fairly small on its own.\nRe: the move from main -> protocol.  One of the primary design goals of #771 is to remove the number of globals we export from main, especially the block index/chain storage stuff.  As a part of this, the net code in main.cpp really no longer belongs there, and was moved to protocol.cpp.\n",
      "created_at" : "2012-05-12T16:51:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5669958",
      "id" : 5669958,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2Njk5NTg=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669958/reactions"
      },
      "updated_at" : "2012-05-12T16:51:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669958",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think those are very sensible design goals.\n\nThat said, in that case we should definitely pull #771 first, to prevent unrelated changes being merged into one pull request. Github seems to almost lock up when I try to view the diff.\n",
      "created_at" : "2012-05-13T07:58:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5674672",
      "id" : 5674672,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NzQ2NzI=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5674672/reactions"
      },
      "updated_at" : "2012-05-13T07:58:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5674672",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, ok. Well, I'd certainly find the diffs easier to view if they were kept small. Probably would be better therefore to base this commit from a post-#771 commit then, in order not to effectively include that commit in its entirety within this commit, then it can be reviewed without having to manually save the files and manually diff them.\n",
      "created_at" : "2012-05-14T18:09:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5697411",
      "id" : 5697411,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2OTc0MTE=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697411/reactions"
      },
      "updated_at" : "2012-05-14T18:10:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Github always shows total diffs from master, so the only reasonable way to do it is to just base on #711, pulling in its huge diff...however, you can always compare the commit list to #711 and view the diffs of individual commits.\n",
      "created_at" : "2012-05-14T18:19:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5697644",
      "id" : 5697644,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2OTc2NDQ=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697644/reactions"
      },
      "updated_at" : "2012-05-14T18:19:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@TheBlueMatt, do you mean within github? I'm not sure how to do that. Could you provide a URL, perhaps?\n",
      "created_at" : "2012-05-14T18:21:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5697689",
      "id" : 5697689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2OTc2ODk=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697689/reactions"
      },
      "updated_at" : "2012-05-14T18:21:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697689",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "You have to manually compare the list of commits, and then you can just open each commit from the commits list in the pull...if you feel like doing some URL hacking, you will notice git style ...s in diff URLs which you can replace manually using any branch like:\nhttps://github.com/TheBlueMatt/bitcoin/compare/cblockstore...parallelcheck\n",
      "created_at" : "2012-05-14T18:26:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5697960",
      "id" : 5697960,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2OTc5NjA=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697960/reactions"
      },
      "updated_at" : "2012-05-14T18:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697960",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased onto #1429\n",
      "created_at" : "2012-06-06T23:57:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-6165915",
      "id" : 6165915,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNjU5MTU=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6165915/reactions"
      },
      "updated_at" : "2012-06-06T23:57:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6165915",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989834"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why make this line longer than it already was?\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-06-14T23:28:41Z",
      "diff_hunk" : "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989834",
      "id" : 989834,
      "line" : 1816,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTgzNA==",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 785,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 782,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989834/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-06-28T17:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989842"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure why this line is being changed....\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-06-14T23:29:55Z",
      "diff_hunk" : "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        CBlock* pblock = new CBlock(block);\n+        mapOrphanBlocks.insert(make_pair(hash, pblock));\n+        mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+        CallbackAskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n-        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    if (!AcceptBlock(block))\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::FinishEmitBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n-    vector<uint256> vWorkQueue;\n-    vWorkQueue.push_back(hash);\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    queue<uint256> qWorkQueue;\n+    qWorkQueue.push(hash);\n+    while (!qWorkQueue.empty())\n     {\n-        uint256 hashPrev = vWorkQueue[i];\n+        uint256 hashPrev = qWorkQueue.front();\n+        qWorkQueue.pop();\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n              mi != mapOrphanBlocksByPrev.upper_bound(hashPrev);\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 hashOrphan = pblockOrphan->GetHash();\n+            if (AcceptBlock(*pblockOrphan))\n+                qWorkQueue.push(hashOrphan);\n+            mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::FinishEmitBlock: ACCEPTED\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989842",
      "id" : 989842,
      "line" : 1855,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTg0Mg==",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 836,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 833,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989842/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-06-28T17:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989853"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "why 5?\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-06-14T23:31:06Z",
      "diff_hunk" : "@@ -2551,6 +2696,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                nBlockCount++;\n+\n+            // Don't set hashLastInvLastBlock if we are getting a hashContinue inv\n+            if (nInv == nLastBlock && nBlockCount > 5)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989853",
      "id" : 989853,
      "line" : 2751,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTg1Mw==",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 1188,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 1297,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989853/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-06-28T17:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989853",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989857"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Because the name of the function it is in, is being renamed.\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-06-14T23:31:57Z",
      "diff_hunk" : "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989857",
      "id" : 989857,
      "line" : 1816,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTg1Nw==",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 785,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 782,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989857/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-06-28T17:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989870"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "won't inv.hash work here?\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-06-14T23:33:58Z",
      "diff_hunk" : "@@ -2767,14 +2869,24 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_BLOCK, block.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        if (ProcessBlock(pfrom, &block))\n-            mapAlreadyAskedFor.erase(inv);\n-        if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n+        phub->EmitBlock(block, false, pfrom);\n+\n+        // Though we request duplicates, Satoshi nodes will not return any,\n+        // thanks to setInventoryKnown, however they will still count them\n+        // towards the block size in the inv result, its still better to\n+        // request blocks now, but #973 will optimize this further.\n+        if (pfrom->hashLastInvLastBlock == block.GetHash())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989870",
      "id" : 989870,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTg3MA==",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 1305,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989870/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-06-28T17:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989870",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r990052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990052"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Because the function name has changed.\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-06-15T00:01:49Z",
      "diff_hunk" : "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        CBlock* pblock = new CBlock(block);\n+        mapOrphanBlocks.insert(make_pair(hash, pblock));\n+        mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+        CallbackAskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n-        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    if (!AcceptBlock(block))\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::FinishEmitBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n-    vector<uint256> vWorkQueue;\n-    vWorkQueue.push_back(hash);\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    queue<uint256> qWorkQueue;\n+    qWorkQueue.push(hash);\n+    while (!qWorkQueue.empty())\n     {\n-        uint256 hashPrev = vWorkQueue[i];\n+        uint256 hashPrev = qWorkQueue.front();\n+        qWorkQueue.pop();\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n              mi != mapOrphanBlocksByPrev.upper_bound(hashPrev);\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 hashOrphan = pblockOrphan->GetHash();\n+            if (AcceptBlock(*pblockOrphan))\n+                qWorkQueue.push(hashOrphan);\n+            mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::FinishEmitBlock: ACCEPTED\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r990052",
      "id" : 990052,
      "line" : 1855,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDA1Mg==",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 836,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 833,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990052/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-06-28T17:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990052",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r990073"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990073"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Its to guess if we have another getblocks to go after this one. \nIts MAX_BLOCK_SIZE = 1000000 / default -maxsendbuffer = 10000000 = 10 / 2 = 5\nSee https://github.com/TheBlueMatt/bitcoin/blob/669a5d4c9e49fb3027ec7110664faa42615698bc/src/main.cpp#L2798\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-06-15T00:05:22Z",
      "diff_hunk" : "@@ -2551,6 +2696,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                nBlockCount++;\n+\n+            // Don't set hashLastInvLastBlock if we are getting a hashContinue inv\n+            if (nInv == nLastBlock && nBlockCount > 5)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r990073",
      "id" : 990073,
      "line" : 2751,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDA3Mw==",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 1188,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 1297,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990073/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-06-28T17:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990073",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r990080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990080"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, changed.\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-06-15T00:06:13Z",
      "diff_hunk" : "@@ -2767,14 +2869,24 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_BLOCK, block.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        if (ProcessBlock(pfrom, &block))\n-            mapAlreadyAskedFor.erase(inv);\n-        if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n+        phub->EmitBlock(block, false, pfrom);\n+\n+        // Though we request duplicates, Satoshi nodes will not return any,\n+        // thanks to setInventoryKnown, however they will still count them\n+        // towards the block size in the inv result, its still better to\n+        // request blocks now, but #973 will optimize this further.\n+        if (pfrom->hashLastInvLastBlock == block.GetHash())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r990080",
      "id" : 990080,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDA4MA==",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 1305,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990080/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-06-28T17:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990080",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087027"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ProcessBlock is more visually appealing IMHO.\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-07-02T19:29:31Z",
      "diff_hunk" : "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        CBlock* pblock = new CBlock(block);\n+        mapOrphanBlocks.insert(make_pair(hash, pblock));\n+        mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+        CallbackAskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n-        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    if (!AcceptBlock(block))\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::FinishEmitBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n-    vector<uint256> vWorkQueue;\n-    vWorkQueue.push_back(hash);\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    queue<uint256> qWorkQueue;\n+    qWorkQueue.push(hash);\n+    while (!qWorkQueue.empty())\n     {\n-        uint256 hashPrev = vWorkQueue[i];\n+        uint256 hashPrev = qWorkQueue.front();\n+        qWorkQueue.pop();\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n              mi != mapOrphanBlocksByPrev.upper_bound(hashPrev);\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 hashOrphan = pblockOrphan->GetHash();\n+            if (AcceptBlock(*pblockOrphan))\n+                qWorkQueue.push(hashOrphan);\n+            mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::FinishEmitBlock: ACCEPTED\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087027",
      "id" : 1087027,
      "line" : 1855,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcwMjc=",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 836,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 833,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087027/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T19:29:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087043"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087043"
         }
      },
      "author_association" : "MEMBER",
      "body" : "But if it were ProcessBlock, it would be unclear and searching to code for where the printf was called would be harder (which is the point of prefixing the print with the function that called it)\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-07-02T19:31:32Z",
      "diff_hunk" : "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        CBlock* pblock = new CBlock(block);\n+        mapOrphanBlocks.insert(make_pair(hash, pblock));\n+        mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+        CallbackAskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n-        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    if (!AcceptBlock(block))\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::FinishEmitBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n-    vector<uint256> vWorkQueue;\n-    vWorkQueue.push_back(hash);\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    queue<uint256> qWorkQueue;\n+    qWorkQueue.push(hash);\n+    while (!qWorkQueue.empty())\n     {\n-        uint256 hashPrev = vWorkQueue[i];\n+        uint256 hashPrev = qWorkQueue.front();\n+        qWorkQueue.pop();\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n              mi != mapOrphanBlocksByPrev.upper_bound(hashPrev);\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 hashOrphan = pblockOrphan->GetHash();\n+            if (AcceptBlock(*pblockOrphan))\n+                qWorkQueue.push(hashOrphan);\n+            mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::FinishEmitBlock: ACCEPTED\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087043",
      "id" : 1087043,
      "line" : 1855,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcwNDM=",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 836,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 833,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087043/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T19:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087043",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087167"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not sure what I'm looking at re the URL above. Why 5 rather than 4 or 6?\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-07-02T19:43:21Z",
      "diff_hunk" : "@@ -2551,6 +2696,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                nBlockCount++;\n+\n+            // Don't set hashLastInvLastBlock if we are getting a hashContinue inv\n+            if (nInv == nLastBlock && nBlockCount > 5)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087167",
      "id" : 1087167,
      "line" : 2751,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcxNjc=",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 1188,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 1297,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087167/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T19:43:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087187"
         }
      },
      "author_association" : "MEMBER",
      "body" : "MAX_BLOCK_SIZE / (default -maxsendbuffer / 2)\nThe link simply explains why its maxsendbuffer/2.\n",
      "commit_id" : "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "created_at" : "2012-07-02T19:44:46Z",
      "diff_hunk" : "@@ -2551,6 +2696,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                nBlockCount++;\n+\n+            // Don't set hashLastInvLastBlock if we are getting a hashContinue inv\n+            if (nInv == nLastBlock && nBlockCount > 5)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087187",
      "id" : 1087187,
      "line" : 2751,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcxODc=",
      "original_commit_id" : "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "original_line" : null,
      "original_position" : 1188,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 1297,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087187/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T19:44:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This needs rebasing, and Im not going to keep rebasing this stuff without any interest in eventually merging.  If it ever gets interest, I may reopen.\n",
      "created_at" : "2012-07-05T20:15:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-6789417",
      "id" : 6789417,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODk0MTc=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6789417/reactions"
      },
      "updated_at" : "2012-07-05T20:15:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6789417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
