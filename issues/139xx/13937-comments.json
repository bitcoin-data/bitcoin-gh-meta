[
   {
      "author_association" : "MEMBER",
      "body" : "cc @TheBlueMatt, @MarcoFalke, @jamesob as this touches your work\r\n\r\ncc @jonasschnelli  since you reviewed the original PR (@skeees did too, but only the commit that I dropped)  ",
      "created_at" : "2018-08-10T14:04:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#issuecomment-412092374",
      "id" : 412092374,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13937",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxMjA5MjM3NA==",
      "updated_at" : "2018-08-10T14:04:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412092374",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14624](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14624.html) (Some simple improvements to the RNG code by sipa)\n* [#12151](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/12151.html) (rpc: Remove cs_main lock from blockToJSON and blockheaderToJSON by promag)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-08-10T16:24:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#issuecomment-412134370",
      "id" : 412134370,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13937",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxMjEzNDM3MA==",
      "updated_at" : "2018-11-13T19:17:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412134370",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r209315966"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209315966"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note: I find the above reverse-to-forward iterator dance remarkably confusing.",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-08-10T16:29:30Z",
      "diff_hunk" : "@@ -1290,6 +1319,130 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     CheckForkWarningConditions();\n }\n \n+/**\n+ * Called when a header (re-)reached BLOCK_VALID_TREE.\n+ *\n+ * setBlockIndexHeaderCandidates is a bit more complicated than\n+ * setBlockIndexCandidates as setBlockIndexCandidates can be rather lazy\n+ * as everything in it is about to be connected. In our case, we may have many\n+ * headers above the tip leading down different chains, for which we really\n+ * only want to keep the tip of each chain.\n+ *\n+ * Works even if chainActive is empty!\n+ *\n+ * If chain_ordered_inertion, we assume that if pindex->pprev was previously a\n+ * header candidate, it will be when we're called. ie we assume that there are\n+ * no header candidates which are parents of us except for possibly our direct\n+ * parent.\n+ *\n+ * no_descendants allows us to make a similar, but inverted, assumption -\n+ * assuming no descendant blocks may be header candidates.\n+ */\n+void CChainState::MaybeAddNewHeaderCandidate(CBlockIndex* pindex, bool chain_ordered_insertion, bool no_descendants) {\n+    if (!pindex->IsValid(BLOCK_VALID_TREE)) return; // We only want things that have a valid header tree\n+\n+    bool lower_work = chainActive.Tip() != nullptr && chainActive.Tip()->nChainWork > pindex->nChainWork;\n+    if (lower_work) return; // We don't want things with less work than our current tip\n+\n+    bool parent_present = false;\n+    if (pindex->pprev && setBlockIndexHeaderCandidates.count(pindex->pprev)) {\n+        // If the parent is a previous candidate, then no parents of it could\n+        // be candidates, either. This is the only thing we need to check by\n+        // definition of chain_ordered_insertion, however even in the case of\n+        // !chain_ordered_insertion, if this is true, no need to do a full\n+        // parent scan (as no further-up parent can be a candidate, either).\n+        setBlockIndexHeaderCandidates.erase(pindex->pprev);\n+        parent_present = true;\n+    } else if (!chain_ordered_insertion) {\n+        // We are being called in a for(p : mapBlockIndex) loop, so can make no\n+        // assumptions about existing entries. Scan all other entries to check\n+        // if we're a descendant of some other candidate.\n+        for (auto it = setBlockIndexHeaderCandidates.begin(); it != setBlockIndexHeaderCandidates.end() && (*it)->nChainWork < pindex->nChainWork; it++) {\n+            if (pindex->GetAncestor((*it)->nHeight) == *it) {\n+                // it should be removed - we only keep the tip of potential\n+                // chains, not anything in them. At this point we should be\n+                // consistent by adding pindex, there should be more more work\n+                // to do here.\n+                setBlockIndexHeaderCandidates.erase(it);\n+                break;\n+                parent_present = true;\n+            }\n+        }\n+    }\n+\n+    if (!parent_present && !no_descendants) {\n+        // Scan higher-work entries to check that we're not a parent of some\n+        // other candidate(s). If a parent of ours was already present then we\n+        // can be certain that no such child is also a candidate, so we can\n+        // skip the whole scan.\n+        for (auto it = setBlockIndexHeaderCandidates.rbegin(); it != setBlockIndexHeaderCandidates.rend() && (*it)->nChainWork > pindex->nChainWork; it++) {\n+            if ((*it)->GetAncestor(pindex->nHeight) == pindex) {\n+                // pindex is useless - even if there are other tips based on it\n+                // which we want in setBlockIndexHeaderCandidates, we're not\n+                // gonna find them here.\n+                return;\n+            }\n+        }\n+    }\n+\n+    setBlockIndexHeaderCandidates.insert(pindex);\n+}\n+\n+const CBlockIndex* CChainState::GetBestHeader() {\n+    LOCK(cs_main);\n+    auto it = setBlockIndexHeaderCandidates.rbegin();\n+    if (it == setBlockIndexHeaderCandidates.rend())\n+        return nullptr;\n+    return *it;\n+}\n+\n+const CBlockIndex* GetBestHeader() {\n+    return g_chainstate.GetBestHeader();\n+}\n+\n+// Helper for PruneInvalidBlockIndexCandidates\n+static void PruneInvalidIndexCandidatesInSet(CBlockIndex* pindexInvalid, std::set<CBlockIndex*, CBlockIndexWorkComparator>& set_candidates) {\n+    // Iterate set_candidates downwards, deleting parents of pindexInvalid,\n+    // until we get to headers which are lower total-work than pindexInvalid\n+    // (at which point they can't be parents of pindexInvalid).\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator>::reverse_iterator it = set_candidates.rbegin();\n+    while (it != set_candidates.rend() && (*it)->nChainWork > pindexInvalid->nChainWork) {\n+        if ((*it)->GetAncestor(pindexInvalid->nHeight) == pindexInvalid) {\n+            CBlockIndex* pindexInvalidTip = *it;\n+            if (!pindexBestInvalid || pindexInvalidTip->nChainWork > pindexBestInvalid->nChainWork)\n+                pindexBestInvalid = pindexInvalidTip;\n+\n+            while (pindexInvalidTip != pindexInvalid) {\n+                if (!(pindexInvalidTip->nStatus & BLOCK_FAILED_MASK)) {\n+                    pindexInvalidTip->nStatus |= BLOCK_FAILED_CHILD;\n+                    setDirtyBlockIndex.insert(pindexInvalidTip);\n+                }\n+                pindexInvalidTip = pindexInvalidTip->pprev;\n+            }\n+            std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator forward_it = it.base(); // Is one past it\n+            forward_it--; // Now points to it\n+            forward_it = set_candidates.erase(forward_it);\n+            it = std::set<CBlockIndex*, CBlockIndexWorkComparator>::reverse_iterator(forward_it);\n+            // forward_it == it.base() now points to one-past previous it, making it point to one-before previous it.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r209315966",
      "id" : 209315966,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTMxNTk2Ng==",
      "original_commit_id" : "7b2a938fa5ddbf3e91ada314bce65b4b86c66982",
      "original_position" : 207,
      "path" : "src/validation.cpp",
      "position" : 203,
      "pull_request_review_id" : 145312412,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T08:48:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209315966",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r209428169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209428169"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Numerous places call this function but no nullptr check is performed and dereferences are executed on the ptr.\r\nCan this return null in any case where this function is called?",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-08-11T14:28:18Z",
      "diff_hunk" : "@@ -1290,6 +1319,130 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     CheckForkWarningConditions();\n }\n \n+/**\n+ * Called when a header (re-)reached BLOCK_VALID_TREE.\n+ *\n+ * setBlockIndexHeaderCandidates is a bit more complicated than\n+ * setBlockIndexCandidates as setBlockIndexCandidates can be rather lazy\n+ * as everything in it is about to be connected. In our case, we may have many\n+ * headers above the tip leading down different chains, for which we really\n+ * only want to keep the tip of each chain.\n+ *\n+ * Works even if chainActive is empty!\n+ *\n+ * If chain_ordered_inertion, we assume that if pindex->pprev was previously a\n+ * header candidate, it will be when we're called. ie we assume that there are\n+ * no header candidates which are parents of us except for possibly our direct\n+ * parent.\n+ *\n+ * no_descendants allows us to make a similar, but inverted, assumption -\n+ * assuming no descendant blocks may be header candidates.\n+ */\n+void CChainState::MaybeAddNewHeaderCandidate(CBlockIndex* pindex, bool chain_ordered_insertion, bool no_descendants) {\n+    if (!pindex->IsValid(BLOCK_VALID_TREE)) return; // We only want things that have a valid header tree\n+\n+    bool lower_work = chainActive.Tip() != nullptr && chainActive.Tip()->nChainWork > pindex->nChainWork;\n+    if (lower_work) return; // We don't want things with less work than our current tip\n+\n+    bool parent_present = false;\n+    if (pindex->pprev && setBlockIndexHeaderCandidates.count(pindex->pprev)) {\n+        // If the parent is a previous candidate, then no parents of it could\n+        // be candidates, either. This is the only thing we need to check by\n+        // definition of chain_ordered_insertion, however even in the case of\n+        // !chain_ordered_insertion, if this is true, no need to do a full\n+        // parent scan (as no further-up parent can be a candidate, either).\n+        setBlockIndexHeaderCandidates.erase(pindex->pprev);\n+        parent_present = true;\n+    } else if (!chain_ordered_insertion) {\n+        // We are being called in a for(p : mapBlockIndex) loop, so can make no\n+        // assumptions about existing entries. Scan all other entries to check\n+        // if we're a descendant of some other candidate.\n+        for (auto it = setBlockIndexHeaderCandidates.begin(); it != setBlockIndexHeaderCandidates.end() && (*it)->nChainWork < pindex->nChainWork; it++) {\n+            if (pindex->GetAncestor((*it)->nHeight) == *it) {\n+                // it should be removed - we only keep the tip of potential\n+                // chains, not anything in them. At this point we should be\n+                // consistent by adding pindex, there should be more more work\n+                // to do here.\n+                setBlockIndexHeaderCandidates.erase(it);\n+                break;\n+                parent_present = true;\n+            }\n+        }\n+    }\n+\n+    if (!parent_present && !no_descendants) {\n+        // Scan higher-work entries to check that we're not a parent of some\n+        // other candidate(s). If a parent of ours was already present then we\n+        // can be certain that no such child is also a candidate, so we can\n+        // skip the whole scan.\n+        for (auto it = setBlockIndexHeaderCandidates.rbegin(); it != setBlockIndexHeaderCandidates.rend() && (*it)->nChainWork > pindex->nChainWork; it++) {\n+            if ((*it)->GetAncestor(pindex->nHeight) == pindex) {\n+                // pindex is useless - even if there are other tips based on it\n+                // which we want in setBlockIndexHeaderCandidates, we're not\n+                // gonna find them here.\n+                return;\n+            }\n+        }\n+    }\n+\n+    setBlockIndexHeaderCandidates.insert(pindex);\n+}\n+\n+const CBlockIndex* CChainState::GetBestHeader() {\n+    LOCK(cs_main);\n+    auto it = setBlockIndexHeaderCandidates.rbegin();\n+    if (it == setBlockIndexHeaderCandidates.rend())\n+        return nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r209428169",
      "id" : 209428169,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyODE2OQ==",
      "original_commit_id" : "7b2a938fa5ddbf3e91ada314bce65b4b86c66982",
      "original_position" : 176,
      "path" : "src/validation.cpp",
      "position" : 172,
      "pull_request_review_id" : 145448107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T08:48:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209428169",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "node_id" : "MDQ6VXNlcjYzOTQwMzM=",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r209428514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209428514"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Possible race condition here since we don't lock cs_main? Can the best_head data be deleted between time we call GetBestHeader() and when we use the ptr?\r\n\r\nI'm not familiar with the code enough to know the answer to this so just putting it here in case.",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-08-11T14:41:52Z",
      "diff_hunk" : "@@ -152,10 +152,10 @@ class NodeImpl : public Node\n     size_t getMempoolDynamicUsage() override { return ::mempool.DynamicMemoryUsage(); }\n     bool getHeaderTip(int& height, int64_t& block_time) override\n     {\n-        LOCK(::cs_main);\n-        if (::pindexBestHeader) {\n-            height = ::pindexBestHeader->nHeight;\n-            block_time = ::pindexBestHeader->GetBlockTime();\n+        const CBlockIndex* best_header = ::GetBestHeader();\n+        if (best_header) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r209428514",
      "id" : 209428514,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTQyODUxNA==",
      "original_commit_id" : "7b2a938fa5ddbf3e91ada314bce65b4b86c66982",
      "original_position" : 9,
      "path" : "src/interfaces/node.cpp",
      "position" : 9,
      "pull_request_review_id" : 145448107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T08:48:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209428514",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6394033?v=4",
         "events_url" : "https://api.github.com/users/donaloconnor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/donaloconnor/followers",
         "following_url" : "https://api.github.com/users/donaloconnor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/donaloconnor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/donaloconnor",
         "id" : 6394033,
         "login" : "donaloconnor",
         "node_id" : "MDQ6VXNlcjYzOTQwMzM=",
         "organizations_url" : "https://api.github.com/users/donaloconnor/orgs",
         "received_events_url" : "https://api.github.com/users/donaloconnor/received_events",
         "repos_url" : "https://api.github.com/users/donaloconnor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/donaloconnor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/donaloconnor"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r212822708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212822708"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~It sounds like it would be safer to also make a PR for https://github.com/bitcoin/bitcoin/commit/a9db3dada0119c183d16627805e90c4dbca05c6a that I left out?~ (nvm that was already merged in #13023)\r\n\r\nI'll see if I can understand the potential race condition you mention.",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-08-26T11:21:38Z",
      "diff_hunk" : "@@ -152,10 +152,10 @@ class NodeImpl : public Node\n     size_t getMempoolDynamicUsage() override { return ::mempool.DynamicMemoryUsage(); }\n     bool getHeaderTip(int& height, int64_t& block_time) override\n     {\n-        LOCK(::cs_main);\n-        if (::pindexBestHeader) {\n-            height = ::pindexBestHeader->nHeight;\n-            block_time = ::pindexBestHeader->GetBlockTime();\n+        const CBlockIndex* best_header = ::GetBestHeader();\n+        if (best_header) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r212822708",
      "id" : 212822708,
      "in_reply_to_id" : 209428514,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjgyMjcwOA==",
      "original_commit_id" : "7b2a938fa5ddbf3e91ada314bce65b4b86c66982",
      "original_position" : 9,
      "path" : "src/interfaces/node.cpp",
      "position" : 9,
      "pull_request_review_id" : 149534822,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T08:48:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212822708",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r212825173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212825173"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That seems problematic indeed. There's an `assert` for this in https://github.com/bitcoin/bitcoin/blame/7b1ab22384d944f638c514f838e25b391204ef67/src/net_processing.cpp#L3308, but not in the calls from validation.cpp:\r\n* in `NotifyHeaderTip()`: here it's compared with `pindexHeaderOld` which is a `nullptr` initially, but would non-null the next time. It's not dereferenced in that function, but it is passed on to `uiInterface.NotifyHeaderTip`. I could add an assert inside`if (fNotify)`\r\n* in `IsCurrentForFeeEstimation()`: I could add an `assert` directly above the if statement that deferences it\r\n\r\nThe comment in `InvalidBlockFound` suggests that sometimes `setBlockIndexHeaderCandidates` can be empty, so the above wouldn't be enough. Rather than `assert` I could explicitly check for `nullptr` in both functions and deal with them, as well as put a warning where this set is defined. ",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-08-26T12:49:03Z",
      "diff_hunk" : "@@ -1290,6 +1319,130 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     CheckForkWarningConditions();\n }\n \n+/**\n+ * Called when a header (re-)reached BLOCK_VALID_TREE.\n+ *\n+ * setBlockIndexHeaderCandidates is a bit more complicated than\n+ * setBlockIndexCandidates as setBlockIndexCandidates can be rather lazy\n+ * as everything in it is about to be connected. In our case, we may have many\n+ * headers above the tip leading down different chains, for which we really\n+ * only want to keep the tip of each chain.\n+ *\n+ * Works even if chainActive is empty!\n+ *\n+ * If chain_ordered_inertion, we assume that if pindex->pprev was previously a\n+ * header candidate, it will be when we're called. ie we assume that there are\n+ * no header candidates which are parents of us except for possibly our direct\n+ * parent.\n+ *\n+ * no_descendants allows us to make a similar, but inverted, assumption -\n+ * assuming no descendant blocks may be header candidates.\n+ */\n+void CChainState::MaybeAddNewHeaderCandidate(CBlockIndex* pindex, bool chain_ordered_insertion, bool no_descendants) {\n+    if (!pindex->IsValid(BLOCK_VALID_TREE)) return; // We only want things that have a valid header tree\n+\n+    bool lower_work = chainActive.Tip() != nullptr && chainActive.Tip()->nChainWork > pindex->nChainWork;\n+    if (lower_work) return; // We don't want things with less work than our current tip\n+\n+    bool parent_present = false;\n+    if (pindex->pprev && setBlockIndexHeaderCandidates.count(pindex->pprev)) {\n+        // If the parent is a previous candidate, then no parents of it could\n+        // be candidates, either. This is the only thing we need to check by\n+        // definition of chain_ordered_insertion, however even in the case of\n+        // !chain_ordered_insertion, if this is true, no need to do a full\n+        // parent scan (as no further-up parent can be a candidate, either).\n+        setBlockIndexHeaderCandidates.erase(pindex->pprev);\n+        parent_present = true;\n+    } else if (!chain_ordered_insertion) {\n+        // We are being called in a for(p : mapBlockIndex) loop, so can make no\n+        // assumptions about existing entries. Scan all other entries to check\n+        // if we're a descendant of some other candidate.\n+        for (auto it = setBlockIndexHeaderCandidates.begin(); it != setBlockIndexHeaderCandidates.end() && (*it)->nChainWork < pindex->nChainWork; it++) {\n+            if (pindex->GetAncestor((*it)->nHeight) == *it) {\n+                // it should be removed - we only keep the tip of potential\n+                // chains, not anything in them. At this point we should be\n+                // consistent by adding pindex, there should be more more work\n+                // to do here.\n+                setBlockIndexHeaderCandidates.erase(it);\n+                break;\n+                parent_present = true;\n+            }\n+        }\n+    }\n+\n+    if (!parent_present && !no_descendants) {\n+        // Scan higher-work entries to check that we're not a parent of some\n+        // other candidate(s). If a parent of ours was already present then we\n+        // can be certain that no such child is also a candidate, so we can\n+        // skip the whole scan.\n+        for (auto it = setBlockIndexHeaderCandidates.rbegin(); it != setBlockIndexHeaderCandidates.rend() && (*it)->nChainWork > pindex->nChainWork; it++) {\n+            if ((*it)->GetAncestor(pindex->nHeight) == pindex) {\n+                // pindex is useless - even if there are other tips based on it\n+                // which we want in setBlockIndexHeaderCandidates, we're not\n+                // gonna find them here.\n+                return;\n+            }\n+        }\n+    }\n+\n+    setBlockIndexHeaderCandidates.insert(pindex);\n+}\n+\n+const CBlockIndex* CChainState::GetBestHeader() {\n+    LOCK(cs_main);\n+    auto it = setBlockIndexHeaderCandidates.rbegin();\n+    if (it == setBlockIndexHeaderCandidates.rend())\n+        return nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r212825173",
      "id" : 212825173,
      "in_reply_to_id" : 209428169,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjgyNTE3Mw==",
      "original_commit_id" : "7b2a938fa5ddbf3e91ada314bce65b4b86c66982",
      "original_position" : 176,
      "path" : "src/validation.cpp",
      "position" : 172,
      "pull_request_review_id" : 149537265,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T08:48:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212825173",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.\r\n\r\nI added commits to explicitly handle cases where `GetBestHeader()` returns `nullptr` in `validation.cpp`. Both cases are UI related and don't seem very important, so they're handled in a fairly lazy way.\r\n\r\nI added a commit to make header count fall back to block height in `getblockchaininfo` (`rpc/blockchain.cpp`).\r\n\r\nThat leaves `net_processing.cpp`, where I'm not sure what to do:\r\n\r\n* one existing assert in:\r\n https://github.com/bitcoin/bitcoin/blob/9ce44d8156576c58390a10007b60f507d107d042/src/net_processing.cpp#L3308\r\n* one deference `->GetBlockTime()` in `BlockRequestAllowed`\r\n* one dereference in `->GetBlockTime()`` in `ProcessGetBlockData`\r\n* one passing the pointer on to `connman` in `ProcessHeadersMessage`\r\n* passing into `chainActive.GetLocator` in `ProcessMessage`\r\n\r\nOriginal commit where `pindexBestHeader` was replaced by `GetBestHeader()` for reference: https://github.com/bitcoin/bitcoin/pull/12138/commits/8525f50c369e737098f785c6867d89f392b77f95\r\n\r\nI'm not sure if those are safe.\r\n\r\nPerhaps there should be a guarantee that `GetBestHeader()` returns the last known valid block (worst case genesis), by inserting that whenever the last entry is deleted?",
      "created_at" : "2018-08-26T14:12:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#issuecomment-416041790",
      "id" : 416041790,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13937",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNjA0MTc5MA==",
      "updated_at" : "2018-08-26T14:26:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/416041790",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-08-31T15:56:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#issuecomment-417709041",
      "id" : 417709041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13937",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNzcwOTA0MQ==",
      "updated_at" : "2018-08-31T15:56:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/417709041",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased. I'll hold back on addressing specific feedback until there's some high level agreement on whether this is useful at all.",
      "created_at" : "2018-10-30T08:50:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#issuecomment-434218370",
      "id" : 434218370,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13937",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNDIxODM3MA==",
      "updated_at" : "2018-10-30T08:50:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434218370",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229479718"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229479718"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is dead code. The `parent_present = true;` is not meant to be after `break;` in this scope? :-)",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-10-30T20:46:47Z",
      "diff_hunk" : "@@ -1281,6 +1315,130 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) E\n     CheckForkWarningConditions();\n }\n \n+/**\n+ * Called when a header (re-)reached BLOCK_VALID_TREE.\n+ *\n+ * setBlockIndexHeaderCandidates is a bit more complicated than\n+ * setBlockIndexCandidates as setBlockIndexCandidates can be rather lazy\n+ * as everything in it is about to be connected. In our case, we may have many\n+ * headers above the tip leading down different chains, for which we really\n+ * only want to keep the tip of each chain.\n+ *\n+ * Works even if chainActive is empty!\n+ *\n+ * If chain_ordered_inertion, we assume that if pindex->pprev was previously a\n+ * header candidate, it will be when we're called. ie we assume that there are\n+ * no header candidates which are parents of us except for possibly our direct\n+ * parent.\n+ *\n+ * no_descendants allows us to make a similar, but inverted, assumption -\n+ * assuming no descendant blocks may be header candidates.\n+ */\n+void CChainState::MaybeAddNewHeaderCandidate(CBlockIndex* pindex, bool chain_ordered_insertion, bool no_descendants) {\n+    if (!pindex->IsValid(BLOCK_VALID_TREE)) return; // We only want things that have a valid header tree\n+\n+    bool lower_work = chainActive.Tip() != nullptr && chainActive.Tip()->nChainWork > pindex->nChainWork;\n+    if (lower_work) return; // We don't want things with less work than our current tip\n+\n+    bool parent_present = false;\n+    if (pindex->pprev && setBlockIndexHeaderCandidates.count(pindex->pprev)) {\n+        // If the parent is a previous candidate, then no parents of it could\n+        // be candidates, either. This is the only thing we need to check by\n+        // definition of chain_ordered_insertion, however even in the case of\n+        // !chain_ordered_insertion, if this is true, no need to do a full\n+        // parent scan (as no further-up parent can be a candidate, either).\n+        setBlockIndexHeaderCandidates.erase(pindex->pprev);\n+        parent_present = true;\n+    } else if (!chain_ordered_insertion) {\n+        // We are being called in a for(p : mapBlockIndex) loop, so can make no\n+        // assumptions about existing entries. Scan all other entries to check\n+        // if we're a descendant of some other candidate.\n+        for (auto it = setBlockIndexHeaderCandidates.begin(); it != setBlockIndexHeaderCandidates.end() && (*it)->nChainWork < pindex->nChainWork; it++) {\n+            if (pindex->GetAncestor((*it)->nHeight) == *it) {\n+                // it should be removed - we only keep the tip of potential\n+                // chains, not anything in them. At this point we should be\n+                // consistent by adding pindex, there should be more more work\n+                // to do here.\n+                setBlockIndexHeaderCandidates.erase(it);\n+                break;\n+                parent_present = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229479718",
      "id" : 229479718,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ3OTcxOA==",
      "original_commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "original_position" : 145,
      "path" : "src/validation.cpp",
      "position" : 145,
      "pull_request_review_id" : 169991931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T20:46:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229479718",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229479982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229479982"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"going to find them here.\" :-)",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-10-30T20:47:32Z",
      "diff_hunk" : "@@ -1281,6 +1315,130 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) E\n     CheckForkWarningConditions();\n }\n \n+/**\n+ * Called when a header (re-)reached BLOCK_VALID_TREE.\n+ *\n+ * setBlockIndexHeaderCandidates is a bit more complicated than\n+ * setBlockIndexCandidates as setBlockIndexCandidates can be rather lazy\n+ * as everything in it is about to be connected. In our case, we may have many\n+ * headers above the tip leading down different chains, for which we really\n+ * only want to keep the tip of each chain.\n+ *\n+ * Works even if chainActive is empty!\n+ *\n+ * If chain_ordered_inertion, we assume that if pindex->pprev was previously a\n+ * header candidate, it will be when we're called. ie we assume that there are\n+ * no header candidates which are parents of us except for possibly our direct\n+ * parent.\n+ *\n+ * no_descendants allows us to make a similar, but inverted, assumption -\n+ * assuming no descendant blocks may be header candidates.\n+ */\n+void CChainState::MaybeAddNewHeaderCandidate(CBlockIndex* pindex, bool chain_ordered_insertion, bool no_descendants) {\n+    if (!pindex->IsValid(BLOCK_VALID_TREE)) return; // We only want things that have a valid header tree\n+\n+    bool lower_work = chainActive.Tip() != nullptr && chainActive.Tip()->nChainWork > pindex->nChainWork;\n+    if (lower_work) return; // We don't want things with less work than our current tip\n+\n+    bool parent_present = false;\n+    if (pindex->pprev && setBlockIndexHeaderCandidates.count(pindex->pprev)) {\n+        // If the parent is a previous candidate, then no parents of it could\n+        // be candidates, either. This is the only thing we need to check by\n+        // definition of chain_ordered_insertion, however even in the case of\n+        // !chain_ordered_insertion, if this is true, no need to do a full\n+        // parent scan (as no further-up parent can be a candidate, either).\n+        setBlockIndexHeaderCandidates.erase(pindex->pprev);\n+        parent_present = true;\n+    } else if (!chain_ordered_insertion) {\n+        // We are being called in a for(p : mapBlockIndex) loop, so can make no\n+        // assumptions about existing entries. Scan all other entries to check\n+        // if we're a descendant of some other candidate.\n+        for (auto it = setBlockIndexHeaderCandidates.begin(); it != setBlockIndexHeaderCandidates.end() && (*it)->nChainWork < pindex->nChainWork; it++) {\n+            if (pindex->GetAncestor((*it)->nHeight) == *it) {\n+                // it should be removed - we only keep the tip of potential\n+                // chains, not anything in them. At this point we should be\n+                // consistent by adding pindex, there should be more more work\n+                // to do here.\n+                setBlockIndexHeaderCandidates.erase(it);\n+                break;\n+                parent_present = true;\n+            }\n+        }\n+    }\n+\n+    if (!parent_present && !no_descendants) {\n+        // Scan higher-work entries to check that we're not a parent of some\n+        // other candidate(s). If a parent of ours was already present then we\n+        // can be certain that no such child is also a candidate, so we can\n+        // skip the whole scan.\n+        for (auto it = setBlockIndexHeaderCandidates.rbegin(); it != setBlockIndexHeaderCandidates.rend() && (*it)->nChainWork > pindex->nChainWork; it++) {\n+            if ((*it)->GetAncestor(pindex->nHeight) == pindex) {\n+                // pindex is useless - even if there are other tips based on it\n+                // which we want in setBlockIndexHeaderCandidates, we're not\n+                // gonna find them here.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229479982",
      "id" : 229479982,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ3OTk4Mg==",
      "original_commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "original_position" : 159,
      "path" : "src/validation.cpp",
      "position" : 159,
      "pull_request_review_id" : 169992259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T20:47:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229479982",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229480065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229480065"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be insertion?",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-10-30T20:47:48Z",
      "diff_hunk" : "@@ -1281,6 +1315,130 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) E\n     CheckForkWarningConditions();\n }\n \n+/**\n+ * Called when a header (re-)reached BLOCK_VALID_TREE.\n+ *\n+ * setBlockIndexHeaderCandidates is a bit more complicated than\n+ * setBlockIndexCandidates as setBlockIndexCandidates can be rather lazy\n+ * as everything in it is about to be connected. In our case, we may have many\n+ * headers above the tip leading down different chains, for which we really\n+ * only want to keep the tip of each chain.\n+ *\n+ * Works even if chainActive is empty!\n+ *\n+ * If chain_ordered_inertion, we assume that if pindex->pprev was previously a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229480065",
      "id" : 229480065,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ4MDA2NQ==",
      "original_commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "original_position" : 110,
      "path" : "src/validation.cpp",
      "position" : 110,
      "pull_request_review_id" : 169992375,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T20:47:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229480065",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229480577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229480577"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"Don't\" :-)",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-10-30T20:49:19Z",
      "diff_hunk" : "@@ -107,10 +108,36 @@ class CChainState {\n private:\n     /**\n      * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n-     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n-     * missing the data for the block.\n+     * as good as our current tip or better. Pruning nodes may be missing the data for the block.\n      */\n     std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+    /**\n+     * The set of all leaf CBlockIndex entries with BLOCK_VALID_TREE (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries here are potential future candidates for insertion\n+     * into setBlockIndexCandidates, once we get all the required block data. Thus, entries here\n+     * represent chains on which we should be actively downloading block data.\n+     *\n+     * Note that we define \"as good as our current tip or better\" slightly differently here than in\n+     * setBlockIndexCandidates - we include things which will have a higher nSequence (but have the\n+     * same chain work) here, but do not include such entries in setBlockIndexCandidates. This is\n+     * because we prefer to also download towards chains which have the same total work as our current\n+     * chain (as an optimization since a reorg is very possible in such cases).\n+     *\n+     * Note that, unlike setBlockIndexCandidates, we only store \"leaf\" entries here, as we are not as\n+     * aggressively prune-able (setBlockIndexCandidates are things which we can, and usually do, try to\n+     * connect immediately, and thus entries dont stick around for long). Thus, it may be the case that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229480577",
      "id" : 229480577,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ4MDU3Nw==",
      "original_commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "original_position" : 31,
      "path" : "src/validation.cpp",
      "position" : 31,
      "pull_request_review_id" : 169993028,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T20:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229480577",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229480628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229480628"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"Don't\" :-)",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-10-30T20:49:29Z",
      "diff_hunk" : "@@ -3470,31 +3675,38 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     // not process unrequested blocks.\n     bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n-    // TODO: Decouple this function from the block download logic by removing fRequested\n-    // This requires some new chain data structure to efficiently look up if a\n-    // block is in a chain leading to a candidate for best tip, despite not\n-    // being such a candidate itself.\n-\n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n-    if (!fRequested) {  // If we didn't ask for it:\n-        if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned\n-        if (!fHasMoreOrSameWork) return true; // Don't process less-work chains\n-        if (fTooFarAhead) return true;        // Block height is too high\n-\n-        // Protect against DoS attacks from low-work chains.\n-        // If our tip is behind, a peer could try to send us\n-        // low-work blocks on a fake chain that we would never\n-        // request; don't process these.\n-        if (pindex->nChainWork < nMinimumChainWork) return true;\n+    if (!pindex->IsValid(BLOCK_VALID_TREE)) return true; // Parent block somewhere is invalid\n+    if (pindex->nTx != 0) return true;                   // This is a previously-processed block that was pruned\n+    if (fTooFarAhead) return true;                       // Block height is too high\n+\n+    bool parent_of_header_candidate = false;\n+    bool parent_of_min_chainwork_header_candidate = false;\n+    for (auto it = setBlockIndexHeaderCandidates.rbegin(); it != setBlockIndexHeaderCandidates.rend(); it++) {\n+        if ((*it)->GetAncestor(pindex->nHeight) == pindex) {\n+            parent_of_header_candidate = true;\n+            // Protect against DoS attacks from low-work chains.\n+            // If our tip is behind, a peer could try to send us\n+            // low-work blocks on a fake chain that we would never\n+            // request; don't process these.\n+            if ((*it)->nChainWork >= nMinimumChainWork) {\n+                parent_of_min_chainwork_header_candidate = true;\n+                break;\n+            }\n+        }\n+    }\n+    if (!fHasMoreOrSameWork && !parent_of_header_candidate) return true; // We dont think this block leads somewhere interesting",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229480628",
      "id" : 229480628,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ4MDYyOA==",
      "original_commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "original_position" : 507,
      "path" : "src/validation.cpp",
      "position" : 507,
      "pull_request_review_id" : 169993101,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T20:49:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229480628",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229481129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229481129"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `setBlockIndexHeaderCandidates.count(pindex->pprev) > 0` to improve readability and avoid implicit conversion.",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-10-30T20:51:00Z",
      "diff_hunk" : "@@ -1281,6 +1315,130 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) E\n     CheckForkWarningConditions();\n }\n \n+/**\n+ * Called when a header (re-)reached BLOCK_VALID_TREE.\n+ *\n+ * setBlockIndexHeaderCandidates is a bit more complicated than\n+ * setBlockIndexCandidates as setBlockIndexCandidates can be rather lazy\n+ * as everything in it is about to be connected. In our case, we may have many\n+ * headers above the tip leading down different chains, for which we really\n+ * only want to keep the tip of each chain.\n+ *\n+ * Works even if chainActive is empty!\n+ *\n+ * If chain_ordered_inertion, we assume that if pindex->pprev was previously a\n+ * header candidate, it will be when we're called. ie we assume that there are\n+ * no header candidates which are parents of us except for possibly our direct\n+ * parent.\n+ *\n+ * no_descendants allows us to make a similar, but inverted, assumption -\n+ * assuming no descendant blocks may be header candidates.\n+ */\n+void CChainState::MaybeAddNewHeaderCandidate(CBlockIndex* pindex, bool chain_ordered_insertion, bool no_descendants) {\n+    if (!pindex->IsValid(BLOCK_VALID_TREE)) return; // We only want things that have a valid header tree\n+\n+    bool lower_work = chainActive.Tip() != nullptr && chainActive.Tip()->nChainWork > pindex->nChainWork;\n+    if (lower_work) return; // We don't want things with less work than our current tip\n+\n+    bool parent_present = false;\n+    if (pindex->pprev && setBlockIndexHeaderCandidates.count(pindex->pprev)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229481129",
      "id" : 229481129,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ4MTEyOQ==",
      "original_commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "original_position" : 125,
      "path" : "src/validation.cpp",
      "position" : 125,
      "pull_request_review_id" : 169993766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T20:51:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229481129",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229481371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229481371"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`setBlockIndexHeaderCandidates.erase(pindex) > 0` to improve readability and avoid implicit conversion.",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-10-30T20:51:38Z",
      "diff_hunk" : "@@ -2958,10 +3155,18 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n             CBlockIndex *pindex = queue.front();\n             queue.pop_front();\n             pindex->nChainTx = (pindex->pprev ? pindex->pprev->nChainTx : 0) + pindex->nTx;\n+            // Make sure to remove from sets which are indexed by nSequenceId first...\n+            bool was_header_candidate = setBlockIndexHeaderCandidates.erase(pindex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229481371",
      "id" : 229481371,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ4MTM3MQ==",
      "original_commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "original_position" : 443,
      "path" : "src/validation.cpp",
      "position" : 443,
      "pull_request_review_id" : 169994061,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T20:51:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229481371",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229481687"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229481687"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`setBlockIndexHeaderCandidates.count(pindex) > 0` to improve readability and avoid implicit conversion :-)",
      "commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "created_at" : "2018-10-30T20:52:38Z",
      "diff_hunk" : "@@ -4550,22 +4771,46 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n             // Checks for not-invalid blocks.\n             assert((pindex->nStatus & BLOCK_FAILED_MASK) == 0); // The failed mask cannot be set for blocks without invalid parents.\n         }\n-        if (!CBlockIndexWorkComparator()(pindex, chainActive.Tip()) && pindexFirstNeverProcessed == nullptr) {\n-            if (pindexFirstInvalid == nullptr) {\n-                // If this block sorts at least as good as the current tip and\n-                // is valid and we have all data for its parents, it must be in\n-                // setBlockIndexCandidates.  chainActive.Tip() must also be there\n-                // even if some data has been pruned.\n-                if (pindexFirstMissing == nullptr || pindex == chainActive.Tip()) {\n-                    assert(setBlockIndexCandidates.count(pindex));\n-                }\n-                // If some parent is missing, then it could be that this block was in\n-                // setBlockIndexCandidates but had to be removed because of the missing data.\n-                // In this case it must be in mapBlocksUnlinked -- see test below.\n+        if (pindex->nStatus & BLOCK_FAILED_CHILD) {\n+            // Blocks which failed with \"CHILD\" must have an invalid parent\n+            assert(pindexFirstInvalid);\n+            assert(pindexFirstInvalid != pindex);\n+            assert(!(pindex->nStatus & BLOCK_FAILED_VALID));\n+        }\n+        if (pindex->nStatus & BLOCK_FAILED_VALID) {\n+            assert(!(pindex->nStatus & BLOCK_FAILED_CHILD));\n+        }\n+        if (!CBlockIndexWorkComparator()(pindex, chainActive.Tip()) && pindexFirstNeverProcessed == nullptr && pindexFirstInvalid == nullptr) {\n+            // If this block sorts at least as good as the current tip and\n+            // is valid and we have all data for its parents, it must be in\n+            // setBlockIndexCandidates.  chainActive.Tip() must also be there\n+            // even if some data has been pruned.\n+            if (pindexFirstMissing == nullptr || pindex == chainActive.Tip()) {\n+                assert(setBlockIndexCandidates.count(pindex));\n             }\n-        } else { // If this block sorts worse than the current tip or some ancestor's block has never been seen, it cannot be in setBlockIndexCandidates.\n+            // If some parent is missing, then it could be that this block was in\n+            // setBlockIndexCandidates but had to be removed because of the missing data.\n+            // In this case it must be in mapBlocksUnlinked -- see test below.\n+        } else { // If this block sorts worse than the current tip or some ancestor's block has never been seen or is invalid, it cannot be in setBlockIndexCandidates.\n             assert(setBlockIndexCandidates.count(pindex) == 0);\n         }\n+        bool must_be_header_candidate_if_leaf = false;\n+        if (pindex->nChainWork < chainActive.Tip()->nChainWork) {\n+            // Irrespective of pruned-ness, if this block sorts worse than the current tip, it cannot be in setBlockIndexHeaderCandidates\n+            assert(setBlockIndexHeaderCandidates.count(pindex) == 0);\n+        } else if (pindexFirstInvalid == nullptr) {\n+            // If pindex is a leaf node and sorts at the same or greater height\n+            // than chainActive.Tip(), it must be in setBlockIndexHeaderCandidates.\n+            must_be_header_candidate_if_leaf = true;\n+        }\n+        if (setBlockIndexHeaderCandidates.count(pindex)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#discussion_r229481687",
      "id" : 229481687,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTQ4MTY4Nw==",
      "original_commit_id" : "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "original_position" : 656,
      "path" : "src/validation.cpp",
      "position" : 656,
      "pull_request_review_id" : 169994468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13937",
      "updated_at" : "2018-10-30T20:52:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229481687",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Abandoning for now. Consider it up for grabs, but I suggest getting concept ACKs before trying to rebase.",
      "created_at" : "2018-11-30T10:58:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#issuecomment-443168600",
      "id" : 443168600,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13937",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MzE2ODYwMA==",
      "updated_at" : "2018-11-30T10:58:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/443168600",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Since this is marked up for grabs, it might be useful to say what motivations for this change are.\r\n\r\nIt looks like it was brought up in IRC on 12/1 in the context of \"SPV sync\" but the relationship seems unclear. (I believe \"SPV sync\" refers to downloading blocks out of order during initial sync so wallet can show unvalidated transactions and be usable before the sync finishes.)",
      "created_at" : "2018-12-03T16:30:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#issuecomment-443773740",
      "id" : 443773740,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13937",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0Mzc3Mzc0MA==",
      "updated_at" : "2018-12-03T16:30:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/443773740",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky it started out here: https://github.com/bitcoin/bitcoin/pull/9483#issuecomment-349790765, so just one step to make it easier to sync headers and fresh blocks first, and then catch up on historical blocks later.",
      "created_at" : "2018-12-04T09:55:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13937#issuecomment-444039967",
      "id" : 444039967,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13937",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NDAzOTk2Nw==",
      "updated_at" : "2018-12-04T09:56:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/444039967",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
