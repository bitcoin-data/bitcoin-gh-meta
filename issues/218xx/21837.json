{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "This proof of concept PR (leveraging work done by Cory Fields & Jeremy Rubin, see #16834) replaces the [rolling bloom filter](https://github.com/bitcoin/bitcoin/blob/2448457cca1858c2fcf3dfcb53de3f388ea72079/src/bloom.cpp#L173) used for [`m_addr_known`](https://github.com/bitcoin/bitcoin/blob/2448457cca1858c2fcf3dfcb53de3f388ea72079/src/net.h#L550) with a [Cuckoo Filter written in Rust](https://github.com/axiomhq/rust-cuckoofilter). I've have made some minor build related adjustments to the Rust code, which can be seen here: https://github.com/fanquake/rust-cuckoofilter/tree/cabi_build_adjustments.\r\n\r\nSee [\"Cuckoo Filter: Practically Better Than Bloom\"](https://www.cs.cmu.edu/~dga/papers/cuckoo-conext2014.pdf):\r\n\r\n> In many networking systems, Bloom filters are used for high-speed set membership tests. They permit a small fraction of false positive answers with very good space efficiency. However, they do not permit deletion of items from the set, and previous attempts to extend âstandardâ Bloom filters to support deletion all degrade either space or performance.\r\n\r\n> We propose a new data structure called the cuckoo filter that can replace Bloom filters for approximate set member- ship tests. Cuckoo filters support adding and removing items dynamically while achieving even higher performance than Bloom filters. \r\n\r\n> For applications that store many items and target moderately low false positive rates, cuckoo filters have lower space overhead than space-optimized Bloom filters. Our experimental results also show that cuckoo filters out-perform previous data structures that extend Bloom filters to support deletions substantially in both time and space.\r\n\r\nUsing this is a matter of:\r\n```bash\r\n./autogen.sh\r\n./configure --enable-experimental-rust\r\nmake\r\nmake -C src rusty-check\r\nsrc/bitcoind \r\n```\r\nNote that sometimes compilation will finish (i.e due to `ccache`) before `cargo` has finished generating the header and Rust lib, which will result in a compile error:\r\n```bash\r\n./net.h:43:10: fatal error: rusty/out/rcf_cuckoofilter.h: No such file or directory\r\n   43 | #include <rusty/out/rcf_cuckoofilter.h>\r\n```\r\n\r\nIn this case you can just re-run `make`. Has been tested on macOS and Linux. Sometimes `p2p_getaddr_caching.py` fails, because the number of records returned falls a few short of `MAX_ADDR_TO_SEND`. Need investigating.\r\n\r\nI'm not suggesting that this be merged as-is, or that this is the ideal way of integrating Rust code (i.e copying sources in tree, using `cbindgen`), into Bitcoin Core. What I am suggesting is that the Rust discussion should continue, particularly in regards to integrations that can be done in a very non-invasive / modular fashion.\r\n\r\nDoesn't crash, but may catch your machine on fire ð¥, use with caution. More Rust related discussion available in #17090.",
   "closed_at" : "2021-06-09T07:58:14Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 3,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21837/comments",
   "created_at" : "2021-05-03T04:37:39Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21837/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/21837",
   "id" : 874218642,
   "labels" : [
      {
         "color" : "ebd775",
         "default" : false,
         "description" : null,
         "id" : 64584,
         "name" : "Brainstorming",
         "node_id" : "MDU6TGFiZWw2NDU4NA==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      },
      {
         "color" : "006b75",
         "default" : false,
         "description" : null,
         "id" : 98298007,
         "name" : "P2P",
         "node_id" : "MDU6TGFiZWw5ODI5ODAwNw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21837/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NjI4ODIyNTI2",
   "number" : 21837,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/21837.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21837",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/21837.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21837"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "[POC] Rust based Cuckoo Filter for m_addr_known",
   "updated_at" : "2021-06-09T07:58:14Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21837",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   }
}
