{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "Currently, if the tracepoints are compiled (e.g. in depends and release builds), we always prepare the tracepoint arguments regardless of the tracepoints being used or not. We made sure that the argument preparation is as cheap as possible, but we can almost completely eliminate any overhead for users not interested in the tracepoints (the vast majority), by gating the tracepoint argument preparation with an `if(something is attached to this tracepoint)`. To achieve this, we use the optional semaphore feature provided by SystemTap.\r\n\r\nThe first commit simplifies and deduplicates our tracepoint macros from 13 TRACEn macros to a single TRACEPOINT macro. This makes them easier to use and also avoids more duplicate macro definitions in the second commit. These changes should be compatible with https://github.com/bitcoin/bitcoin/pull/25541 and both https://github.com/bitcoin/bitcoin/pull/25832 and https://github.com/bitcoin/bitcoin/pull/26531 should be trivial to rebase and adopt to this.\r\n\r\nThe Linux tracing tools I'm aware of (bcc, bpftrace, libbpf, and systemtap) all support the semaphore gating feature. Thus, all existing tracepoints and their argument preparation is gated in the second commit. By default, all tracepoints using the `TRACEPOINT(event, context)` are gated. There's also a  `TRACEPOINT_UNCHECKED(event, context)` macro which can be used if argument preparation needs to happen over multiple lines or based on other criteria. For details, please refer to the commit messages and the updated documentation in `doc/tracing.md`.\r\n\r\nReviewers might want to check:\r\n- Do the tracepoints still work for you? Do the examples in `contrib/tracing/` run on your system (as bpftrace frequently breaks on every new version, please test master too if it should't work for you)? Do the CI interface tests still pass?\r\n- Is the new documentation clear? \r\n- As a demonstration that the tracepoint gating works, https://github.com/0xB10C/bitcoin/commit/82f2fd56a8aba11719df41f6fc28fb03afe6d207 extends the PR branch. Here is the [Cirrus CI output](https://cirrus-ci.com/task/5951638188326912) for the task running the USDT interface tests on this commit. Do you agree that this demonstrates that the semaphore gating works for TRACEPOINT_UNCHECKED tracepoints?\r\n- The `TRACEPOINT_SEMAPHORE(event, context)` macros places global variables in our global namespace. Is this something we strictly want to avoid or maybe move to all `TRACEPOINT_SEMAPHORE`s to a separate .cpp file or even namespace? I like having the `TRACEPOINT_SEMAPHORE()` in same file as the `TRACEPOINT()`, but open for suggestion on alternative approaches. \r\n\r\nThese links might provide more contextual information for reviewers:\r\n- [How SystemTap Userspace Probes Work by eklitzke](https://eklitzke.org/how-sytemtap-userspace-probes-work) (actually an example on Bitcoin Core; mentions that with semaphores \"the overhead for an untraced process is effectively zero.\")\r\n- [libbpf comment on USDT semaphore handling](https://github.com/libbpf/libbpf/blob/1596a09b5de2a50ab8d44218fc29b6d42f886305/src/usdt.c#L83-L92) (can recommend the whole comment for background on how the tracepoints and tracing tools work together)\r\n- https://sourceware.org/systemtap/wiki/UserSpaceProbeImplementation#Semaphore_Handling",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593/comments",
   "created_at" : "2022-11-28T20:50:26Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593",
   "id" : 1467073842,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585D1g33",
   "number" : 26593,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/26593.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26593",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/26593.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26593"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593/timeline",
   "title" : "tracing: Only prepare tracepoint arguments when actually tracing",
   "updated_at" : "2022-11-28T20:54:02Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26593",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
      "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
      "followers_url" : "https://api.github.com/users/0xB10C/followers",
      "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/0xB10C",
      "id" : 19157360,
      "login" : "0xB10C",
      "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
      "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
      "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
      "repos_url" : "https://api.github.com/users/0xB10C/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/0xB10C"
   }
}
