[
   {
      "author_association" : "MEMBER",
      "body" : "Compile failure on macOS (10.14.2):\r\n```\r\n./autogen.sh\r\n./configure\r\nmake check\r\n\r\n  CXX      libbitcoin_util_a-logging.o\r\n  CXX      libbitcoin_util_a-random.o\r\nrandom.cpp:394:41: error: expected ';' after top level declarator\r\nstatic unsigned char rng_state[32] = {0} GUARDED_BY(cs_rng_state);\r\n                                        ^\r\n                                        ;\r\nrandom.cpp:394:42: warning: declaration does not declare anything [-Wmissing-declarations]\r\nstatic unsigned char rng_state[32] = {0} GUARDED_BY(cs_rng_state);\r\n                                         ^\r\n./threadsafety.h:18:23: note: expanded from macro 'GUARDED_BY'\r\n#define GUARDED_BY(x) __attribute__((guarded_by(x)))\r\n                      ^\r\nrandom.cpp:395:32: error: expected ';' after top level declarator\r\nstatic uint64_t rng_counter = 0 GUARDED_BY(cs_rng_state);\r\n                               ^\r\n                               ;\r\nrandom.cpp:395:33: warning: declaration does not declare anything [-Wmissing-declarations]\r\nstatic uint64_t rng_counter = 0 GUARDED_BY(cs_rng_state);\r\n                                ^\r\n./threadsafety.h:18:23: note: expanded from macro 'GUARDED_BY'\r\n#define GUARDED_BY(x) __attribute__((guarded_by(x)))\r\n                      ^\r\n2 warnings and 2 errors generated.\r\nmake[2]: *** [libbitcoin_util_a-random.o] Error 1\r\nmake[1]: *** [check-recursive] Error 1\r\nmake: *** [check-recursive] Error 1\r\n```",
      "created_at" : "2018-12-14T04:33:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447210304",
      "id" : 447210304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzIxMDMwNA==",
      "updated_at" : "2018-12-14T04:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447210304",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Might be desirable to stick the openssl stuff behind a define already,  I expect we'll be able to ship 0.18 without linking bitcoind to openssl. ",
      "created_at" : "2018-12-14T06:04:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447223906",
      "id" : 447223906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzIyMzkwNg==",
      "updated_at" : "2018-12-14T06:04:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447223906",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fanquake Hopefully fixed.\n\n@gmaxwell There are probably a few entropy sources we want to add first, I think.",
      "created_at" : "2018-12-14T07:08:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447235764",
      "id" : 447235764,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzIzNTc2NA==",
      "updated_at" : "2018-12-14T07:08:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447235764",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa I am eager to add entropy sources!  (but I meant behind a ifdef that is currently on... just since I think you're touching the only remaining callsites)",
      "created_at" : "2018-12-14T07:44:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447242460",
      "id" : 447242460,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzI0MjQ2MA==",
      "updated_at" : "2018-12-14T07:44:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447242460",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#13746](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13746.html) (-masterdatadir for datadir bootstrapping by kallewoof)\n* [#13339](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13339.html) (wallet: Replace %w by wallet name in -walletnotify script by promag)\n* [#11082](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11082.html) (Add new bitcoin_rw.conf file that is used for settings modified by this software itself by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-12-14T08:39:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447254979",
      "id" : 447254979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzI1NDk3OQ==",
      "updated_at" : "2019-01-17T11:05:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447254979",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745482"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Surround `RandAddSeedPerfmon(CSHA512& hasher)` with `#ifdef WIN32`?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T12:54:51Z",
      "diff_hunk" : "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);\n+    // Write resulting strengthened hash into output hasher\n+    local_hasher.Finalize(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // Best effort clean up\n+    memory_cleanse(buffer, sizeof(buffer));\n+    local_hasher.Reset();\n }\n \n-static void RandAddSeedPerfmon()\n+static void RandAddSeedPerfmon(CSHA512& hasher)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745482",
      "id" : 241745482,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NTQ4Mg==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 84,
      "path" : "src/random.cpp",
      "position" : 78,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745482",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745648"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`#ifdef WIN32` for this call?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T12:55:30Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745648",
      "id" : 241745648,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NTY0OA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 195,
      "path" : "src/random.cpp",
      "position" : 333,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745648",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745852"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Make sure definition and declaration parameter names match.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T12:56:23Z",
      "diff_hunk" : "@@ -345,12 +440,26 @@ void GetStrongRandBytes(unsigned char* out, int num)\n         hasher.Finalize(buf);\n         memcpy(rng_state, buf + 32, 32);\n     }\n+    if (num > 0) {\n+        memcpy(out, buf, num);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting state (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        CSHA512().Write(buf, sizeof(buf)).Finalize(buf);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_add(buf, sizeof(buf), 64);\n+    }\n+\n+    // Best effort clean up of randomness data on the stack.\n+    memory_cleanse(buf, sizeof(buf));\n+    hasher.Reset();\n }\n \n+void GetRandBytes(unsigned char* out, int num) { ProcRand(out, num, RNGLevel::FAST); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745852",
      "id" : 241745852,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NTg1Mg==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 305,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241745852",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746192"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Change to `return stop != start;`?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T12:57:53Z",
      "diff_hunk" : "@@ -448,10 +557,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.\n-    RAND_add((const unsigned char*)&start, sizeof(start), 1);\n-    RAND_add((const unsigned char*)&stop, sizeof(stop), 1);\n-\n     return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746192",
      "id" : 241746192,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NjE5Mg==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 320,
      "path" : "src/random.cpp",
      "position" : 469,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746192",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746569"
         }
      },
      "author_association" : "MEMBER",
      "body" : "~~`ProcRand(Ã¢ÂÂ¦)` doesn't throw Ã¢ÂÂ candidate for `noexcept`?~~",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T12:59:24Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746569",
      "id" : 241746569,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NjU2OQ==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 238,
      "path" : "src/random.cpp",
      "position" : 358,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746569",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746664"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be \"meaningfully\" :-)",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T12:59:45Z",
      "diff_hunk" : "@@ -13,33 +13,45 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n-\n /**\n- * Functions to gather random data via the OpenSSL PRNG\n+ * Generate random data via the internal PRNG.\n+ *\n+ * These functions are designed to be fast (sub microsecond), but do not necessarily\n+ * meaninfully add entropy to the PRNG state.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746664",
      "id" : 241746664,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc0NjY2NA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 12,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241746664",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241752164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241752164"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Very minor nit: Likely a matter of taste, but personally I try to avoid parameter reassignment. Would it be possible to avoid parameter reassignment and make the parameter `level` const? Feel free to ignore this suggestion.",
      "commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "created_at" : "2018-12-14T13:21:35Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n {\n     assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    std::call_once(g_rng_initialized, [&](){\n+        // The first invocation of the RNG always gathers all we have.\n+        level = RNGLevel::STARTUP;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241752164",
      "id" : 241752164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTc1MjE2NA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 250,
      "path" : "src/random.cpp",
      "position" : 250,
      "pull_request_review_id" : 185096424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2018-12-14T13:22:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241752164",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858285"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No need for. Perhaps we'll extend the function to do something useful on other platforms too.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T19:05:48Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858285",
      "id" : 241858285,
      "in_reply_to_id" : 241745648,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTg1ODI4NQ==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 195,
      "path" : "src/random.cpp",
      "position" : 333,
      "pull_request_review_id" : 185243981,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858285",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd rather not. Limiting the ifdefs to just one place is preferable imo.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T19:06:25Z",
      "diff_hunk" : "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);\n+    // Write resulting strengthened hash into output hasher\n+    local_hasher.Finalize(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // Best effort clean up\n+    memory_cleanse(buffer, sizeof(buffer));\n+    local_hasher.Reset();\n }\n \n-static void RandAddSeedPerfmon()\n+static void RandAddSeedPerfmon(CSHA512& hasher)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858449",
      "id" : 241858449,
      "in_reply_to_id" : 241745482,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTg1ODQ0OQ==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 84,
      "path" : "src/random.cpp",
      "position" : 78,
      "pull_request_review_id" : 185244208,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858449",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858504"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not touching this code.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T19:06:35Z",
      "diff_hunk" : "@@ -448,10 +557,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.\n-    RAND_add((const unsigned char*)&start, sizeof(start), 1);\n-    RAND_add((const unsigned char*)&stop, sizeof(stop), 1);\n-\n     return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858504",
      "id" : 241858504,
      "in_reply_to_id" : 241746192,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTg1ODUwNA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 320,
      "path" : "src/random.cpp",
      "position" : 469,
      "pull_request_review_id" : 185244261,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241858504",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241901024"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241901024"
         }
      },
      "author_association" : "MEMBER",
      "body" : "SeedTimestamp() ? ",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T21:49:14Z",
      "diff_hunk" : "@@ -135,6 +135,39 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n+{\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241901024",
      "id" : 241901024,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMTAyNA==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 25,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185297862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241901024",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902056"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902056"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe not because I think you should change the strengthening function (just the local_hasher) to 4-wide sha256d64 in order to increase the \"work\" done per unit time, and seed timestamp takes a hasher. We'll do a lot more work with sha-ni/aes and that sha256d64-4-way is probably the most optimized work function in the codebase.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T21:54:00Z",
      "diff_hunk" : "@@ -135,6 +135,39 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n+{\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902056",
      "id" : 241902056,
      "in_reply_to_id" : 241901024,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMjA1Ng==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 25,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185299264,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902056",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "SeedTimestamp()",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T21:54:53Z",
      "diff_hunk" : "@@ -272,71 +268,116 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedFast(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-void RandAddSeedSleep()\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedMedium(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n-    {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n-    }\n-    memory_cleanse(buf, 64);\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902258",
      "id" : 241902258,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMjI1OA==",
      "original_commit_id" : "ff85bace119469709c8c5446abed231cb883b1ee",
      "original_position" : 159,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185299504,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241902258",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241903570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241903570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd kinda feel better about this if it just directly took the cs_rng_state lock and read the state here instead of calling GetRandBytes... at least then the code won't mysteriously crash if someone upgrades GetRandBytes to use ::Slow.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-14T22:00:40Z",
      "diff_hunk" : "@@ -326,6 +359,19 @@ static void SeedSlow(CSHA512& hasher)\n \n     // Windows performance monitor data (once every 10 minutes)\n     RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241903570",
      "id" : 241903570,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTkwMzU3MA==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 51,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185301179,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241903570",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242359341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242359341"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It does throw when threads get interrupted apparently (as it has a sleep inside).",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-17T23:42:50Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242359341",
      "id" : 242359341,
      "in_reply_to_id" : 241746569,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM1OTM0MQ==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 238,
      "path" : "src/random.cpp",
      "position" : 358,
      "pull_request_review_id" : 185850825,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242359341",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380140"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-18T01:33:20Z",
      "diff_hunk" : "@@ -345,12 +440,26 @@ void GetStrongRandBytes(unsigned char* out, int num)\n         hasher.Finalize(buf);\n         memcpy(rng_state, buf + 32, 32);\n     }\n+    if (num > 0) {\n+        memcpy(out, buf, num);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting state (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        CSHA512().Write(buf, sizeof(buf)).Finalize(buf);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_add(buf, sizeof(buf), 64);\n+    }\n+\n+    // Best effort clean up of randomness data on the stack.\n+    memory_cleanse(buf, sizeof(buf));\n+    hasher.Reset();\n }\n \n+void GetRandBytes(unsigned char* out, int num) { ProcRand(out, num, RNGLevel::FAST); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380140",
      "id" : 242380140,
      "in_reply_to_id" : 241745852,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDE0MA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 305,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185874949,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380140",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380430"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-18T01:34:56Z",
      "diff_hunk" : "@@ -13,33 +13,45 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n-\n /**\n- * Functions to gather random data via the OpenSSL PRNG\n+ * Generate random data via the internal PRNG.\n+ *\n+ * These functions are designed to be fast (sub microsecond), but do not necessarily\n+ * meaninfully add entropy to the PRNG state.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380430",
      "id" : 242380430,
      "in_reply_to_id" : 241746664,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDQzMA==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 12,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 185875241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380430",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380554"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380554"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done (using `SeedTimestamp()`).\r\n\r\nLeaving this for now; switching to SHA256-based code requires some refactoring to make sure there are no initialization order issues.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-18T01:35:36Z",
      "diff_hunk" : "@@ -135,6 +135,39 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n+{\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380554",
      "id" : 242380554,
      "in_reply_to_id" : 241901024,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDU1NA==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 25,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185875374,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380554",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380709"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've abstracted the update-the-global-RNG-and-extract-entropy into a separate function, which is invoked from both this seeder and RandProc.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-18T01:36:36Z",
      "diff_hunk" : "@@ -326,6 +359,19 @@ static void SeedSlow(CSHA512& hasher)\n \n     // Windows performance monitor data (once every 10 minutes)\n     RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380709",
      "id" : 242380709,
      "in_reply_to_id" : 241903570,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM4MDcwOQ==",
      "original_commit_id" : "0af8348738c447f008c60bc1374221acfdc135d9",
      "original_position" : 51,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 185875546,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242380709",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Made a number of improvements, and split the history out into hopefully more self-contained commits.",
      "created_at" : "2018-12-18T01:37:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448064015",
      "id" : 448064015,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODA2NDAxNQ==",
      "updated_at" : "2018-12-18T01:37:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448064015",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--a722867cd34abeea1fadc8d60700f111-->\nGitian builds for commit 34241716852df6ea6a3543822f3bf6f886519d4b (master):\n * `d1d6d23548eb61c343c2327a13e220d2...` [bitcoin-0.17.99-aarch64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-aarch64-linux-gnu-debug.tar.gz)\n * `1ff47959686607769af07f3db44d4826...` [bitcoin-0.17.99-aarch64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-aarch64-linux-gnu.tar.gz)\n * `f5edbe704127456eb3c0325d4a06a167...` [bitcoin-0.17.99-arm-linux-gnueabihf-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-arm-linux-gnueabihf-debug.tar.gz)\n * `90ebeb5cf50d26216e000693545d08c5...` [bitcoin-0.17.99-arm-linux-gnueabihf.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-arm-linux-gnueabihf.tar.gz)\n * `d398c7f0022bc5a0cc77ee18353364c8...` [bitcoin-0.17.99-i686-pc-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-i686-pc-linux-gnu-debug.tar.gz)\n * `6c17259e4b089adee70817f75b93a25f...` [bitcoin-0.17.99-i686-pc-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-i686-pc-linux-gnu.tar.gz)\n * `7ead03541f6a39516f8ccfc92468a873...` [bitcoin-0.17.99-osx-unsigned.dmg](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-osx-unsigned.dmg)\n * `9f92a70d5325fcbcaf6f5b89c967a871...` [bitcoin-0.17.99-osx64.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-osx64.tar.gz)\n * `b83818f4a0eae8a52a4a6c90a50b0522...` [bitcoin-0.17.99-riscv64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-riscv64-linux-gnu-debug.tar.gz)\n * `4d9ba5a0ddbc542a0c014df7974317b7...` [bitcoin-0.17.99-riscv64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-riscv64-linux-gnu.tar.gz)\n * `f96490fc154fcfac5edbec4345215278...` [bitcoin-0.17.99-win32-debug.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win32-debug.zip)\n * `ddaeb9dcdb5b18cd031790075164ef90...` [bitcoin-0.17.99-win32-setup-unsigned.exe](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win32-setup-unsigned.exe)\n * `ccab3fd95296f0a8181527569749db45...` [bitcoin-0.17.99-win32.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win32.zip)\n * `fd31be63f83d415b887fa23a133211f4...` [bitcoin-0.17.99-win64-debug.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win64-debug.zip)\n * `6a460a1104b66f6c5a5538e31c1a4772...` [bitcoin-0.17.99-win64-setup-unsigned.exe](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win64-setup-unsigned.exe)\n * `8ac173e1ea072a1ba53dab78f250d635...` [bitcoin-0.17.99-win64.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-win64.zip)\n * `7bc54935f97fef0e32a270601489c8ab...` [bitcoin-0.17.99-x86_64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-x86_64-linux-gnu-debug.tar.gz)\n * `188e9d0da723b197e750405d19d3aa56...` [bitcoin-0.17.99-x86_64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99-x86_64-linux-gnu.tar.gz)\n * `30f9503807bbb65444bf41fab7068b09...` [bitcoin-0.17.99.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-0.17.99.tar.gz)\n * `869626c7bc517dac45ea54c8a81f35b3...` [bitcoin-linux-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-linux-0.18-res.yml)\n * `fddea2850131ffd01c98ee7731551e86...` [bitcoin-linux-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-linux-build.log)\n * `87eb2ef96ca4754766415f5370ecb011...` [bitcoin-osx-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-osx-0.18-res.yml)\n * `ef6db9d4b908a1b0f3c964710e9c7693...` [bitcoin-osx-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-osx-build.log)\n * `2c7f99cc67f7d8710283781eb21a488c...` [bitcoin-win-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-win-0.18-res.yml)\n * `adacb1e895d4a599bf4043304b978e04...` [bitcoin-win-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/34241716852df6ea6a3543822f3bf6f886519d4b/bitcoin-win-build.log)\n\n\nGitian builds for commit b4623b144416b203986ff7c281ee61c1779ad04f (master and this pull):\n * `6ccd7b98fe66b027b939d9359563d2e0...` [bitcoin-0.17.99-aarch64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-aarch64-linux-gnu-debug.tar.gz)\n * `a6e812ef056ab5335294459d138e1f40...` [bitcoin-0.17.99-aarch64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-aarch64-linux-gnu.tar.gz)\n * `f0b9b990f89f93517b5454423e01f162...` [bitcoin-0.17.99-arm-linux-gnueabihf-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-arm-linux-gnueabihf-debug.tar.gz)\n * `7254cb014475451abc287a85dd1a2de7...` [bitcoin-0.17.99-arm-linux-gnueabihf.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-arm-linux-gnueabihf.tar.gz)\n * `c206c505f2685a84658313c146f81a4d...` [bitcoin-0.17.99-i686-pc-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-i686-pc-linux-gnu-debug.tar.gz)\n * `0dc20d0287693d14ec08b185ab6b85ba...` [bitcoin-0.17.99-i686-pc-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-i686-pc-linux-gnu.tar.gz)\n * `7c4fde51672c75594dc1a60bb936d715...` [bitcoin-0.17.99-osx-unsigned.dmg](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-osx-unsigned.dmg)\n * `3d988fc91920c1c7e21b0f63d25d5aa9...` [bitcoin-0.17.99-osx64.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-osx64.tar.gz)\n * `c2c495125af5923d7041e23ac66f62cb...` [bitcoin-0.17.99-riscv64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-riscv64-linux-gnu-debug.tar.gz)\n * `2f47fc257f002227f37e421ee11f949d...` [bitcoin-0.17.99-riscv64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-riscv64-linux-gnu.tar.gz)\n * `773f11e751c7993dbaf4ee975eb8b488...` [bitcoin-0.17.99-win32-debug.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win32-debug.zip)\n * `76a9c63a7fe910fe987db7204e2f580d...` [bitcoin-0.17.99-win32-setup-unsigned.exe](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win32-setup-unsigned.exe)\n * `59dc0b853ded5d941133ebd81064577b...` [bitcoin-0.17.99-win32.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win32.zip)\n * `4ef203564655ac32e6ceaa1330836add...` [bitcoin-0.17.99-win64-debug.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win64-debug.zip)\n * `fb5cc02a3acd461f0d70d60f68e125d1...` [bitcoin-0.17.99-win64-setup-unsigned.exe](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win64-setup-unsigned.exe)\n * `2da8035f8edb35f74e0a835bf2ff53d7...` [bitcoin-0.17.99-win64.zip](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-win64.zip)\n * `4aa54966acd18b4e10944366eeb2d26a...` [bitcoin-0.17.99-x86_64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-x86_64-linux-gnu-debug.tar.gz)\n * `952dec188584778cacfe090690d5e100...` [bitcoin-0.17.99-x86_64-linux-gnu.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99-x86_64-linux-gnu.tar.gz)\n * `e41212816682771d626c141663ab5a14...` [bitcoin-0.17.99.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-0.17.99.tar.gz)\n * `03f6e57f26e7c9436ff7d766cf9135fb...` [bitcoin-linux-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-linux-0.18-res.yml)\n * `e689478f6948c5a2a392f4253196bde8...` [bitcoin-linux-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-linux-build.log)\n * `426c77e9796b572ce7656a5170f05616...` [bitcoin-osx-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-osx-0.18-res.yml)\n * `e10732c31b72bd254873771c602f86b7...` [bitcoin-osx-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-osx-build.log)\n * `756adfefdcbc4cee06c4c0e9a6556448...` [bitcoin-win-0.18-res.yml](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-win-0.18-res.yml)\n * `4bf284b53b707d6100c8a4378376705c...` [bitcoin-win-build.log](https://drahtbot.space/gitian/bitcoin/bitcoin/b4623b144416b203986ff7c281ee61c1779ad04f/bitcoin-win-build.log)\n",
      "created_at" : "2018-12-18T10:01:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448164706",
      "id" : 448164706,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODE2NDcwNg==",
      "updated_at" : "2018-12-18T10:01:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448164706",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "In constructor of CTxMemPool require to call random functions, but the constructor of the mutex has not being called yet. (Maybe it is an undefined behavior or it's a bug of VC++)\r\nhttps://github.com/bitcoin/bitcoin/blob/e7b88ecbc920321290941bc68e4a71634889c3cb/src/validation.cpp#L244\r\n```\r\n \ttest_bitcoin.exe!SeedStartup(CSHA512 & hasher={...}) Ã§Â¬Â¬ 417 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!ProcRand(unsigned char * out=0x00000031da8febb8, int num=8, RNGLevel level=STARTUP) Ã§Â¬Â¬ 462 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!GetRandBytes(unsigned char * buf=0x00000031da8febb8, int num=8) Ã§Â¬Â¬ 476 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!GetRand(unsigned __int64 nMax=18446744073709551615) Ã§Â¬Â¬ 491 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!SaltedTxidHasher::SaltedTxidHasher() Ã§Â¬Â¬ 1093 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>() Ã§Â¬Â¬ 485 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::multi_index::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >() Ã§Â¬Â¬ 177 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!CTxMemPool::CTxMemPool(CBlockPolicyEstimator * estimator=0x00007ff65afbfe60) Ã§Â¬Â¬ 328 Ã¨Â¡Â\tC++\r\n>\ttest_bitcoin.exe!`dynamic initializer for 'mempool''() Ã§Â¬Â¬ 244 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!_initterm(void(*)() * first=0x00007ff65a49c000, void(*)() * last=0x00007ff65a49f848) Ã§Â¬Â¬ 22 Ã¨Â¡Â\tC++\r\n \t[Ã¥Â¤ÂÃ©ÂÂ¨Ã§Â¨ÂÃ¥Â¼ÂÃ§Â¢Â¼]\t\r\n",
      "created_at" : "2018-12-18T12:43:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448208214",
      "id" : 448208214,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODIwODIxNA==",
      "updated_at" : "2018-12-18T12:46:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448208214",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ken2812221 That was helpful, thanks! I think I've fixed it, but the same error still appears. Can you check what line number it's on now?",
      "created_at" : "2018-12-19T06:04:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448479910",
      "id" : 448479910,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODQ3OTkxMA==",
      "updated_at" : "2018-12-19T06:04:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448479910",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\n \ttest_bitcoin.exe!std::_Load_relaxed_4(volatile unsigned long * _Tgt=0x0000000000000074) Ã§Â¬Â¬ 1338 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!std::_Atomic_load_4(volatile unsigned long * _Tgt=0x0000000000000074, std::memory_order _Order=memory_order_relaxed) Ã§Â¬Â¬ 1357 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!std::atomic_load_explicit(const std::_Atomic_uint * _Atom=0x0000000000000074, std::memory_order _Order=memory_order_relaxed) Ã§Â¬Â¬ 495 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!std::_Atomic_uint::load(std::memory_order _Order=memory_order_relaxed) Ã§Â¬Â¬ 630 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!BCLog::Logger::WillLogCategory(BCLog::LogFlags category=RAND) Ã§Â¬Â¬ 83 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!LogAcceptCategory(BCLog::LogFlags category=RAND) Ã§Â¬Â¬ 117 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!LogPrint<char [15],char [19],unsigned long>(const BCLog::LogFlags & category=RAND, const char[15] & <args_0>=..., const char[19] & <args_1>=..., const unsigned long & <args_2>=707688) Ã§Â¬Â¬ 150 Ã¨Â¡Â\tC++\r\n>\ttest_bitcoin.exe!RandAddSeedPerfmon(CSHA512 & hasher={...}) Ã§Â¬Â¬ 199 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!SeedStartup(CSHA512 & hasher={...}, `anonymous-namespace'::RNGState & rng={...}) Ã§Â¬Â¬ 456 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!ProcRand(unsigned char * out=0x0000009f8cd8eb78, int num=8, RNGLevel level=FAST) Ã§Â¬Â¬ 493 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!GetRandBytes(unsigned char * buf=0x0000009f8cd8eb78, int num=8) Ã§Â¬Â¬ 508 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!GetRand(unsigned __int64 nMax=18446744073709551615) Ã§Â¬Â¬ 523 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!SaltedTxidHasher::SaltedTxidHasher() Ã§Â¬Â¬ 1093 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >::cons<unsigned __int64,boost::tuples::cons<mempoolentry_txid,boost::tuples::cons<SaltedTxidHasher,boost::tuples::cons<std::equal_to<uint256>,boost::tuples::null_type> > > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>() Ã§Â¬Â¬ 485 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::tuples::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >::cons<boost::tuples::tuple<unsigned __int64,mempoolentry_txid,SaltedTxidHasher,std::equal_to<uint256>,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::cons<boost::tuples::tuple<boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type>,boost::tuples::null_type> > > >() Ã§Â¬Â¬ 284 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!boost::multi_index::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >::multi_index_container<CTxMemPoolEntry,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid,SaltedTxidHasher,boost::mpl::na,boost::mpl::na>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByDescendantScore>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByEntryTime>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,boost::multi_index::identity<CTxMemPoolEntry>,CompareTxMemPoolEntryByAncestorFee>,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>,std::allocator<CTxMemPoolEntry> >() Ã§Â¬Â¬ 177 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!CTxMemPool::CTxMemPool(CBlockPolicyEstimator * estimator=0x00007ff689f81fb0) Ã§Â¬Â¬ 328 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!`dynamic initializer for 'mempool''() Ã§Â¬Â¬ 244 Ã¨Â¡Â\tC++\r\n \ttest_bitcoin.exe!_initterm(void(*)() * first=0x00007ff68945e000, void(*)() * last=0x00007ff689461830) Ã§Â¬Â¬ 22 Ã¨Â¡Â\tC++\r\n \t[Ã¥Â¤ÂÃ©ÂÂ¨Ã§Â¨ÂÃ¥Â¼ÂÃ§Â¢Â¼]\t\r\n```\r\ng_logger has not been newed.\r\nhttps://github.com/bitcoin/bitcoin/blob/f080c65a09a8f3b223c9b5d8e3562320bf258fcd/src/logging.cpp#L24",
      "created_at" : "2018-12-19T09:21:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448525945",
      "id" : 448525945,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODUyNTk0NQ==",
      "updated_at" : "2018-12-19T09:21:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448525945",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ken2812221 Thanks so much; this was an actual bug.",
      "created_at" : "2018-12-19T09:51:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448535124",
      "id" : 448535124,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODUzNTEyNA==",
      "updated_at" : "2018-12-19T09:51:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448535124",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242853403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242853403"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Uh, ok. Thanks!",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-19T09:56:19Z",
      "diff_hunk" : "@@ -272,71 +301,137 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n+static std::mutex g_cs_openssl;\n+\n+static void SeedTimestamp(CSHA512& hasher)\n {\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void AddDataToRng(void* data, size_t len);\n-\n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n+\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedMedium(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n+    }\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n+}\n+\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    // Everything that the 'fast' and 'medium' seeders include.\n+    SeedMedium(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Once per minute, strengthen the hash for 10ms.\n+    static int64_t last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write randomness from the actual RNG in the state, so it goes through the strengthening as well.\n+        unsigned char buffer[32];\n+        GetRandBytes(buffer, 32);\n+        hasher.Write(buffer, 32);\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(g_cs_openssl);\n+        RAND_screen();\n     }\n-    memory_cleanse(buf, 64);\n+#endif\n+\n+    // Everything that the 'fast', 'medium', and 'slow' seeders include.\n+    SeedSlow(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static std::once_flag g_rng_initialized;\n+static Mutex cs_rng_state;\n+static unsigned char rng_state[32] GUARDED_BY(cs_rng_state) = {0};\n+static uint64_t rng_counter GUARDED_BY(cs_rng_state) = 0;\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    MEDIUM, //!< Automatically called by GetStrongRandBytes\n+    SLOW, //!< Called by RandSeed() and at startup\n+    STARTUP, //!< Called only at startup.\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242853403",
      "id" : 242853403,
      "in_reply_to_id" : 241746569,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mjg1MzQwMw==",
      "original_commit_id" : "b2fbb03a2eb843a5a988aa6295fff0e5a5d6eef1",
      "original_position" : 238,
      "path" : "src/random.cpp",
      "position" : 358,
      "pull_request_review_id" : 186464421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/242853403",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Tnx",
      "created_at" : "2018-12-19T12:40:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448582072",
      "id" : 448582072,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODU4MjA3Mg==",
      "updated_at" : "2018-12-19T12:40:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448582072",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/45523639?v=4",
         "events_url" : "https://api.github.com/users/jesskie/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jesskie/followers",
         "following_url" : "https://api.github.com/users/jesskie/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jesskie/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jesskie",
         "id" : 45523639,
         "login" : "jesskie",
         "node_id" : "MDQ6VXNlcjQ1NTIzNjM5",
         "organizations_url" : "https://api.github.com/users/jesskie/orgs",
         "received_events_url" : "https://api.github.com/users/jesskie/received_events",
         "repos_url" : "https://api.github.com/users/jesskie/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jesskie/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jesskie/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jesskie"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've made a few policy changes still:\r\n* Startup no longer includes the benchmark-1ms-sleep test, but still does strengthening.\r\n* The background seeding (called by the scheduler during idle times) no longer sources OpenSSL and /dev/random, as doing so every millisecond seems very much overkill. (it still includes rdrand as that has negligable CPU overhead).\r\n* The seeders are renamed to \"fast\" (called by GetRand*), \"slow\" (called by GetStrongRand*), \"background\" (called by idle scheduler), and \"startup\" (called only once at startup).\r\n\r\nThe global-order-independent initialization now uses a function which stores the RNG state in a local static variable. C++11 guarantees that it is initialized on first call, even if called multiple times simultaneously. I've benchmarked this approach and it's even faster than using `std::call_once` (2ns vs 1.8ns); I believe it's due to this approach using inline code generated by the compiler instead of a library call into pthread.",
      "created_at" : "2018-12-19T23:25:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448786480",
      "id" : 448786480,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODc4NjQ4MA==",
      "updated_at" : "2018-12-20T00:34:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448786480",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243231044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243231044"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe we should be checking for shutdown interruption in this loop?  At 10ms it isn't critical...",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-20T10:56:41Z",
      "diff_hunk" : "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243231044",
      "id" : 243231044,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzIzMTA0NA==",
      "original_commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "original_position" : 83,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 186943436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243231044",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "What is d best thing to do?",
      "created_at" : "2018-12-20T15:52:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-449043940",
      "id" : 449043940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0OTA0Mzk0MA==",
      "updated_at" : "2018-12-20T15:52:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/449043940",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/45523639?v=4",
         "events_url" : "https://api.github.com/users/jesskie/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jesskie/followers",
         "following_url" : "https://api.github.com/users/jesskie/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jesskie/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jesskie",
         "id" : 45523639,
         "login" : "jesskie",
         "node_id" : "MDQ6VXNlcjQ1NTIzNjM5",
         "organizations_url" : "https://api.github.com/users/jesskie/orgs",
         "received_events_url" : "https://api.github.com/users/jesskie/received_events",
         "repos_url" : "https://api.github.com/users/jesskie/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jesskie/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jesskie/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jesskie"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243467195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243467195"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Kinda weird that on non-init it throws out all its work.  Why not on non-init, have mixextract still write to out?  Then the research can read that in.   I feel a little uncomfortable with the brittleness of mixextract having a codepath that just returns without updating out.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-21T01:28:11Z",
      "diff_hunk" : "@@ -272,86 +294,215 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n-{\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    Mutex cs_openssl;\n+    unsigned char state[32] GUARDED_BY(cs) = {0};\n+    uint64_t counter GUARDED_BY(cs) = 0;\n+\n+    RNGState() noexcept\n+    {\n+        HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned any nothing happens.\n+     */\n+    bool MixExtract(unsigned char* out, int num, CSHA512&& hasher, bool full_init) noexcept\n+    {\n+        assert(num >= 0 && num <= 32);\n+        unsigned char buf[64];\n+        {\n+            WAIT_LOCK(cs, lock);\n+            if (counter == 0 && !full_init) return false;\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);\n+        return true;\n+    }\n+};\n+\n+RNGState& GetRNGState() noexcept\n+{\n+    // This C++11 idiom relies on the guarantee that static variable are initialized\n+    // on first call, even when multiple parallel calls are permitted.\n+    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n+    return *g_rng;\n+}\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedTimestamp(CSHA512& hasher) noexcept\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher) noexcept\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+    unsigned char buffer[32];\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n     }\n-    memory_cleanse(buf, 64);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedStrengthen(CSHA512& hasher, RNGState& rng)\n {\n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write the actual RNG state into the hasher, so it goes through the strengthening as well.\n+        unsigned char buf[32];\n+        if (rng.MixExtract(buf, 32, CSHA512(), false)) {\n+            hasher.Write(buf, 32);\n+            memory_cleanse(buf, 32);\n+        }\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedBackground(CSHA512& hasher, RNGState& rng)\n+{\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Strengthen every minute\n+    SeedStrengthen(hasher, rng);\n+}\n+\n+static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_screen();\n+    }\n+#endif\n+\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher, rng);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Strengthen every minute\n+    SeedStrengthen(hasher, rng);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    BACKGROUND, //!< Called by RandSeed()\n+};\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    assert(num <= 32);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher, rng);\n+        break;\n+    case RNGLevel::BACKGROUND:\n+        SeedBackground(hasher, rng);\n+        break;\n     }\n \n     // Combine with and update state\n-    {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, restart but with SeedStartup.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243467195",
      "id" : 243467195,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzQ2NzE5NQ==",
      "original_commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "original_position" : 358,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 187245945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243467195",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243529294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243529294"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-21T09:27:57Z",
      "diff_hunk" : "@@ -272,86 +294,215 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n-{\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    Mutex cs_openssl;\n+    unsigned char state[32] GUARDED_BY(cs) = {0};\n+    uint64_t counter GUARDED_BY(cs) = 0;\n+\n+    RNGState() noexcept\n+    {\n+        HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned any nothing happens.\n+     */\n+    bool MixExtract(unsigned char* out, int num, CSHA512&& hasher, bool full_init) noexcept\n+    {\n+        assert(num >= 0 && num <= 32);\n+        unsigned char buf[64];\n+        {\n+            WAIT_LOCK(cs, lock);\n+            if (counter == 0 && !full_init) return false;\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);\n+        return true;\n+    }\n+};\n+\n+RNGState& GetRNGState() noexcept\n+{\n+    // This C++11 idiom relies on the guarantee that static variable are initialized\n+    // on first call, even when multiple parallel calls are permitted.\n+    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n+    return *g_rng;\n+}\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedTimestamp(CSHA512& hasher) noexcept\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher) noexcept\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+    unsigned char buffer[32];\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n     }\n-    memory_cleanse(buf, 64);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedStrengthen(CSHA512& hasher, RNGState& rng)\n {\n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write the actual RNG state into the hasher, so it goes through the strengthening as well.\n+        unsigned char buf[32];\n+        if (rng.MixExtract(buf, 32, CSHA512(), false)) {\n+            hasher.Write(buf, 32);\n+            memory_cleanse(buf, 32);\n+        }\n+\n+        Strengthen(hasher, 10000);\n+        last_strengthen = current_time;\n+    }\n+}\n+\n+static void SeedBackground(CSHA512& hasher, RNGState& rng)\n+{\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Strengthen every minute\n+    SeedStrengthen(hasher, rng);\n+}\n+\n+static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+#ifdef WIN32\n+    {\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_screen();\n+    }\n+#endif\n+\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher, rng);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Strengthen every minute\n+    SeedStrengthen(hasher, rng);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    BACKGROUND, //!< Called by RandSeed()\n+};\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    assert(num <= 32);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher, rng);\n+        break;\n+    case RNGLevel::BACKGROUND:\n+        SeedBackground(hasher, rng);\n+        break;\n     }\n \n     // Combine with and update state\n-    {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, restart but with SeedStartup.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243529294",
      "id" : 243529294,
      "in_reply_to_id" : 243467195,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzUyOTI5NA==",
      "original_commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "original_position" : 358,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 187323517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243529294",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243721722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243721722"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this one can ignore the return value of mix extract.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-22T01:43:00Z",
      "diff_hunk" : "@@ -272,86 +294,217 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n-{\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    Mutex cs_openssl;\n+    unsigned char state[32] GUARDED_BY(cs) = {0};\n+    uint64_t counter GUARDED_BY(cs) = 0;\n+    bool initialized GUARDED_BY(cs) = false;\n+\n+    RNGState() noexcept\n+    {\n+        HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned.\n+     */\n+    bool MixExtract(unsigned char* out, int num, CSHA512&& hasher, bool full_init) noexcept\n+    {\n+        assert(num >= 0 && num <= 32);\n+        unsigned char buf[64];\n+        bool ret;\n+        {\n+            WAIT_LOCK(cs, lock);\n+            ret = (initialized |= full_init);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);\n+        return ret;\n+    }\n+};\n+\n+RNGState& GetRNGState() noexcept\n+{\n+    // This C++11 idiom relies on the guarantee that static variable are initialized\n+    // on first call, even when multiple parallel calls are permitted.\n+    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n+    return *g_rng;\n+}\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedTimestamp(CSHA512& hasher) noexcept\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher) noexcept\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+    unsigned char buffer[32];\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n     }\n-    memory_cleanse(buf, 64);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedStrengthen(CSHA512& hasher, RNGState& rng)\n {\n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write the actual RNG state into the hasher, so it goes through the strengthening as well.\n+        unsigned char buf[32];\n+        if (rng.MixExtract(buf, 32, CSHA512(), false)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243721722",
      "id" : 243721722,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzcyMTcyMg==",
      "original_commit_id" : "c2f3b3f4a4b1f1eea806f070dfa41edb52a6cb26",
      "original_position" : 265,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 187575485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243721722",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243900544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243900544"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2018-12-25T10:54:28Z",
      "diff_hunk" : "@@ -272,86 +294,217 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n-{\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    Mutex cs_openssl;\n+    unsigned char state[32] GUARDED_BY(cs) = {0};\n+    uint64_t counter GUARDED_BY(cs) = 0;\n+    bool initialized GUARDED_BY(cs) = false;\n+\n+    RNGState() noexcept\n+    {\n+        HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned.\n+     */\n+    bool MixExtract(unsigned char* out, int num, CSHA512&& hasher, bool full_init) noexcept\n+    {\n+        assert(num >= 0 && num <= 32);\n+        unsigned char buf[64];\n+        bool ret;\n+        {\n+            WAIT_LOCK(cs, lock);\n+            ret = (initialized |= full_init);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);\n+        return ret;\n+    }\n+};\n+\n+RNGState& GetRNGState() noexcept\n+{\n+    // This C++11 idiom relies on the guarantee that static variable are initialized\n+    // on first call, even when multiple parallel calls are permitted.\n+    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n+    return *g_rng;\n+}\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void SeedTimestamp(CSHA512& hasher) noexcept\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher) noexcept\n {\n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    unsigned char buffer[32];\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n+\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n+static void SeedSlow(CSHA512& hasher, RNGState& rng) noexcept\n+{\n+    unsigned char buffer[32];\n \n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-static void AddDataToRng(void* data, size_t len) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        std::lock_guard<std::mutex> lock(rng.cs_openssl);\n+        RAND_bytes(buffer, sizeof(buffer));\n     }\n-    memory_cleanse(buf, 64);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedStrengthen(CSHA512& hasher, RNGState& rng)\n {\n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // Once per minute, strengthen the hash for 10ms.\n+    static std::atomic<int64_t> last_strengthen;\n+    int64_t current_time = GetTimeMicros();\n+    if (current_time > last_strengthen + 60000) {\n+        // Write the actual RNG state into the hasher, so it goes through the strengthening as well.\n+        unsigned char buf[32];\n+        if (rng.MixExtract(buf, 32, CSHA512(), false)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243900544",
      "id" : 243900544,
      "in_reply_to_id" : 243721722,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzkwMDU0NA==",
      "original_commit_id" : "c2f3b3f4a4b1f1eea806f070dfa41edb52a6cb26",
      "original_position" : 265,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 187782038,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243900544",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK",
      "created_at" : "2018-12-31T20:00:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-450685606",
      "id" : 450685606,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDY4NTYwNg==",
      "updated_at" : "2018-12-31T20:00:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450685606",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Anything I can do to simplify review here? I can move the strengthening loop to a separate PR if that helps.",
      "created_at" : "2019-01-03T17:39:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-451219690",
      "id" : 451219690,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MTIxOTY5MA==",
      "updated_at" : "2019-01-03T17:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451219690",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've removed the hash strengthening from this PR; I'll open a separate PR for it later.",
      "created_at" : "2019-01-04T11:00:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-451414412",
      "id" : 451414412,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MTQxNDQxMg==",
      "updated_at" : "2019-01-04T11:00:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451414412",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Bonus points for the removal of `NO_THREAD_SAFETY_ANALYSIS` (for `locking_callback`) and also the various `noexcept` additions.",
      "created_at" : "2019-01-05T16:42:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-451670244",
      "id" : 451670244,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MTY3MDI0NA==",
      "updated_at" : "2019-01-09T16:08:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451670244",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Bonus points for the removal of NO_THREAD_SAFETY_ANALYSIS (for locking_callback) and also the various noexcept additions.\r\n\r\nGetting rid of `CInit` is wonderful too :tada:\r\n\r\nutACK 3a82a46eaa1f1c9e55635f8940a2bda7d3d2a817",
      "created_at" : "2019-01-08T16:33:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452363804",
      "id" : 452363804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MjM2MzgwNA==",
      "updated_at" : "2019-01-08T16:33:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452363804",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa when you say it implements \"most of\" the issue, which parts are missing?",
      "created_at" : "2019-01-09T15:40:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452741242",
      "id" : 452741242,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1Mjc0MTI0Mg==",
      "updated_at" : "2019-01-09T15:40:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452741242",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@instagibbs There are some potential entropy sources that can still be added (environment data, and a strengthening loop). And of course removing OpenSSL once we have sufficient replacements for all of it.",
      "created_at" : "2019-01-09T16:00:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452749504",
      "id" : 452749504,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1Mjc0OTUwNA==",
      "updated_at" : "2019-01-09T16:00:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452749504",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "\"Abstract out seeding/extracting entropy into RandExtract.\" <--- commit message refers to presumably old name of function",
      "created_at" : "2019-01-09T16:01:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452749817",
      "id" : 452749817,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1Mjc0OTgxNw==",
      "updated_at" : "2019-01-09T16:01:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452749817",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246447713"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246447713"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: also assert if `out==nullptr` that `num==0`, I believe memcpy to nullptr is technically undefined",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-09T16:23:15Z",
      "diff_hunk" : "@@ -292,6 +292,32 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, int num, CSHA512&& hasher)\n+    {\n+        assert(num >= 0 && num <= 32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246447713",
      "id" : 246447713,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ0NzcxMw==",
      "original_commit_id" : "0c442f32d8cd48c23867032b0ff6320260e0d806",
      "original_position" : 8,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 190811506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246447713",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246448377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246448377"
         }
      },
      "author_association" : "MEMBER",
      "body" : "mu-nit: any reason `num` is a signed integer? could simplify assertion below by being unsigned",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-09T16:24:46Z",
      "diff_hunk" : "@@ -292,6 +292,32 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, int num, CSHA512&& hasher)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246448377",
      "id" : 246448377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ0ODM3Nw==",
      "original_commit_id" : "0c442f32d8cd48c23867032b0ff6320260e0d806",
      "original_position" : 6,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 190811506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246448377",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246459148"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246459148"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can there be a description on why `8 * num`?  Not following this one based on the docs.\r\n\r\n\"The entropy argument is (the lower bound of) an estimate of how much randomness is contained in buf, measured in bytes.\"",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-09T16:52:25Z",
      "diff_hunk" : "@@ -329,61 +319,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    RAND_screen();\n+#endif\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    SLEEP, //!< Called by RandAddSeedSleep()\n+};\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n+\n+    assert(num <= 32);\n+\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher);\n+        break;\n+    case RNGLevel::SLEEP:\n+        SeedSleep(hasher);\n+        break;\n     }\n \n     // Combine with and update state\n-    rng.MixExtract(out, num, std::move(hasher));\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, also seed with SeedStartup().\n+        CSHA512 startup_hasher;\n+        SeedStartup(startup_hasher);\n+        rng.MixExtract(out, num, std::move(startup_hasher), true);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting RNG output (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        unsigned char buf[64];\n+        CSHA512().Write(out, num).Finalize(buf);\n+        RAND_add(buf, sizeof(buf), 8 * num);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246459148",
      "id" : 246459148,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ1OTE0OA==",
      "original_commit_id" : "ca3459b669eddd4bdfd7e15886d25d40e04ad52f",
      "original_position" : 229,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 190811506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246459148",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246475876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246475876"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I misunderstood the API and assumed the entropy argument was measured in bits.\n\nI don't think this matters much, modern RNGs don't really measure entropy anymore. But I'll fix it.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-09T17:41:28Z",
      "diff_hunk" : "@@ -329,61 +319,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    RAND_screen();\n+#endif\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    SLEEP, //!< Called by RandAddSeedSleep()\n+};\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n+\n+    assert(num <= 32);\n+\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher);\n+        break;\n+    case RNGLevel::SLEEP:\n+        SeedSleep(hasher);\n+        break;\n     }\n \n     // Combine with and update state\n-    rng.MixExtract(out, num, std::move(hasher));\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, also seed with SeedStartup().\n+        CSHA512 startup_hasher;\n+        SeedStartup(startup_hasher);\n+        rng.MixExtract(out, num, std::move(startup_hasher), true);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting RNG output (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        unsigned char buf[64];\n+        CSHA512().Write(out, num).Finalize(buf);\n+        RAND_add(buf, sizeof(buf), 8 * num);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246475876",
      "id" : 246475876,
      "in_reply_to_id" : 246459148,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ3NTg3Ng==",
      "original_commit_id" : "ca3459b669eddd4bdfd7e15886d25d40e04ad52f",
      "original_position" : 229,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 190847485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246475876",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488452"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-09T18:20:01Z",
      "diff_hunk" : "@@ -292,6 +292,32 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, int num, CSHA512&& hasher)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488452",
      "id" : 246488452,
      "in_reply_to_id" : 246448377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ4ODQ1Mg==",
      "original_commit_id" : "0c442f32d8cd48c23867032b0ff6320260e0d806",
      "original_position" : 6,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 190863580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488452",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-09T18:20:10Z",
      "diff_hunk" : "@@ -329,61 +319,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n+\n+    // Sleep for 1ms\n+    MilliSleep(1);\n+\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n+\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    RAND_screen();\n+#endif\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    SLEEP, //!< Called by RandAddSeedSleep()\n+};\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n+\n+    assert(num <= 32);\n+\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher);\n+        break;\n+    case RNGLevel::SLEEP:\n+        SeedSleep(hasher);\n+        break;\n     }\n \n     // Combine with and update state\n-    rng.MixExtract(out, num, std::move(hasher));\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, also seed with SeedStartup().\n+        CSHA512 startup_hasher;\n+        SeedStartup(startup_hasher);\n+        rng.MixExtract(out, num, std::move(startup_hasher), true);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting RNG output (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        unsigned char buf[64];\n+        CSHA512().Write(out, num).Finalize(buf);\n+        RAND_add(buf, sizeof(buf), 8 * num);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488505",
      "id" : 246488505,
      "in_reply_to_id" : 246459148,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ4ODUwNQ==",
      "original_commit_id" : "ca3459b669eddd4bdfd7e15886d25d40e04ad52f",
      "original_position" : 229,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 190863643,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488505",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488679"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done (by adding an assert in the `if (num) {` branch).",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-09T18:20:43Z",
      "diff_hunk" : "@@ -292,6 +292,32 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, int num, CSHA512&& hasher)\n+    {\n+        assert(num >= 0 && num <= 32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488679",
      "id" : 246488679,
      "in_reply_to_id" : 246447713,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ4ODY3OQ==",
      "original_commit_id" : "0c442f32d8cd48c23867032b0ff6320260e0d806",
      "original_position" : 8,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 190863865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246488679",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-utACK https://github.com/bitcoin/bitcoin/pull/14955/commits/b1ee8608f2b1700505e24f09ee141d4608c36078",
      "created_at" : "2019-01-09T19:22:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452823765",
      "id" : 452823765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MjgyMzc2NQ==",
      "updated_at" : "2019-01-09T19:22:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452823765",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added two commits:\n\n* Turn RNGState into a class with private fields (makes it easier to make sure no code can accidentally wipe it or so), suggested by @pstratem on IRC.\n* Allocate the RNGState in the mlocked pool, suggested by @gmaxwell on IRC.",
      "created_at" : "2019-01-11T03:20:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-453363222",
      "id" : 453363222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MzM2MzIyMg==",
      "updated_at" : "2019-01-11T03:20:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/453363222",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247219641"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247219641"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Use FRC::randbytes instead of reading >32 bytes from RNG\" (5dfb99059491b1db9133cf0e6b0158ff4bdc9ef0)\r\n\r\nNote: seeding behavior is unchanged here because FastRandomContext just calls GetRandBytes internally.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-11T18:55:57Z",
      "diff_hunk" : "@@ -181,12 +181,12 @@ void PaymentServerTests::paymentServerTests()\n     QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n \n     // Test BIP70 DoS protection:\n-    unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n-    GetRandBytes(randData, sizeof(randData));\n+    auto randdata = FastRandomContext().randbytes(BIP70_MAX_PAYMENTREQUEST_SIZE + 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247219641",
      "id" : 247219641,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIxOTY0MQ==",
      "original_commit_id" : "5dfb99059491b1db9133cf0e6b0158ff4bdc9ef0",
      "original_position" : 6,
      "path" : "src/qt/test/paymentservertests.cpp",
      "position" : 6,
      "pull_request_review_id" : 191797506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247219641",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247221335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247221335"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Don't log RandAddSeedPerfmon details\" (ede7e302d55eb37936268caffcc4b31839e58283)\r\n\r\nI think this code needs a comment saying why it's safe to ignore the error and skip seeding when the call fails. Just reading the new code, I would be wondering why RandFailure() isn't called.\r\n\r\nIt would also be good to mention loss of the printf warning in release notes.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-11T19:01:35Z",
      "diff_hunk" : "@@ -166,13 +166,6 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n-    } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247221335",
      "id" : 247221335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIyMTMzNQ==",
      "original_commit_id" : "ede7e302d55eb37936268caffcc4b31839e58283",
      "original_position" : 8,
      "path" : "src/random.cpp",
      "position" : 104,
      "pull_request_review_id" : 191797506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247221335",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247223913"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247223913"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Remove adding timestamps in sanity check to OpenSSL RNG\" (2ce2c827115748ebea121e6e2abfded260f50ea6)\r\n\r\nWhat's the benefit to dropping these calls? Commit message only says why it is not harmful to remove them, not why it is good to remove them.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-11T19:10:08Z",
      "diff_hunk" : "@@ -441,10 +441,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247223913",
      "id" : 247223913,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIyMzkxMw==",
      "original_commit_id" : "2ce2c827115748ebea121e6e2abfded260f50ea6",
      "original_position" : 4,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 191797506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247223913",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247230067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247230067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Automatically initialize RNG on first use.\" (2dcb3e938a210b1bbaa178ad6f9a5d418c4e2939)\r\n\r\nNew comment is confusing about when this should be called. Would suggest:\r\n\r\n```c++\r\n/**\r\n * Initialize global RNG state and log any CPU features that are used.\r\n *\r\n * Calling this function is optional. RNG state will be initialized when first\r\n * needed if it is not called.\r\n */\r\n```",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-11T19:30:11Z",
      "diff_hunk" : "@@ -178,7 +178,7 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n-/** Initialize the RNG. */\n+/** Report information about the RNG used. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247230067",
      "id" : 247230067,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIzMDA2Nw==",
      "original_commit_id" : "2dcb3e938a210b1bbaa178ad6f9a5d418c4e2939",
      "original_position" : 5,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 191797506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247230067",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247233048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247233048"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Abstract out seeding/extracting entropy into RNGState::MixExtract\" (cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab)\r\n\r\nThis is moved code, but can it just use `LOCK` instead of `WAIT_LOCK`?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-11T19:40:19Z",
      "diff_hunk" : "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        {\n+            WAIT_LOCK(cs, lock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247233048",
      "id" : 247233048,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIzMzA0OA==",
      "original_commit_id" : "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "original_position" : 11,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 191797506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247233048",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247234852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247234852"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Abstract out seeding/extracting entropy into RNGState::MixExtract\" (cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab)\r\n\r\nIt would be good to check the buffer size. Maybe:\r\n\r\n```c++\r\nstatic_assert(sizeof(buf) == hasher.OUTPUT_SIZE);\r\n```",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-11T19:46:10Z",
      "diff_hunk" : "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247234852",
      "id" : 247234852,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzIzNDg1Mg==",
      "original_commit_id" : "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "original_position" : 9,
      "path" : "src/random.cpp",
      "position" : 172,
      "pull_request_review_id" : 191797506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247234852",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357030"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357030"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added comment in commit.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-13T18:21:48Z",
      "diff_hunk" : "@@ -181,12 +181,12 @@ void PaymentServerTests::paymentServerTests()\n     QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n \n     // Test BIP70 DoS protection:\n-    unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n-    GetRandBytes(randData, sizeof(randData));\n+    auto randdata = FastRandomContext().randbytes(BIP70_MAX_PAYMENTREQUEST_SIZE + 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357030",
      "id" : 247357030,
      "in_reply_to_id" : 247219641,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzAzMA==",
      "original_commit_id" : "5dfb99059491b1db9133cf0e6b0158ff4bdc9ef0",
      "original_position" : 6,
      "path" : "src/qt/test/paymentservertests.cpp",
      "position" : 6,
      "pull_request_review_id" : 191984763,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357030",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357036"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357036"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment and a TODO.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-13T18:22:03Z",
      "diff_hunk" : "@@ -166,13 +166,6 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n-    } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357036",
      "id" : 247357036,
      "in_reply_to_id" : 247221335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzAzNg==",
      "original_commit_id" : "ede7e302d55eb37936268caffcc4b31839e58283",
      "original_position" : 8,
      "path" : "src/random.cpp",
      "position" : 104,
      "pull_request_review_id" : 191984772,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357036",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357052"
         }
      },
      "author_association" : "MEMBER",
      "body" : "They were hard to maintain in an earlier iteration of this patch. I've removed the commit now, and kept the functionality in the big switchover commit.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-13T18:22:42Z",
      "diff_hunk" : "@@ -441,10 +441,6 @@ bool Random_SanityCheck()\n     uint64_t stop = GetPerformanceCounter();\n     if (stop == start) return false;\n \n-    // We called GetPerformanceCounter. Use it as entropy.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357052",
      "id" : 247357052,
      "in_reply_to_id" : 247223913,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzA1Mg==",
      "original_commit_id" : "2ce2c827115748ebea121e6e2abfded260f50ea6",
      "original_position" : 4,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 191984795,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357052",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357055"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-13T18:22:50Z",
      "diff_hunk" : "@@ -178,7 +178,7 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n-/** Initialize the RNG. */\n+/** Report information about the RNG used. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357055",
      "id" : 247357055,
      "in_reply_to_id" : 247230067,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzA1NQ==",
      "original_commit_id" : "2dcb3e938a210b1bbaa178ad6f9a5d418c4e2939",
      "original_position" : 5,
      "path" : "src/random.h",
      "position" : null,
      "pull_request_review_id" : 191984800,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357055",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357059"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-13T18:22:58Z",
      "diff_hunk" : "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        {\n+            WAIT_LOCK(cs, lock);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357059",
      "id" : 247357059,
      "in_reply_to_id" : 247233048,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzA1OQ==",
      "original_commit_id" : "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "original_position" : 11,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 191984806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357059",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357064"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357064"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-13T18:23:05Z",
      "diff_hunk" : "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357064",
      "id" : 247357064,
      "in_reply_to_id" : 247234852,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM1NzA2NA==",
      "original_commit_id" : "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "original_position" : 9,
      "path" : "src/random.cpp",
      "position" : 172,
      "pull_request_review_id" : 191984812,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247357064",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky Thanks for the review. I've addressed most of your comments, and added a bunch of comments to random.h. I'll let others comment on the need for adding release notes about it, but my thinking was to only make a note once we fully remove OpenSSL (which may or may not be in the same release).\r\n\r\nI've tried to not interfere with existing review too much by keeping the commit order and not rebased, but if desired by reviewers I can probably split up the big \"Switch all RNG code to the built-in PRNG.\" commit.",
      "created_at" : "2019-01-13T18:54:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-453855697",
      "id" : 453855697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1Mzg1NTY5Nw==",
      "updated_at" : "2019-01-13T18:54:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/453855697",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247370960"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247370960"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I had to change it to `CSHA512::OUTPUT_SIZE`, as clang didn't agree `hasher.OUTPUT_SIZE` was a compile-time constant.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-14T00:46:18Z",
      "diff_hunk" : "@@ -292,6 +292,33 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247370960",
      "id" : 247370960,
      "in_reply_to_id" : 247234852,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzM3MDk2MA==",
      "original_commit_id" : "cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab",
      "original_position" : 9,
      "path" : "src/random.cpp",
      "position" : 172,
      "pull_request_review_id" : 191999726,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247370960",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'll let others comment on the need for adding release notes about it, but my thinking was to only make a note once we fully remove OpenSSL (which may or may not be in the same release).\r\n\r\nIMO, a release note is unnecessary for this (apart from the automatically-generated changelog line). It is an internal change, there are hardly or no user-visible changes, the user doesn't need to *do* anything like change the configuration.\r\nWarning sort of \"the random number generator changed, be careful\" would be bad signaling (better not upgrade at all then?), we need to be **really** sure that this is safe before merging.",
      "created_at" : "2019-01-14T13:55:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-454012249",
      "id" : 454012249,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NDAxMjI0OQ==",
      "updated_at" : "2019-01-14T14:05:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454012249",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247654362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247654362"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Abstract out seeding/extracting entropy into RNGState::MixExtract\" (d76cc6dbb9e1c5c6a0f3b002932ba4033b722255)\r\n\r\nDoes it matter that `memory_cleanse` isn't called on the hasher object?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-14T20:54:16Z",
      "diff_hunk" : "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            assert(out != nullptr);\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247654362",
      "id" : 247654362,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY1NDM2Mg==",
      "original_commit_id" : "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "original_position" : 30,
      "path" : "src/random.cpp",
      "position" : 195,
      "pull_request_review_id" : 192357622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247654362",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247660403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247660403"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Switch all RNG code to the built-in PRNG.\" (85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4)\r\n\r\nCommit message could mention now seeding openssl differently than before: no longer here, no longer in cinit, additionally in MixExtract and SeedStartup.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-14T21:13:04Z",
      "diff_hunk" : "@@ -174,7 +164,7 @@ static void RandAddSeedPerfmon()\n     }\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n-        RAND_add(vData.data(), nSize, nSize / 100.0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247660403",
      "id" : 247660403,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY2MDQwMw==",
      "original_commit_id" : "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "original_position" : 24,
      "path" : "src/random.cpp",
      "position" : 97,
      "pull_request_review_id" : 192357622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247660403",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247664982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247664982"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Switch all RNG code to the built-in PRNG.\" (85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4)\r\n\r\nNote: functionality previously in RandAddSeedSleep() is now in SeedSleep().",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-14T21:27:01Z",
      "diff_hunk" : "@@ -337,61 +327,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247664982",
      "id" : 247664982,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY2NDk4Mg==",
      "original_commit_id" : "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "original_position" : 89,
      "path" : "src/random.cpp",
      "position" : 240,
      "pull_request_review_id" : 192357622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247664982",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247665730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247665730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Switch all RNG code to the built-in PRNG.\" (85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4)\r\n\r\nNote: functionality previously in GetStrongRandBytes() is now in SeedSlow().",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-14T21:29:14Z",
      "diff_hunk" : "@@ -337,61 +327,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247665730",
      "id" : 247665730,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY2NTczMA==",
      "original_commit_id" : "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "original_position" : 142,
      "path" : "src/random.cpp",
      "position" : 310,
      "pull_request_review_id" : 192357622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247665730",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247670035"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247670035"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Sprinkle some sweet noexcepts over the RNG code\" (6ff775ff80b090494d115753ddcf488a3cf923a9)\r\n\r\nI don't know best practices around noexcept, but it seems like there are parts of ProcRand that could throw exceptions. Maybe it would be worth saying in a comment somewhere how noexcept is used in random.cpp/h code.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-14T21:43:32Z",
      "diff_hunk" : "@@ -441,11 +441,11 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n     }\n }\n \n-void GetRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::FAST); }\n-void GetStrongRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::SLOW); }\n+void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::FAST); }\n+void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247670035",
      "id" : 247670035,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY3MDAzNQ==",
      "original_commit_id" : "6ff775ff80b090494d115753ddcf488a3cf923a9",
      "original_position" : 86,
      "path" : "src/random.cpp",
      "position" : 413,
      "pull_request_review_id" : 192357622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247670035",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247673931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247673931"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Use our own locking instead of using OpenSSL in multithreaded mode\" (fa2eabe154d00bf6c54f604acbe758186d044639)\r\n\r\nWhy is calling RAND_cleanup no longer necessary?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-14T21:54:55Z",
      "diff_hunk" : "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);\n-\n-        // OpenSSL can optionally load a config file which lists optional loadable modules and engines.\n-        // We don't use them so we don't require the config. However some of our libs may call functions\n-        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing\n-        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n-        // that the config appears to have been loaded and there are no modules/engines available.\n-        OPENSSL_no_config();\n-    }\n-\n-    ~CInit()\n-    {\n-        // Securely erase the memory used by the PRNG\n-        RAND_cleanup();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247673931",
      "id" : 247673931,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY3MzkzMQ==",
      "original_commit_id" : "fa2eabe154d00bf6c54f604acbe758186d044639",
      "original_position" : 46,
      "path" : "src/util/system.cpp",
      "position" : 53,
      "pull_request_review_id" : 192357622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247673931",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247674434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247674434"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Use our own locking instead of using OpenSSL in multithreaded mode\" (fa2eabe154d00bf6c54f604acbe758186d044639)\r\n\r\nI don't understand how the two parts of this commit relate:\r\n\r\n- removing `CRYPTO_set_locking_callback()` call\r\n- adding `cs_openssl` mutex\r\n\r\nIs the idea that calls like `RAND_add` and `RAND_bytes` are no longer thread safe without `set_locking_callback`, so now we need to serialize calls with our own mutex? If this is the case, why don't we need to lock the same mutex in qt payment server code using openssl?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-14T21:56:26Z",
      "diff_hunk" : "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247674434",
      "id" : 247674434,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NzY3NDQzNA==",
      "original_commit_id" : "fa2eabe154d00bf6c54f604acbe758186d044639",
      "original_position" : 33,
      "path" : "src/util/system.cpp",
      "position" : 33,
      "pull_request_review_id" : 192357622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/247674434",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119274"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119274"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps it does, though we're all over the code only using memory_cleanse for memory buffers directly, and I feel slightly uneasy to invoke on the state of complex objects.\r\n\r\nMaybe in a separate change we can add a Cleanse() method to CSHA512 and others, and start using those were useful?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T00:57:47Z",
      "diff_hunk" : "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            assert(out != nullptr);\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119274",
      "id" : 248119274,
      "in_reply_to_id" : 247654362,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTI3NA==",
      "original_commit_id" : "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "original_position" : 30,
      "path" : "src/random.cpp",
      "position" : 195,
      "pull_request_review_id" : 192934747,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119274",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119311"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T00:58:00Z",
      "diff_hunk" : "@@ -174,7 +164,7 @@ static void RandAddSeedPerfmon()\n     }\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n-        RAND_add(vData.data(), nSize, nSize / 100.0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119311",
      "id" : 248119311,
      "in_reply_to_id" : 247660403,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTMxMQ==",
      "original_commit_id" : "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "original_position" : 24,
      "path" : "src/random.cpp",
      "position" : 97,
      "pull_request_review_id" : 192934801,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119311",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119329"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T00:58:07Z",
      "diff_hunk" : "@@ -337,61 +327,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119329",
      "id" : 248119329,
      "in_reply_to_id" : 247664982,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTMyOQ==",
      "original_commit_id" : "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "original_position" : 89,
      "path" : "src/random.cpp",
      "position" : 240,
      "pull_request_review_id" : 192934830,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119329",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T00:58:15Z",
      "diff_hunk" : "@@ -337,61 +327,128 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119354",
      "id" : 248119354,
      "in_reply_to_id" : 247665730,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTM1NA==",
      "original_commit_id" : "85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4",
      "original_position" : 142,
      "path" : "src/random.cpp",
      "position" : 310,
      "pull_request_review_id" : 192934860,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119354",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119398"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've added a comment on the use of noexcept and why it's not used for everything.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T00:58:33Z",
      "diff_hunk" : "@@ -441,11 +441,11 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n     }\n }\n \n-void GetRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::FAST); }\n-void GetStrongRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::SLOW); }\n+void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::FAST); }\n+void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119398",
      "id" : 248119398,
      "in_reply_to_id" : 247670035,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTM5OA==",
      "original_commit_id" : "6ff775ff80b090494d115753ddcf488a3cf923a9",
      "original_position" : 86,
      "path" : "src/random.cpp",
      "position" : 413,
      "pull_request_review_id" : 192934925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119398",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119545"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've reverted this change for other reasons. I don't think RAND_cleanup is particularly important, but let's keep it for now as long as we're using the OpenSSL RNG.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T00:59:24Z",
      "diff_hunk" : "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);\n-\n-        // OpenSSL can optionally load a config file which lists optional loadable modules and engines.\n-        // We don't use them so we don't require the config. However some of our libs may call functions\n-        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing\n-        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n-        // that the config appears to have been loaded and there are no modules/engines available.\n-        OPENSSL_no_config();\n-    }\n-\n-    ~CInit()\n-    {\n-        // Securely erase the memory used by the PRNG\n-        RAND_cleanup();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119545",
      "id" : 248119545,
      "in_reply_to_id" : 247673931,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODExOTU0NQ==",
      "original_commit_id" : "fa2eabe154d00bf6c54f604acbe758186d044639",
      "original_position" : 46,
      "path" : "src/util/system.cpp",
      "position" : 53,
      "pull_request_review_id" : 192935105,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248119545",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248120121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248120121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right, that was the reasoning. I assumed the payment server code was already not multithreaded (because it's synchronized through the UI), but reading more about OpenSSL's multithreading design, it seems that X509 processing has a bunch of global state which needs locking, so your comment made me uneasy about this.\r\n\r\nI've replaced it with a (less satisfying...) commit that moves the `CInit` logic to `RNGState`. This is necessary, as we're now invoking OpenSSL based RNG code from global constructors, possibly before the CInit object is creator (and RNGState is always created whenever needed, even before global constructors). Perhaps this was a problem in the old code too.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T01:02:45Z",
      "diff_hunk" : "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248120121",
      "id" : 248120121,
      "in_reply_to_id" : 247674434,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODEyMDEyMQ==",
      "original_commit_id" : "fa2eabe154d00bf6c54f604acbe758186d044639",
      "original_position" : 33,
      "path" : "src/util/system.cpp",
      "position" : 33,
      "pull_request_review_id" : 192935818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248120121",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248121024"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248121024"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Marking as resolved as the hardening code is removed from this PR.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T01:08:40Z",
      "diff_hunk" : "@@ -129,18 +135,41 @@ static bool GetHWRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+/** Use repeated SHA512 to strengthen the randomness in state. */\n+static void Strengthen(CSHA512& hasher, int microseconds)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n+    static const unsigned char MARKER_OUTPUT[128] = {'O'};\n+    static const unsigned char MARKER_LOCAL[128] = {'L'};\n+\n+    // Fork the state into a local copy, but write a distinct marker on each side\n+    CSHA512 local_hasher = hasher;\n+    hasher.Write(MARKER_OUTPUT, sizeof(MARKER_OUTPUT));\n+    local_hasher.Write(MARKER_LOCAL, sizeof(MARKER_LOCAL));\n+\n+    // Hash loop\n+    unsigned char buffer[64];\n+    int64_t start = GetTimeMicros();\n+    do {\n+        for (int i = 0; i < 1000; ++i) {\n+            local_hasher.Finalize(buffer);\n+            local_hasher.Reset();\n+            local_hasher.Write(buffer, sizeof(buffer));\n+        }\n+        // Write benchmark data (into output hasher)\n+        int64_t perf = GetPerformanceCounter();\n+        hasher.Write((const unsigned char*)&perf, sizeof(perf));\n+    } while (GetTimeMicros() < start + microseconds);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248121024",
      "id" : 248121024,
      "in_reply_to_id" : 243231044,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODEyMTAyNA==",
      "original_commit_id" : "06442367583d6fc64fafb163835d30f3b9cd4ab9",
      "original_position" : 83,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 192936973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248121024",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248194305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248194305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does this refer to an accidental scenario, where a user ends up generating the same private keys or accidentally signing with the same nonce? Or also a malicious scenario?\r\n\r\nSo do I understand correctly that the reason `FastRandomContext` needs to *fast* is (mostly) this, or are there also areas of code that need the additional performance?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T08:52:21Z",
      "diff_hunk" : "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248194305",
      "id" : 248194305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODE5NDMwNQ==",
      "original_commit_id" : "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "original_position" : 19,
      "path" : "src/random.h",
      "position" : 19,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248194305",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248206611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248206611"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"as a last resort\" makes it sound really important, which contradicts \"it is isn't considered critical\".\r\n\r\nMaybe say (in a followup PR): \r\n```\r\n// Performance data provides additional entropy, but failure to read it isn't\r\n// considered critical, so we don't call RandFailure().\r\n```",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T09:30:32Z",
      "diff_hunk" : "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248206611",
      "id" : 248206611,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIwNjYxMQ==",
      "original_commit_id" : "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "original_position" : 11,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248206611",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248206697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248206697"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Typo \"conidered\" (but see above)",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T09:30:47Z",
      "diff_hunk" : "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.\n+        // Failure to read it is isn't conidered critical, so we don't call",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248206697",
      "id" : 248206697,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIwNjY5Nw==",
      "original_commit_id" : "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "original_position" : 12,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248206697",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248218873"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248218873"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"and\" is ambiguous, is it part of \"Rand\" or does the function name mean \"(init?) HardWare Random (number generator) and Report\"?\r\n\r\nSuggestion: `ReportHardwareRNG()`",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T10:05:19Z",
      "diff_hunk" : "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248218873",
      "id" : 248218873,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIxODg3Mw==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 20,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248218873",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248227342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248227342"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggested comment above (for those not intimately familiar with `std::atomic`, who might initially think `load()` is some sort of initialisation performing side-effect):\r\n```\r\n// Ensure `HWRandInit()` was called first\r\n```\r\nThen again, it goes away in a later commit.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T10:29:10Z",
      "diff_hunk" : "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()\n+{\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248227342",
      "id" : 248227342,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIyNzM0Mg==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 22,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248227342",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248228186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248228186"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add comment that this currently looks for `rdrand` support in the CPU. \r\nSuggested name: `InitHardwareRNG()`",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T10:31:46Z",
      "diff_hunk" : "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248228186",
      "id" : 248228186,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIyODE4Ng==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 10,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248228186",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248230465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248230465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe clarify constraints that would apply to future hardware RNGs. E.g. is this an appropriate place to interface with a USB based RNG? Or does it have to be in the CPU for availability and latency reasons? Is it OK to use a lower quality CPU RNG for this, because it's strictly additional entropy?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T10:38:27Z",
      "diff_hunk" : "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()\n+{\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));\n+    if (rdrand_supported) {\n+        // This must be done in a separate function, as HWRandInit() may be indirectly called\n+        // from global constructors, before logging is initialized.\n+        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n+    }\n+}\n+\n #else\n-static void RDRandInit() {}\n+static void HWRandInit() {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248230465",
      "id" : 248230465,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIzMDQ2NQ==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 32,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248230465",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248231617"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248231617"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe clarify why you chose 32 back in #10338, assuming that reasoning still applies:\r\n```\r\n// As we're already using SHA512 to combine the multiple entropy sources,\r\n// which produces 64 bytes, we can use the last 32 of those as an additional\r\n// input for the next call. This makes sure that the produced data is secure\r\n// as long as any entropy source in the past was reliable.\r\n```",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T10:42:14Z",
      "diff_hunk" : "@@ -278,6 +288,26 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    unsigned char state[32] = {0};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248231617",
      "id" : 248231617,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIzMTYxNw==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 44,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248231617",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248236954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248236954"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add comment that `rng.state` is initialised to zeros, i.e. initialisation just refers to the C++ action, not to the broader sense of the word (which might include seeding).",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T10:58:55Z",
      "diff_hunk" : "@@ -178,7 +178,12 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n-/** Initialize the RNG. */\n+/**\n+ * Initialize global RNG state and log any CPU features that are used.\n+ *\n+ * Calling this function is optional. RNG state will be initialized when first\n+ * needed if it is not called.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248236954",
      "id" : 248236954,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODIzNjk1NA==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 9,
      "path" : "src/random.h",
      "position" : 172,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248236954",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248246123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248246123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thread safety n00b question: what did `WAIT_LOCK` do and why is `LOCK` fine here? ",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T11:29:30Z",
      "diff_hunk" : "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248246123",
      "id" : 248246123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI0NjEyMw==",
      "original_commit_id" : "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "original_position" : 12,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248246123",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248249382"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248249382"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Such a `Cleanse()` method might indeed improve readability, and maybe even offers a way to automatically detect where it's potentially missing. Would it then also make sense to have a `unsigned char []` alternative with a `Cleanse()` method? E.g. `hygienic_char []` :-)",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T11:41:41Z",
      "diff_hunk" : "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&counter, sizeof(counter));\n+            ++counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            assert(out != nullptr);\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248249382",
      "id" : 248249382,
      "in_reply_to_id" : 247654362,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI0OTM4Mg==",
      "original_commit_id" : "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "original_position" : 30,
      "path" : "src/random.cpp",
      "position" : 195,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248249382",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248256491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248256491"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add the above as a comment, so we can consider this once BIP70 goes away.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T12:09:16Z",
      "diff_hunk" : "@@ -86,47 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248256491",
      "id" : 248256491,
      "in_reply_to_id" : 247674434,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI1NjQ5MQ==",
      "original_commit_id" : "fa2eabe154d00bf6c54f604acbe758186d044639",
      "original_position" : 33,
      "path" : "src/util/system.cpp",
      "position" : 33,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248256491",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248260207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248260207"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you explain why this function must be called at least twice before it's OK to use?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T12:23:35Z",
      "diff_hunk" : "@@ -331,14 +307,19 @@ struct RNGState {\n         CRYPTO_set_locking_callback(nullptr);\n     }\n \n-    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n-    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248260207",
      "id" : 248260207,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI2MDIwNw==",
      "original_commit_id" : "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "original_position" : 74,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248260207",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248261482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248261482"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This might lead to confusion with the other meaning of initialized that's referred to in \"Initialize global RNG state\".",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T12:28:11Z",
      "diff_hunk" : "@@ -297,6 +280,7 @@ struct RNGState {\n     Mutex cs;\n     unsigned char state[32] GUARDED_BY(cs) = {0};\n     uint64_t counter GUARDED_BY(cs) = 0;\n+    bool initialized GUARDED_BY(cs) = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248261482",
      "id" : 248261482,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI2MTQ4Mg==",
      "original_commit_id" : "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "original_position" : 47,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248261482",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248271203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248271203"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"every 10 minutes\" includes the first usage, right?",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T12:59:56Z",
      "diff_hunk" : "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248271203",
      "id" : 248271203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI3MTIwMw==",
      "original_commit_id" : "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "original_position" : 189,
      "path" : "src/random.cpp",
      "position" : 332,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248271203",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248272384"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248272384"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Assuming it's always CPU based and not same external device, so this assumption should be stated in the empty / placeholder `HWRandInit` implementations for other architectures.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T13:03:35Z",
      "diff_hunk" : "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248272384",
      "id" : 248272384,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODI3MjM4NA==",
      "original_commit_id" : "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "original_position" : 123,
      "path" : "src/random.cpp",
      "position" : 261,
      "pull_request_review_id" : 193025955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248272384",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> 6a57ca9 \"There was only one place in the codebase where we're directly reading >32 bytes from the RNG\": what happens in that case? If bad, maybe add an assert or comment in GenerateAuthCookie that const size_t COOKIE_SIZE = 32; shouldn't be increased.\r\n\r\nThere already is an assert: `assert(num <= 32);` in `ProcRand()`.\r\n\r\n> 1a3b26e the usage of RandAddSeedPerfmon is a bit weird. It's called by all operating systems, but its entire content is wrapped in #ifdef WIN32. On top of that, it can now fail without complaining (because it's non-critical). If static bool warned is hard to deal with, why not give the function a return value? Maybe move both the ifdef and failure handling to the caller of this function (with or without the log statement). Both callers already know this is a Windows only thing, as evidenced by their comments.\r\n\r\nAs I've pointed out before, we may want to add similar perfmon data for other platforms.\r\n\r\n> 772fce7 OpenSSL docs say \"OpenSSL can generally be used safely in multi-threaded applications provided that at least two callback functions are set, the locking_function and threadid_func\", but we're not using the latter. Do we meet the conditions stated further down the doc for when that's safe?\r\n\r\nThe docs also point out that on systems with thread-safe errno, its address is used as thread identifier. I believe that's the case on all supported platforms.\r\n\r\n> b83c06a what benefits do you expect from the noexcept sprinkling? Safety, readability or performance? What's the worst case scenario if you're wrong about any of them?\r\n\r\nMaking the function's behavior more explicit to developers, and performance. The worst case about being wrong about them is that certain optimizations can't be used (for example, when a constructor can directly or indirectly throw, more complicated deconstructors are needed; or when a move operator can throw it can't be used for efficiently moving data between containers and necessitating a copy/delete instead).\r\n\r\n> 63dc0ad previously we only used secure_allocator in CKey and (wallet) CCrypter. Not sure if it matters at all to expand its usage, but I don't pretent to even remotely understand the existing magic in secure_allocator\r\n\r\nIt shouldn't. It's the right tool for the job (preventing sensitive material from leaking into swap files), so I don't see why we shouldn't use it.",
      "created_at" : "2019-01-16T18:19:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-454884964",
      "id" : 454884964,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NDg4NDk2NA==",
      "updated_at" : "2019-01-16T18:19:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454884964",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248397267"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248397267"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Does this refer to an accidental scenario, where a user ends up generating the same private keys or accidentally signing with the same nonce? Or also a malicious scenario?\r\n\r\nDoes it matter whether it can be triggered accidentally or intentionally?\r\n\r\n> So do I understand correctly that the reason FastRandomContext needs to fast is (mostly) this, or are there also areas of code that need the additional performance?\r\n\r\nI don't understand the question or the relation with the code you're commenting on.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:22:02Z",
      "diff_hunk" : "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248397267",
      "id" : 248397267,
      "in_reply_to_id" : 248194305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5NzI2Nw==",
      "original_commit_id" : "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "original_position" : 19,
      "path" : "src/random.h",
      "position" : 19,
      "pull_request_review_id" : 193283085,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248397267",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248398342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248398342"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> \"as a last resort\" makes it sound really important, which contradicts \"it is isn't considered critical\".\r\n\r\nI don't understand the contradiction.\r\n\r\nWe generally assume that the OS RNG is providing us with good randomness. It's only in highly unlikely (but hard to prevent) scenarios that it fails at that. As a last resort belt-and-suspenders, we also seed entropy from elsewhere. However, that additional entropy (perfmon data here) isn't necessarily good, or to be relied upon. It's just there to make an otherwise fatal but unlikely error less dramatic, but it can't be more than a best effort regardless.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:25:10Z",
      "diff_hunk" : "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248398342",
      "id" : 248398342,
      "in_reply_to_id" : 248206611,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5ODM0Mg==",
      "original_commit_id" : "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "original_position" : 11,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193284478,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248398342",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248398859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248398859"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You're nitpicking. Nowhere do we use a naming style where a lowercase character after an uppercase one starts a new word.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:26:36Z",
      "diff_hunk" : "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248398859",
      "id" : 248398859,
      "in_reply_to_id" : 248218873,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5ODg1OQ==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 20,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193285095,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248398859",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399032"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Seriously, read the documentation if this isn't clear.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:27:04Z",
      "diff_hunk" : "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()\n+{\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399032",
      "id" : 248399032,
      "in_reply_to_id" : 248227342,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5OTAzMg==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 22,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193285332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399032",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399514"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It doesn't?\r\n\r\nWe just want to make sure it's at least once initialized with sufficient entropy before the caller (ProcRand) wants to use its output.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:28:23Z",
      "diff_hunk" : "@@ -331,14 +307,19 @@ struct RNGState {\n         CRYPTO_set_locking_callback(nullptr);\n     }\n \n-    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n-    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with full_init = true, false is returned.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399514",
      "id" : 248399514,
      "in_reply_to_id" : 248260207,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5OTUxNA==",
      "original_commit_id" : "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "original_position" : 74,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193285936,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399514",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399701"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, but not through this code path.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:28:54Z",
      "diff_hunk" : "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399701",
      "id" : 248399701,
      "in_reply_to_id" : 248271203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODM5OTcwMQ==",
      "original_commit_id" : "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "original_position" : 189,
      "path" : "src/random.cpp",
      "position" : 332,
      "pull_request_review_id" : 193286158,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248399701",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248400496"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248400496"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, it does refer to the broader sense, including seeding.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:31:09Z",
      "diff_hunk" : "@@ -178,7 +178,12 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n-/** Initialize the RNG. */\n+/**\n+ * Initialize global RNG state and log any CPU features that are used.\n+ *\n+ * Calling this function is optional. RNG state will be initialized when first\n+ * needed if it is not called.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248400496",
      "id" : 248400496,
      "in_reply_to_id" : 248236954,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwMDQ5Ng==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 9,
      "path" : "src/random.h",
      "position" : 172,
      "pull_request_review_id" : 193287146,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248400496",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248400704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248400704"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The only difference is that it lets you specify the name of the lock variable.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:31:40Z",
      "diff_hunk" : "@@ -298,6 +298,34 @@ struct RNGState {\n     {\n         HWRandInit();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248400704",
      "id" : 248400704,
      "in_reply_to_id" : 248246123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwMDcwNA==",
      "original_commit_id" : "d76cc6dbb9e1c5c6a0f3b002932ba4033b722255",
      "original_position" : 12,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193287408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248400704",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248405785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248405785"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I was trying to understand _why_ it needs to be fast. The explanation here suggests it's mostly about protecting against some sort of VM replay scenario. But in later commits it's clear that there's also a performance concern, e.g. the Perfmon can take two seconds.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:46:17Z",
      "diff_hunk" : "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248405785",
      "id" : 248405785,
      "in_reply_to_id" : 248194305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwNTc4NQ==",
      "original_commit_id" : "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "original_position" : 19,
      "path" : "src/random.h",
      "position" : 19,
      "pull_request_review_id" : 193293744,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248405785",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248407517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248407517"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, I see. I think you're looking at it the wrong way. Of course there are many places in the code where we need fast randomness (of various sizes); the issue that the speed concern means we can't do very good seeding, so we need a separate function for the few places where we _really_ need good randomness (GetStrongRandBytes).",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:51:09Z",
      "diff_hunk" : "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248407517",
      "id" : 248407517,
      "in_reply_to_id" : 248194305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwNzUxNw==",
      "original_commit_id" : "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "original_position" : 19,
      "path" : "src/random.h",
      "position" : 19,
      "pull_request_review_id" : 193295949,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248407517",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248408522"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248408522"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The way I read the phrase \"as a last resort\" is: *if* there was a way to detect that our RNG attempts thus far have failed, we try this thing as a last resort. In the last resort also fails, that's critical. Hence the contraction.\r\n\r\nBut because we normally can't detect if we actually needed the last resort, we don't know if the failure was critical, and most likely it wasn't.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:53:54Z",
      "diff_hunk" : "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248408522",
      "id" : 248408522,
      "in_reply_to_id" : 248206611,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwODUyMg==",
      "original_commit_id" : "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "original_position" : 11,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193297172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248408522",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248409459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248409459"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I spent at least half an hour being confused about what `HWRandInit` and `HWRandReport` were doing, otherwise I wouldn't have brought up this up.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T18:56:30Z",
      "diff_hunk" : "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248409459",
      "id" : 248409459,
      "in_reply_to_id" : 248218873,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQwOTQ1OQ==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 20,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193298383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248409459",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248412403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248412403"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I do understand that fast also implies weak. The question is why you would ever accept weak, if you already code from strong. The obvious answer is performance. But the comment here talks about a VM replay scenario.\r\n\r\nBut now I see what confused me: \"These entropy sources are very fast, and mostly designed to protect against situations  where a VM state restore\" - the part after \"and\" doesn't refer to \"fast\"; they are an _additional_ benefit of these sources.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T19:05:21Z",
      "diff_hunk" : "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248412403",
      "id" : 248412403,
      "in_reply_to_id" : 248194305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQxMjQwMw==",
      "original_commit_id" : "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "original_position" : 19,
      "path" : "src/random.h",
      "position" : 19,
      "pull_request_review_id" : 193302217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248412403",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248412855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248412855"
         }
      },
      "author_association" : "MEMBER",
      "body" : "FastButStillHardToReplayRandomContext :-P",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T19:06:48Z",
      "diff_hunk" : "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248412855",
      "id" : 248412855,
      "in_reply_to_id" : 248194305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQxMjg1NQ==",
      "original_commit_id" : "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "original_position" : 19,
      "path" : "src/random.h",
      "position" : 19,
      "pull_request_review_id" : 193302820,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248412855",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248413469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248413469"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, `FastRandomContext` does *not* protect against replay. `GetRand*()` does.\r\n\r\nThe constructor of FRC does use GetRandBytes, but once you have a RFC, any replay is going to result in repeated randomness produced by RFC.\r\n",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T19:08:51Z",
      "diff_hunk" : "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248413469",
      "id" : 248413469,
      "in_reply_to_id" : 248194305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQxMzQ2OQ==",
      "original_commit_id" : "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "original_position" : 19,
      "path" : "src/random.h",
      "position" : 19,
      "pull_request_review_id" : 193303637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248413469",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248419894"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248419894"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah yes, see #14623 about keeping `FastRandomContext` available for \"non-critical random numbers needed inside tight loops\".",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T19:29:20Z",
      "diff_hunk" : "@@ -13,33 +13,81 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and mostly designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248419894",
      "id" : 248419894,
      "in_reply_to_id" : 248194305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQxOTg5NA==",
      "original_commit_id" : "3b001b09e840c04b06c0ec6689ed666d68e58cb1",
      "original_position" : 19,
      "path" : "src/random.h",
      "position" : 19,
      "pull_request_review_id" : 193312370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248419894",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248458454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248458454"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Automatically initialize RNG on first use.\" (2a02d2c369ee06cbc334a0dd7150ec72ef83a182)\r\n\r\nIgnore if this is a pain, or if there is nostalgia for critical sections, but you might want to use `m_mutex` instead of `cs` here, and `m_openssl_mutex` instead of `cs_openssl` in 772fce745c51aa9d09f93e13eeb822e889ae25f7",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T21:32:19Z",
      "diff_hunk" : "@@ -278,6 +288,26 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+namespace {\n+struct RNGState {\n+    Mutex cs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248458454",
      "id" : 248458454,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ1ODQ1NA==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 43,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193362488,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248458454",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248467631"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248467631"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Encapsulate RNGState better\" (bfd3a23f277c16236ba6ea7391a98277226c1470)\r\n\r\nSeems more accurate to call it Mutex than Lock (as in 7939daa351a31a36f2086771611b501418536989), if Mutex is the object that gets locked, and Lock is the object that locks it.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-16T22:02:16Z",
      "diff_hunk" : "@@ -336,6 +337,8 @@ struct RNGState {\n         memory_cleanse(buf, 64);\n         return ret;\n     }\n+\n+    Mutex& GetOpenSSLLock(int i) { return cs_openssl[i]; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248467631",
      "id" : 248467631,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ2NzYzMQ==",
      "original_commit_id" : "bfd3a23f277c16236ba6ea7391a98277226c1470",
      "original_position" : 21,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193362488,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248467631",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248496977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248496977"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Reformulated the text a bit.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:00:33Z",
      "diff_hunk" : "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248496977",
      "id" : 248496977,
      "in_reply_to_id" : 248206611,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5Njk3Nw==",
      "original_commit_id" : "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "original_position" : 11,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193410076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248496977",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497019"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:00:53Z",
      "diff_hunk" : "@@ -166,13 +166,12 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only used as a last resort to improve entropy.\n+        // Failure to read it is isn't conidered critical, so we don't call",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497019",
      "id" : 248497019,
      "in_reply_to_id" : 248206697,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzAxOQ==",
      "original_commit_id" : "1a3b26e8e3ee64420cb5081de97ce1944f8b9a7a",
      "original_position" : 12,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193410131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497019",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497110"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, added a separate commit with renames and the comments on HWRNG performance you suggested elsewhere.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:01:23Z",
      "diff_hunk" : "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497110",
      "id" : 248497110,
      "in_reply_to_id" : 248228186,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzExMA==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 10,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193410257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497110",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497144"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:01:34Z",
      "diff_hunk" : "@@ -74,22 +74,32 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void HWRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void HWRandReport()\n+{\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));\n+    if (rdrand_supported) {\n+        // This must be done in a separate function, as HWRandInit() may be indirectly called\n+        // from global constructors, before logging is initialized.\n+        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n+    }\n+}\n+\n #else\n-static void RDRandInit() {}\n+static void HWRandInit() {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497144",
      "id" : 248497144,
      "in_reply_to_id" : 248230465,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzE0NA==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 32,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193410301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497144",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497222"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a similar comment to the RNGState::m_state variable.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:01:57Z",
      "diff_hunk" : "@@ -278,6 +288,26 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+namespace {\n+struct RNGState {\n+    Mutex cs;\n+    unsigned char state[32] = {0};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497222",
      "id" : 248497222,
      "in_reply_to_id" : 248231617,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzIyMg==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 44,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193410399,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497222",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497286"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed to `m_strongly_seeded`.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:02:18Z",
      "diff_hunk" : "@@ -297,6 +280,7 @@ struct RNGState {\n     Mutex cs;\n     unsigned char state[32] GUARDED_BY(cs) = {0};\n     uint64_t counter GUARDED_BY(cs) = 0;\n+    bool initialized GUARDED_BY(cs) = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497286",
      "id" : 248497286,
      "in_reply_to_id" : 248261482,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzI4Ng==",
      "original_commit_id" : "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "original_position" : 47,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193410471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497286",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497334"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497334"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, I see the confusion. Removed that phrasing.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:02:36Z",
      "diff_hunk" : "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHWRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n-        hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497334",
      "id" : 248497334,
      "in_reply_to_id" : 248271203,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzMzNA==",
      "original_commit_id" : "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "original_position" : 189,
      "path" : "src/random.cpp",
      "position" : 332,
      "pull_request_review_id" : 193410528,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497334",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497372"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:02:48Z",
      "diff_hunk" : "@@ -380,61 +362,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497372",
      "id" : 248497372,
      "in_reply_to_id" : 248272384,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzM3Mg==",
      "original_commit_id" : "c6fb96c8760059d6015682fb63dce78efe8154f2",
      "original_position" : 123,
      "path" : "src/random.cpp",
      "position" : 261,
      "pull_request_review_id" : 193410574,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497372",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497443"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:03:09Z",
      "diff_hunk" : "@@ -278,6 +288,26 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+namespace {\n+struct RNGState {\n+    Mutex cs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497443",
      "id" : 248497443,
      "in_reply_to_id" : 248458454,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzQ0Mw==",
      "original_commit_id" : "2a02d2c369ee06cbc334a0dd7150ec72ef83a182",
      "original_position" : 43,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193410667,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497443",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497470"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "created_at" : "2019-01-17T00:03:18Z",
      "diff_hunk" : "@@ -336,6 +337,8 @@ struct RNGState {\n         memory_cleanse(buf, 64);\n         return ret;\n     }\n+\n+    Mutex& GetOpenSSLLock(int i) { return cs_openssl[i]; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497470",
      "id" : 248497470,
      "in_reply_to_id" : 248467631,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODQ5NzQ3MA==",
      "original_commit_id" : "bfd3a23f277c16236ba6ea7391a98277226c1470",
      "original_position" : 21,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 193410691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14955",
      "updated_at" : "2019-01-17T00:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248497470",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Wonderful, re-tACK 223de8d",
      "created_at" : "2019-01-17T12:16:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-455151917",
      "id" : 455151917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NTE1MTkxNw==",
      "updated_at" : "2019-01-17T12:16:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/455151917",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "FWIW, I've benchmarked this before and after this PR on my system. GetRandBytes goes from around ~1 ÃÂ¼s to ~3 ÃÂ¼s. GetStrongRandBytes stays around ~10 ÃÂ¼s. Note that GetRandBytes is no longer called inside tight loops since #14624.",
      "created_at" : "2019-01-17T19:05:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-455291623",
      "id" : 455291623,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14955",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NTI5MTYyMw==",
      "updated_at" : "2019-01-17T19:05:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/455291623",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
