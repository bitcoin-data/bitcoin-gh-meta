[
   {
      "author_association" : "MEMBER",
      "body" : "Hey @kiminuo, can you amend the commit and remove my mention? Keep in mind that mentions in commits lead to notifications. Ty.",
      "created_at" : "2021-03-12T10:45:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-797405001",
      "id" : 797405001,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5NzQwNTAwMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-12T10:45:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797405001",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Hey @kiminuo, can you amend the commit and remove my mention? Keep in mind that mentions in commits lead to notifications. Ty.\r\n\r\nYes, sorry for that.",
      "created_at" : "2021-03-12T10:46:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-797405777",
      "id" : 797405777,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5NzQwNTc3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-12T10:46:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797405777",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for picking this up.",
      "created_at" : "2021-03-12T19:34:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-797707560",
      "id" : 797707560,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5NzcwNzU2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-12T19:34:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797707560",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept NACK | [0xB10C](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1467960000) |\n| Concept ACK | [jonatack](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-803550651), [JeremyRubin](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819566377), [ghost](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-899258623), [jamesob](https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-813031121), [molnard](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1369590171), [sipa](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1369866129) |\n| Stale ACK | [stratospher](https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-805113100), [kristapsk](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1468044559) |\n| Ignored review | [glozow](https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-1336717945) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26525](https://github.com/bitcoin/bitcoin/pull/26525) (Remove -mempoolfullrbf option by BitcoinErrorLog)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2021-03-16T11:09:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-800167374",
      "id" : 800167374,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMDE2NzM3NA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 1,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800167374/reactions"
      },
      "updated_at" : "2023-03-14T15:42:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800167374",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. For the test commit, maybe a more descriptive title that can be understood on its own.\r\n",
      "created_at" : "2021-03-21T10:31:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-803550651",
      "id" : 803550651,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMzU1MDY1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-21T10:31:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803550651",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258602"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use a named cast (and can be const)",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T10:45:32Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258602",
      "id" : 598258602,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1ODYwMg==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1518,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617005701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258602",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258707"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258707"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            for (int i = limits.size() - 1; i >= 0; --i) {\r\n```",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T10:46:21Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258707",
      "id" : 598258707,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1ODcwNw==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1532,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617005701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258707",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258754"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                    ++count[i];\r\n```",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T10:46:47Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598258754",
      "id" : 598258754,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1ODc1NA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1535,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617005701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598258754",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259105"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Are `size`, `asize` and `dsize` guaranteed to be non-zero? Can they be `const`?",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T10:49:09Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259105",
      "id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1OTEwNQ==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617005701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259105",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259294"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        for (size_t i = 0; i < limits.size(); ++i) {\r\n```",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T10:50:32Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259294",
      "id" : 598259294,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1OTI5NA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1544,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617005701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259362"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        for (unsigned int i = 0; i < feelimits_univalue.size(); ++i) {\r\n```",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T10:51:28Z",
      "diff_hunk" : "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureMemPool(request.context));\n+    MempoolHistogramFeeLimits feelimits;\n+    std::optional<MempoolHistogramFeeLimits> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+        for (unsigned int i = 0; i < feelimits_univalue.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259362",
      "id" : 598259362,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1OTM2Mg==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1614,
      "original_position" : 129,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617005701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259362",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259414"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you add an example?",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T10:52:04Z",
      "diff_hunk" : "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598259414",
      "id" : 598259414,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI1OTQxNA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1605,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617005701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598259414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260229"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The decimal stdlib import should be before the framework imports per PEP8, separated by a blank line ",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T10:58:31Z",
      "diff_hunk" : "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+from decimal import Decimal",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260229",
      "id" : 598260229,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI2MDIyOQ==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 14,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : null,
      "pull_request_review_id" : 617005701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260229",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260474"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The new test file has incorrect permissions:\r\n```\r\n-rwxr-xr-x 1   5133 Mar 17 15:30 mempool_expiry.py*\r\n-rw-r--r-- 1   1716 Mar 21 11:56 mempool_fee_histogram.py\r\n-rwxr-xr-x 1   3494 Mar  1 11:53 mempool_limit.py*\r\n```\r\nI had to run `sudo chmod 755 test/functional/mempool_fee_histogram.py` to be able to call the test directly, e.g. with `test/functional/mempool_fee_histogram.py`",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T11:00:31Z",
      "diff_hunk" : "@@ -225,6 +225,7 @@\n     'feature_nulldummy.py --descriptors',\n     'mempool_accept.py',\n     'mempool_expiry.py',\n+    'mempool_fee_histogram.py',",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598260474",
      "id" : 598260474,
      "line" : 229,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI2MDQ3NA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 229,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/test_runner.py",
      "position" : 4,
      "pull_request_review_id" : 617005701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598260474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598261128"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598261128"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is the argument a string or a JSON array? (if an array, I think there needs to be another line that specifies the element type, e.g. number, string, or amount, probably the latter).",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T11:06:03Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    // {\"with_fee_histogram\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for including the fee histogram in the response\"},\n+                    {\"fee_histogram\", RPCArg::Type::STR, /* default */ \"false\", \"Provide fee limits in format: '1,2,3,5,200,1000'\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598261128",
      "id" : 598261128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODI2MTEyOA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1576,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617007432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598261128",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack Thanks for the superb review! I'm working on incorporating your suggestions.",
      "created_at" : "2021-03-21T20:23:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-803653818",
      "id" : 803653818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMzY1MzgxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-21T20:23:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803653818",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598342760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598342760"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack This is a part of the original PR I need to research more.\r\n\r\nDo you possibly have a tip where to learn how to properly compute `feeperbyte` value for a transaction? Or possibly who would know that? \r\n\r\nAnyway, I'm slowly skimming Bitcoin Core codebase so maybe I'll be lucky :-)",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-21T21:46:28Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598342760",
      "id" : 598342760,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODM0Mjc2MA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617065184,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598342760",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472515"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed, thanks!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-22T07:20:55Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472515",
      "id" : 598472515,
      "in_reply_to_id" : 598258707,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MjUxNQ==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1532,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617206365,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472588"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed, thanks!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-22T07:21:09Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472588",
      "id" : 598472588,
      "in_reply_to_id" : 598258754,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MjU4OA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1535,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617206471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472588",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472646"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472646"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed, thanks!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-22T07:21:16Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472646",
      "id" : 598472646,
      "in_reply_to_id" : 598259294,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MjY0Ng==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1544,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617206522,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472646",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472692"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed, thanks!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-22T07:21:21Z",
      "diff_hunk" : "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureMemPool(request.context));\n+    MempoolHistogramFeeLimits feelimits;\n+    std::optional<MempoolHistogramFeeLimits> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+        for (unsigned int i = 0; i < feelimits_univalue.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598472692",
      "id" : 598472692,
      "in_reply_to_id" : 598259362,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MjY5Mg==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1614,
      "original_position" : 129,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 617206566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598472692",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473434"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hopefully, it's correct now. ",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-22T07:23:09Z",
      "diff_hunk" : "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+from decimal import Decimal",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473434",
      "id" : 598473434,
      "in_reply_to_id" : 598260229,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MzQzNA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 14,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : null,
      "pull_request_review_id" : 617207546,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473434",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473687"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473687"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I fixed this. Thanks!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-22T07:23:44Z",
      "diff_hunk" : "@@ -225,6 +225,7 @@\n     'feature_nulldummy.py --descriptors',\n     'mempool_accept.py',\n     'mempool_expiry.py',\n+    'mempool_fee_histogram.py',",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r598473687",
      "id" : 598473687,
      "in_reply_to_id" : 598260474,
      "line" : 229,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODQ3MzY4Nw==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 229,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/test_runner.py",
      "position" : 4,
      "pull_request_review_id" : 617207865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/598473687",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599793002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599793002"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The argument is a JSON array of amounts (fees). I have fixed it.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T17:38:39Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    // {\"with_fee_histogram\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for including the fee histogram in the response\"},\n+                    {\"fee_histogram\", RPCArg::Type::STR, /* default */ \"false\", \"Provide fee limits in format: '1,2,3,5,200,1000'\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599793002",
      "id" : 599793002,
      "in_reply_to_id" : 598261128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTc5MzAwMg==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1576,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618888213,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599793002",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599832829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599832829"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added an example.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T18:31:07Z",
      "diff_hunk" : "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599832829",
      "id" : 599832829,
      "in_reply_to_id" : 598259414,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTgzMjgyOQ==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1605,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618938369,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599832829",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599863046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599863046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For computing a fee rate per byte, have a look in `src/policy/feerate.{h, cpp}`. Here's a proposed diff (using the current code) to do explicit casts rather than implicit conversions and narrowing. The size denominators are calling `GetTxSize()`, which should be non-zero, but you can `CHECK_NONFATAL` on these. That said, you may be right that it can be done properly/better, as you asked, by using the `CFeeRate` ctors.\r\n\r\n<details><summary>diff</summary><p>\r\n\r\n```diff\r\n         for (const CTxMemPoolEntry& e : pool.mapTx) {\r\n-            const int size = (int)e.GetTxSize();\r\n-            CAmount fee = e.GetFee();\r\n-            uint64_t asize = e.GetSizeWithAncestors();\r\n-            CAmount afees = e.GetModFeesWithAncestors();\r\n-            uint64_t dsize = e.GetSizeWithDescendants();\r\n-            CAmount dfees = e.GetModFeesWithDescendants();\r\n-\r\n-            CAmount fpb = fee / size; // fee per byte\r\n-            CAmount afpb = afees / asize; // fee per byte including ancestors\r\n-            CAmount dfpb = dfees / dsize; // fee per byte including descendants\r\n-            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\r\n-            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\r\n+            const CAmount fee{e.GetFee()};\r\n+            const CAmount afees{e.GetModFeesWithAncestors()};\r\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\r\n+\r\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\r\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\r\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\r\n+\r\n+            CHECK_NONFATAL(size > 0);\r\n+            CHECK_NONFATAL(asize > 0);\r\n+            CHECK_NONFATAL(dsize > 0);\r\n+            CHECK_NONFATAL(asize + dsize - size > 0);\r\n+\r\n+            CAmount fpb{fee / size};     // fee per byte\r\n+            CAmount afpb{afees / asize}; // fee per byte including ancestors\r\n+            CAmount dfpb{dfees / dsize}; // fee per byte including descendants\r\n+            CAmount tfpb{(afees + dfees - fee) / (asize + dsize - size)};\r\n+            CAmount feeperbyte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n```\r\n</p></details>\r\n",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:16:45Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599863046",
      "id" : 599863046,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg2MzA0Ng==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618977549,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599863046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599864037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599864037"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(note, `CAmount` is `int64_t`, see `src/amount.h`)",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:18:20Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599864037",
      "id" : 599864037,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg2NDAzNw==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618978887,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599864037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599868315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599868315"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> The argument is a JSON array of amounts (fees). I have fixed it.\r\n\r\nYes, seems better now\r\n```\r\nArguments:\r\n1. fee_histogram    (json array, optional) Fee amounts\r\n     [\r\n       fee,         (numeric or string, required) A fee amount\r\n       ...\r\n     ]\r\n```",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:25:16Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; i--) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    // {\"with_fee_histogram\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for including the fee histogram in the response\"},\n+                    {\"fee_histogram\", RPCArg::Type::STR, /* default */ \"false\", \"Provide fee limits in format: '1,2,3,5,200,1000'\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599868315",
      "id" : 599868315,
      "in_reply_to_id" : 598261128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg2ODMxNQ==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1576,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618984524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599868315",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599873660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599873660"
         }
      },
      "author_association" : "MEMBER",
      "body" : "New examples look good, thanks.\r\n```\r\n> bitcoin-cli getmempoolinfo \r\n> bitcoin-cli getmempoolinfo [\"0.00000001\",\"0.00000010\",\"0.00000100\",\"0.00000200\",\"0.00000400\",\"0.00000800\"]\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": [[\"0.00000001\",\"0.00000010\",\"0.00000100\",\"0.00000200\",\"0.00000400\",\"0.00000800\"]]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n```\r\n",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:33:41Z",
      "diff_hunk" : "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599873660",
      "id" : 599873660,
      "in_reply_to_id" : 598259414,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3MzY2MA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1605,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618991407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599873660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599875604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599875604"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like the help is missing the \"ranges\" JSON object, returned by the output, that encompasses the feerate groups (tested on signet):\r\n\r\nhelp\r\n```\r\n\"fee_histogram\" : {        (json object)\r\n    \"<feerate-group>\" : {    (json object) Object per feerate group\r\n      \"sizes\" : n,           (numeric) Cumulated size of all transactions in feerate group\r\n      \"count\" : n,           (numeric) Amount of transactions in feerate group\r\n      \"fees\" : n,            (numeric) Cumulated fee of all transactions in feerate group\r\n      \"from_feerate\" : n,    (numeric) Group contains transaction with feerates equal or greater than this value\r\n      \"to_feerate\" : n       (numeric) Group contains transaction with feerates less than than this value\r\n    },\r\n```\r\nactual output\r\n```\r\n  \"fee_histogram\": {\r\n    \"ranges\": {\r\n      \"0.00000001\": {\r\n        \"sizes\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from_feerate\": \"0.00000001\",\r\n        \"to_feerate\": \"0.0000001\"\r\n      },\r\n      ...\r\n```\r\n",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:36:53Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599875604",
      "id" : 599875604,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3NTYwNA==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1595,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618993997,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599875604",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877072"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877072"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Great!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:39:12Z",
      "diff_hunk" : "@@ -1520,15 +1586,43 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},\n+                                }},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool\"},\n+                            }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877072",
      "id" : 599877072,
      "in_reply_to_id" : 598259414,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3NzA3Mg==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1605,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618995866,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877072",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877546"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877546"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks. Will have a look!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:40:01Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877546",
      "id" : 599877546,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3NzU0Ng==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618996495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877546",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877954"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I see. Will fix. Thank you",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:40:40Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599877954",
      "id" : 599877954,
      "in_reply_to_id" : 599875604,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg3Nzk1NA==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1595,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 618997026,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599877954",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599880561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599880561"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IIUC these should be feerates, not fees\r\n```suggestion\r\n                            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"Fee rate to group the fees by\"},\r\n```",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:44:07Z",
      "diff_hunk" : "@@ -1501,14 +1502,82 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; --i) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee amounts\",\n+                        {\n+                            {\"fee\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A fee amount\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599880561",
      "id" : 599880561,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4MDU2MQ==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1577,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619000071,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599880561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599884912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599884912"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If I understand correctly, this should be something like \"Fee statistics grouped by feerate ranges\"",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:50:43Z",
      "diff_hunk" : "@@ -1501,14 +1502,82 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; --i) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee amounts\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599884912",
      "id" : 599884912,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4NDkxMg==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1575,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619005710,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599884912",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599886221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599886221"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                                    {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\r\n```",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:52:15Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599886221",
      "id" : 599886221,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4NjIyMQ==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1597,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619007089,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599886221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599888505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599888505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Probably both should be \"fees\" in this sentence, like in line 1603.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:56:13Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599888505",
      "id" : 599888505,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4ODUwNQ==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1599,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619010167,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599888505",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599889272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599889272"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/transaction/transactions/ in both lines 1600 and 1601\r\n\r\ns/than than/than/",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-23T19:57:21Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r599889272",
      "id" : 599889272,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTg4OTI3Mg==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1601,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619011160,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599889272",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Sorry for the \"rolling\" review comments. My internet can drop out several times an hour, so it's to avoid losing the review in progress.",
      "created_at" : "2021-03-23T19:59:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-805196045",
      "id" : 805196045,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwNTE5NjA0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-23T19:59:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/805196045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210241"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, my comment didn't make it through the internet:\r\n\r\nIt would be good to use feerate values in sat/vB for both the user input and the output here, as we are slowly moving from BTC/kvB to sat/vB fee rate units, per user demand.\r\n\r\nCurrently, you can construct a feerate from a sat/vB amount with `CFeeRate{amount, COIN}`. I proposed `CFeeRate::FromSatB` and `FromBtcKb` named constructors in #20790, #20391, #20546 but none of the three are/were merged.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-24T06:42:11Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210241",
      "id" : 600210241,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDI0MQ==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619369988,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210241",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210767"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thanks!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-24T06:43:29Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transaction with feerates equal or greater than this value\"},\n+                                    {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transaction with feerates less than than this value\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210767",
      "id" : 600210767,
      "in_reply_to_id" : 599889272,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDc2Nw==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1601,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619370649,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210809"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thanks!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-24T06:43:34Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                    {RPCResult::Type::NUM, \"fees\", \"Cumulated fee of all transactions in feerate group\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210809",
      "id" : 600210809,
      "in_reply_to_id" : 599888505,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDgwOQ==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1599,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619370683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210809",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210842"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thanks!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-24T06:43:39Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                {\n+                                    {RPCResult::Type::NUM, \"sizes\", \"Cumulated size of all transactions in feerate group\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210842",
      "id" : 600210842,
      "in_reply_to_id" : 599886221,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDg0Mg==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1597,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619370727,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210927"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thanks!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-24T06:43:53Z",
      "diff_hunk" : "@@ -1501,14 +1502,82 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // Distribute feerates into feelimits\n+            for (int i = limits.size() - 1; i >= 0; --i) {\n+                if (feeperbyte >= limits[i].second) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue ranges(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", limits[i].first);\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to_feerate\", \"Max\"); // TODO.\n+            } else {\n+                info_sub.pushKV(\"to_feerate\", limits[i + 1].first);\n+            }\n+\n+            total_fees += fees[i];\n+            ranges.pushKV(limits[i].first, info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"ranges\", ranges);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee amounts\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600210927",
      "id" : 600210927,
      "in_reply_to_id" : 599884912,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMDkyNw==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1575,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619370843,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600210927",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600211868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600211868"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Originally, fee rates were in sats but then I found https://github.com/bitcoin/bitcoin/pull/12240 which made me think that sats -> BTC is preferred. ",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-24T06:46:19Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600211868",
      "id" : 600211868,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMTg2OA==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619372049,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600211868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213131"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "So I will switch it back to use sats. Thanks for the `CFeeRate{amount, COIN}` tip!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-24T06:49:29Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213131",
      "id" : 600213131,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMzEzMQ==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619373626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213131",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213464"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It should be fixed now. Even though I still think `ranges` is not a good word. `groups`?",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-24T06:50:17Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600213464",
      "id" : 600213464,
      "in_reply_to_id" : 599875604,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDIxMzQ2NA==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1595,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 619374017,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600213464",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600784015"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600784015"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack Do I understand correctly that `CAmount fpb = fee / size` is equivalent with `CAmount fpb = CFeeRate(fee, size).GetFee(1)`? Is that what you propose to use?\r\n",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-24T18:57:58Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r600784015",
      "id" : 600784015,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDc4NDAxNQ==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 620130983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/600784015",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601617528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601617528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "naming style nit, per developer-notes.md \r\n```suggestion\r\n            CAmount fee_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n```",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-25T15:53:20Z",
      "diff_hunk" : "@@ -1501,14 +1502,88 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\n+\n+            CHECK_NONFATAL(size > 0);\n+            CHECK_NONFATAL(asize > 0);\n+            CHECK_NONFATAL(dsize > 0);\n+            CHECK_NONFATAL(asize + dsize - size > 0);\n+\n+            CAmount fpb{fee / size};     // fee per byte\n+            CAmount afpb{afees / asize}; // fee per byte including ancestors\n+            CAmount dfpb{dfees / dsize}; // fee per byte including descendants\n+            CAmount tfpb{(afees + dfees - fee) / (asize + dsize - size)};\n+            CAmount feeperbyte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601617528",
      "id" : 601617528,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTYxNzUyOA==",
      "original_commit_id" : "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
      "original_line" : 1535,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621285483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601617528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601666661"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601666661"
         }
      },
      "author_association" : "MEMBER",
      "body" : "missing quotes in the first example, I think, and perhaps use example fee rates that return more interesting results\r\n```diff\r\n-                    HelpExampleCli(\"getmempoolinfo\", R\"([1, 10, 100, 200, 400, 800])\") +\r\n+                    HelpExampleCli(\"getmempoolinfo\", R\"('[1, 5, 10, 25, 50, 100]')\") +\r\n                     HelpExampleRpc(\"getmempoolinfo\", \"\") +\r\n-                    HelpExampleRpc(\"getmempoolinfo\", R\"([1, 10, 100, 200, 400, 800])\")\r\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([1, 5, 10, 25, 50, 100])\")\r\n```\r\n",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-25T16:49:15Z",
      "diff_hunk" : "@@ -1520,15 +1595,42 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"ranges\", \"Feerate groups\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulated fees of all transactions in feerate group (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transactions with feerates equal or greater than this value (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transactions with feerates less than this value (in satoshis)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in satoshis)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"([1, 10, 100, 200, 400, 800])\") +",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601666661",
      "id" : 601666661,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTY2NjY2MQ==",
      "original_commit_id" : "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
      "original_line" : 1616,
      "original_position" : 132,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621285483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601666661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601711097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601711097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This field seems to be the same as the `total_fee` field above in the same output (except that it is now in sat/vB instead of BTC/kvB)?",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-25T17:44:17Z",
      "diff_hunk" : "@@ -1520,15 +1595,42 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"ranges\", \"Feerate groups\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulated fees of all transactions in feerate group (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transactions with feerates equal or greater than this value (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transactions with feerates less than this value (in satoshis)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in satoshis)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601711097",
      "id" : 601711097,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTcxMTA5Nw==",
      "original_commit_id" : "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
      "original_line" : 1611,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621285483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601711097",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601729062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601729062"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You can verify this with, for example\r\n```cpp\r\n            assert(fpb == CFeeRate(fee, size).GetFee(1));\r\n            assert(afpb == CFeeRate(afees, asize).GetFee(1));\r\n            assert(dfpb == CFeeRate(dfees, dsize).GetFee(1));\r\n            assert(tfpb == CFeeRate(afees + dfees - fee, asize + dsize - size).GetFee(1));\r\n```\r\n(I left this as a hint in the suggestions in https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-621285483, but please remove it and decide what you think is best)",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-25T18:07:44Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601729062",
      "id" : 601729062,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTcyOTA2Mg==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621434271,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601729062",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601730401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601730401"
         }
      },
      "author_association" : "MEMBER",
      "body" : "maybe `fee rate groups`",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-25T18:09:32Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r601730401",
      "id" : 601730401,
      "in_reply_to_id" : 599875604,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTczMDQwMQ==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1595,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621435975,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/601730401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602114346"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602114346"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks! Applied.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-26T08:59:39Z",
      "diff_hunk" : "@@ -1501,14 +1502,88 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\n+\n+            CHECK_NONFATAL(size > 0);\n+            CHECK_NONFATAL(asize > 0);\n+            CHECK_NONFATAL(dsize > 0);\n+            CHECK_NONFATAL(asize + dsize - size > 0);\n+\n+            CAmount fpb{fee / size};     // fee per byte\n+            CAmount afpb{afees / asize}; // fee per byte including ancestors\n+            CAmount dfpb{dfees / dsize}; // fee per byte including descendants\n+            CAmount tfpb{(afees + dfees - fee) / (asize + dsize - size)};\n+            CAmount feeperbyte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602114346",
      "id" : 602114346,
      "in_reply_to_id" : 601617528,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNDM0Ng==",
      "original_commit_id" : "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
      "original_line" : 1535,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621906152,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602114346",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You are right. I have used the values from the first chart on http://bitcoin-mempool.info website and those are actually the same as the values in the [original PR](https://github.com/bitcoin/bitcoin/pull/15836/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1497).",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-26T09:00:58Z",
      "diff_hunk" : "@@ -1520,15 +1595,42 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"ranges\", \"Feerate groups\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulated fees of all transactions in feerate group (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transactions with feerates equal or greater than this value (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transactions with feerates less than this value (in satoshis)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in satoshis)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"([1, 10, 100, 200, 400, 800])\") +",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115185",
      "id" : 602115185,
      "in_reply_to_id" : 601666661,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNTE4NQ==",
      "original_commit_id" : "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
      "original_line" : 1616,
      "original_position" : 132,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621907309,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115899"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No. In short, it holds that `fee_histogram.total_fees <= total_fee`. More precisely, the `total_fees` (i.e. the histogram JSON property) here is a sum of `fees` JSON properties from fee rate groups (i.e. `ranges`). For example, `./bitcoin-cli getmempoolinfo \"[0]\"` should show the difference but not on testnet because people mostly do not pay any fees there (ð).\r\n\r\nHowever, I'm somewhat hesitant whether `total_fees` is useful or not. One can certainly compute it as it is a simple sum of already provided data. So it feels like I should remove it so that Bitcoin Core provides raw data and let customer applications do complex things based on the raw data. Of course, this is very subjective. I'm not sure. I'm neutral on this.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-26T09:02:14Z",
      "diff_hunk" : "@@ -1520,15 +1595,42 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"ranges\", \"Feerate groups\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulated size of all transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Amount of transactions in feerate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulated fees of all transactions in feerate group (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"from_feerate\", \"Group contains transactions with feerates equal or greater than this value (in satoshis)\"},\n+                                        {RPCResult::Type::NUM, \"to_feerate\", \"Group contains transactions with feerates less than this value (in satoshis)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in satoshis)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602115899",
      "id" : 602115899,
      "in_reply_to_id" : 601711097,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNTg5OQ==",
      "original_commit_id" : "fb0824ce3c7b9d1b5432da38321ba5b06e74c908",
      "original_line" : 1611,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621908331,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602115899",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602116946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602116946"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks! I like `CFeeRate` better as then I don't add new divisions myself. The asserts work for me okay.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-26T09:04:03Z",
      "diff_hunk" : "@@ -1501,14 +1502,79 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeLimits& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<uint64_t> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; // fee per byte\n+            CAmount afpb = afees / asize; // fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; // fee per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602116946",
      "id" : 602116946,
      "in_reply_to_id" : 598259105,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNjk0Ng==",
      "original_commit_id" : "81cd4bb4822ed236fd561c8686f464abb3b1492a",
      "original_line" : 1527,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621909832,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602116946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602117386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602117386"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I have changed it to `fee_rate_groups`. I think it looks nicer now. What do you think?",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-26T09:04:50Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602117386",
      "id" : 602117386,
      "in_reply_to_id" : 599875604,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjExNzM4Ng==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1595,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 621910527,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602117386",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It would be good if the functional test actually verified that the values are correctly calculated after creating a few txns; ATM it is only really a smoke test that verifies the output structure.\r\n\r\nThis is on my TODO list. So I will improve it over coming days.",
      "created_at" : "2021-03-26T09:07:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-808056236",
      "id" : 808056236,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwODA1NjIzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-26T09:07:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808056236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602616548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602616548"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Drive-by comment: now that you're constructing the fee rates with the `CFeeRate` ctor, there is no longer a need for these greater than zero checks. Will re-review the rest.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-26T22:34:00Z",
      "diff_hunk" : "@@ -1501,34 +1501,140 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\n+\n+            CHECK_NONFATAL(size > 0);\n+            CHECK_NONFATAL(asize > 0);\n+            CHECK_NONFATAL(dsize > 0);\n+            CHECK_NONFATAL(asize + dsize - size > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602616548",
      "id" : 602616548,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjYxNjU0OA==",
      "original_commit_id" : "ccb043c8099f7a4cadd85274221b67dda0731caf",
      "original_line" : 1528,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 622572094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602616548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602617365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602617365"
         }
      },
      "author_association" : "MEMBER",
      "body" : "LGTM",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-26T22:36:47Z",
      "diff_hunk" : "@@ -1520,15 +1589,41 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ, \"<feerate-group>\", \"Object per feerate group\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602617365",
      "id" : 602617365,
      "in_reply_to_id" : 599875604,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjYxNzM2NQ==",
      "original_commit_id" : "3d923f4de9a58b5c4cc8365d3d6d9ae94d036ac9",
      "original_line" : 1595,
      "original_position" : 109,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 622573036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602617365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602706785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602706785"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, good point. Thank you",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-27T11:25:05Z",
      "diff_hunk" : "@@ -1501,34 +1501,140 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\n+\n+            CHECK_NONFATAL(size > 0);\n+            CHECK_NONFATAL(asize > 0);\n+            CHECK_NONFATAL(dsize > 0);\n+            CHECK_NONFATAL(asize + dsize - size > 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602706785",
      "id" : 602706785,
      "in_reply_to_id" : 602616548,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjcwNjc4NQ==",
      "original_commit_id" : "ccb043c8099f7a4cadd85274221b67dda0731caf",
      "original_line" : 1528,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 622641995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602706785",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602889335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602889335"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A couple of missing headers and a suggested (tested) update now that we are using the `CFeeRate{CAmount, size_t}` ctor to construct the fee rates:\r\n\r\n<details><summary>diff</summary><p>\r\n\r\n```diff\r\ndiff --git a/src/rest.cpp b/src/rest.cpp\r\nindex 809daa0ef8..400972c092 100644\r\n--- a/src/rest.cpp\r\n+++ b/src/rest.cpp\r\n@@ -26,6 +26,8 @@\r\n \r\n #include <univalue.h>\r\n \r\n+#include <optional>\r\n+\r\n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\r\ndiff --git a/src/rpc/blockchain.cpp b/src/rpc/blockchain.cpp\r\nindex d4035c3d0a..5e44990b57 100644\r\n--- a/src/rpc/blockchain.cpp\r\n+++ b/src/rpc/blockchain.cpp\r\n@@ -45,6 +45,7 @@\r\n #include <condition_variable>\r\n #include <memory>\r\n #include <mutex>\r\n+#include <optional>\r\n \r\n struct CUpdatedBlock\r\n {\r\n@@ -1503,7 +1504,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHi\r\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\r\n \r\n     if (feeLimits) {\r\n-        const MempoolHistogramFeeRates& limits = feeLimits.value();\r\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\r\n \r\n         /* Keep histogram per...\r\n          * ... cumulated tx sizes\r\n@@ -1514,23 +1515,18 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHi\r\n         std::vector<CAmount> fees(limits.size(), 0);\r\n \r\n         for (const CTxMemPoolEntry& e : pool.mapTx) {\r\n-            const CAmount fee{e.GetFee()};\r\n-            const CAmount afees{e.GetModFeesWithAncestors()};\r\n-            const CAmount dfees{e.GetModFeesWithDescendants()};\r\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\r\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\r\n \r\n-            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\r\n-            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\r\n-            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};\r\n-\r\n-            const CAmount fpb{CFeeRate(fee, size).GetFee(1)};     // fee per byte\r\n-            const CAmount afpb{CFeeRate(afees, asize).GetFee(1)}; // fee per byte including ancestors\r\n-            const CAmount dfpb{CFeeRate(dfees, dsize).GetFee(1)}; // fee per byte including descendants\r\n-            const CAmount tfpb{CFeeRate(afees + dfees - fee, asize + dsize - size).GetFee(1)};\r\n-            const CAmount fee_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // fee rate per byte\r\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // fee rate per byte including ancestors\r\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // fee rate per byte including descendants\r\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\r\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n \r\n             // Distribute fee rates into fee limits\r\n             for (int i = limits.size() - 1; i >= 0; --i) {\r\n-                if (fee_per_byte >= limits[i]) {\r\n+                if (fee_rate_per_byte >= limits[i]) {\r\n                     sizes[i] += size;\r\n                     ++count[i];\r\n                     fees[i] += fee;\r\n```\r\n</p></details>\r\n",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-28T14:55:54Z",
      "diff_hunk" : "@@ -1501,34 +1501,135 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602889335",
      "id" : 602889335,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjg4OTMzNQ==",
      "original_commit_id" : "7b6da9fa33c94553436721d39634b53b706a1e72",
      "original_line" : 1523,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 622754580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602889335",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602890855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602890855"
         }
      },
      "author_association" : "MEMBER",
      "body" : "suggestion\r\n```diff\r\n-def assert_no_key(k, d):\r\n-    if k in d:\r\n-        raise AssertionError(\"%s in %s\" % (str(k), str(d)))\r\n+def assert_no_key(key, dictionary):\r\n+    if key in dictionary:\r\n+        raise AssertionError(f\"Key '{key}' not expected to be found in {dictionary}\")\r\n```\r\n\r\nwhich uses Python f-strings per current practice and would improve the error message from, for example\r\n\r\n```\r\n    raise AssertionError(\"%s in %s\" % (str(k), str(d)))\r\nAssertionError: size in {'loaded': True, 'size': 1, 'bytes': 219, 'usage': 1072, 'total_fee': Decimal('0.00004380'), 'maxmempool': 300000000, 'mempoolminfee': Decimal('0.00001000'), 'minrelaytxfee': Decimal('0.00001000'), 'unbroadcastcount': 1}\r\n```\r\nto\r\n```\r\n    raise AssertionError(f\"Key '{key}' not expected to be found in {dictionary}\")\r\nAssertionError: Key 'size' not expected to be found in {'loaded': True, 'size': 1, 'bytes': 219, 'usage': 1072, 'total_fee': Decimal('0.00004380'), 'maxmempool': 300000000, 'mempoolminfee': Decimal('0.00001000'), 'minrelaytxfee': Decimal('0.00001000'), 'unbroadcastcount': 1}\r\n```\r\n",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-28T15:09:12Z",
      "diff_hunk" : "@@ -55,6 +55,11 @@ def assert_greater_than(thing1, thing2):\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n \n+def assert_no_key(k, d):\n+    if k in d:\n+        raise AssertionError(\"%s in %s\" % (str(k), str(d)))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602890855",
      "id" : 602890855,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjg5MDg1NQ==",
      "original_commit_id" : "7b6da9fa33c94553436721d39634b53b706a1e72",
      "original_line" : 60,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 622754580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602890855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602892365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602892365"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, and can add logging:\r\n\r\n```diff\r\ndiff --git a/test/functional/mempool_fee_histogram.py b/test/functional/mempool_fee_histogram.py\r\nindex 01fd7825b3..3edd31447b 100755\r\n--- a/test/functional/mempool_fee_histogram.py\r\n+++ b/test/functional/mempool_fee_histogram.py\r\n@@ -21,12 +21,12 @@ class MempoolFeeHistogramTest(BitcoinTestFramework):\r\n \r\n     def run_test(self):\r\n         node = self.nodes[0]\r\n-\r\n         node.sendtoaddress(node.getnewaddress(), 1)\r\n \r\n-        info = node.getmempoolinfo()\r\n-        assert_no_key('fee_histogram', info)\r\n+        self.log.info(\"Test getmempoolinfo does not return fee histogram by default\")\r\n+        assert_no_key('fee_histogram', node.getmempoolinfo())\r\n \r\n+        self.log.info(\"Test getmempoolinfo returns fee histogram if fee rate array is passed\")\r\n         info = node.getmempoolinfo([100, 200, 300, 400, 500])\r\n```\r\n",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-28T15:23:08Z",
      "diff_hunk" : "@@ -0,0 +1,49 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        info = node.getmempoolinfo()\n+        assert_no_key('fee_histogram', info)\n+\n+        info = node.getmempoolinfo([100, 200, 300, 400, 500])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r602892365",
      "id" : 602892365,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjg5MjM2NQ==",
      "original_commit_id" : "7b6da9fa33c94553436721d39634b53b706a1e72",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : null,
      "pull_request_review_id" : 622756564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602892365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603037933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603037933"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you for the valuable feedback! Addressed.\r\n\r\nShould I add `#include <optional>` to `blockchain.h` too? Did you notice those missing `#include <optional>` or is there a tool that would warn me in the future?",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-29T06:21:58Z",
      "diff_hunk" : "@@ -1501,34 +1501,135 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits = feeLimits.value();\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const CAmount afees{e.GetModFeesWithAncestors()};\n+            const CAmount dfees{e.GetModFeesWithDescendants()};\n+\n+            const int64_t size{static_cast<int64_t>(e.GetTxSize())};\n+            const int64_t asize{static_cast<int64_t>(e.GetSizeWithAncestors())};\n+            const int64_t dsize{static_cast<int64_t>(e.GetSizeWithDescendants())};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603037933",
      "id" : 603037933,
      "in_reply_to_id" : 602889335,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzAzNzkzMw==",
      "original_commit_id" : "7b6da9fa33c94553436721d39634b53b706a1e72",
      "original_line" : 1523,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 622894767,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603037933",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038570"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nice, I didn't know about these f-string. Thanks.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-29T06:23:49Z",
      "diff_hunk" : "@@ -55,6 +55,11 @@ def assert_greater_than(thing1, thing2):\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n \n+def assert_no_key(k, d):\n+    if k in d:\n+        raise AssertionError(\"%s in %s\" % (str(k), str(d)))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038570",
      "id" : 603038570,
      "in_reply_to_id" : 602890855,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzAzODU3MA==",
      "original_commit_id" : "7b6da9fa33c94553436721d39634b53b706a1e72",
      "original_line" : 60,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 622895590,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038570",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038896"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you, fixed!",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-29T06:24:39Z",
      "diff_hunk" : "@@ -0,0 +1,49 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        info = node.getmempoolinfo()\n+        assert_no_key('fee_histogram', info)\n+\n+        info = node.getmempoolinfo([100, 200, 300, 400, 500])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r603038896",
      "id" : 603038896,
      "in_reply_to_id" : 602892365,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzAzODg5Ng==",
      "original_commit_id" : "7b6da9fa33c94553436721d39634b53b706a1e72",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : null,
      "pull_request_review_id" : 622896003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603038896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Will re-review after the TODO you mention in [#21422 (comment)](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-808056236).\r\n\r\nThank you. I'm slowly getting familiar with Bitcoin's `BitcoinTestFramework`. I'm almost ready to start writing the test. So slow progress, but progress too. I would kind of want to start with `self.setup_clean_chain = True` because I will be more confident about the blockchain's state. It can be improved further later.",
      "created_at" : "2021-03-29T06:31:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-809108278",
      "id" : 809108278,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwOTEwODI3OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-29T06:31:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809108278",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r604793435"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/604793435"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack I still struggle with this as I'm not sure whether this is correct or not. It is in the original PR but:\r\n\r\n* Is this how it should be done?\r\n* Is there a better way?\r\n* Is it a copy of some existing code?\r\n\r\nIt's very important and I don't really know the answer now. So I put it here even for my own reference.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-03-31T10:50:06Z",
      "diff_hunk" : "@@ -1503,34 +1504,130 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // fee rate per byte including descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r604793435",
      "id" : 604793435,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNDc5MzQzNQ==",
      "original_commit_id" : "3b2db54fbd3a40ef44a1af28d046f920ef2c9620",
      "original_line" : 1571,
      "original_position" : 41,
      "original_start_line" : 1523,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 625150489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/604793435",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611171247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611171247"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think we have the following choices here:\r\n\r\n1. Make it: \"to\": null\r\n2. Represent range with arrays: [1, 2], [2, 3], [3]\r\n3. Remove \"to\"\r\n4. Remove both \"from\" & \"to\"\r\n\r\nI would go with the option 1 or 3.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-04-11T11:08:38Z",
      "diff_hunk" : "@@ -1503,34 +1504,130 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // fee rate per byte including descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (int i = limits.size() - 1; i >= 0; --i) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        CAmount total_fees = 0; // Track total amount of available fees in mempool\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", \"max\"); // TODO.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611171247",
      "id" : 611171247,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTE3MTI0Nw==",
      "original_commit_id" : "3b2db54fbd3a40ef44a1af28d046f920ef2c9620",
      "original_line" : 1550,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 633000042,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611171247",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611438651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611438651"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is useful #12118 to understand how txs are sorted in mempool.",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-04-12T08:44:39Z",
      "diff_hunk" : "@@ -1503,34 +1504,130 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // fee rate per byte including descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r611438651",
      "id" : 611438651,
      "in_reply_to_id" : 604793435,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTQzODY1MQ==",
      "original_commit_id" : "3b2db54fbd3a40ef44a1af28d046f920ef2c9620",
      "original_line" : 1571,
      "original_position" : 41,
      "original_start_line" : 1523,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 633282993,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-04-18T11:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611438651",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> A couple more suggestions. Will re-review after the TODO you mention in [#21422 (comment)](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-808056236).\r\n\r\nI have improved the test. I find it much better than before but I still think it should be tested more. What do you think?",
      "created_at" : "2021-04-14T14:23:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819558569",
      "id" : 819558569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxOTU1ODU2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-14T14:23:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819558569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK!\r\n\r\nIt might make sense to have the API be more similar to https://numpy.org/doc/stable/reference/generated/numpy.histogram.html",
      "created_at" : "2021-04-14T14:34:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819566377",
      "id" : 819566377,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxOTU2NjM3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-14T14:34:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819566377",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It might make sense to have the API be more similar to https://numpy.org/doc/stable/reference/generated/numpy.histogram.html\r\n\r\nThank you for the suggestion, I'll have a look!",
      "created_at" : "2021-04-14T14:42:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-819572940",
      "id" : 819572940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxOTU3Mjk0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-14T14:42:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819572940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-04-17T16:26:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-821849314",
      "id" : 821849314,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMTg0OTMxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-17T16:26:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821849314",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This, as merged on master, gives me the following build error with clang 13:\r\n```\r\nâ¦/bitcoin/src/rpc/blockchain.cpp:1666:45: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]\r\n            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\r\n                                            ^~~~\r\nâ¦/bitcoin/src/rpc/blockchain.cpp:1666:45: note: insert an explicit cast to silence this issue\r\n            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\r\n                                            ^~~~\r\n                                            static_cast<uint32_t>( )\r\nâ¦/bitcoin/src/rpc/blockchain.cpp:1667:48: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]\r\n            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\r\n                                               ^~~~~\r\nâ¦/bitcoin/src/rpc/blockchain.cpp:1667:48: note: insert an explicit cast to silence this issue\r\n            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\r\n                                               ^~~~~\r\n                                               static_cast<uint32_t>( )\r\nâ¦/bitcoin/src/rpc/blockchain.cpp:1668:48: error: non-constant-expression cannot be narrowed from type 'size_t' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]\r\n            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\r\n                                               ^~~~~\r\nâ¦/bitcoin/src/rpc/blockchain.cpp:1668:48: note: insert an explicit cast to silence this issue\r\n            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\r\n                                               ^~~~~\r\n                                               static_cast<uint32_t>( )\r\nâ¦/bitcoin/src/rpc/blockchain.cpp:1671:62: error: non-constant-expression cannot be narrowed from type 'unsigned long' to 'uint32_t' (aka 'unsigned int') in initializer list [-Wc++11-narrowing]\r\n            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\r\n                                                             ^~~~~~~~~~~~~~~~~~~~\r\nâ¦/bitcoin/src/rpc/blockchain.cpp:1671:62: note: insert an explicit cast to silence this issue\r\n            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\r\n                                                             ^~~~~~~~~~~~~~~~~~~~\r\n                                                             static_cast<uint32_t>( )\r\n4 errors generated.\r\nmake[2]: *** [Makefile:9273: rpc/libbitcoin_server_a-blockchain.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: Leaving directory '/store2/build/bitcoin/bitcoin/src'\r\nmake[1]: *** [Makefile:16124: all-recursive] Error 1\r\nmake[1]: Leaving directory '/store2/build/bitcoin/bitcoin/src'\r\nmake: *** [Makefile:821: all-recursive] Error 1\r\n```\r\nI can't say I've ever seen these before.",
      "created_at" : "2021-06-03T11:06:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-853786199",
      "id" : 853786199,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1Mzc4NjE5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-03T11:06:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853786199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r644739703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644739703"
         }
      },
      "author_association" : "MEMBER",
      "body" : "tx size is limited to uint32_t on all platforms on master\r\n\r\n```suggestion\r\n            const uint32_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};\r\n```",
      "commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "created_at" : "2021-06-03T12:13:26Z",
      "diff_hunk" : "@@ -1545,34 +1546,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r644739703",
      "id" : 644739703,
      "line" : 1563,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDczOTcwMw==",
      "original_commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "original_line" : 1563,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 35,
      "pull_request_review_id" : 675206546,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-03T12:13:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644739703",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r645025479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645025479"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you, I have tried to address that to avoid subsequent narrowing warnings.\r\n\r\nEdit: Any guidance on how to fix this correctly would be greatly appreaciated. ",
      "commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "created_at" : "2021-06-03T18:13:30Z",
      "diff_hunk" : "@@ -1545,34 +1546,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r645025479",
      "id" : 645025479,
      "in_reply_to_id" : 644739703,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NTAyNTQ3OQ==",
      "original_commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "original_line" : 1563,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 675594028,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-03T20:43:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/645025479",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It builds succesfully now, thanks!",
      "created_at" : "2021-06-07T15:35:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-856042676",
      "id" : 856042676,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1NjA0MjY3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-07T15:35:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856042676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654597871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654597871"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why are you downgrading these to `uint32_t`?",
      "commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "created_at" : "2021-06-18T17:55:40Z",
      "diff_hunk" : "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654597871",
      "id" : 654597871,
      "line" : 1664,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDU5Nzg3MQ==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 1664,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 35,
      "pull_request_review_id" : 687628439,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-19T21:46:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654597871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654600168"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654600168"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should probably check for overflow explicitly if you use `int` here.\r\n\r\nOr something like:\r\n```suggestion\r\n            for (size_t i = limits.size(); i-- > 0; ) {\r\n```",
      "commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "created_at" : "2021-06-18T18:00:24Z",
      "diff_hunk" : "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (int i = limits.size() - 1; i >= 0; --i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654600168",
      "id" : 654600168,
      "line" : 1675,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDYwMDE2OA==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 1675,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 46,
      "pull_request_review_id" : 687628439,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-19T21:46:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654600168",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842428"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This shouldn't interrupt `getrawmempool`...",
      "commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "created_at" : "2021-06-19T21:32:02Z",
      "diff_hunk" : "@@ -149,6 +149,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n+    { \"getmempoolinfo\", 0, \"fee_histogram\" },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842428",
      "id" : 654842428,
      "line" : 152,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg0MjQyOA==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 152,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/client.cpp",
      "position" : 4,
      "pull_request_review_id" : 687628439,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-19T21:46:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842428",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842629"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is `bin` reserved in Python?",
      "commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "created_at" : "2021-06-19T21:34:33Z",
      "diff_hunk" : "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(102)\n+\n+        # We have two utxos and we do this:\n+        #\n+        # coinbase-tx-101 <- tx1 (5 sat/vB) <- tx2 (14 sat/vB) <----\\\n+        # coinbase-tx-102 <--------------------------------------- tx3 (6 sat/vB)\n+\n+        self.log.info(\"Test getmempoolinfo does not return fee histogram by default\")\n+        assert_no_key('fee_histogram', node.getmempoolinfo())\n+\n+        self.log.info(\"Test getmempoolinfo returns empty fee histogram when mempool is empty\")\n+        info = node.getmempoolinfo([1, 2, 3])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(0, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(0, total_fees)\n+\n+        self.log.info(\"Test that we have two spendable utxos and lock the second one\")\n+        utxos = node.listunspent()\n+        assert_equal(2, len(utxos))\n+        node.lockunspent(False, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx1 transaction with 5 sat/vB fee rate\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"50.0\"), fee_rate=5, subtractfeefromamount=True)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 1 transaction (tx1: 5 sat/vB)\")\n+        info = node.getmempoolinfo([1, 3, 5, 10])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(1, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['5']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        self.log.info(\"Send tx2 transaction with 14 sat/vB fee rate (spends tx1 utxo)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"25.0\"), fee_rate=14)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 2 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Both tx1 and tx2 are supposed to be reported in 8 sat/vB fee rate group\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(1, non_empty_groups)\n+        assert_equal(14, empty_groups)\n+        assert_equal(2, info['fee_histogram']['fee_rate_groups']['8']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        # Unlock the second UTXO which we locked\n+        node.lockunspent(True, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx3 transaction with 6 sat/vB fee rate (spends all available utxos)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"99.9\"), fee_rate=6)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 3 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB, tx3: 6 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Verify that each of 6, 7 and 8 sat/vB fee rate groups contain one transaction\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(3, non_empty_groups)\n+        assert_equal(12, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['6']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['7']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['8']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+\n+    def histogram_stats(self, histogram):\n+        total_fees = 0\n+        empty_count = 0\n+        non_empty_count = 0\n+\n+        for key, bin in histogram['fee_rate_groups'].items():",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654842629",
      "id" : 654842629,
      "line" : 97,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg0MjYyOQ==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 97,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : 97,
      "pull_request_review_id" : 687628439,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-19T21:46:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654842629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Note: This PR drops the REST support",
      "created_at" : "2021-06-19T21:47:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-864467671",
      "id" : 864467671,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2NDQ2NzY3MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-19T21:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864467671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654844704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654844704"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Need to `#include <optional>` in this header",
      "commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "created_at" : "2021-06-19T21:57:35Z",
      "diff_hunk" : "@@ -41,8 +41,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;\n+\n /** Mempool information to JSON */\n-UniValue MempoolInfoToJSON(const CTxMemPool& pool);\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates> feeLimits);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654844704",
      "id" : 654844704,
      "line" : 47,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg0NDcwNA==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 47,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.h",
      "position" : 8,
      "pull_request_review_id" : 687852918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-19T21:57:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654844704",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654894740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654894740"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It is not according to https://docs.python.org/3/reference/lexical_analysis.html#keywords",
      "commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "created_at" : "2021-06-20T07:58:12Z",
      "diff_hunk" : "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(102)\n+\n+        # We have two utxos and we do this:\n+        #\n+        # coinbase-tx-101 <- tx1 (5 sat/vB) <- tx2 (14 sat/vB) <----\\\n+        # coinbase-tx-102 <--------------------------------------- tx3 (6 sat/vB)\n+\n+        self.log.info(\"Test getmempoolinfo does not return fee histogram by default\")\n+        assert_no_key('fee_histogram', node.getmempoolinfo())\n+\n+        self.log.info(\"Test getmempoolinfo returns empty fee histogram when mempool is empty\")\n+        info = node.getmempoolinfo([1, 2, 3])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(0, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(0, total_fees)\n+\n+        self.log.info(\"Test that we have two spendable utxos and lock the second one\")\n+        utxos = node.listunspent()\n+        assert_equal(2, len(utxos))\n+        node.lockunspent(False, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx1 transaction with 5 sat/vB fee rate\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"50.0\"), fee_rate=5, subtractfeefromamount=True)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 1 transaction (tx1: 5 sat/vB)\")\n+        info = node.getmempoolinfo([1, 3, 5, 10])\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(1, non_empty_groups)\n+        assert_equal(3, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['5']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        self.log.info(\"Send tx2 transaction with 14 sat/vB fee rate (spends tx1 utxo)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"25.0\"), fee_rate=14)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 2 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Both tx1 and tx2 are supposed to be reported in 8 sat/vB fee rate group\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(1, non_empty_groups)\n+        assert_equal(14, empty_groups)\n+        assert_equal(2, info['fee_histogram']['fee_rate_groups']['8']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+        # Unlock the second UTXO which we locked\n+        node.lockunspent(True, [{\"txid\": utxos[1][\"txid\"], \"vout\": utxos[1][\"vout\"]}])\n+\n+        self.log.info(\"Send tx3 transaction with 6 sat/vB fee rate (spends all available utxos)\")\n+        node.sendtoaddress(address=node.getnewaddress(), amount=Decimal(\"99.9\"), fee_rate=6)\n+\n+        self.log.info(\"Test fee rate histogram when mempool contains 3 transactions (tx1: 5 sat/vB, tx2: 14 sat/vB, tx3: 6 sat/vB)\")\n+        info = node.getmempoolinfo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n+\n+        # Verify that each of 6, 7 and 8 sat/vB fee rate groups contain one transaction\n+        (non_empty_groups, empty_groups, total_fees) = self.histogram_stats(info['fee_histogram'])\n+        assert_equal(3, non_empty_groups)\n+        assert_equal(12, empty_groups)\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['6']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['7']['count'])\n+        assert_equal(1, info['fee_histogram']['fee_rate_groups']['8']['count'])\n+        assert_equal(total_fees, info['fee_histogram']['total_fees'])\n+\n+\n+    def histogram_stats(self, histogram):\n+        total_fees = 0\n+        empty_count = 0\n+        non_empty_count = 0\n+\n+        for key, bin in histogram['fee_rate_groups'].items():",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654894740",
      "id" : 654894740,
      "in_reply_to_id" : 654842629,
      "line" : 97,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg5NDc0MA==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 97,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : 97,
      "pull_request_review_id" : 687878515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-20T07:58:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654894740",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899586"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899586"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, thank you.",
      "commit_id" : "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
      "created_at" : "2021-06-20T08:38:38Z",
      "diff_hunk" : "@@ -149,6 +149,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n+    { \"getmempoolinfo\", 0, \"fee_histogram\" },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899586",
      "id" : 654899586,
      "in_reply_to_id" : 654842428,
      "line" : 151,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg5OTU4Ng==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 151,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rpc/client.cpp",
      "position" : 4,
      "pull_request_review_id" : 687881868,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-20T08:38:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899586",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899601"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, thank you.",
      "commit_id" : "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
      "created_at" : "2021-06-20T08:38:47Z",
      "diff_hunk" : "@@ -41,8 +41,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;\n+\n /** Mempool information to JSON */\n-UniValue MempoolInfoToJSON(const CTxMemPool& pool);\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates> feeLimits);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654899601",
      "id" : 654899601,
      "in_reply_to_id" : 654844704,
      "line" : 48,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDg5OTYwMQ==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 48,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.h",
      "position" : 16,
      "pull_request_review_id" : 687881892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-20T08:38:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654899601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654900143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654900143"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I have applied your suggestion. It is certainly not straightforward though.",
      "commit_id" : "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
      "created_at" : "2021-06-20T08:42:30Z",
      "diff_hunk" : "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (int i = limits.size() - 1; i >= 0; --i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654900143",
      "id" : 654900143,
      "in_reply_to_id" : 654600168,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDkwMDE0Mw==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 1675,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 687882257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-20T08:42:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654900143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654901418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654901418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Your question is probably related to Marco's comment here: https://github.com/bitcoin/bitcoin/pull/21422#discussion_r644739703. And as I said there, any guidance on this would be greatly appreciated.\r\n\r\nEdit: I have rebased this PR so that this PR builds on *tx size is limited to uint32_t on all platforms on master*",
      "commit_id" : "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
      "created_at" : "2021-06-20T08:52:35Z",
      "diff_hunk" : "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r654901418",
      "id" : 654901418,
      "in_reply_to_id" : 654597871,
      "line" : 1663,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDkwMTQxOA==",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 1663,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 35,
      "pull_request_review_id" : 687883093,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-20T08:55:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654901418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Note: This PR drops the REST support\r\n\r\nI have added a note about this in the PR description. Thanks.",
      "created_at" : "2021-06-20T08:53:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-864521472",
      "id" : 864521472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2NDUyMTQ3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-20T08:53:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864521472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687916086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687916086"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This should be above, after &lt;any&gt;",
      "commit_id" : "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
      "created_at" : "2021-08-12T16:46:38Z",
      "diff_hunk" : "@@ -29,6 +29,8 @@\n \n #include <univalue.h>\n \n+#include <optional>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687916086",
      "id" : 687916086,
      "line" : 32,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzkxNjA4Ng==",
      "original_commit_id" : "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
      "original_line" : 32,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 4,
      "pull_request_review_id" : 728853354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-12T16:46:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687916086",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687939272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687939272"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Putting such an assumption here is unnecessarily bug-prone for no benefit. All the functions involved return 64-bit types, so should not be truncated. Furthermore, GetSizeWith* may very well include multiple transactions. `size_t` is the right type here IMO.",
      "commit_id" : "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
      "created_at" : "2021-08-12T17:18:58Z",
      "diff_hunk" : "@@ -1545,34 +1546,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r687939272",
      "id" : 687939272,
      "in_reply_to_id" : 644739703,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzkzOTI3Mg==",
      "original_commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "original_line" : 1563,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 728883855,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-12T17:18:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687939272",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r688278205"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688278205"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thank you.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-08-13T06:36:12Z",
      "diff_hunk" : "@@ -29,6 +29,8 @@\n \n #include <univalue.h>\n \n+#include <optional>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r688278205",
      "id" : 688278205,
      "in_reply_to_id" : 687916086,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODI3ODIwNQ==",
      "original_commit_id" : "36f5e224f5f555ed68d373f0c1ee739ff6d4bf46",
      "original_line" : 32,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 729304206,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-13T06:36:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688278205",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Tested the PR commits building on master branch.\r\n\r\n```\r\n$ bitcoin-cli getmempoolinfo \"[1,10,20,30]\"\r\n\r\n  \"loaded\": true,\r\n  \"size\": 22,\r\n  \"bytes\": 4472,\r\n  \"usage\": 31152,\r\n  \"total_fee\": 0.00096947,\r\n  \"maxmempool\": 300000000,\r\n  \"mempoolminfee\": 0.00001000,\r\n  \"minrelaytxfee\": 0.00001000,\r\n  \"unbroadcastcount\": 0,\r\n  \"fee_histogram\": {\r\n    \"fee_rate_groups\": {\r\n      \"1\": {\r\n        \"size\": 3274,\r\n        \"count\": 15,\r\n        \"fees\": 4577,\r\n        \"from\": 1,\r\n        \"to\": 9\r\n      },\r\n      \"10\": {\r\n        \"size\": 141,\r\n        \"count\": 1,\r\n        \"fees\": 2800,\r\n        \"from\": 10,\r\n        \"to\": 19\r\n      },\r\n      \"20\": {\r\n        \"size\": 0,\r\n        \"count\": 0,\r\n        \"fees\": 0,\r\n        \"from\": 20,\r\n        \"to\": 29\r\n      },\r\n      \"30\": {\r\n        \"size\": 1057,\r\n        \"count\": 6,\r\n        \"fees\": 89570,\r\n        \"from\": 30,\r\n        \"to\": null\r\n      }\r\n    },\r\n    \"total_fees\": 96947\r\n  }\r\n}\r\n\r\n```\r\n\r\n[Fee distribution chart](https://github.com/prayank23/bitcoin-histogram) using the results from `bitcoin-cli getmempoolinfo \"[1,10,20,30]\"`:\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/129519871-06ca6071-cf39-4f68-8370-eb4ae11f44c3.png)\r\n\r\n\r\n```python\r\nfrom flask import Flask, render_template\r\nimport requests\r\nimport json\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/')\r\n\r\ndef chart(chartID = 'chart_ID', chart_type = 'bar', chart_height = 200):\r\n\tsize_group1 = size(1)\r\n\tsize_group2 = size(10)\r\n\tsize_group3 = size(20)\r\n\t\r\n\tchart = {\"renderTo\": chartID, \"type\": chart_type, \"height\": chart_height,}\r\n\tseries = [{\"name\": 'Size (vByte)', \"data\": [int(size_group1), int(size_group2), int(size_group3)]}]\r\n\ttitle = {\"text\": 'Fee rate distribution'}\r\n\txAxis = {\"categories\": ['1-9', '10-19', '20-29']}\r\n\tyAxis = {\"title\": {\"text\": ''}}\r\n\treturn render_template('index.html', chartID=chartID, chart=chart, series=series, title=title, xAxis=xAxis, yAxis=yAxis)\r\n\r\ndef size(group):\r\n\turl = \"http://127.0.0.1:18333/\"\r\n\tpayload = \"{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\": \\\"bitcoin-histogram\\\", \\\"method\\\": \\\"getmempoolinfo\\\", \\\"params\\\": [[1,10,20,30]]}\"\r\n\theaders = {\r\n  \t  'Authorization': 'Basic dXNlcjMzOnBhc3N3b3JkMzM=',\r\n  \t  'Content-Type': 'text/plain'\r\n\t}\r\n\tresponse = requests.request(\"POST\", url, headers=headers, data=payload, )\r\n\tfee_dist = response.json()\r\n\tsize_group = fee_dist['result']['fee_histogram']['fee_rate_groups'][\"\" +str(group)+ \"\"]['size']\t\r\n\treturn str(size_group)\r\n\r\nif __name__ == \"__main__\":\r\n\tapp.run(debug = True, host='127.0.0.1', port=8080, passthrough_errors=True)\r\n```\r\n\r\n\r\n",
      "created_at" : "2021-08-16T06:30:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-899258623",
      "id" : 899258623,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII5841mZj_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 3,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899258623/reactions"
      },
      "updated_at" : "2021-08-16T06:30:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899258623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r689293178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689293178"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Putting such an assumption here is unnecessarily bug-prone for no benefit.\r\n\r\nThen #21848 should be reverted first. Otherwise using size_t here is compiled down to the same code anyway.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-08-16T07:20:51Z",
      "diff_hunk" : "@@ -1545,34 +1546,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const size_t size{e.GetTxSize()}, asize{e.GetSizeWithAncestors()}, dsize{e.GetSizeWithDescendants()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r689293178",
      "id" : 689293178,
      "in_reply_to_id" : 644739703,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTI5MzE3OA==",
      "original_commit_id" : "ce1bf409274a1156eb5644e468b3951cbb6e7c1e",
      "original_line" : 1563,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 730396365,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-16T07:20:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689293178",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@kiminuo https://github.com/bitcoin/bitcoin/pull/22891 adds fee rate distribution bars in `-getinfo`. Its on top of this PR. Will be helpful if you could review :)\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/140179579-34cd5599-fa09-47c5-a02c-d5e8abf3844b.png)\r\n\r\n\r\nAlso waiting for reviewers in this PR to leave some ACKs or comments to improve so that other projects can also use this histogram",
      "created_at" : "2021-11-03T19:30:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-959858353",
      "id" : 959858353,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII5845Nkax",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/959858353/reactions"
      },
      "updated_at" : "2021-11-03T19:30:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/959858353",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-11-12T19:38:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-967404182",
      "id" : 967404182,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII5845qWqW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/967404182/reactions"
      },
      "updated_at" : "2021-11-12T19:38:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/967404182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754233659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754233659"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: I guess  `CAmount` works here, but the values actually represent a feerate (â N*) and not an [`/** Amount in satoshis (Can be negative) */`](https://github.com/bitcoin/bitcoin/blob/95d19f8c1a40a7531d2bb00febd245d127293a64/src/consensus/amount.h#L11).\r\n\r\nMaybe?\r\n ```suggestion\r\ntypedef std::vector<uint64_t> MempoolHistogramFeeRates;\r\n```\r\n\r\nFeel free to ignore this though.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T12:37:55Z",
      "diff_hunk" : "@@ -41,8 +42,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754233659",
      "id" : 754233659,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584s9LE7",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 45,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.h",
      "position" : 12,
      "pull_request_review_id" : 812481523,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754233659/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T16:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754233659",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754275234"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754275234"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think `/kvB` was mistakenly added here and should be dropped. `total_fee` is not a feerate. Do you know if this was meant to be added somewhere else?",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T13:24:58Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754275234",
      "id" : 754275234,
      "line" : 1731,
      "node_id" : "PRRC_kwDOABII584s9VOi",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1731,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 105,
      "pull_request_review_id" : 812481523,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754275234/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T16:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754275234",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754286176"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754286176"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What's the reason for this `i > 0` here?",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T13:37:15Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754286176",
      "id" : 754286176,
      "line" : 1774,
      "node_id" : "PRRC_kwDOABII584s9X5g",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1774,
      "original_position" : 152,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 152,
      "pull_request_review_id" : 812542880,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754286176/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T13:37:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754286176",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754337592"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754337592"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "So you take one value at a time and compare it with the previous one to make sure that the sequence is an increasing one. For `i == 0`, you don't have any previous value to compare with.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T14:37:28Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754337592",
      "id" : 754337592,
      "in_reply_to_id" : 754286176,
      "line" : 1774,
      "node_id" : "PRRC_kwDOABII584s9kc4",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1774,
      "original_position" : 152,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 152,
      "pull_request_review_id" : 812615823,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754337592/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T14:37:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754337592",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754361619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754361619"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These are the coinbase transactions for block 1 and block 2 not block 101 and block 102. The coinbase utxos for block 101 and block 102 aren't mature. However, I don't think it's important that the UTXOs are Coinbase UTXOs.\r\n\r\nI found the ASCII art to be harder/took longer to understand than e.g. a comment like:\r\n\r\n```\r\n We have two UTXOs (utxo_1 and utxo_2) and create three changeless transactions:\r\n - tx1 (5 sat/vB): spending utxo_1\r\n - tx2 (14 sat/vB): spending output from tx1\r\n - tx3 (6 sat/vB): spending utxo_2 and the output from tx2 \r\n```",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T15:02:19Z",
      "diff_hunk" : "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(102)\n+\n+        # We have two utxos and we do this:\n+        #\n+        # coinbase-tx-101 <- tx1 (5 sat/vB) <- tx2 (14 sat/vB) <----\\\n+        # coinbase-tx-102 <--------------------------------------- tx3 (6 sat/vB)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754361619",
      "id" : 754361619,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII584s9qUT",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : 29,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : 32,
      "pull_request_review_id" : 812481523,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754361619/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 29,
      "start_side" : "RIGHT",
      "updated_at" : "2021-11-22T16:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754361619",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754375897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754375897"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is there a reason to limit this to specifically 30? \r\n\r\nIf there is, I think it should be a constant and it should be tested. \r\n\r\nIf not, I could image someone might want to use this with `[1, 2, 3, ..., 9999, 10000]` (or even more).",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T15:17:04Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754375897",
      "id" : 754375897,
      "line" : 1765,
      "node_id" : "PRRC_kwDOABII584s9tzZ",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1765,
      "original_position" : 143,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 143,
      "pull_request_review_id" : 812481523,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754375897/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T16:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754375897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754423967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754423967"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: could add\r\n```suggestion\r\n                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\r\n```",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T16:06:41Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754423967",
      "id" : 754423967,
      "line" : 1742,
      "node_id" : "PRRC_kwDOABII584s95if",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1742,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 117,
      "pull_request_review_id" : 812481523,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754423967/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T16:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754423967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754425604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754425604"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`total_fees` is not a feerate.\r\n```suggestion\r\n                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \")\"},\r\n```",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T16:08:26Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754425604",
      "id" : 754425604,
      "line" : 1748,
      "node_id" : "PRRC_kwDOABII584s958E",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1748,
      "original_position" : 123,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 123,
      "pull_request_review_id" : 812481523,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754425604/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T16:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754425604",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754427248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754427248"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Perfect. Thank you.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T16:10:16Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754427248",
      "id" : 754427248,
      "in_reply_to_id" : 754286176,
      "line" : 1774,
      "node_id" : "PRRC_kwDOABII584s96Vw",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1774,
      "original_position" : 152,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 152,
      "pull_request_review_id" : 812738675,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754427248/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T16:10:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754427248",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754435154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754435154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Using `std::move(feelimits)` will avoid a vector copy. Same with the `MempoolInfoToJSON` call below.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T16:19:21Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Strictly increasing values are expected\");\n+            }\n+\n+            feelimits.push_back(value);\n+        }\n+        feelimits_opt = std::optional<MempoolHistogramFeeRates>(feelimits);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754435154",
      "id" : 754435154,
      "line" : 1780,
      "node_id" : "PRRC_kwDOABII584s98RS",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1780,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 158,
      "pull_request_review_id" : 812749707,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754435154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T16:30:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754435154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754436963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754436963"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why not use uint64_t for everything? `GetSizeWithAncestors()` returns a uint64_t too.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T16:21:23Z",
      "diff_hunk" : "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754436963",
      "id" : 754436963,
      "in_reply_to_id" : 654597871,
      "line" : 1663,
      "node_id" : "PRRC_kwDOABII584s98tj",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 1663,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 35,
      "pull_request_review_id" : 812749707,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754436963/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T16:30:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754436963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754438676"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think using ancestor feerates here is going to distort the result, because multiple transactions can have shared ancestors. Using descendant feerates is even more questionable to me, as they don't matter for transaction selection in blocks at all.\r\n\r\nImagine a situation with 3 transactions (example due to @Xekyo): one parent at 1 sat/vbyte, with two children each at 7 sat/vbyte, with all transactions the same size. The current code will classify the parent at 5 sat/vbyte, and the children each at 4 sat/vbyte. That's not accurate; e.g. the (weight-weighted) average of the reported feerates is 4.33, while the real average is 5, so this doesn't reflect the actual state of the mempool. It also doesn't correspond to the decisions actually made by miners, which with the current CPFP code would consider first a package of 1 parent + 1 child at 4 sat/vbyte, and then another child at 7 sat/vbyte.\r\n\r\nMy suggestion would be either:\r\n* (1) use only transaction feerates directly (no ancestors/descendants), and have a result that ignores CPFP-like mechanics. \r\n* (2) invoke the mining code to actually build a giant \"block\" from the entire mempool (ignoring weight limits), and have it report the feerates of its included packages (which are similar to what you'd get with ancestor fees/sizes, but is guaranteed not to count any transaction twice).",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T16:23:10Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676",
      "id" : 754438676,
      "line" : 1667,
      "node_id" : "PRRC_kwDOABII584s99IU",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1667,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 39,
      "pull_request_review_id" : 812749707,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754438676/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T18:37:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754438676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754449922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754449922"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: my definition of feerate is `fee per size`. This doesn't really work with `fee rate per byte` as it would be a `fee per size per size`? Also not sure about variable names like `afpb` and `dfpb`. Why not just spell it out as e.g. `ancestor_feerate` and `descendant_feerate`?\r\n\r\n\r\n(I'm assuming `tfpb` means `total_feerate`?)\r\n\r\n```suggestion\r\n            const CAmount fee{e.GetFee()}, ancestor_fees{e.GetModFeesWithAncestors()}, descendant_fees{e.GetModFeesWithDescendants()};\r\n            const uint32_t size{(uint32_t)e.GetTxSize()}, ancestor_size{(uint32_t)e.GetSizeWithAncestors()}, descendant_size{(uint32_t)e.GetSizeWithDescendants()};\r\n\r\n            const CAmount feerate{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\r\n            const CAmount ancestor_feerate{CFeeRate{ancestor_fees, ancestor_size}.GetFee(1)}; // Fee rate per byte including ancestors\r\n            const CAmount descendant_feerate{CFeeRate{descendant_fees, descendant_size}.GetFee(1)}; // Fee rate per byte including descendants\r\n\r\n            // Fee rate per byte including ancestors & descendants\r\n            const CAmount total_feerate{CFeeRate{ancestor_fees + descendant_fees - fee, ancestor_size + descendant_size - size}.GetFee(1)};\r\n            const CAmount feerate{std::max(std::min(descendant_feerate, total_feerate), std::min(feerate, ancestor_feerate))};\r\n```",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T16:35:24Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754449922",
      "id" : 754449922,
      "line" : 1671,
      "node_id" : "PRRC_kwDOABII584s9_4C",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1671,
      "original_position" : 43,
      "original_start_line" : 1662,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 43,
      "pull_request_review_id" : 812481523,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754449922/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1662,
      "start_side" : "RIGHT",
      "updated_at" : "2021-11-22T16:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754449922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754451768"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754451768"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can you explain these two lines?\r\n\r\n```C++\r\n1670    const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\r\n1671    const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\r\n```",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T16:37:32Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754451768",
      "id" : 754451768,
      "line" : 1671,
      "node_id" : "PRRC_kwDOABII584s-AU4",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1671,
      "original_position" : 43,
      "original_start_line" : 1670,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 43,
      "pull_request_review_id" : 812481523,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754451768/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1670,
      "start_side" : "RIGHT",
      "updated_at" : "2021-11-22T16:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754451768",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Approach NACK as-is, this will result in distorted numbers. https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676",
      "created_at" : "2021-11-22T16:39:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-975711424",
      "id" : 975711424,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII5846KCzA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975711424/reactions"
      },
      "updated_at" : "2021-11-22T16:39:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975711424",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754535552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754535552"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This also sounds like a fee not a feerate, i.e. should not have a `/vB`.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T18:28:14Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754535552",
      "id" : 754535552,
      "line" : 1744,
      "node_id" : "PRRC_kwDOABII584s-UyA",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1744,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 119,
      "pull_request_review_id" : 812885610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754535552/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T18:45:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754535552",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754541557"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754541557"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm confused by these as well.\r\n\r\nThis breaks down when there are multiple descendants or ancestors in various scenarios (all txs assumed to be same size). \r\n\r\nIf you e.g. had a parent transaction paying 5 sat/vB that had a child paying 1 sat/vB, the child would be irrelevant for the parent's effective feerate and vice versa. If you however have a parent paying 3 sat/vB, and two children where one pays 5 sat/vB and one pays 1 sat/vB. The one with the 5 sat/vB would form a CPFP situation with the parent, while the other child would be effectively unrelated: since the parent's feerate is larger than the child's, the ancestor will be included before the child independently. Only children pay for parents, parents don't pay for children in this case. ;)\r\n\r\nBeyond that, many transactions will have overlapping ancestries or descendants, which means that the bucketing across the complete graph of related transactions would often count related txs multiple times, e.g. where a parent paying 3 sat/vB has two children paying 4 sat/vB and 7 sat/vB, only the latter will form a CPFP and the parent will already be included when the child with 4 sat/vB is up for transaction selection.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T18:37:23Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754541557",
      "id" : 754541557,
      "in_reply_to_id" : 754451768,
      "line" : 1671,
      "node_id" : "PRRC_kwDOABII584s-WP1",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1671,
      "original_position" : 43,
      "original_start_line" : 1670,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 43,
      "pull_request_review_id" : 812885610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754541557/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1670,
      "start_side" : "RIGHT",
      "updated_at" : "2021-11-22T18:45:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754541557",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754603944"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754603944"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think using ancestor feerates here is going to distort the result, because multiple transactions can have shared ancestors. Using descendant feerates is even more questionable to me, as they don't matter for transaction selection in blocks at all.\r\n\r\nSo I have adopted #15836 and did some modifications but I left L1665-L1667 as they were in the original PR because I was not sure why it was implemented that way. My attempts to contact the original author were unsuccessful for me to understand the motivation. Anyway, I knew back then that I didn't have a good explanation for the lines ... evidently rightly so. I should have added a comment warning about this though, that's my mistake, sorry for that.\r\n\r\nThank you for the analysis and the suggestions. I'll try to address the issue.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T20:15:25Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754603944",
      "id" : 754603944,
      "in_reply_to_id" : 754438676,
      "line" : 1667,
      "node_id" : "PRRC_kwDOABII584s-leo",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1667,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 39,
      "pull_request_review_id" : 812977683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754603944/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-22T20:15:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754603944",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754606100"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754606100"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I can only say this: https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754603944 and that I will try to fix it.",
      "commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "created_at" : "2021-11-22T20:19:07Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754606100",
      "id" : 754606100,
      "in_reply_to_id" : 754451768,
      "line" : 1671,
      "node_id" : "PRRC_kwDOABII584s-mAU",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1671,
      "original_position" : 43,
      "original_start_line" : 1670,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 43,
      "pull_request_review_id" : 812980597,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754606100/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1670,
      "start_side" : "RIGHT",
      "updated_at" : "2021-11-22T20:19:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754606100",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754644262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754644262"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`feeLimits` seems like a confusing name for this - maybe change to e.g. `histogramFloors`?",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-22T21:22:26Z",
      "diff_hunk" : "@@ -1630,7 +1631,7 @@ static RPCHelpMan getchaintips()\n     };\n }\n \n-UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates> feeLimits)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754644262",
      "id" : 754644262,
      "line" : 1634,
      "node_id" : "PRRC_kwDOABII584s-vUm",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1634,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 13,
      "pull_request_review_id" : 813031121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754644262/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T15:10:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754644262",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754688921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754688921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`feeLimits` also a confusing name here (see comment above)",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-22T22:42:08Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754688921",
      "id" : 754688921,
      "line" : 1752,
      "node_id" : "PRRC_kwDOABII584s-6OZ",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1752,
      "original_position" : 137,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 125,
      "pull_request_review_id" : 813031121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754688921/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T15:10:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754688921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754859474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754859474"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it was originally suggested here: https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-621285483 but you are right. I will drop it. Thank you.",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-23T07:41:20Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754859474",
      "id" : 754859474,
      "in_reply_to_id" : 754275234,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584s_j3S",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1731,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 813301588,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754859474/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T07:41:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754859474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754862170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754862170"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-23T07:46:38Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754862170",
      "id" : 754862170,
      "in_reply_to_id" : 754423967,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584s_kha",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1742,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 813305199,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754862170/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T07:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754862170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754863243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754863243"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, thank you.\r\n\r\n(https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754859474)",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-23T07:48:36Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754863243",
      "id" : 754863243,
      "in_reply_to_id" : 754425604,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584s_kyL",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1748,
      "original_position" : 123,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 813306554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754863243/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T07:48:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754863243",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754864922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754864922"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, thanks.",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-23T07:51:53Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754864922",
      "id" : 754864922,
      "in_reply_to_id" : 754535552,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584s_lMa",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1744,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 813308852,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754864922/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T07:51:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754864922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754867510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754867510"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The idea behind the limit was that I didn't want to let it be unbounded (`MempoolInfoToJSON` acquires `pool.cs` lock). If this is not a concern, I can remove the check or I can increase it substantially. \r\n\r\nI'm not sure what option is better really.",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-23T07:56:37Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754867510",
      "id" : 754867510,
      "in_reply_to_id" : 754375897,
      "line" : 1758,
      "node_id" : "PRRC_kwDOABII584s_l02",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1758,
      "original_position" : 143,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 131,
      "pull_request_review_id" : 813312386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754867510/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T07:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754867510",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754906415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754906415"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The text is more clear. Thanks.\r\n\r\n(A *nicer* diagram would be even more clear ... :))",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-23T08:55:02Z",
      "diff_hunk" : "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(102)\n+\n+        # We have two utxos and we do this:\n+        #\n+        # coinbase-tx-101 <- tx1 (5 sat/vB) <- tx2 (14 sat/vB) <----\\\n+        # coinbase-tx-102 <--------------------------------------- tx3 (6 sat/vB)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754906415",
      "id" : 754906415,
      "in_reply_to_id" : 754361619,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584s_vUv",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : 29,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : null,
      "pull_request_review_id" : 813364663,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754906415/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-11-23T08:55:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754906415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755026497"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755026497"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Test is failing here. `TypeError: generatetoaddress() missing 1 required keyword-only argument: 'invalid_call'`. I think there is something wrong with the implementation of this function in `test_node` and I don't see any other test calling `generate` from node, I will take a look on it. But I think you can use `generatetoaddress` from `test_framework`. ",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-23T11:19:12Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(COINBASE_MATURITY + 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755026497",
      "id" : 755026497,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tAMpB",
      "original_commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : 28,
      "pull_request_review_id" : 813526690,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755026497/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T11:19:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755026497",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755055504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755055504"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, that's also a reason why I converted the PR to a draft. I have done as much as I could today. I will continue tomorrow.\r\n\r\nedit: Any help is certainly welcome. :)\r\n\r\nedit 2: It might be so that master branch has merged a PR that modifies this. I vaguely remember that I have seen a PR like that. If so, then rebase + fixing the call would do the trick probably.",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-23T12:00:11Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(COINBASE_MATURITY + 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755055504",
      "id" : 755055504,
      "in_reply_to_id" : 755026497,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tATuQ",
      "original_commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : 28,
      "pull_request_review_id" : 813565730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755055504/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T12:08:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755055504",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755222173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755222173"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this necessary? Can't just write `assert(key not in dict)` inline?",
      "commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "created_at" : "2021-11-23T15:09:01Z",
      "diff_hunk" : "@@ -56,6 +56,11 @@ def assert_greater_than(thing1, thing2):\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n \n+def assert_no_key(key, dictionary):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755222173",
      "id" : 755222173,
      "line" : 59,
      "node_id" : "PRRC_kwDOABII584tA8ad",
      "original_commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "original_line" : 59,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/util.py",
      "position" : 4,
      "pull_request_review_id" : 813031121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755222173/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T15:10:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755222173",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755402684"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755402684"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@kiminuo Just in case it needs to be said: no need to apologize for trying to improve things. The final state of the code is everyone's responsibility; developers and reviewers.",
      "commit_id" : "b12f0822cdd46fd636bf9fd6e87d0eb3904a8e5a",
      "created_at" : "2021-11-23T18:27:26Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755402684",
      "id" : 755402684,
      "in_reply_to_id" : 754438676,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tBoe8",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1667,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 814038308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755402684/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T19:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755402684",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755458122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755458122"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It is not. Good idea. Thanks.",
      "commit_id" : "b12f0822cdd46fd636bf9fd6e87d0eb3904a8e5a",
      "created_at" : "2021-11-23T19:52:44Z",
      "diff_hunk" : "@@ -56,6 +56,11 @@ def assert_greater_than(thing1, thing2):\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n \n+def assert_no_key(key, dictionary):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755458122",
      "id" : 755458122,
      "in_reply_to_id" : 755222173,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tB2BK",
      "original_commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "original_line" : 59,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 814113307,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755458122/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T19:52:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755458122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755459841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755459841"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, makes sense.",
      "commit_id" : "b12f0822cdd46fd636bf9fd6e87d0eb3904a8e5a",
      "created_at" : "2021-11-23T19:55:27Z",
      "diff_hunk" : "@@ -1630,7 +1631,7 @@ static RPCHelpMan getchaintips()\n     };\n }\n \n-UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n+UniValue MempoolInfoToJSON(const CTxMemPool& pool, const std::optional<MempoolHistogramFeeRates> feeLimits)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755459841",
      "id" : 755459841,
      "in_reply_to_id" : 754644262,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tB2cB",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1634,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 814115591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755459841/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T19:55:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755459841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755462169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755462169"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased because of #23300.",
      "commit_id" : "b12f0822cdd46fd636bf9fd6e87d0eb3904a8e5a",
      "created_at" : "2021-11-23T19:59:12Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(COINBASE_MATURITY + 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755462169",
      "id" : 755462169,
      "in_reply_to_id" : 755026497,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tB3AZ",
      "original_commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : null,
      "pull_request_review_id" : 814118761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755462169/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T19:59:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755462169",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755473318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755473318"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It is more complicated because of this line:\r\n\r\n```cpp\r\nconst CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)}; // Fee rate per byte\r\n```\r\n\r\n(https://github.com/bitcoin/bitcoin/pull/21422/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1688)\r\n\r\nI think your suggestion seems reasonable but then I don't really know whether there are some edge cases I don't know about.",
      "commit_id" : "b12f0822cdd46fd636bf9fd6e87d0eb3904a8e5a",
      "created_at" : "2021-11-23T20:17:31Z",
      "diff_hunk" : "@@ -41,8 +42,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755473318",
      "id" : 755473318,
      "in_reply_to_id" : 754233659,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584tB5um",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 45,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.h",
      "position" : 12,
      "pull_request_review_id" : 814134213,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755473318/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T20:17:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755473318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755839122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755839122"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now we have:\r\n\r\n```cpp\r\nconst CAmount fee{e.GetFee()};\r\nconst uint32_t size{(uint32_t)e.GetTxSize()};\r\nconst CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)};\r\n```\r\n\r\n`CFeeRate` has the following constructor: `CFeeRate::CFeeRate(const CAmount& nFeePaid, uint32_t num_bytes)`. If `size` is casted to `uint64_t`, then I will get a warning unless I do some other casting.\r\n\r\nAny suggestion how to improve this?",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-24T09:16:21Z",
      "diff_hunk" : "@@ -1646,34 +1647,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755839122",
      "id" : 755839122,
      "in_reply_to_id" : 654597871,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tDTCS",
      "original_commit_id" : "9d16921553bae5d9a333b08ddbe53596e69d4ed8",
      "original_line" : 1663,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 814614751,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755839122/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T09:17:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755839122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755889258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755889258"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa\r\n\r\n> * (1) use only transaction feerates directly (no ancestors/descendants), and have a result that ignores CPFP-like mechanics.\r\n\r\nI have picked (1) approach for now because: I can modify the PR in reasonable time and then it can serve as some sort of baseline. So we can still decide later whether the approach is the best. \r\n\r\nAnyway, there are still questions: \r\n\r\n* Is (2) much better than (1) or not? \r\n* Is there room for having both (1) and (2) possibly?\r\n* (2) seems hard-ish to implement. If that is true, one concern here is whether the additional complexity is worth it. I don't know.\r\n\r\nbtw: I was interested how https://jochen-hoenicke.de/queue/#BTC,24h,fee works and it seems that #15836 was actually heavily inspired by: https://github.com/jhoenicke/mempool/blob/31d8dcb896ebc8139d3e60c3f275b94811293777/mempool_sql.py#L44-L49.",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-24T10:14:50Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755889258",
      "id" : 755889258,
      "in_reply_to_id" : 754438676,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tDfRq",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1667,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 814682640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755889258/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T10:14:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755889258",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755891888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755891888"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> nit: my definition of feerate is `fee per size`. This doesn't really work with `fee rate per byte` as it would be a `fee per size per size`?\r\n\r\nYeah, I have the same definition of fee rate as \"fee per size\".\r\n\r\nI've been trying to align with Sipa's [approach (1)](https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676) for now.",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-24T10:18:03Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755891888",
      "id" : 755891888,
      "in_reply_to_id" : 754449922,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tDf6w",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1671,
      "original_position" : 43,
      "original_start_line" : 1662,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 814686295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755891888/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-11-24T10:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755891888",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755892709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755892709"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@0xB10C Would it make more sense to have a limit or having no limit? I'm not sure what is preferrable.",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-24T10:19:00Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755892709",
      "id" : 755892709,
      "in_reply_to_id" : 754375897,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tDgHl",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1758,
      "original_position" : 143,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 814687356,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755892709/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T10:19:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755892709",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755893412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755893412"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hopefully addressed. Thanks.",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-24T10:19:53Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid number of parameters\");\n+        }\n+\n+        for (size_t i = 0; i < feelimits_univalue.size(); ++i) {\n+            int64_t value = feelimits_univalue[i].get_int64();\n+\n+            if (value < 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Non-negative values are expected\");\n+            } else if (i > 0 && feelimits.back() >= value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Strictly increasing values are expected\");\n+            }\n+\n+            feelimits.push_back(value);\n+        }\n+        feelimits_opt = std::optional<MempoolHistogramFeeRates>(feelimits);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755893412",
      "id" : 755893412,
      "in_reply_to_id" : 754435154,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tDgSk",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1780,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 814688273,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755893412/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T10:19:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755893412",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755945405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755945405"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Great. #23300 solves it! ",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-24T11:09:38Z",
      "diff_hunk" : "@@ -0,0 +1,119 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_no_key,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        node.generate(COINBASE_MATURITY + 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r755945405",
      "id" : 755945405,
      "in_reply_to_id" : 755026497,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tDs-9",
      "original_commit_id" : "47b5c3e03a71bb4c51e4948effec2a12943a7071",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : null,
      "pull_request_review_id" : 814745709,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755945405/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T11:09:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755945405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756256802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756256802"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It really depends on the use case for the histogram. If people are trying to make decisions on what fee to use, it's probably better to under-estimate the fee rate of a given transaction (by applying a CPFP logic excessively) than over-estimate it (by ignoring CPFP, etc). Are there other use cases that would be impacted?",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-24T16:42:01Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756256802",
      "id" : 756256802,
      "in_reply_to_id" : 754438676,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tE5Ai",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1667,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 815157984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756256802/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T16:42:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756256802",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756257689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756257689"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> * Is (2) much better than (1) or not?\r\n\r\nIt depends on how much CPFP is going on of course in the mempool overall. I think (2) is \"perfect\" in the sense that it exactly answers the question how much vbytes are competing at every feerate level for block space, according to Bitcoin Core's own block building algorithm. But I think (1) is probably a good first approximation.\r\n\r\n> * Is there room for having both (1) and (2) possibly?\r\n\r\nI don't think so. We should just use the best algorithm we have, and I think (2) is strictly better, but obviously a lot more work.\r\n\r\n> * (2) seems hard-ish to implement. If that is true, one concern here is whether the additional complexity is worth it. I don't know.\r\n\r\nIt's certainly more code changes. I'm not sure whether it's worth it, but that discussion can be left to a future improvement too.\r\n\r\nRe: johoe's site using that formula... interesting find. This earlier version of the code has a bit more comments: https://github.com/jhoenicke/mempool/blob/548698d6d255a2e1b7d6f1981403d3de55c2182a/mempool-sql.pl#L30L38. I see where it's coming from now, but I can't imagine that it doesn't add as many inaccuracies as that it improves (see examples above).",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-24T16:43:01Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756257689",
      "id" : 756257689,
      "in_reply_to_id" : 754438676,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tE5OZ",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1667,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 815159116,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756257689/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T16:43:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756257689",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@kiminuo See https://github.com/sipa/bitcoin/commits/202111_mempoolfr for code that gets histogram data using the mining algorithm. Feel free to cherry pick or whatever; if you don't, I may clean it up to make use it after this PR is merged.\r\n\r\nNow, it is somewhat slow (currently ~150ms for me for ~12000 mempool transactions, which is only a small fraction of the maximum). If we expect that go that direction, maybe that calls for having the functionality in a separate RPC than `getmempoolinfo`.",
      "created_at" : "2021-11-24T21:21:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978235017",
      "id" : 978235017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII5846Tq6J",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978235017/reactions"
      },
      "updated_at" : "2021-11-24T22:28:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978235017",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa That looks great!\r\n\r\nI would like to go with the simple approach first.",
      "created_at" : "2021-11-25T08:23:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978941401",
      "id" : 978941401,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII5846WXXZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978941401/reactions"
      },
      "updated_at" : "2022-03-09T21:44:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978941401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756670249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756670249"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@luke-jr \r\n\r\n> It really depends on the use case for the histogram. If people are trying to make decisions on what fee to use, it's probably better to under-estimate the fee rate of a given transaction (by applying a CPFP logic excessively) than over-estimate it (by ignoring CPFP, etc).\r\n\r\nFrom practicality point of view, I agree. But I would still like to follow [this plan](https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978941401) as it converges to the best possible solution.\r\n\r\n@sipa \r\n\r\n> Re: johoe's site using that formula... interesting find. This earlier version of the code has a bit more comments: https://github.com/jhoenicke/mempool/blob/548698d6d255a2e1b7d6f1981403d3de55c2182a/mempool-sql.pl#L30L38. I see where it's coming from now, \r\n\r\nAh, that's good to know. \r\n\r\n> but I can't imagine that it doesn't add as many inaccuracies as that it improves (see examples above).\r\n\r\nWithout thinking about it too deeply, my guess is that one can come up with pathological mempool state cases to force it report bad values. If it behaves ok-ish for real-world mempools, I don't really know. Anyway, https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978941401 makes sense to me (the worst alternative there is basically that people disagree and then we would chase approach (2) immediately).",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-25T08:34:36Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r756670249",
      "id" : 756670249,
      "in_reply_to_id" : 754438676,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tGd8p",
      "original_commit_id" : "6466eb65ad18599c314125d7b62cc317d865f6f7",
      "original_line" : 1667,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 815688559,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756670249/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-25T08:34:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756670249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757035495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757035495"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, yes. I've tried changing this and it gave me a bunch of warnings. I'd say ignore this comment unless someone else finds this to be problematic.",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-25T16:45:00Z",
      "diff_hunk" : "@@ -41,8 +42,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757035495",
      "id" : 757035495,
      "in_reply_to_id" : 754233659,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584tH3Hn",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 45,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.h",
      "position" : 12,
      "pull_request_review_id" : 816182352,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757035495/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-25T16:45:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757035495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757040403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757040403"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point on the lock.. Can we benchmark the time the RPC takes with 10, 100. 1000, 10000 histogram bins? I think if it scales linear O(n) and somewhere between 10ms or so, then it's fine to have no limit. Users selecting a million bins should expect that this could take a bit longer than only 10 bins.\r\n\r\nI'll see if I can test that.",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-25T16:53:16Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757040403",
      "id" : 757040403,
      "in_reply_to_id" : 754375897,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tH4UT",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1758,
      "original_position" : 143,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 816188627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757040403/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-25T16:53:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757040403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757108924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757108924"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok!",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-25T20:02:39Z",
      "diff_hunk" : "@@ -41,8 +42,10 @@ void RPCNotifyBlockChange(const CBlockIndex*);\n /** Block description to JSON */\n UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n \n+typedef std::vector<CAmount> MempoolHistogramFeeRates;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757108924",
      "id" : 757108924,
      "in_reply_to_id" : 754233659,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584tIJC8",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 45,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.h",
      "position" : 12,
      "pull_request_review_id" : 816274742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757108924/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-25T20:02:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757108924",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757114611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757114611"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/21422/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1685-R1699 takes `O(#mempoolTxs * #bins)` \r\n\r\nLooking at https://jochen-hoenicke.de/queue/#BTC,1y,count, to have some sense about numbers, it can be something like: 20_000 * 10_000 = 200_000_000 that should be computed in a less than a second.\r\n\r\nIf you can test it, it would be great. Thinking about it, maybe it's easy just to modify the test we have to add a lot of transactions and just measure the time. So it should be relatively easy I guess.",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2021-11-25T20:22:49Z",
      "diff_hunk" : "@@ -1645,34 +1646,141 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (feeLimits) {\n+        const MempoolHistogramFeeRates& limits{feeLimits.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(limits.size(), 0);\n+        std::vector<uint64_t> count(limits.size(), 0);\n+        std::vector<CAmount> fees(limits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()}, afees{e.GetModFeesWithAncestors()}, dfees{e.GetModFeesWithDescendants()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()}, asize{(uint32_t)e.GetSizeWithAncestors()}, dsize{(uint32_t)e.GetSizeWithDescendants()};\n+\n+            const CAmount fpb{CFeeRate{fee, size}.GetFee(1)};     // Fee rate per byte\n+            const CAmount afpb{CFeeRate{afees, asize}.GetFee(1)}; // Fee rate per byte including ancestors\n+            const CAmount dfpb{CFeeRate{dfees, dsize}.GetFee(1)}; // Fee rate per byte including descendants\n+\n+            // Fee rate per byte including ancestors & descendants\n+            const CAmount tfpb{CFeeRate{afees + dfees - fee, asize + dsize - size}.GetFee(1)};\n+            const CAmount fee_rate_per_byte{std::max(std::min(dfpb, tfpb), std::min(fpb, afpb))};\n+\n+            // Distribute fee rates into fee limits\n+            for (size_t i = limits.size(); i-- > 0; ) {\n+                if (fee_rate_per_byte >= limits[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < limits.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", limits.at(i));\n+\n+            if (i == limits.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", limits[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(limits.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"fee_histogram\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Fee statistics grouped by fee rate ranges\",\n+                        {\n+                            {\"fee_rate\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Fee rate (in \" + CURRENCY_ATOM + \"/vB) to group the fees by\"},\n+                        },\n+                    },\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n                         {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n                         {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \"/kvB, ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                        {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                        {RPCResult::Type::OBJ, \"fee_histogram\", \"\",\n+                            {\n+                                {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                        {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                        {RPCResult::Type::NUM, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                    }}}},\n+                                {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+                    HelpExampleCli(\"getmempoolinfo\", \"\") +\n+                    HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+                    HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates feelimits;\n+    std::optional<MempoolHistogramFeeRates> feelimits_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue feelimits_univalue = request.params[0].get_array();\n+\n+        if (feelimits_univalue.size() == 0 || feelimits_univalue.size() > 30) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r757114611",
      "id" : 757114611,
      "in_reply_to_id" : 754375897,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tIKbz",
      "original_commit_id" : "f2ca3d35ee999e0be309a65c4f69865824e27a4b",
      "original_line" : 1758,
      "original_position" : 143,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 816281698,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757114611/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-25T20:22:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757114611",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r796604866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796604866"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "please remove this c-style cast\r\n```\r\nconst uint32_t size{uint32_t(e.GetTxSize())};\r\n```",
      "commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "created_at" : "2022-02-01T13:40:22Z",
      "diff_hunk" : "@@ -1665,18 +1666,78 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n     size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n+    ret.pushKV(\"maxmempool\", (int64_t)maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (histogram_floors) {\n+        const MempoolHistogramFeeRates& floors{histogram_floors.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(floors.size(), 0);\n+        std::vector<uint64_t> count(floors.size(), 0);\n+        std::vector<CAmount> fees(floors.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r796604866",
      "id" : 796604866,
      "line" : 1687,
      "node_id" : "PRRC_kwDOABII584veznC",
      "original_commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "original_line" : 1687,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 40,
      "pull_request_review_id" : 869142320,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796604866/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-01T13:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796604866",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r797441817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/797441817"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you. I have just changed it.\r\n\r\nNote: #23962 might affect this code later on.\r\n\r\nedit: Rebased. Hopefully, it will fix the mac test error.",
      "commit_id" : "84418b05c310c58cfac21e7b7d8fece2cea91eff",
      "created_at" : "2022-02-02T10:01:18Z",
      "diff_hunk" : "@@ -1665,18 +1666,78 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n     size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n+    ret.pushKV(\"maxmempool\", (int64_t)maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (histogram_floors) {\n+        const MempoolHistogramFeeRates& floors{histogram_floors.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(floors.size(), 0);\n+        std::vector<uint64_t> count(floors.size(), 0);\n+        std::vector<CAmount> fees(floors.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const uint32_t size{(uint32_t)e.GetTxSize()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r797441817",
      "id" : 797441817,
      "in_reply_to_id" : 796604866,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vh_8Z",
      "original_commit_id" : "2d2bae70ab56ae15a21768ecf642f2747687aa97",
      "original_line" : 1687,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 870313865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/797441817/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-02T12:34:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/797441817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "(1ï¸â£ year anniversary today ð)",
      "created_at" : "2022-03-12T08:51:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1065843808",
      "id" : 1065843808,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII584_h3xg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 1,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1065843808/reactions"
      },
      "updated_at" : "2022-03-12T08:51:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1065843808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-03-16T10:33:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1068973036",
      "id" : 1068973036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII584_tzvs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1068973036/reactions"
      },
      "updated_at" : "2022-03-16T10:33:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1068973036",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased after #24537.",
      "created_at" : "2022-03-21T10:30:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1073731814",
      "id" : 1073731814,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII584__9jm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1073731814/reactions"
      },
      "updated_at" : "2022-03-21T10:30:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1073731814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jamesob \r\n\r\n> Concept ACK\r\n> \r\n> It's a good feature but needs some cleanup as many have noted. Rumor has it that a well-known wallet is currently using Bitcoin Knots solely because this feature isn't available in this RPC interface, so maybe worth prioritizing review on that basis.\r\n\r\nCan you clarify what you mean by the cleanup?",
      "created_at" : "2022-03-21T14:21:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1073959589",
      "id" : 1073959589,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585AA1Kl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1073959589/reactions"
      },
      "updated_at" : "2022-03-21T14:21:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1073959589",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831531202"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831531202"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This makes no sense? Why?",
      "commit_id" : "84418b05c310c58cfac21e7b7d8fece2cea91eff",
      "created_at" : "2022-03-21T20:49:57Z",
      "diff_hunk" : "@@ -386,39 +389,139 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    int64_t maxmempool{gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000};\n-    ret.pushKV(\"maxmempool\", maxmempool);\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    ret.pushKV(\"maxmempool\", (int64_t)maxmempool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831531202",
      "id" : 831531202,
      "line" : 393,
      "node_id" : "PRRC_kwDOABII584xkCjC",
      "original_commit_id" : "84418b05c310c58cfac21e7b7d8fece2cea91eff",
      "original_line" : 393,
      "original_position" : 33,
      "original_start_line" : 392,
      "path" : "src/rpc/mempool.cpp",
      "position" : 33,
      "pull_request_review_id" : 916341762,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831531202/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 392,
      "start_side" : "RIGHT",
      "updated_at" : "2022-03-21T20:49:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831531202",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831548356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831548356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You're unfixing the indentation here... bad rebase?",
      "commit_id" : "84418b05c310c58cfac21e7b7d8fece2cea91eff",
      "created_at" : "2022-03-21T21:14:38Z",
      "diff_hunk" : "@@ -386,39 +389,139 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    int64_t maxmempool{gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000};\n-    ret.pushKV(\"maxmempool\", maxmempool);\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    ret.pushKV(\"maxmempool\", (int64_t)maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (histogram_floors) {\n+        const MempoolHistogramFeeRates& floors{histogram_floors.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(floors.size(), 0);\n+        std::vector<uint64_t> count(floors.size(), 0);\n+        std::vector<CAmount> fees(floors.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const uint32_t size{uint32_t(e.GetTxSize())};\n+            const CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)};\n+\n+            // Distribute fee rates\n+            for (size_t i = floors.size(); i-- > 0;) {\n+                if (fee_rate >= floors[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < floors.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", floors.at(i));\n+\n+            if (i == floors.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", floors[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(floors.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n-RPCHelpMan getmempoolinfo()\n+static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n-        \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-        {},\n-        RPCResult{\n-            RPCResult::Type::OBJ, \"\", \"\",\n-            {\n-                {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n-                {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n-                {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n-                {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritisetransaction\"},\n-                {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n-                {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n-                {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n-            }},\n-        RPCExamples{\n-            HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n-        },\n+                \"\\nReturns details on the active state of the TX memory pool.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831548356",
      "id" : 831548356,
      "line" : 457,
      "node_id" : "PRRC_kwDOABII584xkGvE",
      "original_commit_id" : "84418b05c310c58cfac21e7b7d8fece2cea91eff",
      "original_line" : 457,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 117,
      "pull_request_review_id" : 916365174,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831548356/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-21T21:14:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831548356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831613310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831613310"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I have fixed it hopefully.",
      "commit_id" : "7487ce8c8b9cba1092ecac75d97e3ecc59d2b99b",
      "created_at" : "2022-03-21T23:08:23Z",
      "diff_hunk" : "@@ -386,39 +389,139 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    int64_t maxmempool{gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000};\n-    ret.pushKV(\"maxmempool\", maxmempool);\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    ret.pushKV(\"maxmempool\", (int64_t)maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (histogram_floors) {\n+        const MempoolHistogramFeeRates& floors{histogram_floors.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(floors.size(), 0);\n+        std::vector<uint64_t> count(floors.size(), 0);\n+        std::vector<CAmount> fees(floors.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const uint32_t size{uint32_t(e.GetTxSize())};\n+            const CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)};\n+\n+            // Distribute fee rates\n+            for (size_t i = floors.size(); i-- > 0;) {\n+                if (fee_rate >= floors[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < floors.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", floors.at(i));\n+\n+            if (i == floors.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", floors[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(floors.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n-RPCHelpMan getmempoolinfo()\n+static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n-        \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-        {},\n-        RPCResult{\n-            RPCResult::Type::OBJ, \"\", \"\",\n-            {\n-                {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n-                {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n-                {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n-                {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritisetransaction\"},\n-                {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n-                {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n-                {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n-            }},\n-        RPCExamples{\n-            HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n-        },\n+                \"\\nReturns details on the active state of the TX memory pool.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831613310",
      "id" : 831613310,
      "in_reply_to_id" : 831548356,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xkWl-",
      "original_commit_id" : "84418b05c310c58cfac21e7b7d8fece2cea91eff",
      "original_line" : 457,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : null,
      "pull_request_review_id" : 916449201,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831613310/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-21T23:08:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831613310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831613512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831613512"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Bad rebase :-| ",
      "commit_id" : "7487ce8c8b9cba1092ecac75d97e3ecc59d2b99b",
      "created_at" : "2022-03-21T23:08:46Z",
      "diff_hunk" : "@@ -386,39 +389,139 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    int64_t maxmempool{gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000};\n-    ret.pushKV(\"maxmempool\", maxmempool);\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    ret.pushKV(\"maxmempool\", (int64_t)maxmempool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831613512",
      "id" : 831613512,
      "in_reply_to_id" : 831531202,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xkWpI",
      "original_commit_id" : "84418b05c310c58cfac21e7b7d8fece2cea91eff",
      "original_line" : 393,
      "original_position" : 33,
      "original_start_line" : 392,
      "path" : "src/rpc/mempool.cpp",
      "position" : null,
      "pull_request_review_id" : 916449429,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831613512/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-03-21T23:08:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831613512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831651393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831651393"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nope",
      "commit_id" : "7487ce8c8b9cba1092ecac75d97e3ecc59d2b99b",
      "created_at" : "2022-03-22T00:20:05Z",
      "diff_hunk" : "@@ -386,39 +389,139 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    int64_t maxmempool{gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000};\n-    ret.pushKV(\"maxmempool\", maxmempool);\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    ret.pushKV(\"maxmempool\", (int64_t)maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (histogram_floors) {\n+        const MempoolHistogramFeeRates& floors{histogram_floors.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(floors.size(), 0);\n+        std::vector<uint64_t> count(floors.size(), 0);\n+        std::vector<CAmount> fees(floors.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const uint32_t size{uint32_t(e.GetTxSize())};\n+            const CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)};\n+\n+            // Distribute fee rates\n+            for (size_t i = floors.size(); i-- > 0;) {\n+                if (fee_rate >= floors[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < floors.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", floors.at(i));\n+\n+            if (i == floors.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", floors[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(floors.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n-RPCHelpMan getmempoolinfo()\n+static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n-        \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-        {},\n-        RPCResult{\n-            RPCResult::Type::OBJ, \"\", \"\",\n-            {\n-                {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n-                {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n-                {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n-                {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritisetransaction\"},\n-                {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n-                {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n-                {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n-            }},\n-        RPCExamples{\n-            HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n-        },\n+                \"\\nReturns details on the active state of the TX memory pool.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r831651393",
      "id" : 831651393,
      "in_reply_to_id" : 831548356,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xkf5B",
      "original_commit_id" : "84418b05c310c58cfac21e7b7d8fece2cea91eff",
      "original_line" : 457,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : null,
      "pull_request_review_id" : 916525878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831651393/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T00:20:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831651393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r832275223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832275223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks resolved. 288c4524fa0458a819664ccd568fb8e34e06cc7a -> 4af229650fe appears to be a clean rebase.",
      "commit_id" : "4af229650fe1315e6d7ca34ed56fcbab4377eef3",
      "created_at" : "2022-03-22T14:41:51Z",
      "diff_hunk" : "@@ -386,39 +389,139 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    int64_t maxmempool{gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000};\n-    ret.pushKV(\"maxmempool\", maxmempool);\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    ret.pushKV(\"maxmempool\", (int64_t)maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n+\n+    if (histogram_floors) {\n+        const MempoolHistogramFeeRates& floors{histogram_floors.value()};\n+\n+        /* Keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(floors.size(), 0);\n+        std::vector<uint64_t> count(floors.size(), 0);\n+        std::vector<CAmount> fees(floors.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const uint32_t size{uint32_t(e.GetTxSize())};\n+            const CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)};\n+\n+            // Distribute fee rates\n+            for (size_t i = floors.size(); i-- > 0;) {\n+                if (fee_rate >= floors[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // Track total amount of available fees in fee rate groups\n+        CAmount total_fees = 0;\n+        UniValue groups(UniValue::VOBJ);\n+        for (size_t i = 0; i < floors.size(); ++i) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"size\", sizes.at(i));\n+            info_sub.pushKV(\"count\", count.at(i));\n+            info_sub.pushKV(\"fees\", fees.at(i));\n+            info_sub.pushKV(\"from\", floors.at(i));\n+\n+            if (i == floors.size() - 1) {\n+                info_sub.pushKV(\"to\", NullUniValue);\n+            } else {\n+                info_sub.pushKV(\"to\", floors[i + 1] - 1);\n+            }\n+\n+            total_fees += fees.at(i);\n+            groups.pushKV(ToString(floors.at(i)), info_sub);\n+        }\n+\n+        UniValue info(UniValue::VOBJ);\n+        info.pushKV(\"fee_rate_groups\", groups);\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n-RPCHelpMan getmempoolinfo()\n+static RPCHelpMan getmempoolinfo()\n {\n     return RPCHelpMan{\"getmempoolinfo\",\n-        \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-        {},\n-        RPCResult{\n-            RPCResult::Type::OBJ, \"\", \"\",\n-            {\n-                {RPCResult::Type::BOOL, \"loaded\", \"True if the mempool is fully loaded\"},\n-                {RPCResult::Type::NUM, \"size\", \"Current tx count\"},\n-                {RPCResult::Type::NUM, \"bytes\", \"Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\"},\n-                {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n-                {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritisetransaction\"},\n-                {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n-                {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n-                {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n-            }},\n-        RPCExamples{\n-            HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n-        },\n+                \"\\nReturns details on the active state of the TX memory pool.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r832275223",
      "id" : 832275223,
      "in_reply_to_id" : 831548356,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xm4MX",
      "original_commit_id" : "84418b05c310c58cfac21e7b7d8fece2cea91eff",
      "original_line" : 457,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : null,
      "pull_request_review_id" : 917375397,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832275223/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T14:41:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832275223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-03-28T07:55:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1080317082",
      "id" : 1080317082,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585AZFSa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1080317082/reactions"
      },
      "updated_at" : "2022-03-28T07:55:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1080317082",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-04-06T07:50:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1089943661",
      "id" : 1089943661,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585A9zht",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1089943661/reactions"
      },
      "updated_at" : "2022-04-06T07:50:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1089943661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Xekyo Would you be interested in having another look at the PR, please?",
      "created_at" : "2022-04-28T07:56:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1111867292",
      "id" : 1111867292,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585CRb-c",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111867292/reactions"
      },
      "updated_at" : "2022-04-28T07:56:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111867292",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The CI seems to be unhappy with the changes you've pushed. Probably best to make sure the tests pass locally first before there's another round of review.",
      "created_at" : "2022-04-28T09:01:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1111943050",
      "id" : 1111943050,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585CRueK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111943050/reactions"
      },
      "updated_at" : "2022-04-28T09:01:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111943050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r861390850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861390850"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is incorrect. It's NUM, just optional (null is identical to omitted).\r\n",
      "commit_id" : "1de334c5f704f15d098f72f329f5a73e37b7898d",
      "created_at" : "2022-04-29T00:03:53Z",
      "diff_hunk" : "@@ -621,15 +684,55 @@ static RPCHelpMan getmempoolinfo()\n                 {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                 {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                 {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                {RPCResult::Type::OBJ, \"fee_histogram\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                            {\n+                                {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\n+                                {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \")\"},\n+                                {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                {RPCResult::Type::ANY, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r861390850",
      "id" : 861390850,
      "line" : 698,
      "node_id" : "PRRC_kwDOABII584zV8gC",
      "original_commit_id" : "1de334c5f704f15d098f72f329f5a73e37b7898d",
      "original_line" : 698,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 118,
      "pull_request_review_id" : 957154737,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861390850/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T00:03:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861390850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r861488019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861488019"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I know it's incorrect. I just can't see to make it work to make `RPCResult::MatchesType` happy. I have actually tried that NUM+optional but `RPCResult::MatchesType` reported an error. \r\n\r\nIf you know correct solution, can you share it here?\r\n\r\nPS: I should probably have a deeper look how `RPCResult::MatchesType`  handles NUMs.",
      "commit_id" : "f34072a4d4facd2d22f16dbb2f2509e66a12825e",
      "created_at" : "2022-04-29T06:24:23Z",
      "diff_hunk" : "@@ -621,15 +684,55 @@ static RPCHelpMan getmempoolinfo()\n                 {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                 {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                 {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                {RPCResult::Type::OBJ, \"fee_histogram\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                            {\n+                                {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\n+                                {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \")\"},\n+                                {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                {RPCResult::Type::ANY, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r861488019",
      "id" : 861488019,
      "in_reply_to_id" : 861390850,
      "line" : 698,
      "node_id" : "PRRC_kwDOABII584zWUOT",
      "original_commit_id" : "1de334c5f704f15d098f72f329f5a73e37b7898d",
      "original_line" : 698,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 118,
      "pull_request_review_id" : 957288847,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861488019/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T06:24:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861488019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r862106906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862106906"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's entirely possible the MatchesType is buggy, in which case fixing it is the correct solution.",
      "commit_id" : "f34072a4d4facd2d22f16dbb2f2509e66a12825e",
      "created_at" : "2022-04-29T20:00:26Z",
      "diff_hunk" : "@@ -621,15 +684,55 @@ static RPCHelpMan getmempoolinfo()\n                 {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                 {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                 {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                {RPCResult::Type::OBJ, \"fee_histogram\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                            {\n+                                {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\n+                                {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \")\"},\n+                                {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                {RPCResult::Type::ANY, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r862106906",
      "id" : 862106906,
      "in_reply_to_id" : 861390850,
      "line" : 698,
      "node_id" : "PRRC_kwDOABII584zYrUa",
      "original_commit_id" : "1de334c5f704f15d098f72f329f5a73e37b7898d",
      "original_line" : 698,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 118,
      "pull_request_review_id" : 958187313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862106906/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T20:00:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862106906",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r862311528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862311528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> null is identical to omitted\r\n\r\nThat's not true. In python it will throw a key-error.\r\n\r\nMaybe just not return `to` at all ever?",
      "commit_id" : "f34072a4d4facd2d22f16dbb2f2509e66a12825e",
      "created_at" : "2022-04-30T06:31:31Z",
      "diff_hunk" : "@@ -621,15 +684,55 @@ static RPCHelpMan getmempoolinfo()\n                 {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                 {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                 {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                {RPCResult::Type::OBJ, \"fee_histogram\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                            {\n+                                {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\n+                                {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \")\"},\n+                                {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                {RPCResult::Type::ANY, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r862311528",
      "id" : 862311528,
      "in_reply_to_id" : 861390850,
      "line" : 698,
      "node_id" : "PRRC_kwDOABII584zZdRo",
      "original_commit_id" : "1de334c5f704f15d098f72f329f5a73e37b7898d",
      "original_line" : 698,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 118,
      "pull_request_review_id" : 958457905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862311528/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-30T06:31:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862311528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-05-27T14:36:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1139679846",
      "id" : 1139679846,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585D7iJm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1139679846/reactions"
      },
      "updated_at" : "2022-05-27T14:36:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1139679846",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r894623520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/894623520"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The original PR returned max-int64 for the final range FWIW",
      "commit_id" : "f34072a4d4facd2d22f16dbb2f2509e66a12825e",
      "created_at" : "2022-06-10T14:58:39Z",
      "diff_hunk" : "@@ -621,15 +684,55 @@ static RPCHelpMan getmempoolinfo()\n                 {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                 {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                 {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                {RPCResult::Type::OBJ, \"fee_histogram\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                            {\n+                                {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\n+                                {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \")\"},\n+                                {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                {RPCResult::Type::ANY, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r894623520",
      "id" : 894623520,
      "in_reply_to_id" : 861390850,
      "line" : 698,
      "node_id" : "PRRC_kwDOABII5841Ut8g",
      "original_commit_id" : "1de334c5f704f15d098f72f329f5a73e37b7898d",
      "original_line" : 698,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 118,
      "pull_request_review_id" : 1002926323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/894623520/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-10T14:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/894623520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r917358611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/917358611"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I removed `to` as suggested. It feels right to me.\r\n\r\n[CI failure](https://github.com/bitcoin/bitcoin/pull/21422/checks?check_run_id=7264641865) looks unrelated to me ... or not?",
      "commit_id" : "56512a06800781cde7bc63fe386ba7301db6f40a",
      "created_at" : "2022-07-10T08:17:19Z",
      "diff_hunk" : "@@ -621,15 +684,55 @@ static RPCHelpMan getmempoolinfo()\n                 {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                 {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                 {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                {RPCResult::Type::OBJ, \"fee_histogram\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                            {\n+                                {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\n+                                {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \")\"},\n+                                {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                {RPCResult::Type::ANY, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r917358611",
      "id" : 917358611,
      "in_reply_to_id" : 861390850,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842rcgT",
      "original_commit_id" : "1de334c5f704f15d098f72f329f5a73e37b7898d",
      "original_line" : 698,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1033605896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/917358611/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-10T08:19:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/917358611",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-07-18T15:54:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1187672391",
      "id" : 1187672391,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585GynFH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1187672391/reactions"
      },
      "updated_at" : "2022-07-18T15:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1187672391",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-08-05T15:02:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1206556869",
      "id" : 1206556869,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585H6pjF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206556869/reactions"
      },
      "updated_at" : "2022-08-05T15:02:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206556869",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2022-12-19T09:40:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1357365251",
      "id" : 1357365251,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585Q58AD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1357365251/reactions"
      },
      "updated_at" : "2022-12-19T09:40:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1357365251",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1059616551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1059616551"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "CI is green now.",
      "commit_id" : "56512a06800781cde7bc63fe386ba7301db6f40a",
      "created_at" : "2022-12-31T09:26:17Z",
      "diff_hunk" : "@@ -621,15 +684,55 @@ static RPCHelpMan getmempoolinfo()\n                 {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n                 {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                 {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n-                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n+                {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n+                {RPCResult::Type::OBJ, \"fee_histogram\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                            {\n+                                {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\n+                                {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \")\"},\n+                                {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                                {RPCResult::Type::ANY, \"to\", \"Group contains transactions with fee rates equal or less than this value (in \" + CURRENCY_ATOM + \"/vB)\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1059616551",
      "id" : 1059616551,
      "in_reply_to_id" : 861390850,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584_KHcn",
      "original_commit_id" : "1de334c5f704f15d098f72f329f5a73e37b7898d",
      "original_line" : 698,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : null,
      "pull_request_review_id" : 1233344975,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1059616551/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-12-31T09:26:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1059616551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa Would you mind reconsidering your concept NACK (https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-975711424) given that the algorithm is now as you [proposed](https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676) (variant I)?",
      "created_at" : "2022-12-31T09:32:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1368191205",
      "id" : 1368191205,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585RjPDl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1368191205/reactions"
      },
      "updated_at" : "2022-12-31T09:32:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1368191205",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "cACK",
      "created_at" : "2023-01-03T10:10:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1369590171",
      "id" : 1369590171,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585Rokmb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1369590171/reactions"
      },
      "updated_at" : "2023-01-03T10:10:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1369590171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9844978?v=4",
         "events_url" : "https://api.github.com/users/molnard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/molnard/followers",
         "following_url" : "https://api.github.com/users/molnard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/molnard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/molnard",
         "id" : 9844978,
         "login" : "molnard",
         "node_id" : "MDQ6VXNlcjk4NDQ5Nzg=",
         "organizations_url" : "https://api.github.com/users/molnard/orgs",
         "received_events_url" : "https://api.github.com/users/molnard/received_events",
         "repos_url" : "https://api.github.com/users/molnard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/molnard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/molnard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/molnard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2023-01-03T15:00:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1369866129",
      "id" : 1369866129,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585Rpn-R",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1369866129/reactions"
      },
      "updated_at" : "2023-01-03T15:00:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1369866129",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Isn't this good for merge? Or waiting for some more reviews?",
      "created_at" : "2023-01-21T11:47:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1399236036",
      "id" : 1399236036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585TZqXE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1399236036/reactions"
      },
      "updated_at" : "2023-01-21T11:47:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1399236036",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1083822684"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083822684"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        if (histogram_floors_univalue.empty() || histogram_floors_univalue.size() > 30) {\r\n```",
      "commit_id" : "56512a06800781cde7bc63fe386ba7301db6f40a",
      "created_at" : "2023-01-23T09:34:22Z",
      "diff_hunk" : "@@ -692,14 +745,53 @@ static RPCHelpMan getmempoolinfo()\n                 {RPCResult::Type::NUM, \"incrementalrelayfee\", \"minimum fee rate increment for mempool limiting or replacement in \" + CURRENCY_UNIT + \"/kvB\"},\n                 {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"},\n                 {RPCResult::Type::BOOL, \"fullrbf\", \"True if the mempool accepts RBF without replaceability signaling inspection\"},\n+                {RPCResult::Type::OBJ, \"fee_histogram\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::OBJ_DYN, \"fee_rate_groups\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"<fee_rate_group>\", \"Fee rate group named by its lower bound (in \" + CURRENCY_ATOM + \"/vB), identical to the \\\"from\\\" field below\",\n+                            {\n+                                {RPCResult::Type::NUM, \"size\", \"Cumulative size of all transactions in the fee rate group (in vBytes)\"},\n+                                {RPCResult::Type::NUM, \"count\", \"Number of transactions in the fee rate group\"},\n+                                {RPCResult::Type::NUM, \"fees\", \"Cumulative fees of all transactions in the fee rate group (in \" + CURRENCY_ATOM + \")\"},\n+                                {RPCResult::Type::NUM, \"from\", \"Group contains transactions with fee rates equal or greater than this value (in \" + CURRENCY_ATOM + \"/vB)\"},\n+                            }}}},\n+                        {RPCResult::Type::NUM, \"total_fees\", \"Total available fees in mempool (in \" + CURRENCY_ATOM + \")\"},\n+                    }},\n             }},\n         RPCExamples{\n-            HelpExampleCli(\"getmempoolinfo\", \"\")\n-            + HelpExampleRpc(\"getmempoolinfo\", \"\")\n+            HelpExampleCli(\"getmempoolinfo\", \"\") +\n+            HelpExampleCli(\"getmempoolinfo\", R\"(\"[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\")\") +\n+            HelpExampleRpc(\"getmempoolinfo\", \"\") +\n+            HelpExampleRpc(\"getmempoolinfo\", R\"([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200])\")\n         },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    return MempoolInfoToJSON(EnsureAnyMemPool(request.context));\n+    MempoolHistogramFeeRates histogram_floors;\n+    std::optional<MempoolHistogramFeeRates> histogram_floors_opt = std::nullopt;\n+\n+    if (!request.params[0].isNull()) {\n+        const UniValue histogram_floors_univalue = request.params[0].get_array();\n+\n+        if (histogram_floors_univalue.size() == 0 || histogram_floors_univalue.size() > 30) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1083822684",
      "id" : 1083822684,
      "line" : 776,
      "node_id" : "PRRC_kwDOABII585AmdJc",
      "original_commit_id" : "32d872a2a58c79ff79049553c97cb78a7314bd8e",
      "original_line" : 776,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 128,
      "pull_request_review_id" : 1265252459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083822684/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-23T10:00:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083822684",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1083823401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083823401"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Move this include above the `using`.",
      "commit_id" : "56512a06800781cde7bc63fe386ba7301db6f40a",
      "created_at" : "2023-01-23T09:35:07Z",
      "diff_hunk" : "@@ -25,6 +26,8 @@\n \n using kernel::DumpMempool;\n \n+#include <optional>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1083823401",
      "id" : 1083823401,
      "line" : 29,
      "node_id" : "PRRC_kwDOABII585AmdUp",
      "original_commit_id" : "32d872a2a58c79ff79049553c97cb78a7314bd8e",
      "original_line" : 29,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/rpc/mempool.cpp",
      "position" : 12,
      "pull_request_review_id" : 1265252459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083823401/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-23T10:00:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083823401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1083846863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083846863"
         }
      },
      "author_association" : "MEMBER",
      "body" : "32d872a2a58c79ff79049553c97cb78a7314bd8e: Could use std::algorithm.\r\n```suggestion\r\n            auto it = std::upper_bound(floors.begin(), floors.end(), fee_rate);\r\n            if (it != floors.begin()) {\r\n                size_t i = std::distance(floors.begin(), it - 1);\r\n                sizes[i] += size;\r\n                ++count[i];\r\n                fees[i] += fee;\r\n            }\r\n```",
      "commit_id" : "56512a06800781cde7bc63fe386ba7301db6f40a",
      "created_at" : "2023-01-23T09:57:44Z",
      "diff_hunk" : "@@ -670,14 +673,64 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"incrementalrelayfee\", ValueFromAmount(pool.m_incremental_relay_feerate.GetFeePerK()));\n     ret.pushKV(\"unbroadcastcount\", uint64_t{pool.GetUnbroadcastTxs().size()});\n     ret.pushKV(\"fullrbf\", pool.m_full_rbf);\n+\n+    if (histogram_floors) {\n+        const MempoolHistogramFeeRates& floors{histogram_floors.value()};\n+\n+        std::vector<uint64_t> sizes(floors.size(), 0);\n+        std::vector<uint64_t> count(floors.size(), 0);\n+        std::vector<CAmount> fees(floors.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            const CAmount fee{e.GetFee()};\n+            const uint32_t size{uint32_t(e.GetTxSize())};\n+            const CAmount fee_rate{CFeeRate{fee, size}.GetFee(1)};\n+\n+            // Distribute fee rates\n+            for (size_t i = floors.size(); i-- > 0;) {\n+                if (fee_rate >= floors[i]) {\n+                    sizes[i] += size;\n+                    ++count[i];\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1083846863",
      "id" : 1083846863,
      "line" : 697,
      "node_id" : "PRRC_kwDOABII585AmjDP",
      "original_commit_id" : "32d872a2a58c79ff79049553c97cb78a7314bd8e",
      "original_line" : 697,
      "original_position" : 51,
      "original_start_line" : 690,
      "path" : "src/rpc/mempool.cpp",
      "position" : 51,
      "pull_request_review_id" : 1265252459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083846863/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 690,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-23T10:00:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083846863",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1083849554"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083849554"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> missing whitespace after keyword\r\n```suggestion\r\n        assert (\"fee_histogram\" not in node.getmempoolinfo())\r\n```\r\n\r\n",
      "commit_id" : "56512a06800781cde7bc63fe386ba7301db6f40a",
      "created_at" : "2023-01-23T10:00:20Z",
      "diff_hunk" : "@@ -0,0 +1,118 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool fee histogram.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+)\n+\n+class MempoolFeeHistogramTest(BitcoinTestFramework):\n+    def add_options(self, parser):\n+        self.add_wallet_options(parser)\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        self.generate(self.nodes[0], COINBASE_MATURITY + 2, sync_fun=self.no_op)\n+\n+        # We have two UTXOs (utxo_1 and utxo_2) and we create three changeless transactions:\n+        # - tx1 (5 sat/vB): spending utxo_1\n+        # - tx2 (14 sat/vB): spending output from tx1\n+        # - tx3 (6 sat/vB): spending utxo_2 and the output from tx2\n+\n+        self.log.info(\"Test getmempoolinfo does not return fee histogram by default\")\n+        assert(\"fee_histogram\" not in node.getmempoolinfo())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#discussion_r1083849554",
      "id" : 1083849554,
      "line" : 38,
      "node_id" : "PRRC_kwDOABII585AmjtS",
      "original_commit_id" : "56512a06800781cde7bc63fe386ba7301db6f40a",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "test/functional/mempool_fee_histogram.py",
      "position" : 38,
      "pull_request_review_id" : 1265252459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21422",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083849554/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-23T10:00:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083849554",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase",
      "created_at" : "2023-01-23T10:01:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1400083152",
      "id" : 1400083152,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585Tc5LQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400083152/reactions"
      },
      "updated_at" : "2023-01-23T10:01:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400083152",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Needs rebase\r\n\r\nRebased.",
      "created_at" : "2023-01-23T21:41:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1401027649",
      "id" : 1401027649,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585TgfxB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 2,
         "laugh" : 0,
         "rocket" : 1,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1401027649/reactions"
      },
      "updated_at" : "2023-01-23T21:41:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1401027649",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It would be good if the functional test actually verified that the values are correctly calculated after creating a few txns; ATM it is only really a smoke test that verifies the output structure. (by @jonatack)\r\n> Test currently only cover the count and not the fees or sizes per feerate group. (by @0xB10C)\r\n\r\nAdded explicit assert lines in the test for this. ",
      "created_at" : "2023-03-11T22:01:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1465033134",
      "id" : 1465033134,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585XUqGu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465033134/reactions"
      },
      "updated_at" : "2023-03-11T22:01:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465033134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Concept ACK!\r\n> \r\n> It might make sense to have the API be more similar to https://numpy.org/doc/stable/reference/generated/numpy.histogram.html\r\n\r\nHonestly, I'm not sure. Anyone else who prefer that approach?",
      "created_at" : "2023-03-11T22:10:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1465035161",
      "id" : 1465035161,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585XUqmZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465035161/reactions"
      },
      "updated_at" : "2023-03-11T22:10:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465035161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "(2ï¸ year anniversary today ð)",
      "created_at" : "2023-03-13T09:52:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1465824503",
      "id" : 1465824503,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585XXrT3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 3,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465824503/reactions"
      },
      "updated_at" : "2023-03-13T09:52:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465824503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@glozow Thank you for the review.\r\n\r\n> given how easy it would be to do it externally (which may or may not have been the case when people first asked for this?)\r\n\r\nSo what would be your approach to do it externally then? Especially if you want to get this information more often.",
      "created_at" : "2023-03-13T15:26:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1466363604",
      "id" : 1466363604,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585XZu7U",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1466363604/reactions"
      },
      "updated_at" : "2023-03-13T15:26:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1466363604",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> So what would be your approach to do it externally then? Especially if you want to get this information more often.\r\n\r\nCould a tracepoints approach, similar to https://github.com/bitcoin/bitcoin/pull/26531, work?\r\n",
      "created_at" : "2023-03-13T15:34:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1466377732",
      "id" : 1466377732,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585XZyYE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1466377732/reactions"
      },
      "updated_at" : "2023-03-13T15:34:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1466377732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > So what would be your approach to do it externally then? Especially if you want to get this information more often.\r\n> \r\n> Could a tracepoints approach, similar to #26531, work?\r\n\r\nI need to research that in detail but it looks promising. Thank you for sharing it here!",
      "created_at" : "2023-03-13T15:40:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1466387944",
      "id" : 1466387944,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585XZ03o",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1466387944/reactions"
      },
      "updated_at" : "2023-03-13T15:40:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1466387944",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > Could a tracepoints approach, similar to #26531, work?\r\n> \r\n> I need to research that in detail but it looks promising. Thank you for sharing it here!\r\n\r\nI don't think tracepoints are suited for this use-case. Tracepoints allow you to react to a specific event. Here, you request / pull data when a consumer needs it.\r\n\r\n> So what would be your approach to do it externally then? Especially if you want to get this information more often.\r\n\r\nYou can query the `getrawmempool` RPC with the verbose flag set and build the histogram yourself. This Python script produces a similar histogram to what your adding in this PR. \r\n\r\n```Python\r\nfrom bisect import bisect_left\r\nimport json\r\nimport sys\r\n\r\nBUCKETS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100, 120, 140, 170, 200]\r\nCOIN = 100000000\r\n\r\nhistogram = {}\r\ntotal_fees = 0\r\n\r\ndef feerate_bucket(feerate):\r\n    # Depending on how many buckets you have you probably don't even want to use a binary search. As the lower buckets are likely used more frequently a linear search should work fine too.\r\n    i = bisect_left(BUCKETS, feerate)\r\n    if i == len(BUCKETS):\r\n        return BUCKETS[-1]\r\n    return BUCKETS[i]\r\n\r\nmempool = json.load(sys.stdin)\r\n\r\nfor txid in mempool:\r\n    tx = mempool[txid]\r\n    fee_sat = int(tx[\"fees\"][\"base\"] * COIN)\r\n    feerate = fee_sat / tx[\"vsize\"]\r\n    bucket = feerate_bucket(feerate)\r\n    if bucket not in histogram:\r\n        histogram[bucket] = { \"vsize\": 0, \"count\": 0, \"fees\": 0, \"from\": bucket }\r\n    histogram[bucket][\"vsize\"] += tx[\"vsize\"]\r\n    histogram[bucket][\"fees\"] += fee_sat\r\n    histogram[bucket][\"count\"] += 1\r\n    total_fees += fee_sat\r\n\r\nfee_histogram = { \"fee_rate_groups\": histogram, \"total_fees\": total_fees }\r\nprint(json.dumps(fee_histogram, sort_keys = True, indent = 2))\r\n```\r\n\r\nRuninng `bitcoin-cli getrawmempool true | python3 feerate-histogram.py` produces the following output for my current mempool.\r\n\r\n\r\n<details>\r\n<summary>\r\nJSON output\r\n</summary>\r\n\r\n```JSON\r\n{\r\n  \"fee_rate_groups\": {\r\n    \"2\": {\r\n      \"count\": 7819,\r\n      \"fees\": 88283562,\r\n      \"from\": 2,\r\n      \"vsize\": 44785089\r\n    },\r\n    \"3\": {\r\n      \"count\": 255,\r\n      \"fees\": 10961381,\r\n      \"from\": 3,\r\n      \"vsize\": 5227332\r\n    },\r\n    \"4\": {\r\n      \"count\": 469,\r\n      \"fees\": 9411549,\r\n      \"from\": 4,\r\n      \"vsize\": 3072663\r\n    },\r\n    \"5\": {\r\n      \"count\": 341,\r\n      \"fees\": 1203867,\r\n      \"from\": 5,\r\n      \"vsize\": 250260\r\n    },\r\n    \"6\": {\r\n      \"count\": 325,\r\n      \"fees\": 507162,\r\n      \"from\": 6,\r\n      \"vsize\": 88589\r\n    },\r\n    \"7\": {\r\n      \"count\": 197,\r\n      \"fees\": 574863,\r\n      \"from\": 7,\r\n      \"vsize\": 94766\r\n    },\r\n    \"8\": {\r\n      \"count\": 99,\r\n      \"fees\": 180911,\r\n      \"from\": 8,\r\n      \"vsize\": 23703\r\n    },\r\n    \"10\": {\r\n      \"count\": 664,\r\n      \"fees\": 2645382,\r\n      \"from\": 10,\r\n      \"vsize\": 270908\r\n    },\r\n    \"12\": {\r\n      \"count\": 177,\r\n      \"fees\": 605631,\r\n      \"from\": 12,\r\n      \"vsize\": 55444\r\n    },\r\n    \"14\": {\r\n      \"count\": 588,\r\n      \"fees\": 3090496,\r\n      \"from\": 14,\r\n      \"vsize\": 229933\r\n    },\r\n    \"17\": {\r\n      \"count\": 495,\r\n      \"fees\": 1748418,\r\n      \"from\": 17,\r\n      \"vsize\": 115549\r\n    },\r\n    \"20\": {\r\n      \"count\": 1904,\r\n      \"fees\": 9727850,\r\n      \"from\": 20,\r\n      \"vsize\": 510756\r\n    },\r\n    \"25\": {\r\n      \"count\": 1335,\r\n      \"fees\": 15926338,\r\n      \"from\": 25,\r\n      \"vsize\": 718764\r\n    },\r\n    \"30\": {\r\n      \"count\": 1095,\r\n      \"fees\": 8700416,\r\n      \"from\": 30,\r\n      \"vsize\": 320272\r\n    },\r\n    \"40\": {\r\n      \"count\": 819,\r\n      \"fees\": 7622226,\r\n      \"from\": 40,\r\n      \"vsize\": 221100\r\n    },\r\n    \"50\": {\r\n      \"count\": 435,\r\n      \"fees\": 4196189,\r\n      \"from\": 50,\r\n      \"vsize\": 94752\r\n    },\r\n    \"60\": {\r\n      \"count\": 165,\r\n      \"fees\": 2173791,\r\n      \"from\": 60,\r\n      \"vsize\": 39825\r\n    },\r\n    \"70\": {\r\n      \"count\": 106,\r\n      \"fees\": 1241456,\r\n      \"from\": 70,\r\n      \"vsize\": 19369\r\n    },\r\n    \"80\": {\r\n      \"count\": 53,\r\n      \"fees\": 1136711,\r\n      \"from\": 80,\r\n      \"vsize\": 15458\r\n    },\r\n    \"100\": {\r\n      \"count\": 64,\r\n      \"fees\": 26645889,\r\n      \"from\": 100,\r\n      \"vsize\": 269273\r\n    },\r\n    \"120\": {\r\n      \"count\": 67,\r\n      \"fees\": 42826729,\r\n      \"from\": 120,\r\n      \"vsize\": 418795\r\n    },\r\n    \"140\": {\r\n      \"count\": 25,\r\n      \"fees\": 598662,\r\n      \"from\": 140,\r\n      \"vsize\": 4723\r\n    },\r\n    \"170\": {\r\n      \"count\": 76,\r\n      \"fees\": 2294307,\r\n      \"from\": 170,\r\n      \"vsize\": 14943\r\n    },\r\n    \"200\": {\r\n      \"count\": 60,\r\n      \"fees\": 3159137,\r\n      \"from\": 200,\r\n      \"vsize\": 10590\r\n    }\r\n  },\r\n  \"total_fees\": 245462923\r\n}\r\n```\r\n</details>\r\n\r\nThe `getrawmempool true` RPC **was** quite slow when the mempool is full (https://github.com/bitcoin/bitcoin/issues/14765, https://github.com/chris-belcher/electrum-personal-server/issues/96#issuecomment-481396276). This was improved in https://github.com/bitcoin/bitcoin/pull/14984 (merged after #15836 was opened) and might be fine now. I haven't had problems with it in a while. \r\n\r\n> However, given that the functionality added is currently to just build a histogram based on the individual feerates, I'm a little less clear on its utility and why it is necessary to add and maintain this in Bitcoin Core given how easy it would be to do it externally (which may or may not have been the case when people first asked for this?). I personally think we should have good reasons for putting something in Bitcoin Core as opposed to somewhere else in the software stack. \r\n\r\nIIRC there was also an out-of-band push to review this PR as \"rumor has it that a well-known wallet is currently using Bitcoin Knots solely because this feature isn't available in this RPC interface (https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-813031121) \". Would be good to hear if that's still the case and why calculating the histogram in the wallet isn't possible/inefficient.\r\n\r\nI agree with @glozow. It might not be worth maintaining this in Core given the simplicity of doing it externally. \r\nAs is, without utilizing information something that would indeed be inefficient to calculate, e.g. transaction lookups for each input, and without considering transaction relationships (https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-978235017, https://github.com/bitcoin/bitcoin/pull/21422#discussion_r754438676), I'm slightly leaning towards a Concept NACK at this point.\r\n\r\n",
      "created_at" : "2023-03-14T11:53:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1467960000",
      "id" : 1467960000,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585Xf0rA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1467960000/reactions"
      },
      "updated_at" : "2023-03-14T11:53:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1467960000",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@0xB10C In general I agree it's better to keep Core simple if things can be done with some simple workarounds using existing APIs, but I feel this is something that could make some use in Qt GUI too, and for that reason it makes sense to implement inside Core codebase.\r\n\r\n> IIRC there was also an out-of-band push to review this PR as \"rumor has it that a well-known wallet is currently using Bitcoin Knots solely because this feature isn't available in this RPC interface (https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-813031121) \". Would be good to hear if that's still the case and why calculating the histogram in the wallet isn't possible/inefficient.\r\n\r\nIt's used by Wasabi Wallet. https://github.com/zkSNACKs/WalletWasabi/blob/17f0995df568dbdbef9b1faf15da56aec29767bb/WalletWasabi/BitcoinCore/Rpc/RpcClientBase.cs#L63",
      "created_at" : "2023-03-14T12:49:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1468044559",
      "id" : 1468044559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585XgJUP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1468044559/reactions"
      },
      "updated_at" : "2023-03-14T12:49:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1468044559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@0xB10C\r\n\r\n> > > Could a tracepoints approach, similar to #26531, work?\r\n> > \r\n> > \r\n> > I need to research that in detail but it looks promising. Thank you for sharing it here!\r\n> \r\n> I don't think tracepoints are suited for this use-case. Tracepoints allow you to react to a specific event. Here, you request / pull data when a consumer needs it.\r\n\r\nTracepoints would be nice if I need to compute the histograms at specified intervals and fast (to avoid getting complete mempool from a full node). It would be very similar to how people work with order books in trading - first, start listening to mempool updates and start queuing them, then fetch a mempool snapshot and possibly apply updates not present in the snapshot and keep updating. This gives one a local copy of the mempool that one updates as new transactions comes and the amount of transfered data is acceptable. So then you don't need to get full mempool every time you want to do a computation based on mempool data. AFAIK it can be up to 300 MB of data which is a lot. But looking at the tracepoints, I'm not sure whether one can do that easily. From my point of view, this would be a nice solution to the problem this PR is about.\r\n\r\n> The `getrawmempool true` RPC **was** quite slow when the mempool is full (#14765, [chris-belcher/electrum-personal-server#96 (comment)](https://github.com/chris-belcher/electrum-personal-server/issues/96#issuecomment-481396276)). This was improved in #14984 (merged after #15836 was opened) and might be fine now. I haven't had problems with it in a while.\r\n\r\nI agree that this is an acceptable solution when one does not want to compute the histogram too often. I need to research this more in detail to know what is \"too often\".",
      "created_at" : "2023-03-14T15:41:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1468344458",
      "id" : 1468344458,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585XhSiK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1468344458/reactions"
      },
      "updated_at" : "2023-03-14T15:41:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1468344458",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> [However, given that the functionality added is currently to just build a histogram based on the individual feerates, I'm a little less clear on its utility and why it is necessary to add and maintain this in Bitcoin Core given how easy it would be to do it externally](https://github.com/bitcoin/bitcoin/pull/21422#pullrequestreview-1336717945)\r\n\r\nI agree. I don't think this is something that needs to exist in Core. The fact that you've had this PR open for a long time is unfortunate, but also not a reason to merge something. If the goal of this change can be achieved externally, with 20 lines of Python, then that's where it should be done. ",
      "created_at" : "2023-03-20T14:12:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1476309129",
      "id" : 1476309129,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585X_rCJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476309129/reactions"
      },
      "updated_at" : "2023-03-20T14:12:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476309129",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Closing the PR.\r\n\r\n>  If the goal of this change can be achieved externally, with 20 lines of Python, then that's where it should be done.\r\n\r\nI would say it's rather a proof that one can _inefficiently_ achieve the goal. \r\n\r\nAn efficient solution would be to mirror mempool using tracepoints (that did not exist when the PR was created), if[^1] it is possible.\r\n\r\n[^1]: I have not found the time to test it yet but **if** it is not possible then that would be imho a very nice PR to allow people to externally compute various mempool statistics efficiently (including feerate histograms).",
      "created_at" : "2023-03-20T14:42:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1476361661",
      "id" : 1476361661,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585X_329",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 1,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476361661/reactions"
      },
      "updated_at" : "2023-03-20T14:42:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476361661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it's quite unfortunate there is no interest in merging this feature. How can we expect the Bitcoin Core wallet to behave reasonably if it can't predict the fees well?",
      "created_at" : "2023-03-20T16:37:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1476574236",
      "id" : 1476574236,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YArwc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476574236/reactions"
      },
      "updated_at" : "2023-03-20T19:38:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476574236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42201?v=4",
         "events_url" : "https://api.github.com/users/prusnak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prusnak/followers",
         "following_url" : "https://api.github.com/users/prusnak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prusnak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prusnak",
         "id" : 42201,
         "login" : "prusnak",
         "node_id" : "MDQ6VXNlcjQyMjAx",
         "organizations_url" : "https://api.github.com/users/prusnak/orgs",
         "received_events_url" : "https://api.github.com/users/prusnak/received_events",
         "repos_url" : "https://api.github.com/users/prusnak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prusnak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prusnak"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think it's quite unfortunate there is no interest in this feature. How can we expect the Bitcoin Core wallet to behave reasonably if it can't predict the fees well?\r\n\r\nThere is enough interest if you look at all the comments in this PR and the one opened by @jonasschnelli in 2019 except 3 developers. Could have been useful.",
      "created_at" : "2023-03-20T19:07:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1476790070",
      "id" : 1476790070,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YBgc2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476790070/reactions"
      },
      "updated_at" : "2023-03-20T19:07:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476790070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> There is enough interest if you look\r\n\r\nWhat I meant to say was \"there is no interest in **_merging_** this feature\", updated the comment.",
      "created_at" : "2023-03-20T19:39:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1476829212",
      "id" : 1476829212,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YBqAc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476829212/reactions"
      },
      "updated_at" : "2023-03-20T19:39:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1476829212",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42201?v=4",
         "events_url" : "https://api.github.com/users/prusnak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prusnak/followers",
         "following_url" : "https://api.github.com/users/prusnak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prusnak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prusnak",
         "id" : 42201,
         "login" : "prusnak",
         "node_id" : "MDQ6VXNlcjQyMjAx",
         "organizations_url" : "https://api.github.com/users/prusnak/orgs",
         "received_events_url" : "https://api.github.com/users/prusnak/received_events",
         "repos_url" : "https://api.github.com/users/prusnak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prusnak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prusnak"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> How can we expect the Bitcoin Core wallet to behave reasonably if it can't predict the fees well?\r\n\r\nThe Bitcoin Core wallet does not use this feature?\r\n\r\n\r\n\r\n",
      "created_at" : "2023-03-21T07:41:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1477392747",
      "id" : 1477392747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YDzlr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477392747/reactions"
      },
      "updated_at" : "2023-03-21T07:41:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477392747",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The original idea of this patch was to add a small and easy to maintain **efficient** way to generate a fee histogram to bitcoin core (see original PR description https://github.com/bitcoin/bitcoin/pull/15836#issue-434109585).\r\n\r\nAs described there, it was always possible to use `getrawmempool` (@jhoenicke script) to achieve this goal.\r\n\r\nHowever, it is **not efficient** to dumb out all transactions of the complete mempool in a json format just to calculate the fee histogram with a python script.\r\n\r\nThus I think this is a valuable addition to Bitcoin Core.\r\n\r\nThe patch size is minimal and it seems like there is some interest in this feature.\r\n\r\nEDIT: this PR has nothing to do with the Bitcoin cores internal wallet. It's pure mempool statistics.",
      "created_at" : "2023-03-21T08:15:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1477425501",
      "id" : 1477425501,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YD7ld",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477425501/reactions"
      },
      "updated_at" : "2023-03-21T20:58:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477425501",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > How can we expect the Bitcoin Core wallet to behave reasonably if it can't predict the fees well?\r\n> \r\n> The Bitcoin Core wallet does not use this feature?\r\n\r\nDoes not use yet?",
      "created_at" : "2023-03-21T09:43:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1477532882",
      "id" : 1477532882,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YEVzS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477532882/reactions"
      },
      "updated_at" : "2023-03-21T09:43:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477532882",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The Bitcoin Core wallet does not use this feature?\r\n\r\nMy point is that a wallet without fee estimation is not very usable and harms the overall network. If we don't want to have an effective way of determining the fee in Bitcoin Core, we might as well remove the entire wallet from the codebase.",
      "created_at" : "2023-03-21T10:03:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1477559496",
      "id" : 1477559496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YEcTI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477559496/reactions"
      },
      "updated_at" : "2023-03-21T10:03:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477559496",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42201?v=4",
         "events_url" : "https://api.github.com/users/prusnak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prusnak/followers",
         "following_url" : "https://api.github.com/users/prusnak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prusnak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prusnak",
         "id" : 42201,
         "login" : "prusnak",
         "node_id" : "MDQ6VXNlcjQyMjAx",
         "organizations_url" : "https://api.github.com/users/prusnak/orgs",
         "received_events_url" : "https://api.github.com/users/prusnak/received_events",
         "repos_url" : "https://api.github.com/users/prusnak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prusnak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prusnak"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "There seems to be confusion here. This PR does not touch the fee estimator or the wallet in any way. The fee estimator already keeps track of how many transactions at specific feerates {in the mempool, have confirmed within N blocks, haven't confirmed within N blocks} there are internally; the wallet queries it directly for feerate estimates. I don't know of any examples where the wallet needs to see a graph of something.\r\n\r\nIf you feel that the fee estimation algorithms need improvement, by all means I'd say some review/PRs there would be welcome. Maybe take a look at #25380 or #21161.\r\n\r\nFor those that feel very passionately about improving how the wallet calculates fees, my personal recommendation would be to review #26152 to have the strongest impact.",
      "created_at" : "2023-03-21T10:19:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1477583517",
      "id" : 1477583517,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YEiKd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477583517/reactions"
      },
      "updated_at" : "2023-03-21T10:21:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477583517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It's confusing to me why this PR, tagged as `[RPC/REST/ZMQ]` and only touching `src/rest.cpp` and files in `src/rpc/*`, should have anything to do with the wallet or the GUI. AFAIK the wallet doesn't use the RPC interface to communicate with bitcoind. If the wallet or the GUI would want a histogram, it couldn't use the code added in this PR. \r\n\r\nedit: glozow was 1min faster",
      "created_at" : "2023-03-21T10:21:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1477586224",
      "id" : 1477586224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YEi0w",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477586224/reactions"
      },
      "updated_at" : "2023-03-21T10:22:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477586224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> If the wallet or the GUI would want a histogram, it couldn't use the code added in this PR.\r\n\r\nThat would require just moving fee histogram code out of `MempoolInfoToJSON()` to a separate function somewhere out of `rpc/`, code itself seems to me reusable.",
      "created_at" : "2023-03-21T10:27:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1477594252",
      "id" : 1477594252,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YEkyM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477594252/reactions"
      },
      "updated_at" : "2023-03-21T10:27:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477594252",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Bitcoin Core has had fee estimation logic for a long time (`estimatefee` RPC was added in 2014, replaced with `estimatesmartfee` in 2015).\n\nThe Bitcoin Core wallet automatically uses this internal feerate estimation logic to decide on the fees of transactions. You need to override things, or use more low-level RPCs, to not use it.\n\nThat feerate estimation logic works by looking at how quickly mempool transactions get confirmed, over longer time windows, not by looking at the current mempool composition (looking at just your own mempool may give very bad estimates if your relay policy isn't exactly what the network and miners use, which is very hard to guarantee).\n\nThis PR is about exposing mempool feerate histogram data through RPC. It's not a feerate estimator, and is entirely unrelated to the wallet. While the logic could in theory be used for feerate estimation too, that's not what this PR does, and I'm concerned that doing so would risk giving very inaccurate results when faced with diverging network policies.\n\nConceptually, however, I think it's reasonable to add something like this, as just RPC (or GUI) output. It can be informative for users, even if it can't be directly used for automatic fee estimation. Of course, that's subject to reviewer interest.",
      "created_at" : "2023-03-21T11:54:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1477705117",
      "id" : 1477705117,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YE_2d",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 3,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477705117/reactions"
      },
      "updated_at" : "2023-03-21T11:54:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477705117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I am not against sipa as I understand fee estimation is difficult however `estimatesmartfee` sucks and could be improved.\r\n\r\nThere are lot of occasions when I found it to be irrelevant and just look at mempool.space or multiple explorers\r\n\r\n\r\nOne of the project that I found more useful: https://github.com/TrueLevelSA/btc-congestion-manager\r\n\r\nAnyway, this PR tries to improve how projects use mempool info and should not have been controversial at any point. \r\n\r\nRequest to all developers including maintainers to re consider their opinion.",
      "created_at" : "2023-03-21T17:06:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1478277908",
      "id" : 1478277908,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YHLsU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1478277908/reactions"
      },
      "updated_at" : "2023-03-21T17:06:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1478277908",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "For Wasabi's purposes this output is needed purely for fee estimation, so it'd be ideal if Core would estimate fees properly. Here's how I see things:\r\n\r\n- `estimatesmartfee` estimates fees based on the **PAST**\r\n- This PR enables us to put minimums on Core's fee estimations. Eg. if Core estimates 6 hours at 10 sat/b, based on the past, but the mempool is already filled with 12 hours of 11 sat/b estimations, then what we do (currently with Knots) is that based on the mempool histogram we upgrade Core's estimations accordingly. This'd mean we're finally considering the **PRESENT**\r\n- Finally, for future work we can also aim somehow at predicting the **FUTURE** (neuro net, AI stuff?)",
      "created_at" : "2023-03-22T07:54:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1479058400",
      "id" : 1479058400,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YKKPg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479058400/reactions"
      },
      "updated_at" : "2023-03-22T07:54:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479058400",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9156103?v=4",
         "events_url" : "https://api.github.com/users/nopara73/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nopara73/followers",
         "following_url" : "https://api.github.com/users/nopara73/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nopara73/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nopara73",
         "id" : 9156103,
         "login" : "nopara73",
         "node_id" : "MDQ6VXNlcjkxNTYxMDM=",
         "organizations_url" : "https://api.github.com/users/nopara73/orgs",
         "received_events_url" : "https://api.github.com/users/nopara73/received_events",
         "repos_url" : "https://api.github.com/users/nopara73/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nopara73/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nopara73/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nopara73"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@nopara73 I'm aware of `estimatesmartfee`'s limitations, and understand the desire for something based on current mempool composition that can react faster to current conditions. The problem is that looking your own mempool only gives a reliable result in case you're running with policies that more or less match what miners are doing, and if not, becomes easily gameable. That is the reason why `estimatesmartfee` intentionally does not use mempool composition.\r\n\r\nAs I said, I think an RPC like this is valuable for people who want additional information for fee estimation, but using it automatically without at least someone looking at the result seems dangerous to me. E.g. future softforks your node doesn't know about could permit an attacker to stuff your mempool with high-fee unminable transactions.",
      "created_at" : "2023-03-22T13:36:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1479580979",
      "id" : 1479580979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YMJ0z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479580979/reactions"
      },
      "updated_at" : "2023-03-22T13:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479580979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa By not providing sort-of accurate estimations from the current mempool, we force people to rely on third-party estimators, which is arguably much worse than having an independent estimation which works most of the time, although it may be games under certain specific conditions. I think that \"perfect is enemy of good\" rule applies here perfectly.",
      "created_at" : "2023-03-22T14:25:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1479660108",
      "id" : 1479660108,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YMdJM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479660108/reactions"
      },
      "updated_at" : "2023-03-22T14:25:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479660108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42201?v=4",
         "events_url" : "https://api.github.com/users/prusnak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prusnak/followers",
         "following_url" : "https://api.github.com/users/prusnak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prusnak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prusnak",
         "id" : 42201,
         "login" : "prusnak",
         "node_id" : "MDQ6VXNlcjQyMjAx",
         "organizations_url" : "https://api.github.com/users/prusnak/orgs",
         "received_events_url" : "https://api.github.com/users/prusnak/received_events",
         "repos_url" : "https://api.github.com/users/prusnak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prusnak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prusnak"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@sipa sorry for the late reply, at first I was like \"yes, that makes perfect sense,\" however an argument came to my mind - this morning during shower :) - in favor of it, so I'd like to share that.\r\n\r\nCan't we assume miners are seeking the highest fee transactions at all times? In other words: maximize their income from fees. If we could, then adjusting `estimatesmartfee` results based on the possibility of block acceptance of the current mempool state of the node does not seem gameable to me, because by extension we could assume that the highest fee transactions we have are precisely the ones that the miners seek.\r\n\r\nNow I may argue against this with \"it is not guaranteed that the miners have the highest fee txs that my node does as well.\"\r\n\r\nTo this, first I'd say: we can guarantee they want to have them and isn't that enough?\r\nThen I'd turn this around and look at it from an attacker's point of view: the way to game this would be to create transactions those have high fees, get to the targeted node, but don't get to the miners. And now I'd point out the attacker cannot guarantee his high fee transactions don't get to the miners, especially with `fullrbf` around. This makes the attack super expensive, since in order to make the node think the fees are very high, the attacker has to create many blocks of transactions and guarantee that only the targeted node will get to know of these transactions.\r\n\r\nIn summary, unless I am missing the point and you're referring to another kind of game/attack here that does not involve the attacker creating blocks of high fee transactions, we can be reassured the attack is too expensive to be worth trying.",
      "created_at" : "2023-03-30T04:10:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21422#issuecomment-1489662232",
      "id" : 1489662232,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21422",
      "node_id" : "IC_kwDOABII585YynEY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1489662232/reactions"
      },
      "updated_at" : "2023-03-30T04:10:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1489662232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9156103?v=4",
         "events_url" : "https://api.github.com/users/nopara73/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nopara73/followers",
         "following_url" : "https://api.github.com/users/nopara73/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nopara73/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nopara73",
         "id" : 9156103,
         "login" : "nopara73",
         "node_id" : "MDQ6VXNlcjkxNTYxMDM=",
         "organizations_url" : "https://api.github.com/users/nopara73/orgs",
         "received_events_url" : "https://api.github.com/users/nopara73/received_events",
         "repos_url" : "https://api.github.com/users/nopara73/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nopara73/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nopara73/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nopara73"
      }
   }
]
