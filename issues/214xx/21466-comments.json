[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK (to format the IPv6 addresses without calling (indirectly) `socket()`).\r\n\r\nWould `inet_ntop()` also call `socket()`?",
      "created_at" : "2021-03-19T15:01:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21466#issuecomment-802897382",
      "id" : 802897382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21466",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMjg5NzM4Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-19T15:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802897382",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@vasild \r\n\r\nI think we should make our function `IPv6ToString` do proper zero compression (should be doable in say ~25 LOC) and then use that from `CNetAddr::ToStringIP`.\r\n\r\nThis is the patch I'm thinking at the call site:\r\n\r\n```patch\r\n std::string CNetAddr::ToStringIP() const\r\n {\r\n     switch (m_net) {\r\n     case NET_IPV4:\r\n+        return IPv4ToString(m_addr);\r\n     case NET_IPV6: {\r\n-        CService serv(*this, 0);\r\n-        struct sockaddr_storage sockaddr;\r\n-        socklen_t socklen = sizeof(sockaddr);\r\n-        if (serv.GetSockAddr((struct sockaddr*)&sockaddr, &socklen)) {\r\n-            char name[1025] = \"\";\r\n-            if (!getnameinfo((const struct sockaddr*)&sockaddr, socklen, name,\r\n-                             sizeof(name), nullptr, 0, NI_NUMERICHOST))\r\n-                return std::string(name);\r\n-        }\r\n-        if (m_net == NET_IPV4) {\r\n-            return strprintf(\"%u.%u.%u.%u\", m_addr[0], m_addr[1], m_addr[2], m_addr[3]);\r\n-        }\r\n         return IPv6ToString(m_addr);\r\n     }\r\n```\r\n\r\nI find that much easier to reason about :)",
      "created_at" : "2021-03-19T15:55:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21466#issuecomment-802934616",
      "id" : 802934616,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21466",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMjkzNDYxNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-19T16:03:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802934616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I am trying to see if `inet_ntop()` would also call `socket()`, however I can't get even `getnameinfo()` to call `socket()` (with `Debian GLIBC 2.24-11+deb9u4`).\r\n\r\n<details>\r\n<summary>test prog to see if getnameinfo() calls socket(), run under strace</summary>\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <netdb.h>\r\n#include <netinet/in.h>\r\n#include <stdio.h>\r\n#include <sys/socket.h>\r\n#include <sys/types.h>\r\n\r\nint\r\nmain(int argc, char** argv)\r\n{\r\n  sockaddr_in6 a;\r\n  a.sin6_scope_id = 0;\r\n  a.sin6_addr = in6_addr({ { { 5,6,7,88,123,0,0,1,0,9,0,0,20,0,0,1 } } });\r\n  a.sin6_family = AF_INET6;\r\n  a.sin6_port = htons(8333);\r\n  char name[NI_MAXHOST];\r\n  int ret = getnameinfo((const struct sockaddr*)&a, sizeof(a), name, sizeof(name), nullptr, 0,\r\n      NI_NUMERICHOST);\r\n  if (ret == 0) { \r\n    std::cout << name << std::endl;\r\n  } else { \r\n    std::cout << gai_strerror(ret) << std::endl;\r\n  } \r\n  return 0;\r\n}\r\n```\r\n</details>",
      "created_at" : "2021-03-21T14:03:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21466#issuecomment-803586465",
      "id" : 803586465,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21466",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMzU4NjQ2NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-21T14:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803586465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The IPv6 zero compression tests in #21477 have now been merged.\r\n\r\nWith these test cases to test against it should now be fairly trivial to a.) make `IPv6ToString` do proper zero compression when building the `std::string` representation of the IPv6 address, and b.) make use of `IPv6ToString` from `CNetAddr::ToStringIP`.\r\n\r\nZero compression might sound fancy but it is really simple:\r\n* Find longest sequence of consecutive all-zero fields. Use first zero sequence if two or more zero sequences of equal length are found.\r\n* Replace the longest sequence of consecutive all-zero fields with two colons (`::`).\r\n\r\nIn other words `2001:db8:0:0:1:0:0:1` uncompressed becomes `2001:db8::1:0:0:1` compressed. More test cases can be found in #21477.\r\n\r\nThe implementation of zero compression in Rust's `std::net::Ipv6Addr` might serve as an inspiration:\r\n\r\nhttps://github.com/rust-lang/rust/blob/cc4103089f40a163f6d143f06359cba7043da29b/library/std/src/net/ip.rs#L1635-L1683\r\n\r\nAnyone who wants to try to take on the task of making `IPv6ToString` do proper IPv6 zero compression? :)\r\n\r\nThis is our current implementation which doesn't do zero compression:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b9f41df1ead4b6a83a51fc41966b111c8459c313/src/netaddress.cpp#L554-L568",
      "created_at" : "2021-03-29T10:53:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21466#issuecomment-809283324",
      "id" : 809283324,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21466",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwOTI4MzMyNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-30T18:11:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809283324",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Good catch, and I agree, conceptually something cosmetic like formatting a IPv6 address should not need any kind of interaction with DNS services, not even with the operating system.\r\n\r\n> Zero compression might sound fancy but it is really simple:\r\n\r\n\"Good first issue\" material maybe?",
      "created_at" : "2021-03-29T11:10:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21466#issuecomment-809293690",
      "id" : 809293690,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21466",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwOTI5MzY5MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-29T11:12:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809293690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "If `inet_ntop()` does the formatting without calling `socket()`, then there would not be need to re-invent the wheel?\r\n\r\nI did some [testing](https://github.com/bitcoin/bitcoin/issues/21466#issuecomment-803586465) in which I did not see either one of `inet_ntop()` or `getnameinfo()` calling `socket()`.",
      "created_at" : "2021-03-29T15:59:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21466#issuecomment-809500860",
      "id" : 809500860,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21466",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwOTUwMDg2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-29T15:59:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809500860",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@vasild \r\n\r\nThe goal here is to avoid unexpected networking syscalls to allow for syscall sandboxing: see sandboxing PRs #20487 and #21538 for context.\r\n\r\nMore specifically we want to be able to reason about syscall usage to be able to say things like: \"this non-networking thread is not expected to make use of any networking related syscalls\".\r\n\r\nOne advantage of doing the formatting in pure C++ is that such a solution would be absolutely trivial to review from a syscall usage perspective. In other words: as reviewer I would be able to reason with certainty about syscall usage simply by reading the patch.\r\n\r\nOne disadvantage of relying on say `inet_ntop` is that such a solution would not be as trivial to review from a syscall usage perspective. Note that the set of syscalls used by `inet_ntop` may vary between implementations, between configurations/systems and also between versions of the same implementation. In other words: as reviewer I would _not_ be able to reason with certainty about syscall usage simply by reading the patch.\r\n\r\nAnd as laanwj notes: \"[â¦] conceptually something cosmetic like formatting a IPv6 address should not need any kind of interaction with DNS services, not even with the operating system.\"\r\n\r\nThat's why I personally prefer a pure C++ solution in this case: the benefit of being able to reason with certainty about syscall usage is worth the cost (an extra ~25 LOC).",
      "created_at" : "2021-03-30T19:20:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21466#issuecomment-810516186",
      "id" : 810516186,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21466",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMDUxNjE4Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-31T09:48:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/810516186",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Suggested fix in #21756 :)",
      "created_at" : "2021-04-29T19:34:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21466#issuecomment-829531142",
      "id" : 829531142,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21466",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyOTUzMTE0Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-29T19:34:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/829531142",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
