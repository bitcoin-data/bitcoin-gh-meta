[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636278997"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636278997"
         }
      },
      "author_association" : "NONE",
      "body" : "It looks like this should be:\r\n```suggestion        \r\n                .format(n_tx_to_mine)\r\n```",
      "commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "created_at" : "2021-05-20T16:47:41Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636278997",
      "id" : 636278997,
      "line" : 51,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjI3ODk5Nw==",
      "original_commit_id" : "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
      "original_line" : 51,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 98,
      "pull_request_review_id" : 664624908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T17:16:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636278997",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41220998?v=4",
         "events_url" : "https://api.github.com/users/DariusParvin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DariusParvin/followers",
         "following_url" : "https://api.github.com/users/DariusParvin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DariusParvin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DariusParvin",
         "id" : 41220998,
         "login" : "DariusParvin",
         "node_id" : "MDQ6VXNlcjQxMjIwOTk4",
         "organizations_url" : "https://api.github.com/users/DariusParvin/orgs",
         "received_events_url" : "https://api.github.com/users/DariusParvin/received_events",
         "repos_url" : "https://api.github.com/users/DariusParvin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DariusParvin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DariusParvin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636281765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636281765"
         }
      },
      "author_association" : "NONE",
      "body" : "is this useful to have in the log?",
      "commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "created_at" : "2021-05-20T16:51:39Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636281765",
      "id" : 636281765,
      "line" : 55,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjI4MTc2NQ==",
      "original_commit_id" : "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
      "original_line" : 55,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 111,
      "pull_request_review_id" : 664624908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T17:16:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636281765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41220998?v=4",
         "events_url" : "https://api.github.com/users/DariusParvin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DariusParvin/followers",
         "following_url" : "https://api.github.com/users/DariusParvin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DariusParvin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DariusParvin",
         "id" : 41220998,
         "login" : "DariusParvin",
         "node_id" : "MDQ6VXNlcjQxMjIwOTk4",
         "organizations_url" : "https://api.github.com/users/DariusParvin/orgs",
         "received_events_url" : "https://api.github.com/users/DariusParvin/received_events",
         "repos_url" : "https://api.github.com/users/DariusParvin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DariusParvin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DariusParvin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636285450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636285450"
         }
      },
      "author_association" : "NONE",
      "body" : "'Block height' is probably misleading. Should this say something like?\r\n```suggestion\r\n                self.log.info('Number of recently mined blocks: {}'.format(math.ceil(i / n_tx_to_mine)))\r\n```\r\nbut also is this useful to have? Without this we won't need to `import math` ",
      "commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "created_at" : "2021-05-20T16:56:44Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))\n+                self.log.info('Block height: {}'.format(math.ceil(i / n_tx_to_mine)))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636285450",
      "id" : 636285450,
      "line" : 56,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjI4NTQ1MA==",
      "original_commit_id" : "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
      "original_line" : 56,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 112,
      "pull_request_review_id" : 664624908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T17:16:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636285450",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41220998?v=4",
         "events_url" : "https://api.github.com/users/DariusParvin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DariusParvin/followers",
         "following_url" : "https://api.github.com/users/DariusParvin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DariusParvin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DariusParvin",
         "id" : 41220998,
         "login" : "DariusParvin",
         "node_id" : "MDQ6VXNlcjQxMjIwOTk4",
         "organizations_url" : "https://api.github.com/users/DariusParvin/orgs",
         "received_events_url" : "https://api.github.com/users/DariusParvin/received_events",
         "repos_url" : "https://api.github.com/users/DariusParvin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DariusParvin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DariusParvin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636298155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636298155"
         }
      },
      "author_association" : "NONE",
      "body" : "`scan_blocks` is slightly quicker than `generate`, so instead we can use\r\n```suggestion\r\n        self.wallet.scan_blocks(start=76, num=1)\r\n```\r\n(76 is the first block where the coinbase is mined to the miniwallet address)",
      "commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "created_at" : "2021-05-20T17:09:03Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636298155",
      "id" : 636298155,
      "line" : 41,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjI5ODE1NQ==",
      "original_commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "original_line" : 41,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 88,
      "pull_request_review_id" : 664624908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T17:16:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636298155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41220998?v=4",
         "events_url" : "https://api.github.com/users/DariusParvin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DariusParvin/followers",
         "following_url" : "https://api.github.com/users/DariusParvin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DariusParvin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DariusParvin",
         "id" : 41220998,
         "login" : "DariusParvin",
         "node_id" : "MDQ6VXNlcjQxMjIwOTk4",
         "organizations_url" : "https://api.github.com/users/DariusParvin/orgs",
         "received_events_url" : "https://api.github.com/users/DariusParvin/received_events",
         "repos_url" : "https://api.github.com/users/DariusParvin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DariusParvin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DariusParvin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636302051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636302051"
         }
      },
      "author_association" : "NONE",
      "body" : "Would it be useful to have this in the line above?\r\n```               \r\n                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\r\n```",
      "commit_id" : "ac8b08b2318b6ee1bf274ae422b002d7acdb3cb1",
      "created_at" : "2021-05-20T17:12:08Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636302051",
      "id" : 636302051,
      "line" : 50,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjMwMjA1MQ==",
      "original_commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "original_line" : 50,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 96,
      "pull_request_review_id" : 664624908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T20:24:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636302051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41220998?v=4",
         "events_url" : "https://api.github.com/users/DariusParvin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DariusParvin/followers",
         "following_url" : "https://api.github.com/users/DariusParvin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DariusParvin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DariusParvin",
         "id" : 41220998,
         "login" : "DariusParvin",
         "node_id" : "MDQ6VXNlcjQxMjIwOTk4",
         "organizations_url" : "https://api.github.com/users/DariusParvin/orgs",
         "received_events_url" : "https://api.github.com/users/DariusParvin/received_events",
         "repos_url" : "https://api.github.com/users/DariusParvin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DariusParvin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DariusParvin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636304223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636304223"
         }
      },
      "author_association" : "NONE",
      "body" : "I'm curious if there's any advantage to incrementing k manually rather than using `enumerate`? Otherwise `enumerate` seems more concise.\r\n```suggestion\r\n        for k, tx in enumerate(txs):\r\n```",
      "commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "created_at" : "2021-05-20T17:15:20Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))\n+                self.log.info('Block height: {}'.format(math.ceil(i / n_tx_to_mine)))\n+\n+        self.log.info('Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info('Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(self.nodes[0].getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+        .format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        k = 0\n+        for tx in txs:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636304223",
      "id" : 636304223,
      "line" : 71,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjMwNDIyMw==",
      "original_commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "original_line" : 71,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 128,
      "pull_request_review_id" : 664624908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T17:16:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636304223",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41220998?v=4",
         "events_url" : "https://api.github.com/users/DariusParvin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DariusParvin/followers",
         "following_url" : "https://api.github.com/users/DariusParvin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DariusParvin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DariusParvin",
         "id" : 41220998,
         "login" : "DariusParvin",
         "node_id" : "MDQ6VXNlcjQxMjIwOTk4",
         "organizations_url" : "https://api.github.com/users/DariusParvin/orgs",
         "received_events_url" : "https://api.github.com/users/DariusParvin/received_events",
         "repos_url" : "https://api.github.com/users/DariusParvin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DariusParvin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DariusParvin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636310625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636310625"
         }
      },
      "author_association" : "NONE",
      "body" : "Nice catch! Yes will update. ",
      "commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "created_at" : "2021-05-20T17:24:57Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636310625",
      "id" : 636310625,
      "in_reply_to_id" : 636278997,
      "line" : 51,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjMxMDYyNQ==",
      "original_commit_id" : "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
      "original_line" : 51,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 98,
      "pull_request_review_id" : 664669323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T17:24:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636310625",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636311404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636311404"
         }
      },
      "author_association" : "NONE",
      "body" : "I think I was using this for debugging and set to info by mistake. Should remove this to reduce clutter on the console for sure.",
      "commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "created_at" : "2021-05-20T17:26:07Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636311404",
      "id" : 636311404,
      "in_reply_to_id" : 636281765,
      "line" : 55,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjMxMTQwNA==",
      "original_commit_id" : "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
      "original_line" : 55,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 111,
      "pull_request_review_id" : 664670413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T17:26:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636311404",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636454788"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636454788"
         }
      },
      "author_association" : "NONE",
      "body" : "Updated with ac8b08b",
      "commit_id" : "ac8b08b2318b6ee1bf274ae422b002d7acdb3cb1",
      "created_at" : "2021-05-20T20:39:39Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636454788",
      "id" : 636454788,
      "in_reply_to_id" : 636281765,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NDc4OA==",
      "original_commit_id" : "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
      "original_line" : 55,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 664876554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T20:39:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636454788",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636455248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455248"
         }
      },
      "author_association" : "NONE",
      "body" : "Yeah, not sure what I thinking here. Could've just use len(block_ids) as well. Removed in ac8b08b",
      "commit_id" : "ac8b08b2318b6ee1bf274ae422b002d7acdb3cb1",
      "created_at" : "2021-05-20T20:40:30Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))\n+                self.log.info('Block height: {}'.format(math.ceil(i / n_tx_to_mine)))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636455248",
      "id" : 636455248,
      "in_reply_to_id" : 636285450,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NTI0OA==",
      "original_commit_id" : "b7c6eea86154320520fa6766c4a87f6ad4c1b899",
      "original_line" : 56,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 664877190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T20:40:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455248",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636455787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455787"
         }
      },
      "author_association" : "NONE",
      "body" : "Ah, I see. I was wondering how to implement the scan_blocks() but wasn't sure. Thanks! ac8b08b",
      "commit_id" : "ac8b08b2318b6ee1bf274ae422b002d7acdb3cb1",
      "created_at" : "2021-05-20T20:41:25Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636455787",
      "id" : 636455787,
      "in_reply_to_id" : 636298155,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NTc4Nw==",
      "original_commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "original_line" : 41,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 664877892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T20:41:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636455787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636456525"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636456525"
         }
      },
      "author_association" : "NONE",
      "body" : "I checked and there is no significant difference in test execution time. Using enumerate ac8b08b",
      "commit_id" : "ac8b08b2318b6ee1bf274ae422b002d7acdb3cb1",
      "created_at" : "2021-05-20T20:42:37Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(len(node.getrawmempool())))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+                self.log.info('{}'.format(block_ids))\n+                self.log.info('Block height: {}'.format(math.ceil(i / n_tx_to_mine)))\n+\n+        self.log.info('Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info('Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(self.nodes[0].getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+        .format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        k = 0\n+        for tx in txs:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636456525",
      "id" : 636456525,
      "in_reply_to_id" : 636304223,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NjUyNQ==",
      "original_commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "original_line" : 71,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 664878809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T20:42:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636456525",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636457558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636457558"
         }
      },
      "author_association" : "NONE",
      "body" : "Shoots, I thought I had that but it was just assert for mempool after mining a block. Updated ac8b08b",
      "commit_id" : "ac8b08b2318b6ee1bf274ae422b002d7acdb3cb1",
      "created_at" : "2021-05-20T20:44:17Z",
      "diff_hunk" : "@@ -38,86 +35,52 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.generate(1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r636457558",
      "id" : 636457558,
      "in_reply_to_id" : 636302051,
      "line" : 50,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NzU1OA==",
      "original_commit_id" : "a02da6d8c0d4951111df7b035388f01dbe526d0a",
      "original_line" : 50,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 96,
      "pull_request_review_id" : 664880099,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T20:44:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636457558",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Updated with ac8b08b. Let me know if I missed anything! Also, should I roll theses commits up into one, or will they get squashed at merge time? Forgot to sign the first few. \r\nRecent changes:\r\n* `self.wallet.generate(1)` to `self.wallet.scan_blocks(start=76, num=1)` \r\n* remove blocks mined `block_ids` from cluttering logs along with unnecessary math import\r\n* put back `enumerate` for mempool properties checks\r\n* added assert before mining block\r\n",
      "created_at" : "2021-05-20T22:39:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-845526900",
      "id" : 845526900,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTUyNjkwMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-20T22:39:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845526900",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "The changes look good to me! I'm relatively new myself but I think at this stage it would make sense to [squash](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) everything into one commit.",
      "created_at" : "2021-05-21T00:37:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-845571553",
      "id" : 845571553,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTU3MTU1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-21T00:37:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845571553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41220998?v=4",
         "events_url" : "https://api.github.com/users/DariusParvin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DariusParvin/followers",
         "following_url" : "https://api.github.com/users/DariusParvin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DariusParvin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DariusParvin",
         "id" : 41220998,
         "login" : "DariusParvin",
         "node_id" : "MDQ6VXNlcjQxMjIwOTk4",
         "organizations_url" : "https://api.github.com/users/DariusParvin/orgs",
         "received_events_url" : "https://api.github.com/users/DariusParvin/received_events",
         "repos_url" : "https://api.github.com/users/DariusParvin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DariusParvin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DariusParvin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> The changes look good to me! I'm relatively new myself but I think at this stage it would make sense to [squash](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) everything into one commit.\r\n\r\nGot it, thank you for your assistance!",
      "created_at" : "2021-05-21T02:41:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-845610550",
      "id" : 845610550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTYxMDU1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-21T02:41:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845610550",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675698079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675698079"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The old implementation of the test explicitly sets the ancestors and descendants of each transaction to form an acyclic tournament. However, `wallet.send_self_transfer()` only explicitly sets one ancestor for each transaction to form something like a singly linked list of `size` number of transactions. The acyclic tournament is then formed by the mempool. It would perhaps be a good idea to mention this in the description of `transaction_graph_test`",
      "commit_id" : "df07919caa36d1345590010f5552d9e24db2bbde",
      "created_at" : "2021-07-23T16:42:21Z",
      "diff_hunk" : "@@ -38,86 +34,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675698079",
      "id" : 675698079,
      "line" : 35,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTY5ODA3OQ==",
      "original_commit_id" : "df07919caa36d1345590010f5552d9e24db2bbde",
      "original_line" : 35,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 25,
      "pull_request_review_id" : 713904995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-23T16:57:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675698079",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41079588?v=4",
         "events_url" : "https://api.github.com/users/sriramdvt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sriramdvt/followers",
         "following_url" : "https://api.github.com/users/sriramdvt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sriramdvt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sriramdvt",
         "id" : 41079588,
         "login" : "sriramdvt",
         "node_id" : "MDQ6VXNlcjQxMDc5NTg4",
         "organizations_url" : "https://api.github.com/users/sriramdvt/orgs",
         "received_events_url" : "https://api.github.com/users/sriramdvt/received_events",
         "repos_url" : "https://api.github.com/users/sriramdvt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sriramdvt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sriramdvt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675701681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675701681"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In the earlier implementation of MiniWallet, `tx_size` had only one fixed value. To account for the varying sizes of transactions in the MiniWallet, it would be a better idea to calculate the transaction size from the transaction returned by `send_self_transfer`.",
      "commit_id" : "df07919caa36d1345590010f5552d9e24db2bbde",
      "created_at" : "2021-07-23T16:48:16Z",
      "diff_hunk" : "@@ -38,86 +34,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675701681",
      "id" : 675701681,
      "line" : 47,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTcwMTY4MQ==",
      "original_commit_id" : "df07919caa36d1345590010f5552d9e24db2bbde",
      "original_line" : 47,
      "original_position" : 93,
      "original_start_line" : 46,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 93,
      "pull_request_review_id" : 713904995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : 46,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-23T16:57:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675701681",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41079588?v=4",
         "events_url" : "https://api.github.com/users/sriramdvt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sriramdvt/followers",
         "following_url" : "https://api.github.com/users/sriramdvt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sriramdvt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sriramdvt",
         "id" : 41079588,
         "login" : "sriramdvt",
         "node_id" : "MDQ6VXNlcjQxMDc5NTg4",
         "organizations_url" : "https://api.github.com/users/sriramdvt/orgs",
         "received_events_url" : "https://api.github.com/users/sriramdvt/received_events",
         "repos_url" : "https://api.github.com/users/sriramdvt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sriramdvt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sriramdvt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675703904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675703904"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Replace `self.nodes[0]` with `node`",
      "commit_id" : "df07919caa36d1345590010f5552d9e24db2bbde",
      "created_at" : "2021-07-23T16:51:56Z",
      "diff_hunk" : "@@ -38,86 +34,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"\n \n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n-\n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n-\n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            txs.append(self.wallet.send_self_transfer(from_node=node))\n+            tx_size.append(96)\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n+\n+        self.log.info('Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info('Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(self.nodes[0].getrawmempool()), size)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r675703904",
      "id" : 675703904,
      "line" : 63,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTcwMzkwNA==",
      "original_commit_id" : "df07919caa36d1345590010f5552d9e24db2bbde",
      "original_line" : 63,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 118,
      "pull_request_review_id" : 713904995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-23T16:57:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675703904",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41079588?v=4",
         "events_url" : "https://api.github.com/users/sriramdvt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sriramdvt/followers",
         "following_url" : "https://api.github.com/users/sriramdvt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sriramdvt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sriramdvt",
         "id" : 41079588,
         "login" : "sriramdvt",
         "node_id" : "MDQ6VXNlcjQxMDc5NTg4",
         "organizations_url" : "https://api.github.com/users/sriramdvt/orgs",
         "received_events_url" : "https://api.github.com/users/sriramdvt/received_events",
         "repos_url" : "https://api.github.com/users/sriramdvt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sriramdvt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sriramdvt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sriramdvt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r676184448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676184448"
         }
      },
      "author_association" : "NONE",
      "body" : "Updated the comment.",
      "commit_id" : "2de352b9ec01a220eb19bd23c1dc049da5a7029c",
      "created_at" : "2021-07-25T18:24:49Z",
      "diff_hunk" : "@@ -38,86 +34,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n         \"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r676184448",
      "id" : 676184448,
      "in_reply_to_id" : 675698079,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjE4NDQ0OA==",
      "original_commit_id" : "df07919caa36d1345590010f5552d9e24db2bbde",
      "original_line" : 35,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 38,
      "pull_request_review_id" : 714340726,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-25T18:26:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/676184448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nThanks for posting the profiling data! Definitely agree with more miniwallet usage, especially if it increases test execution speed. I compiled and ran the tests and everything passed, but I would definitely recommend running `flake8` and making the suggested style changes. you can do this automatically with `autopep8` (I did it by with the following steps):\r\n\r\n```bash\r\npip install autopep8\r\nautopep8 --in-place mempool_updatefromblock.py\r\n```\r\nyou can double check the changes by running `flake8 mempool_updatefromblock.py`. you should only see line length warnings, which are fine to ignore",
      "created_at" : "2021-07-26T13:27:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-886703595",
      "id" : 886703595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII58402gXr",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-26T13:27:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886703595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-07-26T16:13:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-886838684",
      "id" : 886838684,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII58403BWc",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-26T16:13:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886838684",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> ```shell\r\n> pip install autopep8\r\n> ```\r\n\r\noh shoots! never used autopep8 before. will use from now on. Thanks for the tip! (^_^) => 0b7dbeb",
      "created_at" : "2021-07-26T17:33:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-886894048",
      "id" : 886894048,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII58403O3g",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-26T17:33:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886894048",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > ```shell\r\n> > pip install autopep8\r\n> > ```\r\n> \r\n> oh shoots! never used autopep8 before. will use from now on. Thanks for the tip! (^_^) => [0b7dbeb](https://github.com/bitcoin/bitcoin/commit/0b7dbebd14962080c86c5667a77bbafdcefa6865)\r\n\r\nlooks great! id suggest squashing into one atomic commit per [the contributing guide](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits)",
      "created_at" : "2021-07-26T22:27:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-887069908",
      "id" : 887069908,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII584035zU",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-26T22:27:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887069908",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > > ```shell\r\n> > > pip install autopep8\r\n> > > ```\r\n> > \r\n> > \r\n> > oh shoots! never used autopep8 before. will use from now on. Thanks for the tip! (^_^) => [0b7dbeb](https://github.com/bitcoin/bitcoin/commit/0b7dbebd14962080c86c5667a77bbafdcefa6865)\r\n> \r\n> looks great! id suggest squashing into one atomic commit per [the contributing guide](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits)\r\n\r\nGot it, thanks much!",
      "created_at" : "2021-07-27T02:05:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-887150924",
      "id" : 887150924,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII58404NlM",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-27T02:05:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887150924",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK https://github.com/bitcoin/bitcoin/pull/21999/commits/446c06a6fd8bf205e534be47c02d8088e40dd10f\r\n\r\nbuilt without wallet, ran the test to verify everything is behaving as expected. also code reviewed to verify the logic of the test is unchanged (strictly a refactor)",
      "created_at" : "2021-07-27T11:06:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-887420465",
      "id" : 887420465,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII58405PYx",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-27T11:06:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887420465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22567 by MarcoFalke\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-07-27T20:41:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-887820427",
      "id" : 887820427,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII58406xCL",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-31T18:18:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887820427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678248027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248027"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please don't commit large style changes in the same commit as refactors/features. This makes review harder because it is not clear what is a refactor/style-change/feature\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#committing-patches",
      "commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "created_at" : "2021-07-28T12:21:22Z",
      "diff_hunk" : "@@ -36,87 +34,65 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[\n+                         id]['descendantcount'], size - k)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678248027",
      "id" : 678248027,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI0ODAyNw==",
      "original_commit_id" : "446c06a6fd8bf205e534be47c02d8088e40dd10f",
      "original_line" : 85,
      "original_position" : 150,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 716929545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T12:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678249782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678249782"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also I don't think the change here makes the code easier to read (neither for devs nor for scripts and parsers)",
      "commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "created_at" : "2021-07-28T12:23:56Z",
      "diff_hunk" : "@@ -36,87 +34,65 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[\n+                         id]['descendantcount'], size - k)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678249782",
      "id" : 678249782,
      "in_reply_to_id" : 678248027,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI0OTc4Mg==",
      "original_commit_id" : "446c06a6fd8bf205e534be47c02d8088e40dd10f",
      "original_line" : 85,
      "original_position" : 150,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 716931894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T12:23:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678249782",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678321024"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678321024"
         }
      },
      "author_association" : "NONE",
      "body" : "Oh shoot, my bad. :sob:  Was using some auto-styling tool and must've finger fudged it. Fixed and squashed into 33865a5",
      "commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "created_at" : "2021-07-28T13:51:13Z",
      "diff_hunk" : "@@ -36,87 +34,65 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[\n+                         id]['descendantcount'], size - k)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678321024",
      "id" : 678321024,
      "in_reply_to_id" : 678248027,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODMyMTAyNA==",
      "original_commit_id" : "446c06a6fd8bf205e534be47c02d8088e40dd10f",
      "original_line" : 85,
      "original_position" : 150,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 717027514,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T13:51:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678321024",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678398886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678398886"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Oh shoot, my bad. sob Was using some auto-styling tool and must've finger fudged it. Fixed and squashed into [33865a5](https://github.com/bitcoin/bitcoin/commit/33865a5fbacf462c90520cb8f5dde61dd8fdbfc9)\r\n\r\nmy fault, @reemuru , i gave bad advice. @MarcoFalke is correct: linting (style changes) should be in separate PR's from refactors/features",
      "commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "created_at" : "2021-07-28T15:12:35Z",
      "diff_hunk" : "@@ -36,87 +34,65 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[\n+                         id]['descendantcount'], size - k)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678398886",
      "id" : 678398886,
      "in_reply_to_id" : 678248027,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODM5ODg4Ng==",
      "original_commit_id" : "446c06a6fd8bf205e534be47c02d8088e40dd10f",
      "original_line" : 85,
      "original_position" : 150,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 717134527,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T15:12:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678398886",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK https://github.com/bitcoin/bitcoin/pull/22330/commits/c1c0768b619ab463a00052d0a584fba191eb02a9\r\n\r\nbuilt without wallet and ran test",
      "created_at" : "2021-07-28T15:17:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-888395753",
      "id" : 888395753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII584089fp",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-28T15:17:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/888395753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678412369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412369"
         }
      },
      "author_association" : "MEMBER",
      "body" : "here are still style changes mixed in",
      "commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "created_at" : "2021-07-28T15:26:21Z",
      "diff_hunk" : "@@ -9,20 +9,18 @@\n \"\"\"\n import time\n \n-from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n \n class MempoolUpdateFromBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-limitdescendantsize=1000', '-limitancestorsize=1000']]\n+        self.extra_args = [\n+            ['-limitdescendantsize=1000', '-limitancestorsize=1000']]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678412369",
      "id" : 678412369,
      "line" : 21,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODQxMjM2OQ==",
      "original_commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "original_line" : 21,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 15,
      "pull_request_review_id" : 717153157,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T15:26:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412369",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678412561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412561"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why is this changed?",
      "commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "created_at" : "2021-07-28T15:26:33Z",
      "diff_hunk" : "@@ -36,87 +34,62 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[id]['descendantcount'], size - k)\n+            assert_equal(node.getrawmempool(True)[id]['descendantsize'], sum(tx_size[k:size]))\n+            assert_equal(node.getrawmempool(True)[id]['ancestorcount'], k + 1)\n+            assert_equal(node.getrawmempool(True)[id]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n-        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25\n+        # to not fire \"too many unconfirmed parents\" error.\n+        self.transaction_graph_test(size=100, n_tx_to_mine=25)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r678412561",
      "id" : 678412561,
      "line" : 92,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODQxMjU2MQ==",
      "original_commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "original_line" : 92,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 159,
      "pull_request_review_id" : 717153157,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T15:26:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678412561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r679860767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/679860767"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The goal should probably be to fix the error, not to remove iterations from the test. I guess you can create more outputs or mine a block or something?",
      "commit_id" : "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
      "created_at" : "2021-07-30T11:42:30Z",
      "diff_hunk" : "@@ -36,87 +34,62 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[id]['descendantcount'], size - k)\n+            assert_equal(node.getrawmempool(True)[id]['descendantsize'], sum(tx_size[k:size]))\n+            assert_equal(node.getrawmempool(True)[id]['ancestorcount'], k + 1)\n+            assert_equal(node.getrawmempool(True)[id]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n-        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25\n+        # to not fire \"too many unconfirmed parents\" error.\n+        self.transaction_graph_test(size=100, n_tx_to_mine=25)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r679860767",
      "id" : 679860767,
      "in_reply_to_id" : 678412561,
      "line" : 91,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTg2MDc2Nw==",
      "original_commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "original_line" : 91,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 157,
      "pull_request_review_id" : 718991538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-30T11:42:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/679860767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r679947134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/679947134"
         }
      },
      "author_association" : "NONE",
      "body" : "Ah ok, apologies for the noise. Will put this into draft mode since some work is still needed. Thanks for review!",
      "commit_id" : "1332dbb526f19ebf96bf3fa7c147bacd1926f7ae",
      "created_at" : "2021-07-30T13:58:56Z",
      "diff_hunk" : "@@ -36,87 +34,62 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             - has K+1 ancestors (including this one)\n \n         More details: https://en.wikipedia.org/wiki/Tournament_(graph_theory)\n-        \"\"\"\n-\n-        if not start_input_txid:\n-            start_input_txid = self.nodes[0].getblock(self.nodes[0].getblockhash(1))['tx'][0]\n \n-        if not end_address:\n-            end_address = self.nodes[0].getnewaddress()\n+        Note: In order to maintain Miniwallet compatibility wallet.send_self_transfer()\n+        only explicitly sets one ancestor for each transaction to form something\n+        like a singly linked list of size number of transactions.\n+        The acyclic tournament is then formed by the mempool.\n+        \"\"\"\n \n-        first_block_hash = ''\n-        tx_id = []\n-        tx_size = []\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n         self.log.info('Creating {} transactions...'.format(size))\n-        for i in range(0, size):\n-            self.log.debug('Preparing transaction #{}...'.format(i))\n-            # Prepare inputs.\n-            if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n-            else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getrawmempool(True)[tx_id[-1]]['vsize'])\n-\n-            if tx_count in n_tx_to_mine:\n-                # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.nodes[0].generate(1)[0]\n-                if not first_block_hash:\n-                    first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-                self.log.info('All of the transactions from the current batch have been mined into a block.')\n-            elif tx_count == size:\n-                # At the end all of the mined blocks are invalidated, and all of the created\n-                # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n-                end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n-                self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n-\n-        self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n-        for k, tx in enumerate(tx_id):\n+        self.wallet.scan_blocks(start=76, num=1)\n+        node.generate(size)\n+        txs = []\n+        block_ids = []\n+        tx_size = []\n+        for i in range(size):\n+            tx = self.wallet.send_self_transfer(from_node=node)\n+            m_tx = node.getrawmempool(True)[tx['txid']]\n+            txs.append(tx)\n+            tx_size.append(m_tx['vsize'])\n+            if (i+1) % n_tx_to_mine == 0:\n+                assert_equal(len(node.getrawmempool()), n_tx_to_mine)\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'\n+                              .format(n_tx_to_mine))\n+                block_ids.append(self.wallet.generate(1)[0])\n+                assert_equal(len(node.getrawmempool()), 0)\n+                self.log.info(\n+                    'All of the transactions from the current batch have been mined into a block.')\n+\n+        self.log.info(\n+            'Mempool size pre-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), 0)\n+        # Invalidate the first block to send the transactions back to the mempool.\n+        start = time.time()\n+        node.invalidateblock(block_ids[0])\n+        end = time.time()\n+        self.log.info(\n+            'Mempool size post-invalidation: {}'.format(len(node.getrawmempool())))\n+        assert_equal(len(node.getrawmempool()), size)\n+        self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'\n+                      .format(end - start))\n+\n+        self.log.info(\n+            'Checking descendants/ancestors properties of all of the in-mempool transactions...')\n+        for k, tx in enumerate(txs):\n+            id = tx['txid']\n             self.log.debug('Check transaction #{}.'.format(k))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantcount'], size - k)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['descendantsize'], sum(tx_size[k:size]))\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorcount'], k + 1)\n-            assert_equal(self.nodes[0].getrawmempool(True)[tx]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n+            assert_equal(node.getrawmempool(True)[id]['descendantcount'], size - k)\n+            assert_equal(node.getrawmempool(True)[id]['descendantsize'], sum(tx_size[k:size]))\n+            assert_equal(node.getrawmempool(True)[id]['ancestorcount'], k + 1)\n+            assert_equal(node.getrawmempool(True)[id]['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n-        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25\n+        # to not fire \"too many unconfirmed parents\" error.\n+        self.transaction_graph_test(size=100, n_tx_to_mine=25)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#discussion_r679947134",
      "id" : 679947134,
      "in_reply_to_id" : 678412561,
      "line" : 91,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTk0NzEzNA==",
      "original_commit_id" : "33865a5fbacf462c90520cb8f5dde61dd8fdbfc9",
      "original_line" : 91,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 157,
      "pull_request_review_id" : 719107339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21999",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-30T13:58:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/679947134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13033037?v=4",
         "events_url" : "https://api.github.com/users/reemuru/events{/privacy}",
         "followers_url" : "https://api.github.com/users/reemuru/followers",
         "following_url" : "https://api.github.com/users/reemuru/following{/other_user}",
         "gists_url" : "https://api.github.com/users/reemuru/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/reemuru",
         "id" : 13033037,
         "login" : "reemuru",
         "node_id" : "MDQ6VXNlcjEzMDMzMDM3",
         "organizations_url" : "https://api.github.com/users/reemuru/orgs",
         "received_events_url" : "https://api.github.com/users/reemuru/received_events",
         "repos_url" : "https://api.github.com/users/reemuru/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/reemuru/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/reemuru/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/reemuru"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@reemuru was there a reason this closed? Would you like to mark it up for grabs?",
      "created_at" : "2021-08-05T23:17:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-893884092",
      "id" : 893884092,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII5841R5a8",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-05T23:17:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893884092",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I will start working on this as it is up for grabs. Please let me know if this is done elsewhere or no longer necessary?",
      "created_at" : "2022-01-12T13:40:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-1011057166",
      "id" : 1011057166,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII5848Q4IO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011057166/reactions"
      },
      "updated_at" : "2022-01-12T13:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011057166",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "You can open the file on the `master` branch and check if `skip_if_no_wallet` is still in the file to see if this is still relevant.",
      "created_at" : "2022-01-12T13:50:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-1011065961",
      "id" : 1011065961,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII5848Q6Rp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011065961/reactions"
      },
      "updated_at" : "2022-01-12T13:50:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011065961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thanks @MarcoFalke. I see `skip_if_no_wallet` is still in https://github.com/bitcoin/bitcoin/blob/master/test/functional/mempool_updatefromblock.py. I also checked each revision to the file since this PR was created, and don't see any change making this PR irrelevant. Did I miss anything before determining it is useful to work on this?",
      "created_at" : "2022-01-13T02:43:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21999#issuecomment-1011707803",
      "id" : 1011707803,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21999",
      "node_id" : "IC_kwDOABII5848TW-b",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011707803/reactions"
      },
      "updated_at" : "2022-01-13T02:43:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011707803",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   }
]
