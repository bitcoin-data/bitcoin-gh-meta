{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "The developer note's recommendations on how to pass (non-)fundamental types can be found [here](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#general-c).\r\n\r\nIn #19053 @theStack replaces some unnecessary uses of raw pointer parameters with references.\r\n\r\nThere are a few similar cases in our code base where references (or something else) might be [more appropriate](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#general-c) than raw pointer parameters.\r\n\r\nIf anyone is interested in investigating such cases the commands below might be helpful to find potential candidates.\r\n\r\nNote: It probably goes without saying, but any change of this type needs case-by-case evaluation :)  Each suggested individual parameter change must make sense and be worth doing: the commands are only provided to help find potential candidates.\r\n\r\nTop list of types passed as raw pointer parameters (incomplete top list, but it should be somewhat representative):\r\n\r\n```\r\n$ git grep -E '^[a-zA-Z].* [a-zA-Z:]+\\([^()]*\\*[^()]*\\)' -- \"src/**.cpp\" \"src/**.h\" \\\r\n      \":(exclude)src/bench/\" \":(exclude)src/compat/\" \":(exclude)src/crc32c/\" \\\r\n      \":(exclude)src/leveldb/\" \":(exclude)src/qt/\" \":(exclude)src/secp256k1/\" \\\r\n      \":(exclude)src/test/\" \":(exclude)src/tinyformat.h\" \":(exclude)src/univalue/\" \\\r\n      \":(exclude)src/zmq/\" \":(exclude)src/wallet/\" | grep -vE \"char *\\*\" | \\\r\n      cut -f2 -d'(' | cut -f1 -d')' | tr \",\" \"\\n\" | grep \"\\*\" | sed 's/^ *const  *//g' | \\\r\n      sed 's/^ *//g' | sed 's/ \\*/* /g' | sed 's/\\*.*$/*/g' | grep -E '[a-zA-Z]' | \\\r\n      sort | uniq -c | sort -rn\r\n    118 CBlockIndex*\r\n     24 CNode*\r\n     11 ScriptError*\r\n     10 void*\r\n      9 FILE*\r\n      9 bool*\r\n      8 CConnman*\r\n      7 std::string*\r\n      6 RPCTimerInterface*\r\n      6 CNetAddr*\r\n      4 std::vector<int>*\r\n      4 SigningProvider*\r\n      4 LockPoints*\r\n      4 HTTPRequest*\r\n      4 FlatFilePos*\r\n      4 CValidationInterface*\r\n      4 CScriptWitness*\r\n      4 CBlockHeader*\r\n      3 uint32_t*\r\n      3 struct sockaddr*\r\n      3 EstimationResult*\r\n      3 CNodeState*\r\n      3 CCoinsView*\r\n      2 uint8_t*\r\n      2 uint64_t*\r\n      2 struct bufferevent*\r\n      2 std::vector<unsigned char>*\r\n      2 std::vector<CScriptCheck>*\r\n      2 std::vector<const CBlockIndex*\r\n      2 SignatureData*\r\n      2 PrecomputedTransactionData*\r\n      2 int64_t*\r\n      2 int*\r\n      2 FillableSigningProvider*\r\n      2 double*\r\n      2 CRPCCommand*\r\n      2 CCoinsViewCache*\r\n      2 CBlock*\r\n      1 WorkQueue<HTTPClosure>*\r\n      1 struct timeval*\r\n      1 struct in_addr*\r\n      1 struct evhttp*\r\n      1 struct event_base*\r\n      1 std::vector<COutPoint>*\r\n      1 std::list<QueuedBlock>::iterator*\r\n      1 socklen_t*\r\n      1 secp256k1_ecdsa_signature*\r\n      1 leveldb::Options*\r\n      1 FeeCalculation*\r\n      1 DisconnectedBlockTransactions*\r\n      1 CTxMemPoolEntry*\r\n      1 Coin*\r\n      1 CCoinsViewCursor*\r\n      1 CChainState*\r\n      1 CBlockFileInfo*\r\n      1 BaseRequestHandler*\r\n      1 BanMan*\r\n```\r\n\r\nA subset of functions with raw pointer parameters:\r\n\r\n```\r\n$ git grep -E '^[a-zA-Z].* [a-zA-Z:]+\\([^()]*\\*[^()]*\\)' -- \"src/**.cpp\" \"src/**.h\" \\\r\n      \":(exclude)src/bench/\" \":(exclude)src/compat/\" \":(exclude)src/crc32c/\" \\\r\n      \":(exclude)src/leveldb/\" \":(exclude)src/qt/\" \":(exclude)src/secp256k1/\" \\\r\n      \":(exclude)src/test/\" \":(exclude)src/tinyformat.h\" \":(exclude)src/univalue/\" \\\r\n      \":(exclude)src/zmq/\" \":(exclude)src/wallet/\" | grep -vE \"char *\\*\"\r\nsrc/addrman.cpp:CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\r\nsrc/addrman.cpp:CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)\r\nsrc/bitcoin-cli.cpp:static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, const std::vector<std::string>& args)\r\nsrc/blockfilter.cpp:bool GCSFilter::MatchInternal(const uint64_t* element_hashes, size_t size) const\r\nsrc/chain.cpp:void CChain::SetTip(CBlockIndex *pindex) {\r\nsrc/chain.cpp:CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\r\nsrc/chain.cpp:const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb) {\r\nsrc/chain.h:const CBlockIndex* LastCommonAncestor(const CBlockIndex* pa, const CBlockIndex* pb);\r\nsrc/coins.cpp:bool CCoinsViewCache::SpendCoin(const COutPoint &outpoint, Coin* moveout) {\r\nsrc/consensus/merkle.cpp:uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {\r\nsrc/consensus/merkle.cpp:uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)\r\nsrc/consensus/merkle.cpp:uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)\r\nsrc/consensus/merkle.h:uint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated = nullptr);\r\nsrc/consensus/merkle.h:uint256 BlockMerkleRoot(const CBlock& block, bool* mutated = nullptr);\r\nsrc/consensus/merkle.h:uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated = nullptr);\r\nsrc/consensus/tx_verify.cpp:std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\r\nsrc/consensus/tx_verify.cpp:bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\r\nsrc/consensus/tx_verify.h:std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\r\nsrc/consensus/tx_verify.h:bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\r\nsrc/crypto/ripemd160.cpp:void inline Initialize(uint32_t* s)\r\nâ¦\r\n```",
   "closed_at" : "2021-07-07T21:59:54Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   },
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19062/comments",
   "created_at" : "2020-05-24T12:27:09Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19062/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/19062",
   "id" : 623854659,
   "labels" : [
      {
         "color" : "ebd775",
         "default" : false,
         "description" : null,
         "id" : 64584,
         "name" : "Brainstorming",
         "node_id" : "MDU6TGFiZWw2NDU4NA==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19062/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU2MjM4NTQ2NTk=",
   "number" : 19062,
   "performed_via_github_app" : null,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Investigate unnecessary uses of raw pointer parameters",
   "updated_at" : "2021-07-07T21:59:54Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19062",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
