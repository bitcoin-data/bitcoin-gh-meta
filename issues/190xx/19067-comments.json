[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r429986672"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429986672"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note to self: `TestingSetup` introduces non-determinism and is way too heavy to use just to disable logging. Consider switching to something more lightweight which does exactly what we want and nothing more :)",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-05-25T15:18:43Z",
      "diff_hunk" : "@@ -0,0 +1,163 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static TestingSetup no_log_regtest_setup{CBaseChainParams::REGTEST, {\"-nodebuglogfile\"}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r429986672",
      "id" : 429986672,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4NjY3Mg==",
      "original_commit_id" : "7960082e506feb6ccaf5d0a8a0b61d471da64481",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : null,
      "pull_request_review_id" : 417774102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T07:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429986672",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2020-05-25T16:40:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-633647172",
      "id" : 633647172,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzY0NzE3Mg==",
      "updated_at" : "2020-05-25T16:40:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633647172",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430361390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430361390"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ?\r\n    fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({\r\n```\r\n\r\nCouldn't this start a new line after the `?` Seems overly wasteful to fill the screen with 8 * 90 pure whitespace",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-05-26T12:05:32Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 13)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        }\n+        case 2: {\n+            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            if (!SanityCheckASMap(asmap)) {\n+                break;\n+            }\n+            CNodeStats stats;\n+            node.copyStats(stats, asmap);\n+            break;\n+        }\n+        case 4: {\n+            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 5: {\n+            const CNode* add_ref_node = node.AddRef();\n+            assert(add_ref_node == &node);\n+            break;\n+        }\n+        case 6: {\n+            if (node.GetRefCount() > 0) {\n+                node.Release();\n+            }\n+            break;\n+        }\n+        case 7: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            node.AddAddressKnown(*addr_opt);\n+            break;\n+        }\n+        case 8: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+            node.PushAddress(*addr_opt, fast_random_context);\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.AddInventoryKnown(*inv_opt);\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.PushInventory(*inv_opt);\n+            break;\n+        }\n+        case 11: {\n+            node.PushBlockHash(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 12: {\n+            const std::optional<CService> service_opt = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (!service_opt) {\n+                break;\n+            }\n+            node.SetAddrLocal(*service_opt);\n+            break;\n+        }\n+        case 13: {\n+            const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bool complete;\n+            node.ReceiveMsgBytes((const char*)b.data(), b.size(), complete);\n+            break;\n+        }\n+        }\n+    }\n+\n+    (void)node.GetAddrLocal();\n+    (void)node.GetAddrName();\n+    (void)node.GetId();\n+    (void)node.GetLocalNonce();\n+    (void)node.GetLocalServices();\n+    (void)node.GetMyStartingHeight();\n+    (void)node.GetRecvVersion();\n+    const int ref_count = node.GetRefCount();\n+    assert(ref_count >= 0);\n+    (void)node.GetSendVersion();\n+    (void)node.IsAddrRelayPeer();\n+\n+    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ? fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430361390",
      "id" : 430361390,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2MTM5MA==",
      "original_commit_id" : "086991817e25df9d42e249751342cf5b137e348e",
      "original_line" : 152,
      "original_position" : 152,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : null,
      "pull_request_review_id" : 418230755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T07:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430361390",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430391233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430391233"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sure! Now fixed: `clang-format`:ed version replaced with another `clang-format`:ed version after manual re-arrangement.\r\n\r\nWhen it comes to formatting I really don't have any personal preferences: I'm happy as long as `clang-format` is happy :)",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-05-26T12:57:35Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::REGTEST);\n+    StartMutedLogging();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 13)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        }\n+        case 2: {\n+            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            if (!SanityCheckASMap(asmap)) {\n+                break;\n+            }\n+            CNodeStats stats;\n+            node.copyStats(stats, asmap);\n+            break;\n+        }\n+        case 4: {\n+            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 5: {\n+            const CNode* add_ref_node = node.AddRef();\n+            assert(add_ref_node == &node);\n+            break;\n+        }\n+        case 6: {\n+            if (node.GetRefCount() > 0) {\n+                node.Release();\n+            }\n+            break;\n+        }\n+        case 7: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            node.AddAddressKnown(*addr_opt);\n+            break;\n+        }\n+        case 8: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+            node.PushAddress(*addr_opt, fast_random_context);\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.AddInventoryKnown(*inv_opt);\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.PushInventory(*inv_opt);\n+            break;\n+        }\n+        case 11: {\n+            node.PushBlockHash(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 12: {\n+            const std::optional<CService> service_opt = ConsumeDeserializable<CService>(fuzzed_data_provider);\n+            if (!service_opt) {\n+                break;\n+            }\n+            node.SetAddrLocal(*service_opt);\n+            break;\n+        }\n+        case 13: {\n+            const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            bool complete;\n+            node.ReceiveMsgBytes((const char*)b.data(), b.size(), complete);\n+            break;\n+        }\n+        }\n+    }\n+\n+    (void)node.GetAddrLocal();\n+    (void)node.GetAddrName();\n+    (void)node.GetId();\n+    (void)node.GetLocalNonce();\n+    (void)node.GetLocalServices();\n+    (void)node.GetMyStartingHeight();\n+    (void)node.GetRecvVersion();\n+    const int ref_count = node.GetRefCount();\n+    assert(ref_count >= 0);\n+    (void)node.GetSendVersion();\n+    (void)node.IsAddrRelayPeer();\n+\n+    const NetPermissionFlags net_permission_flags = fuzzed_data_provider.ConsumeBool() ? fuzzed_data_provider.PickValueInArray<NetPermissionFlags>({",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r430391233",
      "id" : 430391233,
      "in_reply_to_id" : 430361390,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MTIzMw==",
      "original_commit_id" : "086991817e25df9d42e249751342cf5b137e348e",
      "original_line" : 152,
      "original_position" : 152,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : null,
      "pull_request_review_id" : 418269729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T07:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430391233",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Anything left to do here? :)  The changes are limited to `src/test/fuzz/` and should hopefully be trivial to review.",
      "created_at" : "2020-06-28T19:21:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-650809891",
      "id" : 650809891,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1MDgwOTg5MQ==",
      "updated_at" : "2020-06-28T19:21:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650809891",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Fails to build with the same error as #19065 , rebasing it onto master reveals that `PushBlockHash` & `PushInventory` no longer exist since 344e831de54f7b864f03a90f6cb19692eafcd463.",
      "created_at" : "2020-07-14T02:13:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-657924864",
      "id" : 657924864,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzkyNDg2NA==",
      "updated_at" : "2020-07-14T02:13:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657924864",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454158682"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454158682"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\ntest/fuzz/net.cpp:115:18: error: no member named 'PushInventory' in 'CNode'\r\n\r\n            node.PushInventory(*inv_opt);\r\n\r\n            ~~~~ ^\r\n\r\ntest/fuzz/net.cpp:119:18: error: no member named 'PushBlockHash' in 'CNode'\r\n\r\n            node.PushBlockHash(ConsumeUInt256(fuzzed_data_provider));\r\n\r\n            ~~~~ ^\r\n\r\n2 errors generated.",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-07-14T07:29:00Z",
      "diff_hunk" : "@@ -0,0 +1,155 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 13)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        }\n+        case 2: {\n+            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            if (!SanityCheckASMap(asmap)) {\n+                break;\n+            }\n+            CNodeStats stats;\n+            node.copyStats(stats, asmap);\n+            break;\n+        }\n+        case 4: {\n+            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 5: {\n+            const CNode* add_ref_node = node.AddRef();\n+            assert(add_ref_node == &node);\n+            break;\n+        }\n+        case 6: {\n+            if (node.GetRefCount() > 0) {\n+                node.Release();\n+            }\n+            break;\n+        }\n+        case 7: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            node.AddAddressKnown(*addr_opt);\n+            break;\n+        }\n+        case 8: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+            node.PushAddress(*addr_opt, fast_random_context);\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.AddInventoryKnown(*inv_opt);\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.PushInventory(*inv_opt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454158682",
      "id" : 454158682,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1ODY4Mg==",
      "original_commit_id" : "2206f168f6ea4e93eeedc7ee2a3eea1e3df9ac27",
      "original_line" : 115,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : null,
      "pull_request_review_id" : 447855968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T07:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454158682",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454174673"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454174673"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, thanks for letting me know! Now fixed!",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-07-14T07:58:30Z",
      "diff_hunk" : "@@ -0,0 +1,155 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 13)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));\n+            break;\n+        }\n+        case 2: {\n+            node.SetSendVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 3: {\n+            const std::vector<bool> asmap = ConsumeRandomLengthIntegralVector<bool>(fuzzed_data_provider, 128);\n+            if (!SanityCheckASMap(asmap)) {\n+                break;\n+            }\n+            CNodeStats stats;\n+            node.copyStats(stats, asmap);\n+            break;\n+        }\n+        case 4: {\n+            node.SetRecvVersion(fuzzed_data_provider.ConsumeIntegral<int>());\n+            break;\n+        }\n+        case 5: {\n+            const CNode* add_ref_node = node.AddRef();\n+            assert(add_ref_node == &node);\n+            break;\n+        }\n+        case 6: {\n+            if (node.GetRefCount() > 0) {\n+                node.Release();\n+            }\n+            break;\n+        }\n+        case 7: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            node.AddAddressKnown(*addr_opt);\n+            break;\n+        }\n+        case 8: {\n+            if (node.m_addr_known == nullptr) {\n+                break;\n+            }\n+            const std::optional<CAddress> addr_opt = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+            if (!addr_opt) {\n+                break;\n+            }\n+            FastRandomContext fast_random_context{ConsumeUInt256(fuzzed_data_provider)};\n+            node.PushAddress(*addr_opt, fast_random_context);\n+            break;\n+        }\n+        case 9: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.AddInventoryKnown(*inv_opt);\n+            break;\n+        }\n+        case 10: {\n+            const std::optional<CInv> inv_opt = ConsumeDeserializable<CInv>(fuzzed_data_provider);\n+            if (!inv_opt) {\n+                break;\n+            }\n+            node.PushInventory(*inv_opt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r454174673",
      "id" : 454174673,
      "in_reply_to_id" : 454158682,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3NDY3Mw==",
      "original_commit_id" : "2206f168f6ea4e93eeedc7ee2a3eea1e3df9ac27",
      "original_line" : 115,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : null,
      "pull_request_review_id" : 447875859,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-14T07:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454174673",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Crypt-iQ Thanks for reporting. Should be fixed now. Would you mind retrying? :)",
      "created_at" : "2020-07-14T07:58:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-658032591",
      "id" : 658032591,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1ODAzMjU5MQ==",
      "updated_at" : "2020-07-14T07:58:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658032591",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift Fuzzing with clang-10 libfuzzer. afl-gcc/g++ can also build on a22b42e.",
      "created_at" : "2020-07-17T22:26:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-660363101",
      "id" : 660363101,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MDM2MzEwMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-17T22:26:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660363101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905063"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If the fuzzer didn't always pass in `INVALID_SOCKET`, every line would be covered by the fuzzer in `CNode::CloseSocketDisconnect()`.\r\n\r\nMaybe instead of doing this `CNode node {...}`, you could make a function `ConsumeCNode` that can also be used in the `process_message.cpp` & `process_messages.cpp` fuzzing harnesses. I think this would improve coverage of those fuzzing harnesses too :).",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-07-19T12:50:09Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905063",
      "id" : 456905063,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkwNTA2Mw==",
      "original_commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "original_line" : 40,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : 40,
      "pull_request_review_id" : 451128926,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-19T13:16:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905063",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905125"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since this always has length of 32, not every line is covered by the fuzzer in `MaybeSetAddrName`.",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-07-19T12:50:41Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 12)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r456905125",
      "id" : 456905125,
      "line" : 48,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkwNTEyNQ==",
      "original_commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "original_line" : 48,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : 48,
      "pull_request_review_id" : 451128926,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-19T13:16:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456905125",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470768940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470768940"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think that lack of coverage in `CNode::CloseSocketDisconnect` is okay: `INVALID_SOCKET` basically guarantees that all `CNode` operations are safe (that's how it is done in the unit tests). We can look at expanding the coverage safely in a future PR :)",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-08-14T17:50:26Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470768940",
      "id" : 470768940,
      "in_reply_to_id" : 456905063,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2ODk0MA==",
      "original_commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "original_line" : 40,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : 40,
      "pull_request_review_id" : 467761189,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T17:50:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470768940",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470769673"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470769673"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`ConsumeRandomLengthString(32)` will return a string _up to_ 32 characters long :)",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-08-14T17:51:51Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 12)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r470769673",
      "id" : 470769673,
      "in_reply_to_id" : 456905125,
      "line" : 48,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2OTY3Mw==",
      "original_commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "original_line" : 48,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : 48,
      "pull_request_review_id" : 467762091,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T17:51:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470769673",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471024908"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471024908"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok that makes sense to me about `INVALID_SOCKET`. What about `void AdvertiseLocal(CNode *pnode)`?",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-08-15T19:10:06Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471024908",
      "id" : 471024908,
      "in_reply_to_id" : 456905063,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNDkwOA==",
      "original_commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "original_line" : 40,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : 40,
      "pull_request_review_id" : 468012321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-15T19:10:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471024908",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471025336"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471025336"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nvm. ð ",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-08-15T19:14:55Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 12)) {\n+        case 0: {\n+            node.CloseSocketDisconnect();\n+            break;\n+        }\n+        case 1: {\n+            node.MaybeSetAddrName(fuzzed_data_provider.ConsumeRandomLengthString(32));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471025336",
      "id" : 471025336,
      "in_reply_to_id" : 456905125,
      "line" : 48,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNTMzNg==",
      "original_commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "original_line" : 48,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : 48,
      "pull_request_review_id" : 468012600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-15T19:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471025336",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471129211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471129211"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@Crypt-iQ Both `IsPeerAddrLocalGood` and `AdvertiseLocal` depend on global state (`fDiscover` and `fListen`), and in the case of `AdvertiseLocal` a `FastRandomContext` is deciding which execution path to take. I think they're sufficiently different to do them in another PR taking those things into account to achieve maximum possible determinism. Makes sense? :)",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-08-16T16:01:15Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471129211",
      "id" : 471129211,
      "in_reply_to_id" : 456905063,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyOTIxMQ==",
      "original_commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "original_line" : 40,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : 40,
      "pull_request_review_id" : 468075553,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-16T16:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471129211",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471145115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471145115"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes that makes sense ð ",
      "commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "created_at" : "2020-08-16T18:45:05Z",
      "diff_hunk" : "@@ -0,0 +1,147 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <net.h>\n+#include <net_permissions.h>\n+#include <netaddress.h>\n+#include <optional.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/setup_common.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const BasicTestingSetup basic_testing_setup;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CAddress> address = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address) {\n+        return;\n+    }\n+    const std::optional<CAddress> address_bind = ConsumeDeserializable<CAddress>(fuzzed_data_provider);\n+    if (!address_bind) {\n+        return;\n+    }\n+\n+    CNode node{fuzzed_data_provider.ConsumeIntegral<NodeId>(), static_cast<ServiceFlags>(fuzzed_data_provider.ConsumeIntegral<uint64_t>()), fuzzed_data_provider.ConsumeIntegral<int>(), INVALID_SOCKET, *address, fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), *address_bind, fuzzed_data_provider.ConsumeRandomLengthString(32), fuzzed_data_provider.ConsumeBool(), fuzzed_data_provider.ConsumeBool()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#discussion_r471145115",
      "id" : 471145115,
      "in_reply_to_id" : 456905063,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0NTExNQ==",
      "original_commit_id" : "a22b42e44148d64807e9fb8e452c284789100cf1",
      "original_line" : 40,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/test/fuzz/net.cpp",
      "position" : 40,
      "pull_request_review_id" : 468085902,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-16T18:45:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471145115",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested ACK a22b42e",
      "created_at" : "2020-08-16T18:45:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-674562510",
      "id" : 674562510,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDU2MjUxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-16T18:45:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674562510",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ready for merge?",
      "created_at" : "2020-08-26T19:35:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19067#issuecomment-681082086",
      "id" : 681082086,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MTA4MjA4Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-26T19:35:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681082086",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
