[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506159902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506159902"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why this change?",
      "commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "created_at" : "2020-10-16T08:20:19Z",
      "diff_hunk" : "@@ -29,45 +31,48 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n-        self.nodes[0].generate(10)\n+        self.log.info(\"Warning: this test will take about 70 seconds in the worst case. Be patient.\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506159902",
      "id" : 506159902,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE1OTkwMg==",
      "original_commit_id" : "c63e7c23f5f11371532f67a3126f5b1dd73fb901",
      "original_line" : 35,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "test/functional/mining_getblocktemplate_longpoll.py",
      "position" : null,
      "pull_request_review_id" : 510252326,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-16T13:41:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506159902",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506163012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506163012"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can remove unused `random_transaction`?",
      "commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "created_at" : "2020-10-16T08:23:23Z",
      "diff_hunk" : "@@ -29,45 +31,48 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n-        self.nodes[0].generate(10)\n+        self.log.info(\"Warning: this test will take about 70 seconds in the worst case. Be patient.\")\n+        miniwallets = [ MiniWallet(node) for node in self.nodes ]\n+        miniwallets[0].generate(10)\n         template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         longpollid = template['longpollid']\n         # longpollid should not change between successive invocations if nothing else happens\n         template2 = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         assert template2['longpollid'] == longpollid\n \n-        # Test 1: test that the longpolling wait if we do nothing\n+        self.log.info(\"Test that longpoll waits if we do nothing\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # check that thread still lives\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert thr.is_alive()\n \n-        # Test 2: test that longpoll will terminate if another node generates a block\n-        self.nodes[1].generate(1)  # generate a block on another node\n+        self.log.info(\"Test that longpoll will terminate if another node generates a block\")\n+        miniwallets[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 3: test that longpoll will terminate if we generate a block ourselves\n+        self.log.info(\"Test that longpoll will terminate if we generate a block ourselves\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n-        self.nodes[0].generate(1)  # generate a block on another node\n+        miniwallets[0].generate(1)  # generate a block on own node\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n+        # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n+        self.nodes[0].generate(100)\n+        self.nodes[1].generate(100)\n+\n+        self.log.info(\"Test that introducing a new transaction into the mempool will terminate the longpoll\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # generate a random transaction and submit it\n         min_relay_fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        # min_relay_fee is fee per 1000 bytes, which should be more than enough.\n-        (txid, txhex, fee) = random_transaction(self.nodes, Decimal(\"1.1\"), min_relay_fee, Decimal(\"0.001\"), 20)\n+        fee_rate = min_relay_fee + Decimal('0.00000010') * random.randint(0,20)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506163012",
      "id" : 506163012,
      "line" : 73,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2MzAxMg==",
      "original_commit_id" : "c63e7c23f5f11371532f67a3126f5b1dd73fb901",
      "original_line" : 73,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "test/functional/mining_getblocktemplate_longpoll.py",
      "position" : 71,
      "pull_request_review_id" : 510252326,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-16T13:41:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506163012",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506163150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506163150"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why are 100 not enough?",
      "commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "created_at" : "2020-10-16T08:23:31Z",
      "diff_hunk" : "@@ -29,45 +31,48 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n-        self.nodes[0].generate(10)\n+        self.log.info(\"Warning: this test will take about 70 seconds in the worst case. Be patient.\")\n+        miniwallets = [ MiniWallet(node) for node in self.nodes ]\n+        miniwallets[0].generate(10)\n         template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         longpollid = template['longpollid']\n         # longpollid should not change between successive invocations if nothing else happens\n         template2 = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         assert template2['longpollid'] == longpollid\n \n-        # Test 1: test that the longpolling wait if we do nothing\n+        self.log.info(\"Test that longpoll waits if we do nothing\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # check that thread still lives\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert thr.is_alive()\n \n-        # Test 2: test that longpoll will terminate if another node generates a block\n-        self.nodes[1].generate(1)  # generate a block on another node\n+        self.log.info(\"Test that longpoll will terminate if another node generates a block\")\n+        miniwallets[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 3: test that longpoll will terminate if we generate a block ourselves\n+        self.log.info(\"Test that longpoll will terminate if we generate a block ourselves\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n-        self.nodes[0].generate(1)  # generate a block on another node\n+        miniwallets[0].generate(1)  # generate a block on own node\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n+        # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n+        self.nodes[0].generate(100)\n+        self.nodes[1].generate(100)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506163150",
      "id" : 506163150,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE2MzE1MA==",
      "original_commit_id" : "c63e7c23f5f11371532f67a3126f5b1dd73fb901",
      "original_line" : 66,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "test/functional/mining_getblocktemplate_longpoll.py",
      "position" : null,
      "pull_request_review_id" : 510252326,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-16T13:41:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506163150",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506414234"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506414234"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hm, I had a few test runs that finished in ~6 seconds (i.e. introduction of a new transaction would terminate the longpoll immediately, not only in +1minute), but can't reproduce it anymore. Changed the message back to original.",
      "commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "created_at" : "2020-10-16T13:23:44Z",
      "diff_hunk" : "@@ -29,45 +31,48 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n-        self.nodes[0].generate(10)\n+        self.log.info(\"Warning: this test will take about 70 seconds in the worst case. Be patient.\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506414234",
      "id" : 506414234,
      "in_reply_to_id" : 506159902,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxNDIzNA==",
      "original_commit_id" : "c63e7c23f5f11371532f67a3126f5b1dd73fb901",
      "original_line" : 35,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "test/functional/mining_getblocktemplate_longpoll.py",
      "position" : null,
      "pull_request_review_id" : 510465258,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-16T13:41:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506414234",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506414296"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506414296"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nice catch, thanks. Added a commit that removes the helpers `random_transaction` as well as `make_change` and `gather_inputs`. The latter two were only used by `random_transaction`.",
      "commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "created_at" : "2020-10-16T13:23:47Z",
      "diff_hunk" : "@@ -29,45 +31,48 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n-        self.nodes[0].generate(10)\n+        self.log.info(\"Warning: this test will take about 70 seconds in the worst case. Be patient.\")\n+        miniwallets = [ MiniWallet(node) for node in self.nodes ]\n+        miniwallets[0].generate(10)\n         template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         longpollid = template['longpollid']\n         # longpollid should not change between successive invocations if nothing else happens\n         template2 = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         assert template2['longpollid'] == longpollid\n \n-        # Test 1: test that the longpolling wait if we do nothing\n+        self.log.info(\"Test that longpoll waits if we do nothing\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # check that thread still lives\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert thr.is_alive()\n \n-        # Test 2: test that longpoll will terminate if another node generates a block\n-        self.nodes[1].generate(1)  # generate a block on another node\n+        self.log.info(\"Test that longpoll will terminate if another node generates a block\")\n+        miniwallets[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 3: test that longpoll will terminate if we generate a block ourselves\n+        self.log.info(\"Test that longpoll will terminate if we generate a block ourselves\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n-        self.nodes[0].generate(1)  # generate a block on another node\n+        miniwallets[0].generate(1)  # generate a block on own node\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n+        # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n+        self.nodes[0].generate(100)\n+        self.nodes[1].generate(100)\n+\n+        self.log.info(\"Test that introducing a new transaction into the mempool will terminate the longpoll\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # generate a random transaction and submit it\n         min_relay_fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        # min_relay_fee is fee per 1000 bytes, which should be more than enough.\n-        (txid, txhex, fee) = random_transaction(self.nodes, Decimal(\"1.1\"), min_relay_fee, Decimal(\"0.001\"), 20)\n+        fee_rate = min_relay_fee + Decimal('0.00000010') * random.randint(0,20)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506414296",
      "id" : 506414296,
      "in_reply_to_id" : 506163012,
      "line" : 73,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxNDI5Ng==",
      "original_commit_id" : "c63e7c23f5f11371532f67a3126f5b1dd73fb901",
      "original_line" : 73,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "test/functional/mining_getblocktemplate_longpoll.py",
      "position" : 71,
      "pull_request_review_id" : 510465297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-16T13:41:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506414296",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506414458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506414458"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The intention was to ensure that both nodes have matured utxos, not only the one where we generate the blocks. However, only generating on one node and simply adding a `self.sync_blocks()` is the better solution. Fixed.",
      "commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "created_at" : "2020-10-16T13:23:53Z",
      "diff_hunk" : "@@ -29,45 +31,48 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n-        self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n-        self.nodes[0].generate(10)\n+        self.log.info(\"Warning: this test will take about 70 seconds in the worst case. Be patient.\")\n+        miniwallets = [ MiniWallet(node) for node in self.nodes ]\n+        miniwallets[0].generate(10)\n         template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         longpollid = template['longpollid']\n         # longpollid should not change between successive invocations if nothing else happens\n         template2 = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         assert template2['longpollid'] == longpollid\n \n-        # Test 1: test that the longpolling wait if we do nothing\n+        self.log.info(\"Test that longpoll waits if we do nothing\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # check that thread still lives\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert thr.is_alive()\n \n-        # Test 2: test that longpoll will terminate if another node generates a block\n-        self.nodes[1].generate(1)  # generate a block on another node\n+        self.log.info(\"Test that longpoll will terminate if another node generates a block\")\n+        miniwallets[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 3: test that longpoll will terminate if we generate a block ourselves\n+        self.log.info(\"Test that longpoll will terminate if we generate a block ourselves\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n-        self.nodes[0].generate(1)  # generate a block on another node\n+        miniwallets[0].generate(1)  # generate a block on own node\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n+        # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n+        self.nodes[0].generate(100)\n+        self.nodes[1].generate(100)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506414458",
      "id" : 506414458,
      "in_reply_to_id" : 506163150,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxNDQ1OA==",
      "original_commit_id" : "c63e7c23f5f11371532f67a3126f5b1dd73fb901",
      "original_line" : 66,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "test/functional/mining_getblocktemplate_longpoll.py",
      "position" : null,
      "pull_request_review_id" : 510465379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-16T13:41:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506414458",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated PR description and force-pushed with the feedback from MarcoFalke taken into account.",
      "created_at" : "2020-10-16T13:30:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#issuecomment-710047869",
      "id" : 710047869,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20159",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMDA0Nzg2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-16T13:30:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/710047869",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506519720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506519720"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why does the fee need to be random?\r\n\r\nedit: I guess doesn't matter. The `random` import is needed either way",
      "commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "created_at" : "2020-10-16T15:01:50Z",
      "diff_hunk" : "@@ -29,45 +31,48 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n+        self.log.info(\"Test that longpollid doesn't change between successive getblocktemplate() invocations if nothing else happens\")\n         self.nodes[0].generate(10)\n         template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         longpollid = template['longpollid']\n-        # longpollid should not change between successive invocations if nothing else happens\n         template2 = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         assert template2['longpollid'] == longpollid\n \n-        # Test 1: test that the longpolling wait if we do nothing\n+        self.log.info(\"Test that longpoll waits if we do nothing\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # check that thread still lives\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert thr.is_alive()\n \n-        # Test 2: test that longpoll will terminate if another node generates a block\n-        self.nodes[1].generate(1)  # generate a block on another node\n+        miniwallets = [ MiniWallet(node) for node in self.nodes ]\n+        self.log.info(\"Test that longpoll will terminate if another node generates a block\")\n+        miniwallets[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 3: test that longpoll will terminate if we generate a block ourselves\n+        self.log.info(\"Test that longpoll will terminate if we generate a block ourselves\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n-        self.nodes[0].generate(1)  # generate a block on another node\n+        miniwallets[0].generate(1)  # generate a block on own node\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n+        # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n+        self.nodes[0].generate(100)\n+        self.sync_blocks()\n+\n+        self.log.info(\"Test that introducing a new transaction into the mempool will terminate the longpoll\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # generate a random transaction and submit it\n         min_relay_fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        # min_relay_fee is fee per 1000 bytes, which should be more than enough.\n-        (txid, txhex, fee) = random_transaction(self.nodes, Decimal(\"1.1\"), min_relay_fee, Decimal(\"0.001\"), 20)\n+        fee_rate = min_relay_fee + Decimal('0.00000010') * random.randint(0,20)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506519720",
      "id" : 506519720,
      "line" : 73,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUxOTcyMA==",
      "original_commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "original_line" : 73,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "test/functional/mining_getblocktemplate_longpoll.py",
      "position" : 71,
      "pull_request_review_id" : 510555167,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-16T15:03:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506519720",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK b128b566725a5037fdaea99940d1b9de5553d198",
      "created_at" : "2020-10-16T15:04:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#issuecomment-710101873",
      "id" : 710101873,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20159",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMDEwMTg3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-16T15:04:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/710101873",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506831201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506831201"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "My idea was to keep the test as close as possible to the original and only tackle the parts involving the wallet. Agree though that a fixed fee would work as well.",
      "commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "created_at" : "2020-10-17T06:34:32Z",
      "diff_hunk" : "@@ -29,45 +31,48 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n+        self.log.info(\"Test that longpollid doesn't change between successive getblocktemplate() invocations if nothing else happens\")\n         self.nodes[0].generate(10)\n         template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         longpollid = template['longpollid']\n-        # longpollid should not change between successive invocations if nothing else happens\n         template2 = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n         assert template2['longpollid'] == longpollid\n \n-        # Test 1: test that the longpolling wait if we do nothing\n+        self.log.info(\"Test that longpoll waits if we do nothing\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # check that thread still lives\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert thr.is_alive()\n \n-        # Test 2: test that longpoll will terminate if another node generates a block\n-        self.nodes[1].generate(1)  # generate a block on another node\n+        miniwallets = [ MiniWallet(node) for node in self.nodes ]\n+        self.log.info(\"Test that longpoll will terminate if another node generates a block\")\n+        miniwallets[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 3: test that longpoll will terminate if we generate a block ourselves\n+        self.log.info(\"Test that longpoll will terminate if we generate a block ourselves\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n-        self.nodes[0].generate(1)  # generate a block on another node\n+        miniwallets[0].generate(1)  # generate a block on own node\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert not thr.is_alive()\n \n-        # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n+        # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n+        self.nodes[0].generate(100)\n+        self.sync_blocks()\n+\n+        self.log.info(\"Test that introducing a new transaction into the mempool will terminate the longpoll\")\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # generate a random transaction and submit it\n         min_relay_fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        # min_relay_fee is fee per 1000 bytes, which should be more than enough.\n-        (txid, txhex, fee) = random_transaction(self.nodes, Decimal(\"1.1\"), min_relay_fee, Decimal(\"0.001\"), 20)\n+        fee_rate = min_relay_fee + Decimal('0.00000010') * random.randint(0,20)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20159#discussion_r506831201",
      "id" : 506831201,
      "in_reply_to_id" : 506519720,
      "line" : 73,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjgzMTIwMQ==",
      "original_commit_id" : "b128b566725a5037fdaea99940d1b9de5553d198",
      "original_line" : 73,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "test/functional/mining_getblocktemplate_longpoll.py",
      "position" : 71,
      "pull_request_review_id" : 510955514,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20159",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-10-17T06:34:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506831201",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   }
]
