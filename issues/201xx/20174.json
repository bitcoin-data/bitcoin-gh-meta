{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "As MarcoFalke noted in #19995 (\"Mitigate disk filling attacks by temporarily rate limiting LogPrintf(â¦)\"):\r\n\r\n> I'd prefer if unconditional logs were only used for the init/shutdown sequence and local system errors, such as data corruption. Anything else the average user probably doesn't care about, and if they did, they could enable the corresponding debug category and provide enough disk space for the debug log file.\r\n\r\nAnd in https://github.com/bitcoin/bitcoin/pull/19832#issuecomment-683849565:\r\n\r\n> Generally, it should be possible to run Bitcoin Core with well-defined resource usage in an unsupervised setting. Ideally, the resource usage depends on command line settings and user behaviour, not on remote peer (mis)behaviour. And with \"unsupervised\" I mean that the users doesn't check the debug log unless there is a local software malfunction or other issue that needs manual debugging.\r\n\r\nI agree that we use too much unconditional logging.\r\n\r\nIt is bad for two reasons:\r\n* From a security perspective unnecessary unconditional logging risks open up for disk fill attacks.\r\n* From a usability perspective unnecessary unconditional logging risks burying important log messages (anomalies) in logs about mundane expected stuff (non-anomalies).\r\n\r\nI suggest gradually making non-critical unconditional logging conditional (opt-in via `-debug`) to reduce risk of disk fill attacks and to improve user experience.\r\n\r\nMore concretely that would mean changing from `LogPrintf(\"â¦\\n\");` to `LogPrint(DEBUG_CATEGORY, \"â¦\\n\");`.\r\n\r\nSome candidates for changing from unconditional to conditional debug logging:\r\n\r\n```\r\nsrc/flatfile.cpp:   LogPrintf(\"Pre-allocating up to position 0x%x in %s%05u.dat\\n\", new_size, m_prefix, pos.nFile);\r\nsrc/net.cpp:        LogPrintf(\"socket send error %s\\n\", NetworkErrorString(nErr));\r\nsrc/net.cpp:        LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\r\nsrc/net.cpp:        LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\r\nsrc/net.cpp:        LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * count_microseconds(GetTime<std::chrono::microseconds>() - pnode->m_ping_start.load()));\r\nsrc/validation.cpp: LogPrintf(\"Leaving block file %i: %s\\n\", nLastBlockFile, vinfoBlockFile[nLastBlockFile].ToString());\r\n```\r\n\r\nThese are (AFAICT) either a.) peer triggerable (_edit: in low volume at least_) or b.) uninteresting from a user perspective :)\r\n\r\nGetting rid of the cases above as a start would significantly reduce the amount of log spam when in steady state (non-IBD).",
   "closed_at" : "2021-07-07T22:02:05Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   },
   "comments" : 5,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20174/comments",
   "created_at" : "2020-10-17T11:00:19Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20174/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/20174",
   "id" : 723731735,
   "labels" : [
      {
         "color" : "5319e7",
         "default" : false,
         "description" : "",
         "id" : 241832923,
         "name" : "Utils/log/libs",
         "node_id" : "MDU6TGFiZWwyNDE4MzI5MjM=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20174/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU3MjM3MzE3MzU=",
   "number" : 20174,
   "performed_via_github_app" : null,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Make non-critical unconditional logging conditional to reduce risk of disk fill attacks and to improve user experience",
   "updated_at" : "2021-07-07T22:02:05Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20174",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
