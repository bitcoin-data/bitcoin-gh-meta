[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14519](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14519.html) (tests: add utility to easily profile node performance with perf by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-10-20T09:49:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-431566168",
      "id" : 431566168,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMTU2NjE2OA==",
      "updated_at" : "2018-11-02T14:53:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431566168",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227041595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227041595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use `for _ in range(200):` instead to show that the variable is intentionally unused :-)",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-22T16:19:24Z",
      "diff_hunk" : "@@ -0,0 +1,169 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node responses to invalid network messages.\"\"\"\n+import struct\n+\n+from test_framework import messages\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class msg_unrecognized:\n+    \"\"\"Nonsensical message. Modeled after similar types in test_framework.messages.\"\"\"\n+\n+    command = b'badmsg'\n+\n+    def __init__(self, str_data):\n+        self.str_data = str_data.encode() if not isinstance(str_data, bytes) else str_data\n+\n+    def serialize(self):\n+        return messages.ser_string(self.str_data)\n+\n+    def __repr__(self):\n+        return \"{}(data={})\".format(self.command, self.str_data)\n+\n+\n+class msg_nametoolong(msg_unrecognized):\n+    \"\"\"Nonsensical message. Modeled after similar types in test_framework.messages.\"\"\"\n+\n+    command = b'thisnameiswayyyyyyyyytoolong'\n+\n+\n+class InvalidMessagesTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        \"\"\"\n+        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n+           that it isn't an effective DoS against the node.\n+\n+        1. Send an oversized (4MB+) message and check that we're disconnected.\n+\n+        2. Send a few messages with an incorrect data size in the header, ensure the\n+           messages are ignored.\n+\n+        3. Send an unrecognized message with a command name longer than 12 characters.\n+\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.node = node\n+        node.add_p2p_connection(P2PDataStore())\n+        conn2 = node.add_p2p_connection(P2PDataStore())\n+\n+        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n+        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n+\n+        #\n+        # 0.\n+        #\n+        # Send as large a message as is valid, ensure we aren't disconnected but\n+        # also can't exhaust resources.\n+        #\n+        msg_at_size = msg_unrecognized(\"b\" * valid_data_limit)\n+        assert len(msg_at_size.serialize()) == msg_limit\n+\n+        with node.assert_memory_usage_stable(perc_increase_allowed=0.03):\n+            self.log.info(\n+                \"Sending a bunch of large, junk messages to test \"\n+                \"memory exhaustion. May take a bit...\")\n+\n+            # Run a bunch of times to test for memory exhaustion.\n+            for i in range(200):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227041595",
      "id" : 227041595,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzA0MTU5NQ==",
      "original_commit_id" : "435445ff01e032ff1a8e33f38206e99f196e2f63",
      "original_position" : 76,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : null,
      "pull_request_review_id" : 166993623,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227041595",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227042048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227042048"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Try to find a less general exception to catch :-)",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-22T16:20:44Z",
      "diff_hunk" : "@@ -115,6 +115,22 @@ def get_deterministic_priv_key(self):\n         ]\n         return PRIV_KEYS[self.index]\n \n+    def get_mem_rss(self):\n+        \"\"\"Get the memory usage (RSS) per `ps`.\n+\n+        If process is stopped or `ps` is unavailable, return None.\n+        \"\"\"\n+        if not (self.running and self.process):\n+            self.log.warning(\"Couldn't get memory usage; process isn't running.\")\n+            return None\n+\n+        try:\n+            return int(subprocess.check_output(\n+                \"ps h -o rss {}\".format(self.process.pid), shell=True).strip())\n+        except Exception:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227042048",
      "id" : 227042048,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzA0MjA0OA==",
      "original_commit_id" : "435445ff01e032ff1a8e33f38206e99f196e2f63",
      "original_position" : 16,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 22,
      "pull_request_review_id" : 166994191,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227042048",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227233907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227233907"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think you are looking for `subprocess.CalledProcessError` :)",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-23T05:55:30Z",
      "diff_hunk" : "@@ -115,6 +115,22 @@ def get_deterministic_priv_key(self):\n         ]\n         return PRIV_KEYS[self.index]\n \n+    def get_mem_rss(self):\n+        \"\"\"Get the memory usage (RSS) per `ps`.\n+\n+        If process is stopped or `ps` is unavailable, return None.\n+        \"\"\"\n+        if not (self.running and self.process):\n+            self.log.warning(\"Couldn't get memory usage; process isn't running.\")\n+            return None\n+\n+        try:\n+            return int(subprocess.check_output(\n+                \"ps h -o rss {}\".format(self.process.pid), shell=True).strip())\n+        except Exception:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227233907",
      "id" : 227233907,
      "in_reply_to_id" : 227042048,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzIzMzkwNw==",
      "original_commit_id" : "435445ff01e032ff1a8e33f38206e99f196e2f63",
      "original_position" : 16,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 22,
      "pull_request_review_id" : 167225519,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227233907",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "node_id" : "MDQ6VXNlcjE0MjIwNjUy",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227238734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227238734"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If this is expected to happen sometimes, (I would assume because `ps` isn't supported), might want to leave a comment as to why this check is being skipped rather than throwing an exception. ",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-23T06:19:32Z",
      "diff_hunk" : "@@ -267,6 +283,29 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n+        \"\"\"Context manager that allows the user to assert that a node's memory usage (RSS)\n+        hasn't increased beyond some threshold percentage.\n+        \"\"\"\n+        before_memory_usage = self.get_mem_rss()\n+\n+        yield\n+\n+        after_memory_usage = self.get_mem_rss()\n+\n+        if not (before_memory_usage and after_memory_usage):\n+            self.log.warning(\"Unable to detect memory usage (RSS) - skipping memory check.\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227238734",
      "id" : 227238734,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzIzODczNA==",
      "original_commit_id" : "435445ff01e032ff1a8e33f38206e99f196e2f63",
      "original_position" : 39,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 45,
      "pull_request_review_id" : 167231575,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227238734",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "node_id" : "MDQ6VXNlcjE0MjIwNjUy",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227428152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227428152"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No exception thrown here - just a warning log statement and early return.",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-23T14:48:20Z",
      "diff_hunk" : "@@ -267,6 +283,29 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n+        \"\"\"Context manager that allows the user to assert that a node's memory usage (RSS)\n+        hasn't increased beyond some threshold percentage.\n+        \"\"\"\n+        before_memory_usage = self.get_mem_rss()\n+\n+        yield\n+\n+        after_memory_usage = self.get_mem_rss()\n+\n+        if not (before_memory_usage and after_memory_usage):\n+            self.log.warning(\"Unable to detect memory usage (RSS) - skipping memory check.\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227428152",
      "id" : 227428152,
      "in_reply_to_id" : 227238734,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzQyODE1Mg==",
      "original_commit_id" : "435445ff01e032ff1a8e33f38206e99f196e2f63",
      "original_position" : 39,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 45,
      "pull_request_review_id" : 167465267,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227428152",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed @practicalswift nits.",
      "created_at" : "2018-10-23T15:00:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-432283648",
      "id" : 432283648,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjI4MzY0OA==",
      "updated_at" : "2018-10-23T15:00:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432283648",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227434400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227434400"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sorry - I didn't phrase that right. I meant, it may make sense to leave a comment as to why its okay to skip the check, and not just throw an exception (as some might expect to happen). ",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-23T15:01:39Z",
      "diff_hunk" : "@@ -267,6 +283,29 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n+        \"\"\"Context manager that allows the user to assert that a node's memory usage (RSS)\n+        hasn't increased beyond some threshold percentage.\n+        \"\"\"\n+        before_memory_usage = self.get_mem_rss()\n+\n+        yield\n+\n+        after_memory_usage = self.get_mem_rss()\n+\n+        if not (before_memory_usage and after_memory_usage):\n+            self.log.warning(\"Unable to detect memory usage (RSS) - skipping memory check.\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227434400",
      "id" : 227434400,
      "in_reply_to_id" : 227238734,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzQzNDQwMA==",
      "original_commit_id" : "435445ff01e032ff1a8e33f38206e99f196e2f63",
      "original_position" : 39,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 45,
      "pull_request_review_id" : 167473223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227434400",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "node_id" : "MDQ6VXNlcjE0MjIwNjUy",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227441204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227441204"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Actually with the log from the CalledProcessError its fine, so please disregard :)",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-23T15:16:51Z",
      "diff_hunk" : "@@ -267,6 +283,29 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n+        \"\"\"Context manager that allows the user to assert that a node's memory usage (RSS)\n+        hasn't increased beyond some threshold percentage.\n+        \"\"\"\n+        before_memory_usage = self.get_mem_rss()\n+\n+        yield\n+\n+        after_memory_usage = self.get_mem_rss()\n+\n+        if not (before_memory_usage and after_memory_usage):\n+            self.log.warning(\"Unable to detect memory usage (RSS) - skipping memory check.\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r227441204",
      "id" : 227441204,
      "in_reply_to_id" : 227238734,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzQ0MTIwNA==",
      "original_commit_id" : "435445ff01e032ff1a8e33f38206e99f196e2f63",
      "original_position" : 39,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 45,
      "pull_request_review_id" : 167481785,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227441204",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "node_id" : "MDQ6VXNlcjE0MjIwNjUy",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK dfbb8624c3747f4e9e76c9b9a051e973857a15c3",
      "created_at" : "2018-10-23T15:17:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-432290623",
      "id" : 432290623,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjI5MDYyMw==",
      "updated_at" : "2018-10-23T15:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432290623",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "node_id" : "MDQ6VXNlcjE0MjIwNjUy",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Pushed a small change to ensure `get_mem_rss()` failure is handled gracefully on Windows.",
      "created_at" : "2018-10-24T20:02:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-432807765",
      "id" : 432807765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjgwNzc2NQ==",
      "updated_at" : "2018-10-24T20:02:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432807765",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r228041463"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228041463"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since you are displaying as a % instead of decimal, I think you just need to multiply by 100\r\n```\r\n.format(perc_increase_allowed*100, \r\n        before_memory_usage, \r\n        after_memory_usage, \r\n        perc_increase_memory_usage*100)\r\n```\r\n\r\nNow it'll show something like\r\n`Memory usage increased over threshold of 3.0%....`",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-25T05:51:53Z",
      "diff_hunk" : "@@ -267,6 +283,29 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n+        \"\"\"Context manager that allows the user to assert that a node's memory usage (RSS)\n+        hasn't increased beyond some threshold percentage.\n+        \"\"\"\n+        before_memory_usage = self.get_mem_rss()\n+\n+        yield\n+\n+        after_memory_usage = self.get_mem_rss()\n+\n+        if not (before_memory_usage and after_memory_usage):\n+            self.log.warning(\"Unable to detect memory usage (RSS) - skipping memory check.\")\n+            return\n+\n+        perc_increase_memory_usage = 1 - (float(before_memory_usage) / after_memory_usage)\n+\n+        if perc_increase_memory_usage > perc_increase_allowed:\n+            self._raise_assertion_error(\n+                \"Memory usage increased over threshold of {}% from {} to {} ({}%)\".format(\n+                    perc_increase_allowed, before_memory_usage, after_memory_usage,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r228041463",
      "id" : 228041463,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODA0MTQ2Mw==",
      "original_commit_id" : "56ecb6346e31e7fbfd80d20ed8a7421f8a3d6fac",
      "original_position" : 47,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 168216939,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228041463",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "node_id" : "MDQ6VXNlcjE0MjIwNjUy",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r229807159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229807159"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree that dragging in python's pstools library is *probably* overkill for this however this needs testing on at least:\r\n- OpenBSD \r\n- FreeBSD\r\n- MacOSX\r\n\r\nAlso possiblity would be to skip it on 'unknown' platforms.",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-31T18:01:33Z",
      "diff_hunk" : "@@ -115,6 +115,22 @@ def get_deterministic_priv_key(self):\n         ]\n         return PRIV_KEYS[self.index]\n \n+    def get_mem_rss(self):\n+        \"\"\"Get the memory usage (RSS) per `ps`.\n+\n+        If process is stopped or `ps` is unavailable, return None.\n+        \"\"\"\n+        if not (self.running and self.process):\n+            self.log.warning(\"Couldn't get memory usage; process isn't running.\")\n+            return None\n+\n+        try:\n+            return int(subprocess.check_output(\n+                \"ps h -o rss {}\".format(self.process.pid), shell=True).strip())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r229807159",
      "id" : 229807159,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTgwNzE1OQ==",
      "original_commit_id" : "56ecb6346e31e7fbfd80d20ed8a7421f8a3d6fac",
      "original_position" : 15,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 170395650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229807159",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "looks good to me, thanks for adding testing for this particular corner\r\n",
      "created_at" : "2018-10-31T18:05:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-434790334",
      "id" : 434790334,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNDc5MDMzNA==",
      "updated_at" : "2018-10-31T18:05:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434790334",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r229855652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229855652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please add it to the test runner?",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-10-31T20:28:27Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python3",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r229855652",
      "id" : 229855652,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTg1NTY1Mg==",
      "original_commit_id" : "56ecb6346e31e7fbfd80d20ed8a7421f8a3d6fac",
      "original_position" : 1,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : 1,
      "pull_request_review_id" : 170457321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229855652",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "checked: fails on FreeBSD:\r\n```\r\nuser@vm13:~/bitcoin % test/functional/p2p_invalid_messages.py\r\n2018-10-31T20:28:53.767000Z TestFramework (INFO): Initializing test directory /tmp/testw9nvke44\r\n2018-10-31T20:28:54.336000Z TestFramework (ERROR): Unexpected exception caught during testing\r\nTraceback (most recent call last):\r\n  File \"/usr/home/user/bitcoin/test/functional/test_framework/test_framework.py\", line 172, in main\r\n    self.run_test()\r\n  File \"test/functional/p2p_invalid_messages.py\", line 69, in run_test\r\n    with node.assert_memory_usage_stable(perc_increase_allowed=0.03):\r\n  File \"/usr/local/lib/python3.6/contextlib.py\", line 81, in __enter__\r\n    return next(self.gen)\r\n  File \"/usr/home/user/bitcoin/test/functional/test_framework/test_node.py\", line 291, in assert_memory_usage_stable\r\n    before_memory_usage = self.get_mem_rss()\r\n  File \"/usr/home/user/bitcoin/test/functional/test_framework/test_node.py\", line 129, in get_mem_rss\r\n    \"ps h -o rss {}\".format(self.process.pid), shell=True).strip())\r\nValueError: invalid literal for int() with base 10: b'RSS\\n49084'\r\n2018-10-31T20:28:54.405000Z TestFramework (INFO): Stopping nodes\r\n2018-10-31T20:28:54.676000Z TestFramework (WARNING): Not cleaning up dir /tmp/testw9nvke44\r\n2018-10-31T20:28:54.676000Z TestFramework (ERROR): Test failed. Test logging available at /tmp/testw9nvke44/test_framework.log\r\n2018-10-31T20:28:54.677000Z TestFramework (ERROR): Hint: Call /usr/home/user/bitcoin/test/functional/combine_logs.py '/tmp/testw9nvke44' to consolidate all logs\r\n```",
      "created_at" : "2018-10-31T20:29:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-434836495",
      "id" : 434836495,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNDgzNjQ5NQ==",
      "updated_at" : "2018-10-31T20:29:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434836495",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r230081702"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230081702"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Instead of implementing something more sophisticated in this PR, I'm just going to skip it on platforms where `ps` doesn't work as this expects. If someone wants to drag in `psutils` in a later PR or implemented additional parsing logic, that sounds fine to me.",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-01T15:23:37Z",
      "diff_hunk" : "@@ -115,6 +115,22 @@ def get_deterministic_priv_key(self):\n         ]\n         return PRIV_KEYS[self.index]\n \n+    def get_mem_rss(self):\n+        \"\"\"Get the memory usage (RSS) per `ps`.\n+\n+        If process is stopped or `ps` is unavailable, return None.\n+        \"\"\"\n+        if not (self.running and self.process):\n+            self.log.warning(\"Couldn't get memory usage; process isn't running.\")\n+            return None\n+\n+        try:\n+            return int(subprocess.check_output(\n+                \"ps h -o rss {}\".format(self.process.pid), shell=True).strip())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r230081702",
      "id" : 230081702,
      "in_reply_to_id" : 229807159,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDA4MTcwMg==",
      "original_commit_id" : "56ecb6346e31e7fbfd80d20ed8a7421f8a3d6fac",
      "original_position" : 15,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 170735746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-01T18:52:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/230081702",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed feedback from @laanwj and @conscott; thanks for the looks.",
      "created_at" : "2018-11-01T15:24:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-435076736",
      "id" : 435076736,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNTA3NjczNg==",
      "updated_at" : "2018-11-01T15:24:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/435076736",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested Re-ACK d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-06T08:12:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-436165994",
      "id" : 436165994,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNjE2NTk5NA==",
      "updated_at" : "2018-11-06T08:12:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436165994",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "node_id" : "MDQ6VXNlcjE0MjIwNjUy",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-06T10:15:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-436201162",
      "id" : 436201162,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNjIwMTE2Mg==",
      "updated_at" : "2018-11-06T10:15:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436201162",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231323467"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231323467"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You are taking `after_memory_usage` as reference, so a increase of n% in the memory usage will result always in  `perc_increase_memory_usage` < n%.\r\n\r\nFor example you double the memory usage from 1GB to 2GB, this will give you 50%:\r\n\r\n```py\r\n>>> 1 - (1 / 2)\r\n0.5\r\n```\r\n\r\nAlso you don't need the float conversion with `/`",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-06T22:49:02Z",
      "diff_hunk" : "@@ -267,6 +289,29 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n+        \"\"\"Context manager that allows the user to assert that a node's memory usage (RSS)\n+        hasn't increased beyond some threshold percentage.\n+        \"\"\"\n+        before_memory_usage = self.get_mem_rss()\n+\n+        yield\n+\n+        after_memory_usage = self.get_mem_rss()\n+\n+        if not (before_memory_usage and after_memory_usage):\n+            self.log.warning(\"Unable to detect memory usage (RSS) - skipping memory check.\")\n+            return\n+\n+        perc_increase_memory_usage = 1 - (float(before_memory_usage) / after_memory_usage)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231323467",
      "id" : 231323467,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTMyMzQ2Nw==",
      "original_commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "original_position" : 48,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 48,
      "pull_request_review_id" : 172271242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-06T23:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231323467",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231324135"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231324135"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is shell required here?",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-06T22:51:29Z",
      "diff_hunk" : "@@ -115,6 +115,28 @@ def get_deterministic_priv_key(self):\n         ]\n         return PRIV_KEYS[self.index]\n \n+    def get_mem_rss(self):\n+        \"\"\"Get the memory usage (RSS) per `ps`.\n+\n+        If process is stopped or `ps` is unavailable, return None.\n+        \"\"\"\n+        if not (self.running and self.process):\n+            self.log.warning(\"Couldn't get memory usage; process isn't running.\")\n+            return None\n+\n+        try:\n+            return int(subprocess.check_output(\n+                \"ps h -o rss {}\".format(self.process.pid),\n+                shell=True, stderr=subprocess.DEVNULL).strip())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231324135",
      "id" : 231324135,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTMyNDEzNQ==",
      "original_commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "original_position" : 16,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 16,
      "pull_request_review_id" : 172271242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-06T23:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231324135",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231324371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231324371"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd prefer to explicitly catch `subprocess.SubprocessError` and `ValueError`, so that `KeyError` et al is not caught.",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-06T22:52:28Z",
      "diff_hunk" : "@@ -115,6 +115,28 @@ def get_deterministic_priv_key(self):\n         ]\n         return PRIV_KEYS[self.index]\n \n+    def get_mem_rss(self):\n+        \"\"\"Get the memory usage (RSS) per `ps`.\n+\n+        If process is stopped or `ps` is unavailable, return None.\n+        \"\"\"\n+        if not (self.running and self.process):\n+            self.log.warning(\"Couldn't get memory usage; process isn't running.\")\n+            return None\n+\n+        try:\n+            return int(subprocess.check_output(\n+                \"ps h -o rss {}\".format(self.process.pid),\n+                shell=True, stderr=subprocess.DEVNULL).strip())\n+\n+        # Catching `Exception` broadly to avoid failing on platforms where ps\n+        # isn't installed or doesn't work as expected, e.g. OpenBSD.\n+        #\n+        # We could later use something like `psutils` to work across platforms.\n+        except Exception:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231324371",
      "id" : 231324371,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTMyNDM3MQ==",
      "original_commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "original_position" : 22,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 22,
      "pull_request_review_id" : 172271242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-06T23:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231324371",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231324557"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231324557"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Couldn't this be an assert? How is this different from calling an RPC method when the node is not running?",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-06T22:53:17Z",
      "diff_hunk" : "@@ -115,6 +115,28 @@ def get_deterministic_priv_key(self):\n         ]\n         return PRIV_KEYS[self.index]\n \n+    def get_mem_rss(self):\n+        \"\"\"Get the memory usage (RSS) per `ps`.\n+\n+        If process is stopped or `ps` is unavailable, return None.\n+        \"\"\"\n+        if not (self.running and self.process):\n+            self.log.warning(\"Couldn't get memory usage; process isn't running.\")\n+            return None",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231324557",
      "id" : 231324557,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTMyNDU1Nw==",
      "original_commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "original_position" : 11,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 11,
      "pull_request_review_id" : 172271242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-06T23:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231324557",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231326521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231326521"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Could assert debug log for unknown message type?",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-06T23:01:11Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node responses to invalid network messages.\"\"\"\n+import struct\n+\n+from test_framework import messages\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class msg_unrecognized:\n+    \"\"\"Nonsensical message. Modeled after similar types in test_framework.messages.\"\"\"\n+\n+    command = b'badmsg'\n+\n+    def __init__(self, str_data):\n+        self.str_data = str_data.encode() if not isinstance(str_data, bytes) else str_data\n+\n+    def serialize(self):\n+        return messages.ser_string(self.str_data)\n+\n+    def __repr__(self):\n+        return \"{}(data={})\".format(self.command, self.str_data)\n+\n+\n+class msg_nametoolong(msg_unrecognized):\n+\n+    command = b'thisnameiswayyyyyyyyytoolong'\n+\n+\n+class InvalidMessagesTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        \"\"\"\n+        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n+           that it isn't an effective DoS against the node.\n+\n+        1. Send an oversized (4MB+) message and check that we're disconnected.\n+\n+        2. Send a few messages with an incorrect data size in the header, ensure the\n+           messages are ignored.\n+\n+        3. Send an unrecognized message with a command name longer than 12 characters.\n+\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.node = node\n+        node.add_p2p_connection(P2PDataStore())\n+        conn2 = node.add_p2p_connection(P2PDataStore())\n+\n+        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n+        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n+\n+        #\n+        # 0.\n+        #\n+        # Send as large a message as is valid, ensure we aren't disconnected but\n+        # also can't exhaust resources.\n+        #\n+        msg_at_size = msg_unrecognized(\"b\" * valid_data_limit)\n+        assert len(msg_at_size.serialize()) == msg_limit\n+\n+        with node.assert_memory_usage_stable(perc_increase_allowed=0.03):\n+            self.log.info(\n+                \"Sending a bunch of large, junk messages to test \"\n+                \"memory exhaustion. May take a bit...\")\n+\n+            # Run a bunch of times to test for memory exhaustion.\n+            for _ in range(200):\n+                node.p2p.send_message(msg_at_size)\n+\n+            # Check that, even though the node is being hammered by nonsense from one\n+            # connection, it can still service other peers in a timely way.\n+            for _ in range(20):\n+                conn2.sync_with_ping(timeout=2)\n+\n+            # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n+            self.log.info(\"Waiting for node to drop junk messages.\")\n+            node.p2p.sync_with_ping(timeout=8)\n+            assert node.p2p.is_connected\n+\n+        #\n+        # 1.\n+        #\n+        # Send an oversized message, ensure we're disconnected.\n+        #\n+        msg_over_size = msg_unrecognized(\"b\" * (valid_data_limit + 1))\n+        assert len(msg_over_size.serialize()) == (msg_limit + 1)\n+\n+        with node.assert_debug_log([\"Oversized message from peer=0, disconnecting\"]):\n+            # An unknown message type (or *any* message type) over\n+            # MAX_PROTOCOL_MESSAGE_LENGTH should result in a disconnect.\n+            node.p2p.send_message(msg_over_size)\n+            node.p2p.wait_for_disconnect(timeout=4)\n+\n+        node.disconnect_p2ps()\n+        conn = node.add_p2p_connection(P2PDataStore())\n+        conn.wait_for_verack()\n+\n+        #\n+        # 2.\n+        #\n+        # Send messages with an incorrect data size in the header.\n+        #\n+        actual_size = 100\n+        msg = msg_unrecognized(\"b\" * actual_size)\n+\n+        # TODO: handle larger-than cases. I haven't been able to pin down what behavior to expect.\n+        for wrong_size in (2, 77, 78, 79):\n+            self.log.info(\"Sending a message with incorrect size of {}\".format(wrong_size))\n+\n+            # Unmodified message should submit okay.\n+            node.p2p.send_and_ping(msg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231326521",
      "id" : 231326521,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTMyNjUyMQ==",
      "original_commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "original_position" : 119,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : 119,
      "pull_request_review_id" : 172271242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-06T23:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231326521",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231326767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231326767"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could assert debug log with the exact error?",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-06T23:02:11Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node responses to invalid network messages.\"\"\"\n+import struct\n+\n+from test_framework import messages\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class msg_unrecognized:\n+    \"\"\"Nonsensical message. Modeled after similar types in test_framework.messages.\"\"\"\n+\n+    command = b'badmsg'\n+\n+    def __init__(self, str_data):\n+        self.str_data = str_data.encode() if not isinstance(str_data, bytes) else str_data\n+\n+    def serialize(self):\n+        return messages.ser_string(self.str_data)\n+\n+    def __repr__(self):\n+        return \"{}(data={})\".format(self.command, self.str_data)\n+\n+\n+class msg_nametoolong(msg_unrecognized):\n+\n+    command = b'thisnameiswayyyyyyyyytoolong'\n+\n+\n+class InvalidMessagesTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        \"\"\"\n+        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n+           that it isn't an effective DoS against the node.\n+\n+        1. Send an oversized (4MB+) message and check that we're disconnected.\n+\n+        2. Send a few messages with an incorrect data size in the header, ensure the\n+           messages are ignored.\n+\n+        3. Send an unrecognized message with a command name longer than 12 characters.\n+\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.node = node\n+        node.add_p2p_connection(P2PDataStore())\n+        conn2 = node.add_p2p_connection(P2PDataStore())\n+\n+        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n+        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n+\n+        #\n+        # 0.\n+        #\n+        # Send as large a message as is valid, ensure we aren't disconnected but\n+        # also can't exhaust resources.\n+        #\n+        msg_at_size = msg_unrecognized(\"b\" * valid_data_limit)\n+        assert len(msg_at_size.serialize()) == msg_limit\n+\n+        with node.assert_memory_usage_stable(perc_increase_allowed=0.03):\n+            self.log.info(\n+                \"Sending a bunch of large, junk messages to test \"\n+                \"memory exhaustion. May take a bit...\")\n+\n+            # Run a bunch of times to test for memory exhaustion.\n+            for _ in range(200):\n+                node.p2p.send_message(msg_at_size)\n+\n+            # Check that, even though the node is being hammered by nonsense from one\n+            # connection, it can still service other peers in a timely way.\n+            for _ in range(20):\n+                conn2.sync_with_ping(timeout=2)\n+\n+            # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n+            self.log.info(\"Waiting for node to drop junk messages.\")\n+            node.p2p.sync_with_ping(timeout=8)\n+            assert node.p2p.is_connected\n+\n+        #\n+        # 1.\n+        #\n+        # Send an oversized message, ensure we're disconnected.\n+        #\n+        msg_over_size = msg_unrecognized(\"b\" * (valid_data_limit + 1))\n+        assert len(msg_over_size.serialize()) == (msg_limit + 1)\n+\n+        with node.assert_debug_log([\"Oversized message from peer=0, disconnecting\"]):\n+            # An unknown message type (or *any* message type) over\n+            # MAX_PROTOCOL_MESSAGE_LENGTH should result in a disconnect.\n+            node.p2p.send_message(msg_over_size)\n+            node.p2p.wait_for_disconnect(timeout=4)\n+\n+        node.disconnect_p2ps()\n+        conn = node.add_p2p_connection(P2PDataStore())\n+        conn.wait_for_verack()\n+\n+        #\n+        # 2.\n+        #\n+        # Send messages with an incorrect data size in the header.\n+        #\n+        actual_size = 100\n+        msg = msg_unrecognized(\"b\" * actual_size)\n+\n+        # TODO: handle larger-than cases. I haven't been able to pin down what behavior to expect.\n+        for wrong_size in (2, 77, 78, 79):\n+            self.log.info(\"Sending a message with incorrect size of {}\".format(wrong_size))\n+\n+            # Unmodified message should submit okay.\n+            node.p2p.send_and_ping(msg)\n+\n+            # A message lying about its data size results in a disconnect when the incorrect\n+            # data size is less than the actual size.\n+            #\n+            # TODO: why does behavior change at 78 bytes?\n+            #\n+            node.p2p.send_raw_message(self._tweak_msg_data_size(msg, wrong_size))\n+\n+            # For some reason unknown to me, we sometimes have to push additional data to the\n+            # peer in order for it to realize a disconnect.\n+            try:\n+                node.p2p.send_message(messages.msg_ping(nonce=123123))\n+            except IOError:\n+                pass\n+\n+            node.p2p.wait_for_disconnect(timeout=10)\n+            node.disconnect_p2ps()\n+            node.add_p2p_connection(P2PDataStore())\n+\n+        #\n+        # 3.\n+        #\n+        # Send a message with a too-long command name.\n+        #\n+        node.p2p.send_message(msg_nametoolong(\"foobar\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231326767",
      "id" : 231326767,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTMyNjc2Nw==",
      "original_commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "original_position" : 144,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : 144,
      "pull_request_review_id" : 172271242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-06T23:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231326767",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231326878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231326878"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could assert debug log?",
      "commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "created_at" : "2018-11-06T23:02:38Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node responses to invalid network messages.\"\"\"\n+import struct\n+\n+from test_framework import messages\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class msg_unrecognized:\n+    \"\"\"Nonsensical message. Modeled after similar types in test_framework.messages.\"\"\"\n+\n+    command = b'badmsg'\n+\n+    def __init__(self, str_data):\n+        self.str_data = str_data.encode() if not isinstance(str_data, bytes) else str_data\n+\n+    def serialize(self):\n+        return messages.ser_string(self.str_data)\n+\n+    def __repr__(self):\n+        return \"{}(data={})\".format(self.command, self.str_data)\n+\n+\n+class msg_nametoolong(msg_unrecognized):\n+\n+    command = b'thisnameiswayyyyyyyyytoolong'\n+\n+\n+class InvalidMessagesTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        \"\"\"\n+        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n+           that it isn't an effective DoS against the node.\n+\n+        1. Send an oversized (4MB+) message and check that we're disconnected.\n+\n+        2. Send a few messages with an incorrect data size in the header, ensure the\n+           messages are ignored.\n+\n+        3. Send an unrecognized message with a command name longer than 12 characters.\n+\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.node = node\n+        node.add_p2p_connection(P2PDataStore())\n+        conn2 = node.add_p2p_connection(P2PDataStore())\n+\n+        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n+        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n+\n+        #\n+        # 0.\n+        #\n+        # Send as large a message as is valid, ensure we aren't disconnected but\n+        # also can't exhaust resources.\n+        #\n+        msg_at_size = msg_unrecognized(\"b\" * valid_data_limit)\n+        assert len(msg_at_size.serialize()) == msg_limit\n+\n+        with node.assert_memory_usage_stable(perc_increase_allowed=0.03):\n+            self.log.info(\n+                \"Sending a bunch of large, junk messages to test \"\n+                \"memory exhaustion. May take a bit...\")\n+\n+            # Run a bunch of times to test for memory exhaustion.\n+            for _ in range(200):\n+                node.p2p.send_message(msg_at_size)\n+\n+            # Check that, even though the node is being hammered by nonsense from one\n+            # connection, it can still service other peers in a timely way.\n+            for _ in range(20):\n+                conn2.sync_with_ping(timeout=2)\n+\n+            # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n+            self.log.info(\"Waiting for node to drop junk messages.\")\n+            node.p2p.sync_with_ping(timeout=8)\n+            assert node.p2p.is_connected\n+\n+        #\n+        # 1.\n+        #\n+        # Send an oversized message, ensure we're disconnected.\n+        #\n+        msg_over_size = msg_unrecognized(\"b\" * (valid_data_limit + 1))\n+        assert len(msg_over_size.serialize()) == (msg_limit + 1)\n+\n+        with node.assert_debug_log([\"Oversized message from peer=0, disconnecting\"]):\n+            # An unknown message type (or *any* message type) over\n+            # MAX_PROTOCOL_MESSAGE_LENGTH should result in a disconnect.\n+            node.p2p.send_message(msg_over_size)\n+            node.p2p.wait_for_disconnect(timeout=4)\n+\n+        node.disconnect_p2ps()\n+        conn = node.add_p2p_connection(P2PDataStore())\n+        conn.wait_for_verack()\n+\n+        #\n+        # 2.\n+        #\n+        # Send messages with an incorrect data size in the header.\n+        #\n+        actual_size = 100\n+        msg = msg_unrecognized(\"b\" * actual_size)\n+\n+        # TODO: handle larger-than cases. I haven't been able to pin down what behavior to expect.\n+        for wrong_size in (2, 77, 78, 79):\n+            self.log.info(\"Sending a message with incorrect size of {}\".format(wrong_size))\n+\n+            # Unmodified message should submit okay.\n+            node.p2p.send_and_ping(msg)\n+\n+            # A message lying about its data size results in a disconnect when the incorrect\n+            # data size is less than the actual size.\n+            #\n+            # TODO: why does behavior change at 78 bytes?\n+            #\n+            node.p2p.send_raw_message(self._tweak_msg_data_size(msg, wrong_size))\n+\n+            # For some reason unknown to me, we sometimes have to push additional data to the\n+            # peer in order for it to realize a disconnect.\n+            try:\n+                node.p2p.send_message(messages.msg_ping(nonce=123123))\n+            except IOError:\n+                pass\n+\n+            node.p2p.wait_for_disconnect(timeout=10)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#discussion_r231326878",
      "id" : 231326878,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTMyNjg3OA==",
      "original_commit_id" : "d20a9fa13d1c13f552e879798c0508be70190e71",
      "original_position" : 135,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : 135,
      "pull_request_review_id" : 172271242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14522",
      "updated_at" : "2018-11-06T23:03:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231326878",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Also, the test fails on macOS (with `OSError: [Errno 41] Protocol wrong type for socket` printed to stderr):\r\n\r\n```\r\nstdout:\r\n2018-11-07T18:35:07.995000Z TestFramework (INFO): Initializing test directory /var/folders/nz/vv4_9tw56nv9k3tkvyszvwg80000gn/T/test_runner_Ã¢ÂÂ¿_Ã°ÂÂÂ_20181107_182921/p2p_invalid_messages_46\r\n2018-11-07T18:35:08.836000Z TestFramework.node0 (ERROR): Unable to get memory usage\r\nTraceback (most recent call last):\r\n  File \"/Users/travis/build/MarcoFalke/btc_nightly/bitcoin/test/functional/test_framework/test_node.py\", line 130, in get_mem_rss\r\n    shell=True, stderr=subprocess.DEVNULL).strip())\r\nValueError: invalid literal for int() with base 10: b'RSS\\n 71200'\r\n2018-11-07T18:35:08.838000Z TestFramework (INFO): Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\r\n2018-11-07T18:35:20.251000Z TestFramework (INFO): Waiting for node to drop junk messages.\r\n2018-11-07T18:35:20.330000Z TestFramework.node0 (ERROR): Unable to get memory usage\r\nTraceback (most recent call last):\r\n  File \"/Users/travis/build/MarcoFalke/btc_nightly/bitcoin/test/functional/test_framework/test_node.py\", line 130, in get_mem_rss\r\n    shell=True, stderr=subprocess.DEVNULL).strip())\r\nValueError: invalid literal for int() with base 10: b'RSS\\n 80896'\r\n2018-11-07T18:35:20.331000Z TestFramework.node0 (WARNING): Unable to detect memory usage (RSS) - skipping memory check.\r\n2018-11-07T18:35:20.393000Z TestFramework.mininode (WARNING): Connection lost to 127.0.0.1:11368 due to [Errno 41] Protocol wrong type for socket\r\n2018-11-07T18:35:20.495000Z TestFramework (INFO): Sending a message with incorrect size of 2\r\n2018-11-07T18:35:20.659000Z TestFramework (INFO): Sending a message with incorrect size of 77\r\n2018-11-07T18:35:20.836000Z TestFramework (INFO): Sending a message with incorrect size of 78\r\n2018-11-07T18:35:21.010000Z TestFramework (INFO): Sending a message with incorrect size of 79\r\n2018-11-07T18:35:21.442000Z TestFramework (INFO): Stopping nodes\r\n2018-11-07T18:35:21.803000Z TestFramework (INFO): Cleaning up /var/folders/nz/vv4_9tw56nv9k3tkvyszvwg80000gn/T/test_runner_Ã¢ÂÂ¿_Ã°ÂÂÂ_20181107_182921/p2p_invalid_messages_46 on exit\r\n2018-11-07T18:35:21.803000Z TestFramework (INFO): Tests successful\r\nstderr:\r\nFatal write error on socket transport\r\nprotocol: <test_framework.mininode.P2PDataStore object at 0x103d87e48>\r\ntransport: <_SelectorSocketTransport fd=10 read=polling write=<idle, bufsize=0>>\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.6.5_1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/selector_events.py\", line 761, in write\r\n    n = self._sock.send(data)\r\nOSError: [Errno 41] Protocol wrong type for socket\r\n```",
      "created_at" : "2018-11-07T20:49:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-436771967",
      "id" : 436771967,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNjc3MTk2Nw==",
      "updated_at" : "2018-11-07T20:49:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436771967",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm very late to this party, but my opinion is that testing memory usage is very useful, but should not be part of a functional test suite. Functional tests should test the _functionality_ of the product, ie the outputs that are triggered by passing in various inputs. Memory usage is related to the _implementation_ of the product. As the follow-on problems with this PR show, making rigid tests that depend on implementation details are brittle when run over different platforms.\r\n\r\nI think that this code could be very useful when incorporated into a soak testing framework, but that it shouldn't be included in our functional test suite.",
      "created_at" : "2019-02-21T15:32:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-466044015",
      "id" : 466044015,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjA0NDAxNQ==",
      "updated_at" : "2019-02-21T15:32:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466044015",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I think that this code could be very useful when incorporated into a soak testing framework, but that it shouldn't be included in our functional test suite.\r\n\r\nProbably worth adding some guidance around what is and isn't appropriate for the functional test suite in one of the READMEs.\r\n\r\nI'm generally inclined to agree with you, but I think having a comprehensive and easy-to-use framework for adding checks like this is very worthwhile. I'm also inclined to think that packaging such a framework within this repo is *probably* worthwhile, though there are certainly arguments against that. What do you think about introducing some kind of decorator to denote these sorts of checks on individual test methods and then introducing an `--extended`-like flag for use with the runner? ",
      "created_at" : "2019-02-21T15:53:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-466052280",
      "id" : 466052280,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjA1MjI4MA==",
      "updated_at" : "2019-02-21T15:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466052280",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Probably worth adding some guidance around what is and isn't appropriate for the functional test suite in one of the READMEs.\r\n\r\nGood idea. I'll add that to my list (or I'm happy to review yours if you want to add it)\r\n\r\n> I think having a comprehensive and easy-to-use framework for adding checks like this is very worthwhile.\r\n\r\nAlso agree. The `TestNode` class is supposed to be reusable, eg for stress or soak testing.\r\n\r\n> I'm also inclined to think that packaging such a framework within this repo is _probably_ worthwhile, though there are certainly arguments against that. What do you think about introducing some kind of decorator to denote these sorts of checks on individual test methods and then introducing an `--extended`-like flag for use with the runner?\r\n\r\nI think including it in the repo is fine, but my preference would be to separate it somehow from the functional tests, for example having a soak testing framework that imports the `TestNode()` and then adds the methods it needs. I have a concern that /test/functional will continue to expand to be a test-all-the-things tool, even where other testing techniques are more appropriate.",
      "created_at" : "2019-02-21T16:06:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-466057740",
      "id" : 466057740,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14522",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NjA1Nzc0MA==",
      "updated_at" : "2019-02-21T16:06:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/466057740",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
