[
   {
      "author_association" : "MEMBER",
      "body" : "An example of running the generated perf data file through [hotspot](https://github.com/KDAB/hotspot):\r\n\r\n![selection_109](https://user-images.githubusercontent.com/73197/47235981-b33ebd80-d3a8-11e8-96bd-30f6f91b95f4.png)\r\n",
      "created_at" : "2018-10-19T18:10:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-431450614",
      "id" : 431450614,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMTQ1MDYxNA==",
      "updated_at" : "2018-10-19T18:10:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431450614",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r226737926"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226737926"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe comment `# Frequency in Hz`",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-19T18:15:42Z",
      "diff_hunk" : "@@ -267,6 +267,70 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name=None):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Kwargs:\n+\n+            profile_name (str): If specified, this string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"some-function\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.run(\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL).returncode == 0\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(self.binary)):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+        else:\n+            suffix = \"-{}\".format(profile_name) if profile_name else \"\"\n+            output_path = os.path.join(\n+                self.datadir, \"node-{}{}.perf.data\".format(self.index, suffix))\n+\n+            cmd = [\n+                'perf', 'record',\n+                '-g',\n+                '--call-graph', 'dwarf',\n+                '-F', '101',",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r226737926",
      "id" : 226737926,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjczNzkyNg==",
      "original_commit_id" : "b93a17c3153f050eb37292b51463b0aaa5860f1a",
      "original_position" : 56,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 166639838,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226737926",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r226739869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226739869"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Escaping self.binary with [shlex.quote](https://docs.python.org/3/library/shlex.html#shlex.quote) would let it work with any filename.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-19T18:22:27Z",
      "diff_hunk" : "@@ -267,6 +267,70 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name=None):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Kwargs:\n+\n+            profile_name (str): If specified, this string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"some-function\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.run(\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL).returncode == 0\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(self.binary)):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r226739869",
      "id" : 226739869,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjczOTg2OQ==",
      "original_commit_id" : "b93a17c3153f050eb37292b51463b0aaa5860f1a",
      "original_position" : 41,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 166639838,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226739869",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review, @ryanofsky. I really like your suggestions and so I've incorporated them all into a rebase.\r\n\r\nYou can now pass `--perf` when running an individual test file and all nodes will be profiled for the duration of the test. Here's an example run:\r\n```sh\r\n$ ./test/functional/p2p_unrequested_blocks.py --perf\r\n\r\n2018-10-19T20:36:06.542000Z TestFramework (INFO): Initializing test directory /tmp/test71_cfvsc\r\n...\r\n2018-10-19T20:36:09.206000Z TestFramework (INFO): Stopping nodes\r\n2018-10-19T20:36:09.384000Z TestFramework.node0 (INFO): Wrote perf output to '/tmp/test71_cfvsc/node0/node-0-AcceptBlockTest.perf.data'\r\n2018-10-19T20:36:09.558000Z TestFramework.node1 (INFO): Wrote perf output to '/tmp/test71_cfvsc/node1/node-1-AcceptBlockTest.perf.data'\r\n2018-10-19T20:36:09.608000Z TestFramework (WARNING): Not cleaning up dir /tmp/test71_cfvsc due to perf data\r\n2018-10-19T20:36:09.608000Z TestFramework (INFO): Tests successful\r\n\r\n```",
      "created_at" : "2018-10-19T20:38:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-431491862",
      "id" : 431491862,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMTQ5MTg2Mg==",
      "updated_at" : "2018-10-19T20:38:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431491862",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, very nice!",
      "created_at" : "2018-10-20T08:28:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-431560630",
      "id" : 431560630,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMTU2MDYzMA==",
      "updated_at" : "2018-10-20T08:28:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431560630",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2018-10-20T09:50:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-431566213",
      "id" : 431566213,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMTU2NjIxMw==",
      "updated_at" : "2019-02-01T23:45:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431566213",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-10-22T16:40:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-431891181",
      "id" : 431891181,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMTg5MTE4MQ==",
      "updated_at" : "2018-10-22T16:40:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431891181",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1008458?v=4",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "node_id" : "MDQ6VXNlcjEwMDg0NTg=",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227077441"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227077441"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think I see advantage of the test_class_name plumbing. It seems like it makes resulting filenames less predictable I run a test with --perf and the resulting filenames have a python class name in the middle. It also doesn't seem like it helps with disambiguation either if every node has the same test name.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-22T18:09:20Z",
      "diff_hunk" : "@@ -59,7 +60,15 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n+    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, test_class_name=None):\n+        \"\"\"\n+        Kwargs:\n+            test_class_name (str): The name of the test class which has spawned this node.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227077441",
      "id" : 227077441,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzA3NzQ0MQ==",
      "original_commit_id" : "358e757d566d5f659901acc6f15fa9eb6eb3e741",
      "original_position" : 16,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 166981883,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227077441",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227105936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227105936"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, that's a good point. I thought we needed to do this in order to maintain compatibility with `test/functional/test_runner.py` (to avoid perf data files from getting clobbered), but I forgot that each test gets its own nested tmp directory. Will do.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-22T19:26:54Z",
      "diff_hunk" : "@@ -59,7 +60,15 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n+    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, test_class_name=None):\n+        \"\"\"\n+        Kwargs:\n+            test_class_name (str): The name of the test class which has spawned this node.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227105936",
      "id" : 227105936,
      "in_reply_to_id" : 227077441,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzEwNTkzNg==",
      "original_commit_id" : "358e757d566d5f659901acc6f15fa9eb6eb3e741",
      "original_position" : 16,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 167070215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227105936",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227240042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227240042"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Might want to add a try/except here with `CalledProcessError`",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-23T06:25:28Z",
      "diff_hunk" : "@@ -267,6 +287,93 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.run(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227240042",
      "id" : 227240042,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzI0MDA0Mg==",
      "original_commit_id" : "358e757d566d5f659901acc6f15fa9eb6eb3e741",
      "original_position" : 113,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 167233234,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227240042",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "node_id" : "MDQ6VXNlcjE0MjIwNjUy",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed feedback from @ryanofsky @conscott.",
      "created_at" : "2018-10-23T15:28:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-432295224",
      "id" : 432295224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjI5NTIyNA==",
      "updated_at" : "2018-10-23T15:28:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432295224",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227748224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227748224"
         }
      },
      "author_association" : "MEMBER",
      "body" : "profile_name is always given, so no need for the else?",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-24T11:28:19Z",
      "diff_hunk" : "@@ -267,6 +284,96 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            try:\n+                return subprocess.run(\n+                    cmd, shell=True,\n+                    stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL).returncode == 0\n+            except (FileNotFoundError, subprocess.CalledProcessError):\n+                self.log.warning(\"Unable to execute command '{}'\".format(cmd))\n+                return False\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+        else:\n+            output_path = self._get_perf_data_path(profile_name)\n+\n+            cmd = [\n+                'perf', 'record',\n+                '-g',                     # Record the callgraph.\n+                '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+                '-F', '101',              # Sampling frequency in Hz.\n+                '-p', str(self.process.pid),\n+                '-o', output_path,\n+            ]\n+            subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        subp.terminate()\n+        subp.wait()\n+        self.log.info(\"Wrote perf output to '{}'\".format(\n+            self._get_perf_data_path(profile_name)))\n+\n+    def _get_perf_data_path(self, profile_name):\n+        \"\"\"Return a suitable path for perf data given some descriptive name.\"\"\"\n+        suffix = \"-{}\".format(profile_name) if profile_name else \"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227748224",
      "id" : 227748224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzc0ODIyNA==",
      "original_commit_id" : "dd22df8506544aa3db0ea29f9b4d40c99af48298",
      "original_position" : 150,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 167857056,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227748224",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227748951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227748951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We don't support this function yet: https://docs.python.org/3.4/library/subprocess.html#subprocess.run",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-24T11:31:11Z",
      "diff_hunk" : "@@ -267,6 +284,96 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            try:\n+                return subprocess.run(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227748951",
      "id" : 227748951,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzc0ODk1MQ==",
      "original_commit_id" : "dd22df8506544aa3db0ea29f9b4d40c99af48298",
      "original_position" : 111,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 167857056,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227748951",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227750306"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227750306"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Could use `.format(...` like two lines above",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-24T11:36:02Z",
      "diff_hunk" : "@@ -200,9 +202,18 @@ def main(self):\n                 node.cleanup_on_exit = False\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n-        if not self.options.nocleanup and not self.options.noshutdown and success != TestStatus.FAILED:\n+        should_clean_up = (\n+            not self.options.nocleanup and\n+            not self.options.noshutdown and\n+            success != TestStatus.FAILED and\n+            not self.options.perf\n+        )\n+        if should_clean_up:\n             self.log.info(\"Cleaning up {} on exit\".format(self.options.tmpdir))\n             cleanup_tree_on_exit = True\n+        elif self.options.perf:\n+            self.log.warning(\"Not cleaning up dir %s due to perf data\" % self.options.tmpdir)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227750306",
      "id" : 227750306,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzc1MDMwNg==",
      "original_commit_id" : "dd22df8506544aa3db0ea29f9b4d40c99af48298",
      "original_position" : 24,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : null,
      "pull_request_review_id" : 167859601,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227750306",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227922373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227922373"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's an empty string when we specify `--perf` to the runner: https://github.com/bitcoin/bitcoin/blob/358e757d566d5f659901acc6f15fa9eb6eb3e741/test/functional/test_framework/test_node.py#L184",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-24T19:07:36Z",
      "diff_hunk" : "@@ -267,6 +284,96 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            try:\n+                return subprocess.run(\n+                    cmd, shell=True,\n+                    stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL).returncode == 0\n+            except (FileNotFoundError, subprocess.CalledProcessError):\n+                self.log.warning(\"Unable to execute command '{}'\".format(cmd))\n+                return False\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+        else:\n+            output_path = self._get_perf_data_path(profile_name)\n+\n+            cmd = [\n+                'perf', 'record',\n+                '-g',                     # Record the callgraph.\n+                '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+                '-F', '101',              # Sampling frequency in Hz.\n+                '-p', str(self.process.pid),\n+                '-o', output_path,\n+            ]\n+            subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        subp.terminate()\n+        subp.wait()\n+        self.log.info(\"Wrote perf output to '{}'\".format(\n+            self._get_perf_data_path(profile_name)))\n+\n+    def _get_perf_data_path(self, profile_name):\n+        \"\"\"Return a suitable path for perf data given some descriptive name.\"\"\"\n+        suffix = \"-{}\".format(profile_name) if profile_name else \"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227922373",
      "id" : 227922373,
      "in_reply_to_id" : 227748224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzkyMjM3Mw==",
      "original_commit_id" : "dd22df8506544aa3db0ea29f9b4d40c99af48298",
      "original_position" : 150,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 168072078,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227922373",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Pushed feedback from @MarcoFalke. ",
      "created_at" : "2018-10-24T19:12:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-432791611",
      "id" : 432791611,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjc5MTYxMQ==",
      "updated_at" : "2018-10-24T19:12:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432791611",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227924192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227924192"
         }
      },
      "author_association" : "MEMBER",
      "body" : "needs to use `{}` in the format string ;)",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-24T19:13:15Z",
      "diff_hunk" : "@@ -200,9 +202,18 @@ def main(self):\n                 node.cleanup_on_exit = False\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n-        if not self.options.nocleanup and not self.options.noshutdown and success != TestStatus.FAILED:\n+        should_clean_up = (\n+            not self.options.nocleanup and\n+            not self.options.noshutdown and\n+            success != TestStatus.FAILED and\n+            not self.options.perf\n+        )\n+        if should_clean_up:\n             self.log.info(\"Cleaning up {} on exit\".format(self.options.tmpdir))\n             cleanup_tree_on_exit = True\n+        elif self.options.perf:\n+            self.log.warning(\"Not cleaning up dir %s due to perf data\".format(self.options.tmpdir))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227924192",
      "id" : 227924192,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzkyNDE5Mg==",
      "original_commit_id" : "ac6a6b3ab5c7e37454446ec674cdce4b699633ec",
      "original_position" : 24,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : null,
      "pull_request_review_id" : 168074293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227924192",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227924560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227924560"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops! Thanks :)",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-24T19:14:17Z",
      "diff_hunk" : "@@ -200,9 +202,18 @@ def main(self):\n                 node.cleanup_on_exit = False\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n-        if not self.options.nocleanup and not self.options.noshutdown and success != TestStatus.FAILED:\n+        should_clean_up = (\n+            not self.options.nocleanup and\n+            not self.options.noshutdown and\n+            success != TestStatus.FAILED and\n+            not self.options.perf\n+        )\n+        if should_clean_up:\n             self.log.info(\"Cleaning up {} on exit\".format(self.options.tmpdir))\n             cleanup_tree_on_exit = True\n+        elif self.options.perf:\n+            self.log.warning(\"Not cleaning up dir %s due to perf data\".format(self.options.tmpdir))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r227924560",
      "id" : 227924560,
      "in_reply_to_id" : 227924192,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzkyNDU2MA==",
      "original_commit_id" : "ac6a6b3ab5c7e37454446ec674cdce4b699633ec",
      "original_position" : 24,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : null,
      "pull_request_review_id" : 168074739,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/227924560",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r228503080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228503080"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wouldn't that overwrite the perf file on restart?",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-26T12:10:05Z",
      "diff_hunk" : "@@ -267,6 +284,96 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            try:\n+                return subprocess.run(\n+                    cmd, shell=True,\n+                    stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL).returncode == 0\n+            except (FileNotFoundError, subprocess.CalledProcessError):\n+                self.log.warning(\"Unable to execute command '{}'\".format(cmd))\n+                return False\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+        else:\n+            output_path = self._get_perf_data_path(profile_name)\n+\n+            cmd = [\n+                'perf', 'record',\n+                '-g',                     # Record the callgraph.\n+                '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+                '-F', '101',              # Sampling frequency in Hz.\n+                '-p', str(self.process.pid),\n+                '-o', output_path,\n+            ]\n+            subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        subp.terminate()\n+        subp.wait()\n+        self.log.info(\"Wrote perf output to '{}'\".format(\n+            self._get_perf_data_path(profile_name)))\n+\n+    def _get_perf_data_path(self, profile_name):\n+        \"\"\"Return a suitable path for perf data given some descriptive name.\"\"\"\n+        suffix = \"-{}\".format(profile_name) if profile_name else \"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r228503080",
      "id" : 228503080,
      "in_reply_to_id" : 227748224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODUwMzA4MA==",
      "original_commit_id" : "dd22df8506544aa3db0ea29f9b4d40c99af48298",
      "original_position" : 150,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 168792581,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228503080",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 5d8ac69\r\n\r\nCan't comment on the usage of `perf`, but if this leads to more profiling, and performance related discussion/results in reviews, sounds great.\r\n\r\nAlso pro reviving the flamegraph docs out of #12649, however that shouldn't hold this up.",
      "created_at" : "2018-10-28T09:26:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-433689317",
      "id" : 433689317,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMzY4OTMxNw==",
      "updated_at" : "2018-10-28T09:26:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/433689317",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r229102706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229102706"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That will  overwrite previous perf results.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-29T21:20:10Z",
      "diff_hunk" : "@@ -167,6 +177,9 @@ def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n \n+        if self.start_perf:\n+            self._start_perf(\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r229102706",
      "id" : 229102706,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTEwMjcwNg==",
      "original_commit_id" : "5d8ac69be53a876d2b15ba703603cea8f4efdb1a",
      "original_position" : 45,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 169523198,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229102706",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r229337090"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229337090"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, good catch. Will verify & fix.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-10-30T14:46:24Z",
      "diff_hunk" : "@@ -267,6 +284,96 @@ def assert_debug_log(self, expected_msgs):\n                 if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n                     self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            try:\n+                return subprocess.run(\n+                    cmd, shell=True,\n+                    stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL).returncode == 0\n+            except (FileNotFoundError, subprocess.CalledProcessError):\n+                self.log.warning(\"Unable to execute command '{}'\".format(cmd))\n+                return False\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+        else:\n+            output_path = self._get_perf_data_path(profile_name)\n+\n+            cmd = [\n+                'perf', 'record',\n+                '-g',                     # Record the callgraph.\n+                '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+                '-F', '101',              # Sampling frequency in Hz.\n+                '-p', str(self.process.pid),\n+                '-o', output_path,\n+            ]\n+            subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        subp.terminate()\n+        subp.wait()\n+        self.log.info(\"Wrote perf output to '{}'\".format(\n+            self._get_perf_data_path(profile_name)))\n+\n+    def _get_perf_data_path(self, profile_name):\n+        \"\"\"Return a suitable path for perf data given some descriptive name.\"\"\"\n+        suffix = \"-{}\".format(profile_name) if profile_name else \"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r229337090",
      "id" : 229337090,
      "in_reply_to_id" : 227748224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyOTMzNzA5MA==",
      "original_commit_id" : "dd22df8506544aa3db0ea29f9b4d40c99af48298",
      "original_position" : 150,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 169813050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/229337090",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-11-06T11:21:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-436219388",
      "id" : 436219388,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNjIxOTM4OA==",
      "updated_at" : "2018-11-06T11:21:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436219388",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r232352979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232352979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed and tested by running `./test/functional/p2p_disconnect_ban.py --perf` (which restarts node1):\r\n```sh\r\n $ ./test/functional/p2p_disconnect_ban.py --perf\r\n2018-11-09T18:41:23.959000Z TestFramework (INFO): Initializing test directory /tmp/testk5t2fuyc\r\n[...]\r\n2018-11-09T18:41:25.250000Z TestFramework (INFO): setban: test persistence across node restart\r\n2018-11-09T18:41:25.616000Z TestFramework.node1 (INFO): Wrote perf output to '/tmp/testk5t2fuyc/node1/perf.data'\r\n[...]\r\n2018-11-09T18:41:26.438000Z TestFramework (INFO): Stopping nodes\r\n2018-11-09T18:41:26.756000Z TestFramework.node0 (INFO): Wrote perf output to '/tmp/testk5t2fuyc/node0/perf.data'\r\n2018-11-09T18:41:27.040000Z TestFramework.node1 (INFO): Wrote perf output to '/tmp/testk5t2fuyc/node1/1.perf.data'\r\n2018-11-09T18:41:27.041000Z TestFramework (WARNING): Not cleaning up dir /tmp/testk5t2fuyc due to perf data\r\n2018-11-09T18:41:27.041000Z TestFramework (INFO): Tests successful\r\n```",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-09T18:42:38Z",
      "diff_hunk" : "@@ -167,6 +177,9 @@ def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n \n+        if self.start_perf:\n+            self._start_perf(\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r232352979",
      "id" : 232352979,
      "in_reply_to_id" : 229102706,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjM1Mjk3OQ==",
      "original_commit_id" : "5d8ac69be53a876d2b15ba703603cea8f4efdb1a",
      "original_position" : 45,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 173539657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232352979",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r235563914"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235563914"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since this is now a user activated feature (with `--perf`, I think most of these usage notes should go in `/test/README/md`)",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-21T23:15:17Z",
      "diff_hunk" : "@@ -316,6 +333,117 @@ def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n                     perc_increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r235563914",
      "id" : 235563914,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTU2MzkxNA==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 71,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 177459215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/235563914",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238011859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238011859"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Are you ever expecting to have more than one perf process profiling the node? That seems like it's probably unnecessary.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-30T21:45:48Z",
      "diff_hunk" : "@@ -95,6 +103,8 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n         self.url = None\n         self.log = logging.getLogger('TestFramework.node%d' % i)\n         self.cleanup_on_exit = True # Whether to kill the node when this object goes away\n+        # Cache perf subprocesses here by their data output filename.\n+        self.perf_subprocesses = {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238011859",
      "id" : 238011859,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAxMTg1OQ==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 36,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 37,
      "pull_request_review_id" : 180461803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238011859",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238012360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238012360"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This might just be personal taste, but I'd prefer to have a `return None` in this if block, so that the main body of the function isn't indented in an else block.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-30T21:47:46Z",
      "diff_hunk" : "@@ -316,6 +333,117 @@ def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n                     perc_increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238012360",
      "id" : 238012360,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAxMjM2MA==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 120,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 180461803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238012360",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238013020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238013020"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This fails for macOS. Do you want to make this portable or are you just targetting linux? You could make it work on macOS by installing binutils and using `greadelf`.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-30T21:50:16Z",
      "diff_hunk" : "@@ -316,6 +333,117 @@ def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n                     perc_increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238013020",
      "id" : 238013020,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAxMzAyMA==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 115,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 104,
      "pull_request_review_id" : 180461803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238013020",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238014054"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238014054"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should this have a timeout so the test doesn't hang if the subprocess doesn't terminate?",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-30T21:53:54Z",
      "diff_hunk" : "@@ -316,6 +333,117 @@ def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n                     perc_increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+        else:\n+            output_path = self._get_unique_perf_data_path(profile_name)\n+\n+            cmd = [\n+                'perf', 'record',\n+                '-g',                     # Record the callgraph.\n+                '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+                '-F', '101',              # Sampling frequency in Hz.\n+                '-p', str(self.process.pid),\n+                '-o', output_path,\n+            ]\n+            subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        output_path = subp.args[subp.args.index('-o') + 1]\n+\n+        subp.terminate()\n+        subp.wait()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238014054",
      "id" : 238014054,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAxNDA1NA==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 143,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 180461803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238014054",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238014160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238014160"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This was very helpful!",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-30T21:54:17Z",
      "diff_hunk" : "@@ -316,6 +333,117 @@ def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n                     perc_increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+        else:\n+            output_path = self._get_unique_perf_data_path(profile_name)\n+\n+            cmd = [\n+                'perf', 'record',\n+                '-g',                     # Record the callgraph.\n+                '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+                '-F', '101',              # Sampling frequency in Hz.\n+                '-p', str(self.process.pid),\n+                '-o', output_path,\n+            ]\n+            subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        output_path = subp.args[subp.args.index('-o') + 1]\n+\n+        subp.terminate()\n+        subp.wait()\n+\n+        stderr = subp.stderr.read().decode()\n+        if 'Consider tweaking /proc/sys/kernel/perf_event_paranoid' in stderr:\n+            self.log.warning(\n+                \"perf couldn't collect data! Try \"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238014160",
      "id" : 238014160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAxNDE2MA==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 148,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 138,
      "pull_request_review_id" : 180461803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238014160",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238014495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238014495"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you replace all this with a call to `tempfile.NamedTemporaryFile`? See above in the same file for an example:\r\n\r\n```\r\n            stderr = tempfile.NamedTemporaryFile(dir=self.stderr_dir, delete=False)\r\n```",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-30T21:55:24Z",
      "diff_hunk" : "@@ -316,6 +333,117 @@ def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n                     perc_increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+        else:\n+            output_path = self._get_unique_perf_data_path(profile_name)\n+\n+            cmd = [\n+                'perf', 'record',\n+                '-g',                     # Record the callgraph.\n+                '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+                '-F', '101',              # Sampling frequency in Hz.\n+                '-p', str(self.process.pid),\n+                '-o', output_path,\n+            ]\n+            subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+            self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        output_path = subp.args[subp.args.index('-o') + 1]\n+\n+        subp.terminate()\n+        subp.wait()\n+\n+        stderr = subp.stderr.read().decode()\n+        if 'Consider tweaking /proc/sys/kernel/perf_event_paranoid' in stderr:\n+            self.log.warning(\n+                \"perf couldn't collect data! Try \"\n+                \"'sudo sysctl -w kernel.perf_event_paranoid=-1'\")\n+        else:\n+            self.log.info(\"Wrote perf output to '{}'\".format(output_path))\n+\n+    def _get_unique_perf_data_path(self, profile_name):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238014495",
      "id" : 238014495,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAxNDQ5NQ==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 153,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 180461803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238014495",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238014809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238014809"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why no sorting? :cry: ",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-30T21:56:36Z",
      "diff_hunk" : "@@ -18,6 +18,7 @@\n import time\n import urllib.parse\n import collections\n+import shlex",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238014809",
      "id" : 238014809,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAxNDgwOQ==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 4,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 4,
      "pull_request_review_id" : 180461803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238014809",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238015981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238015981"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this example code should be in `test/README.md`, which is documentation of how to run tests and contains debugging/troubleshooting tips.\r\n\r\nThis is meant as an example of how to write a test. I don't think the expectation is that people leave `profile_with_perf` contexts in test that are checked into the repo.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2018-11-30T22:01:15Z",
      "diff_hunk" : "@@ -193,10 +193,14 @@ def run_test(self):\n \n         self.log.info(\"Wait for node2 reach current tip. Test that it has propagated all the blocks to us\")\n \n-        getdata_request = msg_getdata()\n-        for block in blocks:\n-            getdata_request.inv.append(CInv(2, block))\n-        self.nodes[2].p2p.send_message(getdata_request)\n+        # If we have Linux perf-tools installed, we can easily profile part of the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r238015981",
      "id" : 238015981,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzODAxNTk4MQ==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 8,
      "path" : "test/functional/example_test.py",
      "position" : null,
      "pull_request_review_id" : 180461803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/238015981",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-12-13T15:07:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-447001339",
      "id" : 447001339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzAwMTMzOQ==",
      "updated_at" : "2018-12-13T15:07:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447001339",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-01-02T14:16:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-450873953",
      "id" : 450873953,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDg3Mzk1Mw==",
      "updated_at" : "2019-01-02T14:16:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450873953",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r244765123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244765123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's conceivable if you want to do nested benchmarking, or have specific regions benchmarked under different perf output files. There's very little overhead here to keeping the subprocess references around, so I can't think of a good reason to rejigger this.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-02T15:28:18Z",
      "diff_hunk" : "@@ -95,6 +103,8 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n         self.url = None\n         self.log = logging.getLogger('TestFramework.node%d' % i)\n         self.cleanup_on_exit = True # Whether to kill the node when this object goes away\n+        # Cache perf subprocesses here by their data output filename.\n+        self.perf_subprocesses = {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r244765123",
      "id" : 244765123,
      "in_reply_to_id" : 238011859,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDc2NTEyMw==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 36,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 37,
      "pull_request_review_id" : 188715545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244765123",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r244766036"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244766036"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perf isn't available for macOS since it's Linux-specific. I'll add a warning and early-exit for non-Linux systems.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-02T15:31:32Z",
      "diff_hunk" : "@@ -316,6 +333,117 @@ def assert_memory_usage_stable(self, perc_increase_allowed=0.03):\n                     perc_increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        Perf will sample the running node and will generate profile data in the node's\n+        datadir. The profile data can then be presented using `perf report` or a graphical\n+        tool like `hotspot`<https://github.com/KDAB/hotspot>.\n+\n+        To see useful textual output, run\n+\n+            perf report -i /path/to/datadir/node-0.perf.data --stdio | c++filt | less\n+\n+        See also:\n+\n+            Installing perf: https://askubuntu.com/q/50145\n+            Perf examples: http://www.brendangregg.com/perf.html\n+\n+        Args:\n+\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+\n+        Usage:\n+\n+            with node.profile_with_perf(\"send-big-msgs\"):\n+                # Perform activity on the node you're interested in profiling, e.g.:\n+                for _ in range(10000):\n+                    node.p2p.send_message(some_large_message)\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\n+        \"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r244766036",
      "id" : 244766036,
      "in_reply_to_id" : 238013020,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDc2NjAzNg==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 115,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 104,
      "pull_request_review_id" : 188716773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244766036",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r244778271"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244778271"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If we want to enforce alphabetical sorting for imports, we should have a linter for it!",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-02T16:12:05Z",
      "diff_hunk" : "@@ -18,6 +18,7 @@\n import time\n import urllib.parse\n import collections\n+import shlex",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r244778271",
      "id" : 244778271,
      "in_reply_to_id" : 238014809,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDc3ODI3MQ==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 4,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 4,
      "pull_request_review_id" : 188732513,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244778271",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r244800893"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244800893"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Usage here is required to get around vulture's dead code check, but I'll add documentation to `test/functional/README.md`.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-02T17:38:25Z",
      "diff_hunk" : "@@ -193,10 +193,14 @@ def run_test(self):\n \n         self.log.info(\"Wait for node2 reach current tip. Test that it has propagated all the blocks to us\")\n \n-        getdata_request = msg_getdata()\n-        for block in blocks:\n-            getdata_request.inv.append(CInv(2, block))\n-        self.nodes[2].p2p.send_message(getdata_request)\n+        # If we have Linux perf-tools installed, we can easily profile part of the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r244800893",
      "id" : 244800893,
      "in_reply_to_id" : 238015981,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDgwMDg5Mw==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 8,
      "path" : "test/functional/example_test.py",
      "position" : null,
      "pull_request_review_id" : 188760836,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244800893",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review, @jnewbery. I've pushed a rebased tip that addresses the feedback. \r\n\r\n[Here's the diff](https://gist.github.com/jamesob/01ac7b24039621a2863995ef69037a0c) (excluding the rebase).",
      "created_at" : "2019-01-02T19:09:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-450954617",
      "id" : 450954617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDk1NDYxNw==",
      "updated_at" : "2019-01-02T19:09:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450954617",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245391408"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245391408"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"docs: add perf section to developer docs\" (27a895d72a385bcaa861e08b03bb5c817f8e253f)\r\n\r\nSlightly strange the link text is \"understand the security tradeoffs\" instead of just \"security tradeoffs.\"",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-04T19:07:54Z",
      "diff_hunk" : "@@ -257,6 +258,51 @@ make cov\n # A coverage report will now be accessible at `./test_bitcoin.coverage/index.html`.\n ```\n \n+### Performance profiling with perf\n+\n+Profiling is a good way to get a precise idea of where time is being spent in\n+code. One tool for doing profiling on Linux platforms is called\n+[`perf`](http://www.brendangregg.com/perf.html), and has been integrated into\n+the functional test framework. Perf can observe a running process and sample\n+(at some frequency) where its execution is.\n+\n+Perf installation is contingent on which kernel version you're running; see\n+[this StackExchange\n+thread](https://askubuntu.com/questions/50145/how-to-install-perf-monitoring-tool)\n+for specific instructions.\n+\n+Certain kernel parameters may need to be set for perf to be able to inspect the\n+running process' stack.\n+\n+```sh\n+$ sudo sysctl -w kernel.perf_event_paranoid=-1\n+$ sudo sysctl -w kernel.kptr_restrict=0\n+```\n+\n+Make sure you [understand the security\n+trade-offs](https://lwn.net/Articles/420403/) of setting these kernel",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245391408",
      "id" : 245391408,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTM5MTQwOA==",
      "original_commit_id" : "27a895d72a385bcaa861e08b03bb5c817f8e253f",
      "original_position" : 34,
      "path" : "doc/developer-notes.md",
      "position" : 34,
      "pull_request_review_id" : 189490561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245391408",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245819954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245819954"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This documentation is excellent. I think it should live in `/test/README.md`, which is documentation for *running* the functional tests, and already includes hints on logging, attaching a debugger, etc. `/test/functional/README.md` is documentation for *writing* test cases (we could probably add a note to the top of each file explaining that).",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-07T22:26:57Z",
      "diff_hunk" : "@@ -118,3 +118,36 @@ Helpers for script.py\n \n #### [test_framework/blocktools.py](test_framework/blocktools.py)\n Helper functions for creating blocks and transactions.\n+\n+### Benchmarking with perf",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245819954",
      "id" : 245819954,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTgxOTk1NA==",
      "original_commit_id" : "27a895d72a385bcaa861e08b03bb5c817f8e253f",
      "original_position" : 5,
      "path" : "test/functional/README.md",
      "position" : 5,
      "pull_request_review_id" : 190021499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245819954",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245823161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245823161"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If this is just to get around vulture, then I'd prefer to just update `lint-python-dead-code.sh` to ignore the `profile_with_perf` name. This file is supposed to be a guide for writing a new testcase. As far as I can tell, `profile_with_perf` shouldn't be included in new testcases to be checked into master.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-07T22:40:15Z",
      "diff_hunk" : "@@ -193,10 +193,14 @@ def run_test(self):\n \n         self.log.info(\"Wait for node2 reach current tip. Test that it has propagated all the blocks to us\")\n \n-        getdata_request = msg_getdata()\n-        for block in blocks:\n-            getdata_request.inv.append(CInv(2, block))\n-        self.nodes[2].p2p.send_message(getdata_request)\n+        # If we have Linux perf-tools installed, we can easily profile part of the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245823161",
      "id" : 245823161,
      "in_reply_to_id" : 238015981,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTgyMzE2MQ==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 8,
      "path" : "test/functional/example_test.py",
      "position" : null,
      "pull_request_review_id" : 190021499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245823161",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245823890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245823890"
         }
      },
      "author_association" : "MEMBER",
      "body" : "My point is that there should only ever be one `perf_subprocess` at any time (it gets popped in `_stop_perf`). I think it's fine to have a `perf_subrocess` reference in the `TestNode` object, but making it a dictionary when there can only be one reference at a time seems odd.\r\n\r\nOr maybe I'm misunderstanding. Is it possible to attach more than one perf instance to the same process? Can you give an example of when you'd want that?",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-07T22:43:25Z",
      "diff_hunk" : "@@ -95,6 +103,8 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n         self.url = None\n         self.log = logging.getLogger('TestFramework.node%d' % i)\n         self.cleanup_on_exit = True # Whether to kill the node when this object goes away\n+        # Cache perf subprocesses here by their data output filename.\n+        self.perf_subprocesses = {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245823890",
      "id" : 245823890,
      "in_reply_to_id" : 238011859,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTgyMzg5MA==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 36,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 37,
      "pull_request_review_id" : 190021499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245823890",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245825685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245825685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it'd be better to pass `None` here (or even better have `None` as the default argument). `\"\"` and `None` will get treated the same in `(profile_name or 'test')`.\r\n\r\nEDIT: I see you're using `profile_name` as the key in the `perf_subprocesses` dictionary so this wouldn't work. Is `perf_subprocesses` safe from having entries overwritten if the same `profile_name` is passed in twice?",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-07T22:51:02Z",
      "diff_hunk" : "@@ -186,6 +197,9 @@ def start(self, extra_args=None, *, stdout=None, stderr=None, **kwargs):\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n \n+        if self.start_perf:\n+            self._start_perf(\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245825685",
      "id" : 245825685,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTgyNTY4NQ==",
      "original_commit_id" : "27a895d72a385bcaa861e08b03bb5c817f8e253f",
      "original_position" : 46,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : null,
      "pull_request_review_id" : 190021499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245825685",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245826619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245826619"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems a bit brittle. Probably ok to leave as it is, but if anyone updates the arguments or ordering of arguments, then this will break.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-07T22:55:08Z",
      "diff_hunk" : "@@ -317,6 +335,84 @@ def assert_memory_usage_stable(self, *, increase_allowed=0.03):\n                     increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        See `test/functional/README.md` for details on perf usage.\n+\n+        Args:\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not sys.platform.startswith('linux'):\n+            self.log.warning(\"Can't profile with perf; only availabe on Linux platforms\")\n+            return None\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+            return None\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        output_path = tempfile.NamedTemporaryFile(\n+            dir=self.datadir,\n+            prefix=\"{}.perf.data.\".format(profile_name or 'test'),\n+            delete=False,\n+        ).name\n+\n+        cmd = [\n+            'perf', 'record',\n+            '-g',                     # Record the callgraph.\n+            '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+            '-F', '101',              # Sampling frequency in Hz.\n+            '-p', str(self.process.pid),\n+            '-o', output_path,\n+        ]\n+        subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+        self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        output_path = subp.args[subp.args.index('-o') + 1]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245826619",
      "id" : 245826619,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTgyNjYxOQ==",
      "original_commit_id" : "27a895d72a385bcaa861e08b03bb5c817f8e253f",
      "original_position" : 130,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 130,
      "pull_request_review_id" : 190021499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245826619",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245827078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245827078"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Make this a markdown link: `[hotspot](https://github.com/KDAB/hotspot).`",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-07T22:57:11Z",
      "diff_hunk" : "@@ -118,3 +118,36 @@ Helpers for script.py\n \n #### [test_framework/blocktools.py](test_framework/blocktools.py)\n Helper functions for creating blocks and transactions.\n+\n+### Benchmarking with perf\n+\n+An easy way to profile node performance during functional tests is provided\n+for Linux platforms using `perf`.\n+\n+Perf will sample the running node and will generate profile data in the node's\n+datadir. The profile data can then be presented using `perf report` or a graphical\n+tool like `hotspot`<https://github.com/KDAB/hotspot>.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r245827078",
      "id" : 245827078,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTgyNzA3OA==",
      "original_commit_id" : "27a895d72a385bcaa861e08b03bb5c817f8e253f",
      "original_position" : 12,
      "path" : "test/functional/README.md",
      "position" : null,
      "pull_request_review_id" : 190021499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245827078",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r249780132"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249780132"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> My point is that there should only ever be one perf_subprocess at any time\r\n\r\nYeah, this isn't the case: you might have nested context managers, or a context manager used in conjunction with `--perf`.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-22T13:34:35Z",
      "diff_hunk" : "@@ -95,6 +103,8 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n         self.url = None\n         self.log = logging.getLogger('TestFramework.node%d' % i)\n         self.cleanup_on_exit = True # Whether to kill the node when this object goes away\n+        # Cache perf subprocesses here by their data output filename.\n+        self.perf_subprocesses = {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r249780132",
      "id" : 249780132,
      "in_reply_to_id" : 238011859,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTc4MDEzMg==",
      "original_commit_id" : "a94c68b3f46c897511bead16cf8a81d14312751f",
      "original_position" : 36,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 37,
      "pull_request_review_id" : 195006251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249780132",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r249780686"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249780686"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think this is as brittle as it seems; you're always going to have the filename following `-o` otherwise the argument doesn't make any sense.",
      "commit_id" : "13782b8ba84c5033a59a5234410a763393eafb8d",
      "created_at" : "2019-01-22T13:36:21Z",
      "diff_hunk" : "@@ -317,6 +335,84 @@ def assert_memory_usage_stable(self, *, increase_allowed=0.03):\n                     increase_allowed * 100, before_memory_usage, after_memory_usage,\n                     perc_increase_memory_usage * 100))\n \n+    @contextlib.contextmanager\n+    def profile_with_perf(self, profile_name):\n+        \"\"\"\n+        Context manager that allows easy profiling of node activity using `perf`.\n+\n+        See `test/functional/README.md` for details on perf usage.\n+\n+        Args:\n+            profile_name (str): This string will be appended to the\n+                profile data filename generated by perf.\n+        \"\"\"\n+        subp = self._start_perf(profile_name)\n+\n+        yield\n+\n+        if subp:\n+            self._stop_perf(profile_name)\n+\n+    def _start_perf(self, profile_name):\n+        \"\"\"Start a perf process to profile this node.\n+\n+        Returns the subprocess running perf.\"\"\"\n+        subp = None\n+\n+        def test_success(cmd):\n+            return subprocess.call(\n+                # shell=True required for pipe use below\n+                cmd, shell=True,\n+                stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL) == 0\n+\n+        if not sys.platform.startswith('linux'):\n+            self.log.warning(\"Can't profile with perf; only availabe on Linux platforms\")\n+            return None\n+\n+        if not test_success('which perf'):\n+            self.log.warning(\"Can't profile with perf; must install perf-tools\")\n+            return None\n+\n+        if not test_success('readelf -S {} | grep .debug_str'.format(shlex.quote(self.binary))):\n+            self.log.warning(\n+                \"perf output won't be very useful without debug symbols compiled into bitcoind\")\n+\n+        output_path = tempfile.NamedTemporaryFile(\n+            dir=self.datadir,\n+            prefix=\"{}.perf.data.\".format(profile_name or 'test'),\n+            delete=False,\n+        ).name\n+\n+        cmd = [\n+            'perf', 'record',\n+            '-g',                     # Record the callgraph.\n+            '--call-graph', 'dwarf',  # Compatibility for gcc's --fomit-frame-pointer.\n+            '-F', '101',              # Sampling frequency in Hz.\n+            '-p', str(self.process.pid),\n+            '-o', output_path,\n+        ]\n+        subp = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+        self.perf_subprocesses[profile_name] = subp\n+\n+        return subp\n+\n+    def _stop_perf(self, profile_name):\n+        \"\"\"Stop (and pop) a perf subprocess.\"\"\"\n+        subp = self.perf_subprocesses.pop(profile_name)\n+        output_path = subp.args[subp.args.index('-o') + 1]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#discussion_r249780686",
      "id" : 249780686,
      "in_reply_to_id" : 245826619,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTc4MDY4Ng==",
      "original_commit_id" : "27a895d72a385bcaa861e08b03bb5c817f8e253f",
      "original_position" : 130,
      "path" : "test/functional/test_framework/test_node.py",
      "position" : 130,
      "pull_request_review_id" : 195007003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14519",
      "updated_at" : "2019-01-22T13:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249780686",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Pushed an update addressing feedback from @jnewbery. ",
      "created_at" : "2019-01-22T14:04:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14519#issuecomment-456410333",
      "id" : 456410333,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14519",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NjQxMDMzMw==",
      "updated_at" : "2019-01-22T14:04:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/456410333",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
