[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Travis ia falling because I forgot about the new zmq rpc when I rebased on top kf current master, will correct tomorrow.",
      "created_at" : "2018-10-17T12:32:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430609530",
      "id" : 430609530,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDYwOTUzMA==",
      "updated_at" : "2018-10-17T12:32:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430609530",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This is a nice change, and I think making documentation more structured will make it easier to maintain.\r\n\r\nI do think it'd be good to replace `Table`/`Row` methods with explicit `Params` / `Result` methods that make it possible to extract names, types, and structure of parameters. This could be used to generate richer documentation, and support other applications like autocomplete.",
      "created_at" : "2018-10-17T15:04:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430665608",
      "id" : 430665608,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDY2NTYwOA==",
      "updated_at" : "2018-10-17T15:04:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430665608",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "That's a good point.\r\n\r\nI used \"Table\" and \"Row\", since there are few more different table types, and also \"Arguments\" and \"Results\" tables are basically the same thing (Arguments have the numbers next to some rows, but only some of them)\r\n\r\nThe possible table types, by just grepping the source code:\r\n\r\n* Arguments\r\n* Examples of output descriptors\r\n* Modes\r\n* Result\r\n* Result with verbosity classifier\r\n  * Result (for verbose = false)\r\n  * Result (for verbose = true)\r\n  * Result (for verbose=false)\r\n  * Result (for verbosity = 0)\r\n  * Result (for verbosity = 1)\r\n  * Result (for verbosity = 2)\r\n  * Result (if verbose is not set or set to false)\r\n  * Result (if verbose is set to true)\r\n  * Result: (for verbose = false)\r\n  * Result: (for verbose = true)\r\n* Result with mode clasifier\r\n  * Result (mode \\\"mallocinfo\\\")\r\n  * Result (mode \\\"stats\\\")\r\n\r\nAll the Result subtypes are.... yeah basically the same thing, could be treated in some way.",
      "created_at" : "2018-10-17T15:56:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430685804",
      "id" : 430685804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDY4NTgwNA==",
      "updated_at" : "2018-10-17T15:56:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430685804",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Of course another level would be to somehow match the actual RPC arguments to the arguments in the table, and to the arguments in the short example in the first line, but that is ... just too complex. :)\r\n\r\nGood first step would be to replace `Table(\"Arguments\")` with just `Arguments()`, the rows with numbered arguments replace with `Argument()`, add `Result(\"classifier\")` as a thing, and ... yeah the rest of the tables could stay as `Table`",
      "created_at" : "2018-10-17T16:04:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430688845",
      "id" : 430688845,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDY4ODg0NQ==",
      "updated_at" : "2018-10-17T16:04:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430688845",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "~~The fuctional tests seem to be failing for some reason. I will investigate if I get more general concept ACKs :)~~\r\n\r\nFinally fixed",
      "created_at" : "2018-10-17T16:11:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430691380",
      "id" : 430691380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDY5MTM4MA==",
      "updated_at" : "2018-10-17T18:14:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430691380",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. The functional tests do seem to be passing for me when I try them locally.",
      "created_at" : "2018-10-17T17:07:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430710255",
      "id" : 430710255,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDcxMDI1NQ==",
      "updated_at" : "2018-10-17T17:07:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430710255",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-10-18T05:11:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-430877267",
      "id" : 430877267,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMDg3NzI2Nw==",
      "updated_at" : "2018-10-18T05:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/430877267",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226198455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226198455"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why do you need the `, \"\"` part? It looks like it does not require it:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/e60061c524f14df8b9e856ec0b89eb6805baf824/src/rpc/doc.h#L70-L71\r\n\r\n(this applies to multiple files/places)",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T07:44:17Z",
      "diff_hunk" : "@@ -189,25 +186,22 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getmininginfo\\n\"\n-            \"\\nReturns a json object containing mining-related information.\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n-            \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n-            \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n-            \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n-            \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n-            \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n-            \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmininginfo\", \"\")\n-            + HelpExampleRpc(\"getmininginfo\", \"\")\n-        );\n-\n+        throw RPCDoc(\"getmininginfo\", \"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226198455",
      "id" : 226198455,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjE5ODQ1NQ==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 95,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 165960966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226198455",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226208044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226208044"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I just forgot I made the constructor with just one argument. :)",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T08:15:39Z",
      "diff_hunk" : "@@ -189,25 +186,22 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getmininginfo\\n\"\n-            \"\\nReturns a json object containing mining-related information.\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n-            \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n-            \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n-            \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n-            \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n-            \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n-            \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n-            \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmininginfo\", \"\")\n-            + HelpExampleRpc(\"getmininginfo\", \"\")\n-        );\n-\n+        throw RPCDoc(\"getmininginfo\", \"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226208044",
      "id" : 226208044,
      "in_reply_to_id" : 226198455,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjIwODA0NA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 95,
      "path" : "src/rpc/mining.cpp",
      "position" : null,
      "pull_request_review_id" : 165972313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226208044",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226454620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226454620"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Make sure this matches the parameter naming in:\r\n\r\n```\r\nRPCDoc& RPCDoc::Example(const std::string& code, const std::string& example)\r\n```\r\n\r\nNow it is `(description, code)` vs `(code, example)` :-)",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:30:06Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_DOC_H\n+#define BITCOIN_RPC_DOC_H\n+\n+#include <amount.h>\n+#include <rpc/protocol.h>\n+#include <uint256.h>\n+\n+#include <list>\n+#include <map>\n+#include <stdint.h>\n+#include <string>\n+\n+class RPCDocExample\n+{\n+private:\n+    const std::string m_description;\n+    const std::string m_code;\n+\n+public:\n+    RPCDocExample(const std::string& description, const std::string& code);\n+    RPCDocExample(const std::string& code);\n+    std::string AsText() const;\n+};\n+\n+class RPCDocTableRow\n+{\n+private:\n+    const std::string m_code;\n+    std::vector<std::string> m_types;\n+    const std::string m_description;\n+\n+public:\n+    RPCDocTableRow(const std::string& code);\n+    RPCDocTableRow(const std::string& code, const std::string& description);\n+    RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n+    std::string const& Code() const;\n+    std::vector<std::string> const& Types() const;\n+    std::vector<std::string> DescriptionLines() const;\n+};\n+\n+class RPCDocTable\n+{\n+private:\n+    std::string m_name;\n+    std::vector<RPCDocTableRow> m_rows;\n+\n+    size_t PrefixLength() const;\n+\n+public:\n+    RPCDocTable(const std::string& name);\n+    void AddRow(const RPCDocTableRow& row);\n+\n+    std::string AsText() const;\n+};\n+\n+class RPCDoc\n+{\n+private:\n+    std::string m_methodName;\n+    std::string m_firstArguments;\n+    std::string m_description;\n+    std::vector<RPCDocTable> m_tables;\n+    std::vector<RPCDocExample> m_examples;\n+\n+public:\n+    RPCDoc(std::string methodName);\n+    RPCDoc(std::string methodName, std::string firstArguments);\n+\n+    RPCDoc& Desc(const std::string& description);\n+    RPCDoc& Table(const std::string& name);\n+    RPCDoc& Row(const std::string& code);\n+    RPCDoc& Row(const std::string& code, const std::initializer_list<std::string>& types);\n+    RPCDoc& Row(const std::string& code, const std::string& description);\n+    RPCDoc& Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n+    RPCDoc& Rows(const std::vector<RPCDocTableRow>& rows);\n+    RPCDoc& Example(const std::string& code);\n+    RPCDoc& Example(const std::string& description, const std::string& code);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226454620",
      "id" : 226454620,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1NDYyMA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 81,
      "path" : "src/rpc/doc.h",
      "position" : 80,
      "pull_request_review_id" : 166281953,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226454620",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226454978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226454978"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The initialisation here is redundant.",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:31:16Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226454978",
      "id" : 226454978,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1NDk3OA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 90,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166282406,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226454978",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455081"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be const reference?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:31:36Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455081",
      "id" : 226455081,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1NTA4MQ==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 96,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166282528,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455081",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455277"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455277"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`emplace_back` instead?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:32:12Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)\n+    : m_methodName(methodName), m_firstArguments(\"\")\n+{\n+}\n+\n+RPCDoc& RPCDoc::Desc(const std::string& description)\n+{\n+    m_description = description;\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Table(const std::string& name)\n+{\n+    m_tables.push_back(RPCDocTable(name));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455277",
      "id" : 226455277,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1NTI3Nw==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 150,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166282784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455277",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455350"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455350"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`emplace_back` instead?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:32:23Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)\n+    : m_methodName(methodName), m_firstArguments(\"\")\n+{\n+}\n+\n+RPCDoc& RPCDoc::Desc(const std::string& description)\n+{\n+    m_description = description;\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Table(const std::string& name)\n+{\n+    m_tables.push_back(RPCDocTable(name));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, \"\"));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Rows(const std::vector<RPCDocTableRow>& rows)\n+{\n+    for (auto const& row : rows) {\n+        m_tables.back().AddRow(row);\n+    }\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code)\n+{\n+    m_examples.push_back(RPCDocExample(code));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455350",
      "id" : 226455350,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1NTM1MA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 200,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166282850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455350",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`emplace_back` instead?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:32:32Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)\n+    : m_methodName(methodName), m_firstArguments(\"\")\n+{\n+}\n+\n+RPCDoc& RPCDoc::Desc(const std::string& description)\n+{\n+    m_description = description;\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Table(const std::string& name)\n+{\n+    m_tables.push_back(RPCDocTable(name));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, \"\"));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Rows(const std::vector<RPCDocTableRow>& rows)\n+{\n+    for (auto const& row : rows) {\n+        m_tables.back().AddRow(row);\n+    }\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code)\n+{\n+    m_examples.push_back(RPCDocExample(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code, const std::string& example)\n+{\n+    m_examples.push_back(RPCDocExample(code, example));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455394",
      "id" : 226455394,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1NTM5NA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 206,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166282914,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455394",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455433"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455433"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`emplace_back` instead?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:32:40Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)\n+    : m_methodName(methodName), m_firstArguments(\"\")\n+{\n+}\n+\n+RPCDoc& RPCDoc::Desc(const std::string& description)\n+{\n+    m_description = description;\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Table(const std::string& name)\n+{\n+    m_tables.push_back(RPCDocTable(name));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, \"\"));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Rows(const std::vector<RPCDocTableRow>& rows)\n+{\n+    for (auto const& row : rows) {\n+        m_tables.back().AddRow(row);\n+    }\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code)\n+{\n+    m_examples.push_back(RPCDocExample(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code, const std::string& example)\n+{\n+    m_examples.push_back(RPCDocExample(code, example));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::ExampleCli(const std::string& description, const std::string& methodName, const std::string& args)\n+{\n+    m_examples.push_back(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455433",
      "id" : 226455433,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1NTQzMw==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 212,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166282964,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455433",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455485"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455485"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`emplace_back` instead?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:32:51Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)\n+    : m_methodName(methodName), m_firstArguments(\"\")\n+{\n+}\n+\n+RPCDoc& RPCDoc::Desc(const std::string& description)\n+{\n+    m_description = description;\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Table(const std::string& name)\n+{\n+    m_tables.push_back(RPCDocTable(name));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, \"\"));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Rows(const std::vector<RPCDocTableRow>& rows)\n+{\n+    for (auto const& row : rows) {\n+        m_tables.back().AddRow(row);\n+    }\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code)\n+{\n+    m_examples.push_back(RPCDocExample(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code, const std::string& example)\n+{\n+    m_examples.push_back(RPCDocExample(code, example));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::ExampleCli(const std::string& description, const std::string& methodName, const std::string& args)\n+{\n+    m_examples.push_back(\n+        RPCDocExample(description, \"bitcoin-cli \" + methodName + \" \" + args));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::ExampleRpc(const std::string& description, const std::string& methodName, const std::string& args)\n+{\n+    m_examples.push_back(RPCDocExample(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226455485",
      "id" : 226455485,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1NTQ4NQ==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 219,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166283046,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226455485",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226456282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226456282"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`RPCDoc` should be derived from `std::exception`?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:35:31Z",
      "diff_hunk" : "@@ -763,17 +750,17 @@ static UniValue submitblock(const JSONRPCRequest& request)\n static UniValue submitheader(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n-            \"submitheader \\\"hexdata\\\"\\n\"\n-            \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n-            \"\\nThrows when the header is invalid.\\n\"\n-            \"\\nArguments\\n\"\n-            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block header data\\n\"\n-            \"\\nResult:\\n\"\n-            \"None\"\n-            \"\\nExamples:\\n\" +\n-            HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n-            HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\"));\n+        throw RPCDoc(\"submitheader\", \"\\\"hexdata\\\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226456282",
      "id" : 226456282,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1NjI4Mg==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 351,
      "path" : "src/rpc/mining.cpp",
      "position" : 351,
      "pull_request_review_id" : 166284052,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226456282",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226458211"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be `explicit`?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:42:20Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_DOC_H\n+#define BITCOIN_RPC_DOC_H\n+\n+#include <amount.h>\n+#include <rpc/protocol.h>\n+#include <uint256.h>\n+\n+#include <list>\n+#include <map>\n+#include <stdint.h>\n+#include <string>\n+\n+class RPCDocExample\n+{\n+private:\n+    const std::string m_description;\n+    const std::string m_code;\n+\n+public:\n+    RPCDocExample(const std::string& description, const std::string& code);\n+    RPCDocExample(const std::string& code);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458211",
      "id" : 226458211,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1ODIxMQ==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 25,
      "path" : "src/rpc/doc.h",
      "position" : null,
      "pull_request_review_id" : 166286646,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226458211",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458274"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226458274"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be `explicit`?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:42:32Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_DOC_H\n+#define BITCOIN_RPC_DOC_H\n+\n+#include <amount.h>\n+#include <rpc/protocol.h>\n+#include <uint256.h>\n+\n+#include <list>\n+#include <map>\n+#include <stdint.h>\n+#include <string>\n+\n+class RPCDocExample\n+{\n+private:\n+    const std::string m_description;\n+    const std::string m_code;\n+\n+public:\n+    RPCDocExample(const std::string& description, const std::string& code);\n+    RPCDocExample(const std::string& code);\n+    std::string AsText() const;\n+};\n+\n+class RPCDocTableRow\n+{\n+private:\n+    const std::string m_code;\n+    std::vector<std::string> m_types;\n+    const std::string m_description;\n+\n+public:\n+    RPCDocTableRow(const std::string& code);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458274",
      "id" : 226458274,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1ODI3NA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 37,
      "path" : "src/rpc/doc.h",
      "position" : null,
      "pull_request_review_id" : 166286722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226458274",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226458313"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be `explicit`?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:42:40Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_DOC_H\n+#define BITCOIN_RPC_DOC_H\n+\n+#include <amount.h>\n+#include <rpc/protocol.h>\n+#include <uint256.h>\n+\n+#include <list>\n+#include <map>\n+#include <stdint.h>\n+#include <string>\n+\n+class RPCDocExample\n+{\n+private:\n+    const std::string m_description;\n+    const std::string m_code;\n+\n+public:\n+    RPCDocExample(const std::string& description, const std::string& code);\n+    RPCDocExample(const std::string& code);\n+    std::string AsText() const;\n+};\n+\n+class RPCDocTableRow\n+{\n+private:\n+    const std::string m_code;\n+    std::vector<std::string> m_types;\n+    const std::string m_description;\n+\n+public:\n+    RPCDocTableRow(const std::string& code);\n+    RPCDocTableRow(const std::string& code, const std::string& description);\n+    RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n+    std::string const& Code() const;\n+    std::vector<std::string> const& Types() const;\n+    std::vector<std::string> DescriptionLines() const;\n+};\n+\n+class RPCDocTable\n+{\n+private:\n+    std::string m_name;\n+    std::vector<RPCDocTableRow> m_rows;\n+\n+    size_t PrefixLength() const;\n+\n+public:\n+    RPCDocTable(const std::string& name);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458313",
      "id" : 226458313,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1ODMxMw==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 54,
      "path" : "src/rpc/doc.h",
      "position" : null,
      "pull_request_review_id" : 166286771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226458313",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226458359"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be `explicit`?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:42:48Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_DOC_H\n+#define BITCOIN_RPC_DOC_H\n+\n+#include <amount.h>\n+#include <rpc/protocol.h>\n+#include <uint256.h>\n+\n+#include <list>\n+#include <map>\n+#include <stdint.h>\n+#include <string>\n+\n+class RPCDocExample\n+{\n+private:\n+    const std::string m_description;\n+    const std::string m_code;\n+\n+public:\n+    RPCDocExample(const std::string& description, const std::string& code);\n+    RPCDocExample(const std::string& code);\n+    std::string AsText() const;\n+};\n+\n+class RPCDocTableRow\n+{\n+private:\n+    const std::string m_code;\n+    std::vector<std::string> m_types;\n+    const std::string m_description;\n+\n+public:\n+    RPCDocTableRow(const std::string& code);\n+    RPCDocTableRow(const std::string& code, const std::string& description);\n+    RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n+    std::string const& Code() const;\n+    std::vector<std::string> const& Types() const;\n+    std::vector<std::string> DescriptionLines() const;\n+};\n+\n+class RPCDocTable\n+{\n+private:\n+    std::string m_name;\n+    std::vector<RPCDocTableRow> m_rows;\n+\n+    size_t PrefixLength() const;\n+\n+public:\n+    RPCDocTable(const std::string& name);\n+    void AddRow(const RPCDocTableRow& row);\n+\n+    std::string AsText() const;\n+};\n+\n+class RPCDoc\n+{\n+private:\n+    std::string m_methodName;\n+    std::string m_firstArguments;\n+    std::string m_description;\n+    std::vector<RPCDocTable> m_tables;\n+    std::vector<RPCDocExample> m_examples;\n+\n+public:\n+    RPCDoc(std::string methodName);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226458359",
      "id" : 226458359,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1ODM1OQ==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 70,
      "path" : "src/rpc/doc.h",
      "position" : null,
      "pull_request_review_id" : 166286827,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226458359",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226459110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226459110"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be const references?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:45:14Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226459110",
      "id" : 226459110,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1OTExMA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 132,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166287778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226459110",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226459160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226459160"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be const reference?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:45:26Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226459160",
      "id" : 226459160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1OTE2MA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 137,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166287851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226459160",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226459360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226459360"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This function is never used?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-18T20:46:02Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)\n+    : m_methodName(methodName), m_firstArguments(\"\")\n+{\n+}\n+\n+RPCDoc& RPCDoc::Desc(const std::string& description)\n+{\n+    m_description = description;\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Table(const std::string& name)\n+{\n+    m_tables.push_back(RPCDocTable(name));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, description));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Row(const std::string& code, const std::initializer_list<std::string>& types)\n+{\n+    if (m_tables.empty()) {\n+        throw std::out_of_range(\"No table in RPC doc.\");\n+    }\n+    m_tables.back().AddRow(RPCDocTableRow(code, types, \"\"));\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Rows(const std::vector<RPCDocTableRow>& rows)\n+{\n+    for (auto const& row : rows) {\n+        m_tables.back().AddRow(row);\n+    }\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Example(const std::string& code)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226459360",
      "id" : 226459360,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjQ1OTM2MA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 198,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166288063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226459360",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226556435"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226556435"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hm, not sure if I like it... I like how explicit it is now, so you can either have a RPCDoc object (which could later be used somewhere else too) and then explicitly make exception out of it\r\n\r\nAlso I *think* that right now when you throw different exception than runtime_error, bitcoind crashes instead of bitcoin-cli writing out the help. I will look once more to be sure",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-19T07:35:33Z",
      "diff_hunk" : "@@ -763,17 +750,17 @@ static UniValue submitblock(const JSONRPCRequest& request)\n static UniValue submitheader(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1) {\n-        throw std::runtime_error(\n-            \"submitheader \\\"hexdata\\\"\\n\"\n-            \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n-            \"\\nThrows when the header is invalid.\\n\"\n-            \"\\nArguments\\n\"\n-            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block header data\\n\"\n-            \"\\nResult:\\n\"\n-            \"None\"\n-            \"\\nExamples:\\n\" +\n-            HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n-            HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\"));\n+        throw RPCDoc(\"submitheader\", \"\\\"hexdata\\\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226556435",
      "id" : 226556435,
      "in_reply_to_id" : 226456282,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjU1NjQzNQ==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 351,
      "path" : "src/rpc/mining.cpp",
      "position" : 351,
      "pull_request_review_id" : 166407154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226556435",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226559336"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226559336"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I have to admit, I don't really understand the difference between emplace_back and push_back\r\n\r\nWhat good does it bring here?",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-19T07:48:48Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)\n+    : m_methodName(methodName), m_firstArguments(\"\")\n+{\n+}\n+\n+RPCDoc& RPCDoc::Desc(const std::string& description)\n+{\n+    m_description = description;\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Table(const std::string& name)\n+{\n+    m_tables.push_back(RPCDocTable(name));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226559336",
      "id" : 226559336,
      "in_reply_to_id" : 226455277,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjU1OTMzNg==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 150,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166410708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226559336",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226559920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226559920"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "...but online wisdom seems to be that emplace_back is faster, because it doesn't create temporary objects, so... ok :)",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-19T07:51:19Z",
      "diff_hunk" : "@@ -0,0 +1,284 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <rpc/doc.h>\n+\n+RPCDocExample::RPCDocExample(const std::string& description, const std::string& code)\n+    : m_description(description), m_code(code)\n+{\n+}\n+\n+RPCDocExample::RPCDocExample(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+std::string RPCDocExample::AsText() const\n+{\n+    std::string result;\n+    if (!m_description.empty()) {\n+        result += m_description;\n+        result += \"\\n\";\n+    }\n+\n+    result += \"> \";\n+    result += m_code;\n+    result += \"\\n\";\n+    return result;\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code)\n+    : m_code(code)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::string& description)\n+    : m_code(code), m_description(description)\n+{\n+}\n+\n+RPCDocTableRow::RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description)\n+    : m_code(code), m_types(types), m_description(description)\n+{\n+}\n+\n+std::string const& RPCDocTableRow::Code() const\n+{\n+    return m_code;\n+}\n+\n+std::vector<std::string> const& RPCDocTableRow::Types() const\n+{\n+    return m_types;\n+}\n+\n+std::vector<std::string> RPCDocTableRow::DescriptionLines() const\n+{\n+    std::vector<std::string> res;\n+    boost::split(res, m_description, boost::is_any_of(\"\\n\"));\n+    return res;\n+}\n+\n+size_t RPCDocTable::PrefixLength() const\n+{\n+    size_t max = 0;\n+    for (auto const& row : m_rows) {\n+        size_t prefix = row.Code().length() + 2;\n+        if (prefix > max) {\n+            max = prefix;\n+        }\n+    }\n+    return max;\n+}\n+\n+\n+RPCDocTable::RPCDocTable(const std::string& name)\n+    : m_name(name)\n+{\n+}\n+\n+void RPCDocTable::AddRow(const RPCDocTableRow& row)\n+{\n+    m_rows.push_back(row);\n+}\n+\n+std::string RPCDocTable::AsText() const\n+{\n+    std::string res = \"\";\n+    res += m_name;\n+    res += \":\\n\";\n+\n+    size_t prefixLen = PrefixLength();\n+    for (auto const& row : m_rows) {\n+        std::string code = row.Code();\n+        res += row.Code();\n+        auto lines = row.DescriptionLines();\n+        bool firstLine = true;\n+        for (auto const& line : lines) {\n+            size_t spaces;\n+            if (firstLine) {\n+                spaces = prefixLen - code.length();\n+            } else {\n+                spaces = prefixLen;\n+            }\n+            res += std::string(spaces, ' ');\n+\n+            if (firstLine) {\n+                auto types = row.Types();\n+                if (!types.empty()) {\n+                    bool firstType = true;\n+                    res += \"(\";\n+                    for (auto const& type : types) {\n+                        if (!firstType) {\n+                            res += \", \";\n+                        }\n+                        res += type;\n+                        firstType = false;\n+                    }\n+                    res += \") \";\n+                }\n+            }\n+            res += line;\n+            res += \"\\n\";\n+            firstLine = false;\n+        }\n+    }\n+    return res;\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName, std::string firstArguments)\n+    : m_methodName(methodName), m_firstArguments(firstArguments)\n+{\n+}\n+\n+RPCDoc::RPCDoc(std::string methodName)\n+    : m_methodName(methodName), m_firstArguments(\"\")\n+{\n+}\n+\n+RPCDoc& RPCDoc::Desc(const std::string& description)\n+{\n+    m_description = description;\n+    return *this;\n+}\n+\n+RPCDoc& RPCDoc::Table(const std::string& name)\n+{\n+    m_tables.push_back(RPCDocTable(name));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226559920",
      "id" : 226559920,
      "in_reply_to_id" : 226455277,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjU1OTkyMA==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 150,
      "path" : "src/rpc/doc.cpp",
      "position" : null,
      "pull_request_review_id" : 166411408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226559920",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226570627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226570627"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "fixed",
      "commit_id" : "c78baa144a29428a7ae34493eb3bb3db3ab4c1f5",
      "created_at" : "2018-10-19T08:33:20Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_DOC_H\n+#define BITCOIN_RPC_DOC_H\n+\n+#include <amount.h>\n+#include <rpc/protocol.h>\n+#include <uint256.h>\n+\n+#include <list>\n+#include <map>\n+#include <stdint.h>\n+#include <string>\n+\n+class RPCDocExample\n+{\n+private:\n+    const std::string m_description;\n+    const std::string m_code;\n+\n+public:\n+    RPCDocExample(const std::string& description, const std::string& code);\n+    RPCDocExample(const std::string& code);\n+    std::string AsText() const;\n+};\n+\n+class RPCDocTableRow\n+{\n+private:\n+    const std::string m_code;\n+    std::vector<std::string> m_types;\n+    const std::string m_description;\n+\n+public:\n+    RPCDocTableRow(const std::string& code);\n+    RPCDocTableRow(const std::string& code, const std::string& description);\n+    RPCDocTableRow(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n+    std::string const& Code() const;\n+    std::vector<std::string> const& Types() const;\n+    std::vector<std::string> DescriptionLines() const;\n+};\n+\n+class RPCDocTable\n+{\n+private:\n+    std::string m_name;\n+    std::vector<RPCDocTableRow> m_rows;\n+\n+    size_t PrefixLength() const;\n+\n+public:\n+    RPCDocTable(const std::string& name);\n+    void AddRow(const RPCDocTableRow& row);\n+\n+    std::string AsText() const;\n+};\n+\n+class RPCDoc\n+{\n+private:\n+    std::string m_methodName;\n+    std::string m_firstArguments;\n+    std::string m_description;\n+    std::vector<RPCDocTable> m_tables;\n+    std::vector<RPCDocExample> m_examples;\n+\n+public:\n+    RPCDoc(std::string methodName);\n+    RPCDoc(std::string methodName, std::string firstArguments);\n+\n+    RPCDoc& Desc(const std::string& description);\n+    RPCDoc& Table(const std::string& name);\n+    RPCDoc& Row(const std::string& code);\n+    RPCDoc& Row(const std::string& code, const std::initializer_list<std::string>& types);\n+    RPCDoc& Row(const std::string& code, const std::string& description);\n+    RPCDoc& Row(const std::string& code, const std::initializer_list<std::string>& types, const std::string& description);\n+    RPCDoc& Rows(const std::vector<RPCDocTableRow>& rows);\n+    RPCDoc& Example(const std::string& code);\n+    RPCDoc& Example(const std::string& description, const std::string& code);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#discussion_r226570627",
      "id" : 226570627,
      "in_reply_to_id" : 226454620,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjU3MDYyNw==",
      "original_commit_id" : "e60061c524f14df8b9e856ec0b89eb6805baf824",
      "original_position" : 81,
      "path" : "src/rpc/doc.h",
      "position" : 80,
      "pull_request_review_id" : 166425018,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14502",
      "updated_at" : "2018-10-19T10:29:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/226570627",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14555 (Move util files to directory by jimpo)\n* #14530 (Use RPCHelpMan to generate RPC doc strings by MarcoFalke)\n* #14481 (Add P2SH-P2WSH support to listunspent RPC by MeshCollider)\n* #14477 (Add ability to convert solvability info to descriptor by sipa)\n* #14468 ([wallet] Deprecate generate RPC method by jnewbery)\n* #14459 (More RPC help description fixes by ch4ot1c)\n* #14454 (Add SegWit support to importmulti by MeshCollider)\n* #14437 (Refactor: Start to separate wallet from node by ryanofsky)\n* #14411 ([wallet] Restore ability to list incoming transactions by label by ryanofsky)\n* #14410 (rpcwallet: 'ischange' field for 'getaddressinfo' RPC by mrwhythat)\n* #14350 (Add WalletLocation class by promag)\n* #14319 (doc: Fix PSBT howto and example parameters by priscoan)\n* #14296 ([wallet] Remove addwitnessaddress by jnewbery)\n* #14121 (Index for BIP 157 block filters by jimpo)\n* #14075 (Import watch only pubkeys to the keypool if private keys are disabled by achow101)\n* #14060 (ZMQ: add options to configure outbound message high water mark, aka SNDHWM by mruddy)\n* #14021 (Import key origin data through importmulti by achow101)\n* #13756 (wallet: -avoidreuse feature for improved privacy by kallewoof)\n* #13751 (Utils and libraries: Drops the boost/algorithm/string/split.hpp dependency by 251Labs)\n* #13743 (refactor: Replace boost::bind with std::bind by ken2812221)\n* #13541 (wallet/rpc: sendrawtransaction maxfeerate by kallewoof)\n* #13381 (RPC: creates possibility to preserve labels on importprivkey by marcoagner)\n* #12911 (wallet: Show fee in results for signrawtransaction* when known by kallewoof)\n* #12677 (RPC: Add ancestor{count,size,fees} to listunspent output by luke-jr)\n* #12674 (RPC: Support addnode onetry without making the connection priviliged by luke-jr)\n* #12096 ([rpc] [wallet] Allow specifying the output index when using bumpfee by kallewoof)\n* #11484 (Optional update rescan option in importmulti RPC by pedrobranco)\n* #11413 ([wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option by kallewoof)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-10-20T09:53:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-431566415",
      "id" : 431566415,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMTU2NjQxNQ==",
      "updated_at" : "2018-10-23T22:13:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431566415",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. However, this seems to be a large change that is probably impossible to review without splitting it up in smaller chunks and/or making it a scripted diff.\r\n\r\nWhile the change seems to touch every help text, it doesn't yet make it meaningfully easier to actually produce the help text machine-generated. You split out the rpc method name, but then pass all arguments as a single string and then each of them again as a \"`Row`\". This doens't really solve the issue that the documentation is inconsistent in itself (Starting with the white space and formatting of the single line arg string [cf. #14459] and going on to just forgetting the single line arg string [as in `importprunedfunds`], ...)\r\n\r\nIdeally we'd either merge some exhaustive fix similar to #14459 and then a pure scripted-diff to make it auto-generated (and check that the resulting documentation does not differ after the scripted-diff) or we do the auto-generation without the scripted diff and check that the resulting diff in the documentation looks similar to #14459.\r\n\r\nI have quickly hacked up a first step of how I think here: #14530\r\n\r\n",
      "created_at" : "2018-10-20T13:32:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-431582466",
      "id" : 431582466,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMTU4MjQ2Ng==",
      "updated_at" : "2018-10-20T13:32:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431582466",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for feedback.\r\n\r\nad script-diff: I can probably make it script-diffed, it will need some constistency fixed first so the text is parseable, but that can be done as a separate commit. (It is mostly whitespace, missing `:` after \"Arguments\" etc)\r\n\r\nad other notes:\r\n\r\nYes, this PR lets most of the arguments/\"rows\" be as-is, as the various styles seemed too different to me to make consistent, so I gave up and just let it be; I focused mainly on getting rid of the \"space-formatting\" and making it automatically consistent.\r\n\r\nIf the goal is indeed to make generation of, for example, the first-line argument etc more automatic, that can be done, but will take more time :) but sure, it will be a nicer code\r\n\r\nIf I got it correctly. Let's say, walletfundedpsbt\r\n\r\nhttps://bitcoincore.org/en/doc/0.17.0/rpc/wallet/walletcreatefundedpsbt/\r\n\r\nThe current RPC, at least start, is \r\n\r\n````\r\nwalletcreatefundedpsbt [{\"txid\":\"id\",\"vout\":n},...] [{\"address\":amount},{\"data\":\"hex\"},...] ( locktime ) ( replaceable ) ( options bip32derivs )\r\n\r\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\r\nImplements the Creator and Updater roles.\r\n\r\nArguments:\r\n1. \"inputs\"                (array, required) A json array of json objects\r\n     [\r\n       {\r\n         \"txid\":\"id\",      (string, required) The transaction id\r\n         \"vout\":n,         (numeric, required) The output number\r\n         \"sequence\":n      (numeric, optional) The sequence number\r\n       } \r\n       ,...\r\n     ]\r\n2. \"outputs\"               (array, required) a json array with outputs (key-value pairs)\r\n   [\r\n    {\r\n      \"address\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in BTC\r\n    },\r\n    {\r\n      \"data\": \"hex\"        (obj, optional) A key-value pair. The key must be \"data\", the value is hex encoded data\r\n    }\r\n    ,...                     More key-value pairs of the above form. For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\r\n                             accepted as second parameter.\r\n   ]\r\n````\r\n\r\nShould the \"subcodes\" in inputs/outputs arguments, and their help, be also generated from some object (that seems to be m_inner in your example)? Including all the \",....\" ? Should the first line stay like it is, or should it instead be `walletcreatefundedpsbt inputs outputs ( locktime ) ( replaceable ) ( options bip32derivs )`?\r\n\r\nI am just saying it will be pretty hard to do this, that's why I opted for \"just\" adding `Row` to each table (which also took care of all the Results, that have the same formatting logic). :) \r\n\r\nbut if the goal is indeed to make all the doc even more uniform, it's probably better than this \"naive\" approach that just formats the spaces\r\n\r\nedit: I look more closely at your #14530 and it indeed produces all the \"pseudo-objects\" on the left. OK",
      "created_at" : "2018-10-23T08:38:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-432152246",
      "id" : 432152246,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjE1MjI0Ng==",
      "updated_at" : "2018-10-23T08:50:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432152246",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "#14530 looks great, I will try to work on top of that",
      "created_at" : "2018-10-23T12:58:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-432236176",
      "id" : 432236176,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjIzNjE3Ng==",
      "updated_at" : "2018-10-23T12:58:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432236176",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-10-23T22:50:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-432449647",
      "id" : 432449647,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjQ0OTY0Nw==",
      "updated_at" : "2018-10-23T22:50:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432449647",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Closing this, in support of approach similar to https://github.com/bitcoin/bitcoin/pull/14530 \r\n\r\nIt will be harder to rewrite current source code to that, but ultimately will be more helpful.",
      "created_at" : "2018-10-24T12:32:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14502#issuecomment-432636184",
      "id" : 432636184,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14502",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjYzNjE4NA==",
      "updated_at" : "2018-10-24T12:32:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432636184",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   }
]
