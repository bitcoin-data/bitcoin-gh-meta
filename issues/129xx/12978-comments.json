[
   {
      "author_association" : "MEMBER",
      "body" : "I haven't yet been able to reproduce.  What I find most disturbing from staring at the debug logs in the travis failure (eg around here: https://travis-ci.org/bitcoin/bitcoin/jobs/366157920#L6672) is that the latest block generated on the node isn't being relayed to any peers -- neither the python mininode peers, nor the other bitcoind peer.  \r\n\r\nNot really sure how that can be happening (and only in this particular test?  seems like a block relay problem of this sort would cause widespread testing failures).  So hopefully I'm somehow just overlooking a particular quirk of the testing setup here.",
      "created_at" : "2018-04-13T17:10:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381201348",
      "id" : 381201348,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-13T17:10:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381201348",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Additional failure info, for reference:\r\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/365906782#L6785\r\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/365932697#L6788",
      "created_at" : "2018-04-13T17:23:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381204922",
      "id" : 381204922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-13T17:23:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381204922",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think I see what's going on here. There are two nodes under test:\r\n- node0\r\n- node1\r\n\r\nand three connections to those nodes:\r\n- self.test_node (connects to node0)\r\n- self.segwit_node (connects to node1 and signals NODE_NETWORK|NODE_WITNESS)\r\n- self.old_node (connects to node1 and signals NODE_NETWORK)\r\n\r\nThe test is failing in the call to `self.test_sendcmpct()` on line 807. Before that:\r\n\r\n1. The call to `self.test_sendcmpct()` on line 805 is generating blocks on node0 and checking that they're received by `self.test_node`.\r\n2. `sync_blocks(self.nodes)` on line 806 ensures that node1 is at the same tip as node0\r\n3. `self.test_sendcmpct()` on line generates blocks on node1 and checks that they're received by `self.segwit_node`.\r\n\r\nNote that the call to `sync_blocks` on 806 has not ensured that the blocks have been propagated to `self.segwit_node` or `self.old_node`. The test fails because it drops into `self.test_sendcmpct()`, and calls generate on node1 *before* node1 has propagated the block from node0 to `self.segwit_node`. After generate is called, the test is waiting for node1 to send the newly generated block to `self.segwit_node`, but the next inv from node1 to `self.segwit_node` is for the block previously generated by node0:\r\n\r\n```\r\nnode0 2018-04-13T13:07:45.809404Z ThreadRPCServer method=generate user=__cookie__               <--------- generate to node0 from self.test_sendcmpct() on line 805\r\n[...]\r\n node0 2018-04-13T13:07:45.812956Z CreateNewBlock(): block weight: 716 txs: 0 fees: 0 sigops 400 \r\n[...]\r\n node0 2018-04-13T13:07:45.815971Z UpdateTip: new best=23eb17fb1f4805b7c4adb768c250ff07a16aa16759839dc87c5ac98bd686705b height=111 version=0x20000000 log2_work=7.8073549 tx=113 date='2018-04-13T13:08:03Z' progress=1.000000 cache=0.0MiB(121txo) \r\n[...]\r\n node0 2018-04-13T13:07:45.816646Z sending headers (82 bytes) peer=0 \r\n[...]\r\n node1 2018-04-13T13:07:45.817742Z received: headers (82 bytes) peer=0    <---- node1 receives block\r\n[...]\r\n node1 2018-04-13T13:07:45.825341Z UpdateTip: new                         <--- node1 synced\r\n[...]\r\n node1 2018-04-13T13:07:45.827344Z ThreadRPCServer method=generate user=__cookie__              <--------- generate to node1 from self.test_sendcmpct() on line 807\r\n[...]\r\n node1 2018-04-13T13:07:45.830472Z UpdateTip: new best=7bfef9174d2d8c9bf165ce690b6eca7c2567fa52f3e6d9cb3d98d14327e87d33 height=112 version=0x20000000 log2_work=7.820179 tx=114 date='2018-04-13T13:08:03Z' progress=1.000000 cache=0.0MiB(122txo)                        <----------------- node1 tip advances. Test now waits for notification of block (check_announcement_of_new_block() on line 172)\r\n[...]\r\n node1 2018-04-13T13:07:45.831909Z SendMessages: sending inv peer=2 hash=23eb17fb1f4805b7c4adb768c250ff07a16aa16759839dc87c5ac98bd686705b            <---------- node1 sends the blockhash for the *old block* to segwit_node\r\n node1 2018-04-13T13:07:45.831954Z sending inv (37 bytes) peer=2 \r\n test  2018-04-13T13:07:45.832000Z TestFramework.mininode (DEBUG): Received message from 127.0.0.1:11458: msg_inv(inv=[CInv(type=Block hash=23eb17fb1f4805b7c4adb768c250ff07a16aa16759839dc87c5ac98bd686705b)]) \r\n[...]\r\n test  2018-04-13T13:08:15.877000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: (['        def received_hash():\\n', '            return (block_hash in self.announced_blockhashes)\\n'], 79)    <-------- test times out waiting for new block\r\n```\r\n\r\ncompare this with a passing case where the block from node0 is propagated to `self.segwit_node` *before* the `generate` call to node1.\r\n\r\nIt'd be nice to rewrite this test to not have so much state between the different nodes-under-test and test connections. If we fix this one timing issue, there's no guarantee that there aren't other similar issues that will be hit by travis.",
      "created_at" : "2018-04-13T18:40:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381225937",
      "id" : 381225937,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-14T01:27:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381225937",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've spoken to @sdaftuar - we think this may be a race in the validationinterface callbacks around `vBlockHashesToAnnounce`. Still investigating.",
      "created_at" : "2018-04-13T20:03:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381246578",
      "id" : 381246578,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-13T20:03:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381246578",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Caught it! https://travis-ci.org/jnewbery/bitcoin/jobs/366281859\r\n\r\nLooks like `UpdatedBlockTip()` is called in the wrong order:\r\n\r\n```\r\nnode1 2018-04-13T21:03:36.950443Z UpdateTip: new best=74fa99e8f6767f817000b9ddb050bb2fc53d329203d63f3a084d37300be894e9 height=111 version=0x20000000 log2_work=7.8073549 tx=113 date='2018-04-13T21:03:54Z' progress=1.000000 cache=0.0MiB(121txo) \r\n[...]\r\n node1 2018-04-13T21:03:36.955464Z UpdateTip: new best=57a644748fb3e38c225972bd2e3b0fd45e7665498ebd1fcaf8e37aa6c07ac886 height=112 version=0x20000000 log2_work=7.820179 tx=114 date='2018-04-13T21:03:54Z' progress=1.000000 cache=0.0MiB(122txo) \r\n```\r\n\r\nbut:\r\n\r\n```\r\nnode1 2018-04-13T21:03:36.955924Z UpdatedBlockTip callback: new block hash: 57a644748fb3e38c225972bd2e3b0fd45e7665498ebd1fcaf8e37aa6c07ac886 \r\n[...]\r\nnode1 2018-04-13T21:03:36.956569Z UpdatedBlockTip callback: new block hash: 74fa99e8f6767f817000b9ddb050bb2fc53d329203d63f3a084d37300be894e9 \r\n```",
      "created_at" : "2018-04-13T21:31:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381265760",
      "id" : 381265760,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-13T21:31:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381265760",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Had some offline conversations regarding this too. After @jnewbery's insights above and a bit of reading - I think what's happening is that cs_main is released in ActivateBestChain() between ActivateBestChainStep but before the UpdatedBlockTip callback has been enqueued. \r\n\r\nIn this particular case there are two threads now racing to enqueue an UpdatedBlockTip signal (the thread processing the block received over p2p and the thread which generated the block via rpc).\r\n\r\nAfter adding a randomized sleep (see below) you can reproduce this issue a bit more reliably:\r\n\r\n```\r\n        } // CS_MAIN RELEASED HERE\r\n        // When we reach this point, we switched to a new tip (stored in pindexNewTip).\r\n\r\n        // Notifications/callbacks that can run without cs_main\r\n        MilliSleep(GetRand(500));\r\n\r\n        // Notify external listeners about the new tip.\r\n        GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\r\n```\r\n\r\nI think a potential fix is to hold cs_main until the UpdatedBlockTip signals are enqueued? Once safely enqueued they should be processed in correct order by the scheduler thread.",
      "created_at" : "2018-04-14T15:17:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381336180",
      "id" : 381336180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-14T15:17:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381336180",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yea, should just hold cs_main there. I'd like to also fix the bug where we generate callbacks if a block connection failed ala https://github.com/bitcoin/bitcoin/pull/12138/commits/a9db3dada0119c183d16627805e90c4dbca05c6a but its somewhat tangential.",
      "created_at" : "2018-04-14T15:40:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381337878",
      "id" : 381337878,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-14T15:40:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381337878",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "#12988 is a minimal fix that should resolve this specific test failure\r\nWill also spend some time going through other signals to see if there are any analogous situations that should be proactively addressed",
      "created_at" : "2018-04-15T15:34:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381415328",
      "id" : 381415328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-15T15:34:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381415328",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Couldn't we add logic to `PeerLogicValidation::UpdatedBlockTip` so that it would't rewind? It could ignore out of order notifications if it's not a reorg? It already handles blocks in between:\r\nhttps://github.com/bitcoin/bitcoin/blob/0d6992168c2bda85b18fda8f6dea08da433a0dc9/src/net_processing.cpp#L923-L934\r\n",
      "created_at" : "2018-04-16T15:15:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381641105",
      "id" : 381641105,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-16T15:15:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381641105",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I think that the missed announcement is actually caused by the below (or maybe both)\r\n```\r\n// Requires cs_main\r\nbool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\r\n{\r\n    if (state->pindexBestKnownBlock && pindex == state->pindexBestKnownBlock->GetAncestor(pindex->nHeight))\r\n        return true;\r\n    if (state->pindexBestHeaderSent && pindex == state->pindexBestHeaderSent->GetAncestor(pindex->nHeight))\r\n        return true;\r\n    return false;\r\n}\r\n```\r\nBut anyway - even fixing that (which would substantially complicate the logic) - its difficult to assess how many other dependencies there are on this signal being properly ordered ",
      "created_at" : "2018-04-16T15:33:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381647253",
      "id" : 381647253,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-16T15:33:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381647253",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think requiring that UpdatedBlockTip callbacks happen in order is a far better design in the long run; being resilient to these happening out of order adds a level of complexity to the listeners that isn't necessary at all, especially now that the callbacks are actually happening in a separate thread.",
      "created_at" : "2018-04-16T15:44:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381651102",
      "id" : 381651102,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-16T15:44:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381651102",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sdaftuar @skeees makes sense.",
      "created_at" : "2018-04-16T20:53:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381745669",
      "id" : 381745669,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-16T20:53:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381745669",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Should we add thread-safety analysis annotations to make sure the locking requirements are fulfilled going forward?\r\n\r\nAre these the locks we want to be held?\r\n\r\n```\r\nboost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip\r\n    GUARDED_BY(cs_main);\r\n\r\nvoid UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload) \r\n    EXCLUSIVE_LOCKS_REQUIRED(cs_main);\r\n```",
      "created_at" : "2018-04-17T11:39:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381960010",
      "id" : 381960010,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-17T11:39:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381960010",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift I don't think that makes sense for [the reason I gave here](https://github.com/bitcoin/bitcoin/pull/12988#discussion_r182060600) -- we don't just need to hold a lock while invoking the callback, we also need to not have let it go from when the tip was updated.  I fear that adding checks on just holding the lock at the time the callbacks are called obscures the ordering requirement.\r\n\r\nI do think that we should add testing to ensure the ordering requirement is met; I was thinking a unit-test might work but I'd love to hear other ideas.",
      "created_at" : "2018-04-17T13:07:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381985529",
      "id" : 381985529,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-17T13:07:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381985529",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Apart from the test we have now which fails (but only sporadically) - I'm struggling a bit to think about what sort of test to add that would positively identify this if it broke again - what did you have in mind?\r\n\r\nI agree that adding a lock assert doesnt say much about what happened before the lock was acquired so doesn't really guarantee anything about atomicity from chain update to event invocation. I think a different solution is to lock down event generation to certain paths (e.g. in this case ActivateBestChain) - I don't think that breaks cleanliness of the interface - the interface is more to make it easy and generalized for subscribers, but event generation is still very context dependent. I don't know of any way to accomplish this easily in c++ though - anything  obvious come to mind?",
      "created_at" : "2018-04-17T13:26:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381991558",
      "id" : 381991558,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-17T13:26:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381991558",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh, also - I guess I should mention/shill this WIP pr https://github.com/bitcoin/bitcoin/pull/12934 I have out currently - its related. It creates a separate Validation thread and instead of threads calling directly into the validation layer - they just push messages onto a queue that the validation thread pulls from and processes completely and in order. \r\n\r\nIn addition to more cleanly defining the interfaces into validation paths - it also makes it a lot easier to reason about concurrency and parallelism because block validation paths become single threaded and well ordered. You also get the added benefit that you can more easily parallelize stuff that happens outside of validation by explicitly making validation interfaces asynchronous - but the main goal is to better define interfaces and simplify the concurrency model in the most logically complex validation paths.",
      "created_at" : "2018-04-17T13:39:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381995770",
      "id" : 381995770,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-17T13:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381995770",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Apart from the test we have now which fails (but only sporadically) - I'm struggling a bit to think about what sort of test to add that would positively identify this if it broke again - what did you have in mind?\r\n\r\nI haven't worked this out yet, but I was thinking that if we could mock out the scheduler that is used by the validationinterface, then we could play around with delays in callback enqueuing time to see if that breaks ordering when generating events from multiple threads?",
      "created_at" : "2018-04-17T14:00:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-382003153",
      "id" : 382003153,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12978",
      "updated_at" : "2018-04-17T14:00:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382003153",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   }
]
