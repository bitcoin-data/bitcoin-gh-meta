[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181830064"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181830064"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 16e4c4bed66e436be606b9cfc6fa982819f00b86: Should say \"changes\"?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-16T17:50:32Z",
      "diff_hunk" : "@@ -93,12 +107,22 @@ class CValidationInterface {\n     /**\n      * Notifies listeners of a block being disconnected\n      *\n+     * The ordering of BlockDisconnected and TransactionRemovedFromMempool\n+     * (for transactions removed due to memory constraints or lock time/\n+     * coinbase maturity chenges during the disconnection/reorg) is undefined,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181830064",
      "id" : 181830064,
      "original_commit_id" : "16e4c4bed66e436be606b9cfc6fa982819f00b86",
      "original_position" : 36,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 112522481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181830064",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181844101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181844101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit ff936aeea569a2ae56a3d9096a486fbd94b6dde7: I don't understand what this comment means. Mind to elaborate or remove?\r\n\r\nEdit: I presume instead of \"copy\" you mean \"witness\", since the witness might be different and it is no longer a copy?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-16T18:39:30Z",
      "diff_hunk" : "@@ -575,15 +580,18 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     }\n     // Before the txs in the new block have been removed from the mempool, update policy estimates\n     if (minerPolicyEstimator) {minerPolicyEstimator->processBlock(nBlockHeight, entries);}\n+    std::vector<CTransactionRef> txn_conflicts, txn_removed_in_block;\n+    txn_removed_in_block.reserve(vtx.size());\n     for (const auto& tx : vtx)\n     {\n         txiter it = mapTx.find(tx->GetHash());\n         if (it != mapTx.end()) {\n             setEntries stage;\n             stage.insert(it);\n             RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n+            txn_removed_in_block.push_back(tx); // Use the block's copy",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181844101",
      "id" : 181844101,
      "original_commit_id" : "ff936aeea569a2ae56a3d9096a486fbd94b6dde7",
      "original_position" : 36,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 112522481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181844101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181859836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181859836"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in commit db156ea327577fb1455049efe047e5722a18b1ab: Could add a semicolon, dot or new line to indicate the start of a new sentence. (before REPLACED)",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-16T19:34:41Z",
      "diff_hunk" : "@@ -418,8 +418,10 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n \n void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        // BLOCK and CONFLICT callbacks are generated in removeForBlock\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT &&\n+        reason != MemPoolRemovalReason::REPLACED) {\n+        // BLOCK and CONFLICT callbacks are generated in removeForBlock REPLACED",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181859836",
      "id" : 181859836,
      "original_commit_id" : "6b4e2a79e41401c6a39f7039b469d04e13fd3c83",
      "original_position" : 8,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 112522481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181859836",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181864451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181864451"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in commit 6b4e2a79e41401c6a39f7039b469d04e13fd3c83: Could add a comment to explain why `txn_replaced` is dropped?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-16T19:52:17Z",
      "diff_hunk" : "@@ -165,18 +165,22 @@ void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&\n     }\n }\n \n+void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef& ptx, const std::vector<CTransactionRef>& txn_replaced) {\n+    NotifyTransaction(ptx);\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181864451",
      "id" : 181864451,
      "original_commit_id" : "6b4e2a79e41401c6a39f7039b469d04e13fd3c83",
      "original_position" : 15,
      "path" : "src/zmq/zmqnotificationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 112522481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181864451",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181865943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181865943"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit db156ea327577fb1455049efe047e5722a18b1ab: You pass the block height, but it doesn't appear to be used anywhere?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-16T19:58:03Z",
      "diff_hunk" : "@@ -599,7 +599,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n         removeConflicts(*tx, txn_conflicts);\n         ClearPrioritisation(tx->GetHash());\n     }\n-    GetMainSignals().MempoolUpdatedForBlockConnect(std::move(txn_removed_in_block), std::move(txn_conflicts));\n+    GetMainSignals().MempoolUpdatedForBlockConnect(std::move(txn_removed_in_block), std::move(txn_conflicts), nBlockHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r181865943",
      "id" : 181865943,
      "original_commit_id" : "db156ea327577fb1455049efe047e5722a18b1ab",
      "original_position" : 5,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 112522481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181865943",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r182112893"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182112893"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Its used in #11775.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-17T15:20:28Z",
      "diff_hunk" : "@@ -599,7 +599,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n         removeConflicts(*tx, txn_conflicts);\n         ClearPrioritisation(tx->GetHash());\n     }\n-    GetMainSignals().MempoolUpdatedForBlockConnect(std::move(txn_removed_in_block), std::move(txn_conflicts));\n+    GetMainSignals().MempoolUpdatedForBlockConnect(std::move(txn_removed_in_block), std::move(txn_conflicts), nBlockHeight);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r182112893",
      "id" : 182112893,
      "in_reply_to_id" : 181865943,
      "original_commit_id" : "db156ea327577fb1455049efe047e5722a18b1ab",
      "original_position" : 5,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 112860221,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182112893",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r182112915"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182112915"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I just added a \"as per spec\" note that its clarified more in MempoolUpdatedForBlockConnect docs (\"The txn_removed_in_block txn are as they appear in the block, and may have different witnesses from the version which was previously in the mempool\").",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-17T15:20:31Z",
      "diff_hunk" : "@@ -575,15 +580,18 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     }\n     // Before the txs in the new block have been removed from the mempool, update policy estimates\n     if (minerPolicyEstimator) {minerPolicyEstimator->processBlock(nBlockHeight, entries);}\n+    std::vector<CTransactionRef> txn_conflicts, txn_removed_in_block;\n+    txn_removed_in_block.reserve(vtx.size());\n     for (const auto& tx : vtx)\n     {\n         txiter it = mapTx.find(tx->GetHash());\n         if (it != mapTx.end()) {\n             setEntries stage;\n             stage.insert(it);\n             RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n+            txn_removed_in_block.push_back(tx); // Use the block's copy",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r182112915",
      "id" : 182112915,
      "in_reply_to_id" : 181844101,
      "original_commit_id" : "ff936aeea569a2ae56a3d9096a486fbd94b6dde7",
      "original_position" : 36,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 112860246,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182112915",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "weak re-utACK e95db395592c763e8c77f619db7a8f5dbaa0a604 (Only changes were a rebase to solve conflicts and three minor comment clarifications)",
      "created_at" : "2018-04-17T16:02:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#issuecomment-382047786",
      "id" : 382047786,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12979",
      "updated_at" : "2018-04-17T16:02:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/382047786",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r182594424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182594424"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you break this line?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-18T23:05:54Z",
      "diff_hunk" : "@@ -1205,8 +1205,11 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n     }\n }\n \n-void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n+void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx, const std::vector<CTransactionRef>& txn_replaced) {\n     LOCK2(cs_main, cs_wallet);\n+\n+    for (const CTransactionRef& txit : txn_replaced) TransactionRemovedFromMempool(txit, MemPoolRemovalReason::REPLACED);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r182594424",
      "id" : 182594424,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 8,
      "path" : "src/wallet/wallet.cpp",
      "position" : 8,
      "pull_request_review_id" : 113422037,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182594424",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r182724028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182724028"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please no trivial changes to pull request with a ton of commits. It is always a pain to re-ACK, since a diff has to be done for every commit.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-19T12:12:23Z",
      "diff_hunk" : "@@ -1205,8 +1205,11 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n     }\n }\n \n-void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n+void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx, const std::vector<CTransactionRef>& txn_replaced) {\n     LOCK2(cs_main, cs_wallet);\n+\n+    for (const CTransactionRef& txit : txn_replaced) TransactionRemovedFromMempool(txit, MemPoolRemovalReason::REPLACED);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r182724028",
      "id" : 182724028,
      "in_reply_to_id" : 182594424,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 8,
      "path" : "src/wallet/wallet.cpp",
      "position" : 8,
      "pull_request_review_id" : 113577361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182724028",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r183101106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183101106"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Will do when another round of changes comes in after more review, until then agree with Marco, not worth a rebase for it.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-20T16:15:30Z",
      "diff_hunk" : "@@ -1205,8 +1205,11 @@ void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pin\n     }\n }\n \n-void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx) {\n+void CWallet::TransactionAddedToMempool(const CTransactionRef& ptx, const std::vector<CTransactionRef>& txn_replaced) {\n     LOCK2(cs_main, cs_wallet);\n+\n+    for (const CTransactionRef& txit : txn_replaced) TransactionRemovedFromMempool(txit, MemPoolRemovalReason::REPLACED);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r183101106",
      "id" : 183101106,
      "in_reply_to_id" : 182594424,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 8,
      "path" : "src/wallet/wallet.cpp",
      "position" : 8,
      "pull_request_review_id" : 114040157,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183101106",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "I'm confused, this removes the connect trace, but it's only refactoring?",
      "created_at" : "2018-04-26T19:11:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#issuecomment-384757747",
      "id" : 384757747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12979",
      "updated_at" : "2018-04-26T19:11:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384757747",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Still a big set of commits.\r\n\r\nIt seems like it would have been simpler to do:\r\n\r\n```\r\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason, std::vector<CTransactionRef>* txn_removed) {\r\n     // Remove transaction from memory pool\r\n     LOCK(cs);\r\n     setEntries setAllRemoves;\r\n     calculateRemoveRecursive(origTx, setAllRemoves);\r\n+    if (txn_removed != nullptr) {\r\n+        for (const txiter& it : setAllRemoves) {\r\n+            txn_removed->push_back(it->GetSharedTx());\r\n+        }\r\n+    }\r\n     RemoveStaged(setAllRemoves, false, reason);\r\n }\r\n```\r\n\r\nand pass in `&txn_removed` rather than duplicate the code. That would also avoid the need to split out `calculateRemoveRecursive()` from what I can see, though maybe another PR needs it? I'm not sure that `UpdateMempoolForReorg()` shouldn't also be tracking the conflicting txs it removes and issuing a notification anyway?\r\n\r\nOtherwise:\r\n\r\n* Pass new block height through MempoolUpdatedForBlock\r\n* Remove useless scope in AcceptToMemoryPoolWorker\r\n* Remove boost::signals from txmempool, call GetMainSignals() directly\r\n* Track the set of transactions removed/conflicted in removeForBlock\r\n* Split removeRecursive into calculate/remove steps\r\n* Pass MemPoolRemovalReason out through TransactionRemovedFromMempool\r\n\r\nall look fine and straightforward (and easily reviewable/mergeable if they were all there was).\r\n\r\nI haven't verified that the comments in\r\n\r\n* Clarify validationinterface notification ordering\r\n\r\nare actually correct. For what it's worth, a commit that documented what the ordering ideally would be (after all these commits, eg) and noted any deviations from that as TODOs (which then get removed in subsequent commits as they're fixed) might be/have been better?\r\n\r\nThat leaves these commits I'm not confident about:\r\n\r\n* Add txn_replaced to Added callback, remove lReplaced ATMP arg\r\n* BlockConnected(vtxConflicted) -> New MempoolInterface callback\r\n* Add a parallel validation interface for mempool events.\r\n\r\nEDIT: ~~In particular, there's a couple of changes in the \"Add txn_replaced\" commit that deal with (un)registering MempoolInterface that seem like they should be in an earlier commit, possibly the \"parallel validation interface for mempool events\" one?~~\r\n\r\nI'm not familiar with what `ConnectTrace` does or the impact of changing that area of code to be able to be confident in the BlockConnected... commit. Having one commit that just adds `MempoolUpdatedForBlockConnect` followed by one that removes ConnectTrace might be simpler to review? The MempoolUpdateForBlockConnect parts look good at least. Seems like the switch from BasicTestingSetup to TestingSetup for policyestimator_tests.cpp should be in one of the commits in \"Move fee estimator thread\" PR?",
      "created_at" : "2018-04-26T22:58:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#issuecomment-384813991",
      "id" : 384813991,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12979",
      "updated_at" : "2018-04-26T23:02:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384813991",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa yes. Because the validationinterface/mempoolinterface callbacks happen on a background thread, having an object which queues up callbacks for calling later is just redundant (as no other thread will be able to see an inconsistent state while we hold cs_main). The callbacks themselves should not change in that commit, it just removes a redundant queue.\r\n\r\n@ajtowns thanks for taking a look. I'm not actually sure what you mean in your suggestion with the patch there, can you clarify a bit further?",
      "created_at" : "2018-04-27T16:47:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#issuecomment-385028158",
      "id" : 385028158,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12979",
      "updated_at" : "2018-04-27T16:47:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385028158",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185045834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185045834"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Clarify validationinterface notification ordering\" (e7d7edc898c31ef37d6d64e61c72979c32253a43)\r\n\r\nI couldn't understand what \"without forward-progress\" means, and would appreciate any clarification. Does it just mean this can be called repeatedly with the same tip? (I asked about this previously in https://github.com/bitcoin/bitcoin/pull/11856#discussion_r158392479)",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-04-30T16:59:49Z",
      "diff_hunk" : "@@ -61,7 +61,14 @@ class CValidationInterface {\n      */\n     ~CValidationInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of updated block chain tip.\n+     *\n+     * Is called after a series of BlockConnected/BlockDisconnected events once\n+     * the chain has made forward progress and is now at the best-known-tip.\n+     *\n+     * If a block is found to be invalid, this event may trigger without\n+     * forward-progress, only to trigger again soon thereafter.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185045834",
      "id" : 185045834,
      "original_commit_id" : "e7d7edc898c31ef37d6d64e61c72979c32253a43",
      "original_position" : 11,
      "path" : "src/validationinterface.h",
      "position" : 123,
      "pull_request_review_id" : 116359334,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185045834",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185257376"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185257376"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should this be `BlockDisconnected/BlockConnected`?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-01T15:59:21Z",
      "diff_hunk" : "@@ -53,52 +58,120 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  */\n void SyncWithValidationInterfaceQueue();\n \n-class CValidationInterface {\n+/**\n+ * An interface to get callbacks about transactions entering and leaving\n+ * mempool.\n+ *\n+ * Any class which extends both MempoolInterface and CValidationInterface will\n+ * see all callbacks across both well-ordered (see individual callback text for\n+ * details on the order guarantees).\n+ *\n+ * Callbacks called on a background thread have a separate order from those\n+ * called on the thread generating the callbacks.\n+ */\n+class MempoolInterface {\n protected:\n     /**\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~CValidationInterface() = default;\n+    ~MempoolInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of a transaction having been added to mempool.\n      *\n      * Called on a background thread.\n      */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn, const std::vector<CTransactionRef>& txn_replaced) {}\n     /**\n-     * Notifies listeners of a transaction having been added to mempool.\n+     * Notifies listeners of a transaction leaving mempool.\n+     *\n+     * This only fires for transactions which leave mempool because of expiry,\n+     * size limiting, or reorg (changes in lock times/coinbase maturity). This\n+     * does not include any transactions which are included in\n+     * MempoolUpdatedForBlockConnect or TransactionAddedToMempool(txn_replaced)\n+     *\n+     * reason == REORG is not ordered with BlockDisconnected/BlockDisconnected!",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185257376",
      "id" : 185257376,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 64,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 116609288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185257376",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185257616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185257616"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't understand why this is an edge case or needs to be removed? Seems reasonable to remove txs from the mempool without necessarily needing to add other txs.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-01T16:00:19Z",
      "diff_hunk" : "@@ -53,52 +58,120 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  */\n void SyncWithValidationInterfaceQueue();\n \n-class CValidationInterface {\n+/**\n+ * An interface to get callbacks about transactions entering and leaving\n+ * mempool.\n+ *\n+ * Any class which extends both MempoolInterface and CValidationInterface will\n+ * see all callbacks across both well-ordered (see individual callback text for\n+ * details on the order guarantees).\n+ *\n+ * Callbacks called on a background thread have a separate order from those\n+ * called on the thread generating the callbacks.\n+ */\n+class MempoolInterface {\n protected:\n     /**\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~CValidationInterface() = default;\n+    ~MempoolInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of a transaction having been added to mempool.\n      *\n      * Called on a background thread.\n      */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn, const std::vector<CTransactionRef>& txn_replaced) {}\n     /**\n-     * Notifies listeners of a transaction having been added to mempool.\n+     * Notifies listeners of a transaction leaving mempool.\n+     *\n+     * This only fires for transactions which leave mempool because of expiry,\n+     * size limiting, or reorg (changes in lock times/coinbase maturity). This\n+     * does not include any transactions which are included in\n+     * MempoolUpdatedForBlockConnect or TransactionAddedToMempool(txn_replaced)\n+     *\n+     * reason == REORG is not ordered with BlockDisconnected/BlockDisconnected!\n+     *\n+     * Note that in some rare cases (eg mempool limiting) a\n+     * TransactionRemovedFromMempool event may fire with no corresponding\n+     * TransactionAddedToMempool event.\n+     * (TODO: remove this edge case)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185257616",
      "id" : 185257616,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 69,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 116609288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185257616",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185258701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185258701"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure if 'core' is the right word now that there are validation and mempool interfaces. Would 'chainstate' be better?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-01T16:04:46Z",
      "diff_hunk" : "@@ -23,15 +23,20 @@ class uint256;\n class CScheduler;\n class CTxMemPool;\n enum class MemPoolRemovalReason;\n+class MempoolInterface;\n \n // These functions dispatch to one or all registered wallets\n \n /** Register a wallet to receive updates from core */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185258701",
      "id" : 185258701,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 8,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 116609288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185258701",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185264767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185264767"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is still unclear (`as per spec` is not very meaningful for me). Suggested wording: `Use the tx as it appears in the block. See comment for MempoolUpdatedForBlockConnect() for details.` or similar\r\n",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-01T16:28:59Z",
      "diff_hunk" : "@@ -573,17 +585,21 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     }\n     // Before the txs in the new block have been removed from the mempool, update policy estimates\n     if (minerPolicyEstimator) {minerPolicyEstimator->processBlock(nBlockHeight, entries);}\n+    std::vector<CTransactionRef> txn_conflicts, txn_removed_in_block;\n+    txn_removed_in_block.reserve(vtx.size());\n     for (const auto& tx : vtx)\n     {\n         txiter it = mapTx.find(tx->GetHash());\n         if (it != mapTx.end()) {\n             setEntries stage;\n             stage.insert(it);\n             RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n+            txn_removed_in_block.push_back(tx); // Use the block's copy (as per spec)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185264767",
      "id" : 185264767,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 132,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 116609288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185264767",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185280866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185280866"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you add an `AssertLockHeld(cs_main);` to this function? `ConnectTip()` is only called by `ActivateBestChainStep()`, which holds `cs_main`.\r\n\r\nThis would make it clearer that MempoolUpdatedForBlockConnect is called immediately before its BlockConnected (ie we can't have two BlockConnected calls racing each other).\r\n",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-01T17:32:18Z",
      "diff_hunk" : "@@ -2319,78 +2314,11 @@ static int64_t nTimeFlush = 0;\n static int64_t nTimeChainState = 0;\n static int64_t nTimePostConnect = 0;\n \n-struct PerBlockConnectTrace {\n-    CBlockIndex* pindex = nullptr;\n-    std::shared_ptr<const CBlock> pblock;\n-    std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;\n-    PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}\n-};\n-/**\n- * Used to track blocks whose transactions were applied to the UTXO state as a\n- * part of a single ActivateBestChainStep call.\n- *\n- * This class also tracks transactions that are removed from the mempool as\n- * conflicts (per block) and can be used to pass all those transactions\n- * through SyncTransaction.\n- *\n- * This class assumes (and asserts) that the conflicted transactions for a given\n- * block are added via mempool callbacks prior to the BlockConnected() associated\n- * with those transactions. If any transactions are marked conflicted, it is\n- * assumed that an associated block will always be added.\n- *\n- * This class is single-use, once you call GetBlocksConnected() you have to throw\n- * it away and make a new one.\n- */\n-class ConnectTrace {\n-private:\n-    std::vector<PerBlockConnectTrace> blocksConnected;\n-    CTxMemPool &pool;\n-\n-public:\n-    explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n-        pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    ~ConnectTrace() {\n-        pool.NotifyEntryRemoved.disconnect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n-        assert(!blocksConnected.back().pindex);\n-        assert(pindex);\n-        assert(pblock);\n-        blocksConnected.back().pindex = pindex;\n-        blocksConnected.back().pblock = std::move(pblock);\n-        blocksConnected.emplace_back();\n-    }\n-\n-    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {\n-        // We always keep one extra block at the end of our list because\n-        // blocks are added after all the conflicted transactions have\n-        // been filled in. Thus, the last entry should always be an empty\n-        // one waiting for the transactions from the next block. We pop\n-        // the last entry here to make sure the list we return is sane.\n-        assert(!blocksConnected.back().pindex);\n-        assert(blocksConnected.back().conflictedTxs->empty());\n-        blocksConnected.pop_back();\n-        return blocksConnected;\n-    }\n-\n-    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n-        assert(!blocksConnected.back().pindex);\n-        if (reason == MemPoolRemovalReason::CONFLICT) {\n-            blocksConnected.back().conflictedTxs->emplace_back(std::move(txRemoved));\n-        }\n-    }\n-};\n-\n /**\n  * Connect a new block to chainActive. pblock is either nullptr or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n- *\n- * The block is added to connectTrace if connection succeeds.\n  */\n-bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, DisconnectedBlockTransactions &disconnectpool)\n {\n     assert(pindexNew->pprev == chainActive.Tip());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185280866",
      "id" : 185280866,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 798,
      "path" : "src/validation.cpp",
      "position" : 798,
      "pull_request_review_id" : 116609288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185280866",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185297003"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185297003"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I can't comment on the exact line above (currently L2361), but can you update:\r\n```\r\n     // Remove conflicting transactions from the mempool.;\r\n```\r\nto:\r\n```\r\n     // Remove conflicting transactions from the mempool. This will fire the MempoolUpdatedForBlockConnect() notification.\r\n```\r\nor similar",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-01T18:32:14Z",
      "diff_hunk" : "@@ -2441,7 +2369,7 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n     LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * MILLI, nTimeTotal * MICRO, nTimeTotal * MILLI / nBlocksTotal);\n \n-    connectTrace.BlockConnected(pindexNew, std::move(pthisBlock));\n+    GetMainSignals().BlockConnected(std::move(pthisBlock), pindexNew);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185297003",
      "id" : 185297003,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 805,
      "path" : "src/validation.cpp",
      "position" : 814,
      "pull_request_review_id" : 116609288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185297003",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185297406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185297406"
         }
      },
      "author_association" : "MEMBER",
      "body" : "micronit: this part of the comment was updated in the wrong commit (_Remove boost::signals from txmempool, call GetMainSignals() directly_ instead of _BlockConnected(vtxConflicted) -> New MempoolInterface callback_)",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-01T18:33:44Z",
      "diff_hunk" : "@@ -53,52 +58,120 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  */\n void SyncWithValidationInterfaceQueue();\n \n-class CValidationInterface {\n+/**\n+ * An interface to get callbacks about transactions entering and leaving\n+ * mempool.\n+ *\n+ * Any class which extends both MempoolInterface and CValidationInterface will\n+ * see all callbacks across both well-ordered (see individual callback text for\n+ * details on the order guarantees).\n+ *\n+ * Callbacks called on a background thread have a separate order from those\n+ * called on the thread generating the callbacks.\n+ */\n+class MempoolInterface {\n protected:\n     /**\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~CValidationInterface() = default;\n+    ~MempoolInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of a transaction having been added to mempool.\n      *\n      * Called on a background thread.\n      */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn, const std::vector<CTransactionRef>& txn_replaced) {}\n     /**\n-     * Notifies listeners of a transaction having been added to mempool.\n+     * Notifies listeners of a transaction leaving mempool.\n+     *\n+     * This only fires for transactions which leave mempool because of expiry,\n+     * size limiting, or reorg (changes in lock times/coinbase maturity). This\n+     * does not include any transactions which are included in\n+     * MempoolUpdatedForBlockConnect or TransactionAddedToMempool(txn_replaced)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185297406",
      "id" : 185297406,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 62,
      "path" : "src/validationinterface.h",
      "position" : 64,
      "pull_request_review_id" : 116609288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185297406",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185303587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185303587"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In fact, I think this comment is basically misleading. `TransactionRemovedFromMempool` no longer has a corresponding `TransactionAddedToMempool` event (`TransactionAddedToMempool` carries its own replaced txs).",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-01T18:57:25Z",
      "diff_hunk" : "@@ -53,52 +58,120 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  */\n void SyncWithValidationInterfaceQueue();\n \n-class CValidationInterface {\n+/**\n+ * An interface to get callbacks about transactions entering and leaving\n+ * mempool.\n+ *\n+ * Any class which extends both MempoolInterface and CValidationInterface will\n+ * see all callbacks across both well-ordered (see individual callback text for\n+ * details on the order guarantees).\n+ *\n+ * Callbacks called on a background thread have a separate order from those\n+ * called on the thread generating the callbacks.\n+ */\n+class MempoolInterface {\n protected:\n     /**\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~CValidationInterface() = default;\n+    ~MempoolInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of a transaction having been added to mempool.\n      *\n      * Called on a background thread.\n      */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn, const std::vector<CTransactionRef>& txn_replaced) {}\n     /**\n-     * Notifies listeners of a transaction having been added to mempool.\n+     * Notifies listeners of a transaction leaving mempool.\n+     *\n+     * This only fires for transactions which leave mempool because of expiry,\n+     * size limiting, or reorg (changes in lock times/coinbase maturity). This\n+     * does not include any transactions which are included in\n+     * MempoolUpdatedForBlockConnect or TransactionAddedToMempool(txn_replaced)\n+     *\n+     * reason == REORG is not ordered with BlockDisconnected/BlockDisconnected!\n+     *\n+     * Note that in some rare cases (eg mempool limiting) a\n+     * TransactionRemovedFromMempool event may fire with no corresponding\n+     * TransactionAddedToMempool event.\n+     * (TODO: remove this edge case)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185303587",
      "id" : 185303587,
      "in_reply_to_id" : 185257616,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 69,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 116609288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185303587",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185392382"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185392382"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The comment was referencing transactions which were never actually added to mempool but which we tried to add and then removed in the mempool limit pass before we ever generated a TransactionAddedToMempool callback for. Will look into making it more clear.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-02T04:46:03Z",
      "diff_hunk" : "@@ -53,52 +58,120 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  */\n void SyncWithValidationInterfaceQueue();\n \n-class CValidationInterface {\n+/**\n+ * An interface to get callbacks about transactions entering and leaving\n+ * mempool.\n+ *\n+ * Any class which extends both MempoolInterface and CValidationInterface will\n+ * see all callbacks across both well-ordered (see individual callback text for\n+ * details on the order guarantees).\n+ *\n+ * Callbacks called on a background thread have a separate order from those\n+ * called on the thread generating the callbacks.\n+ */\n+class MempoolInterface {\n protected:\n     /**\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~CValidationInterface() = default;\n+    ~MempoolInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of a transaction having been added to mempool.\n      *\n      * Called on a background thread.\n      */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn, const std::vector<CTransactionRef>& txn_replaced) {}\n     /**\n-     * Notifies listeners of a transaction having been added to mempool.\n+     * Notifies listeners of a transaction leaving mempool.\n+     *\n+     * This only fires for transactions which leave mempool because of expiry,\n+     * size limiting, or reorg (changes in lock times/coinbase maturity). This\n+     * does not include any transactions which are included in\n+     * MempoolUpdatedForBlockConnect or TransactionAddedToMempool(txn_replaced)\n+     *\n+     * reason == REORG is not ordered with BlockDisconnected/BlockDisconnected!\n+     *\n+     * Note that in some rare cases (eg mempool limiting) a\n+     * TransactionRemovedFromMempool event may fire with no corresponding\n+     * TransactionAddedToMempool event.\n+     * (TODO: remove this edge case)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185392382",
      "id" : 185392382,
      "in_reply_to_id" : 185257616,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 69,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 116769892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185392382",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185585758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185585758"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'll let @practicalswift get to that with EXCLUSIVE_LOCKS_REQUIRED additions. Would prefer to not add more AssertLockHelds that are just gonna get converted anyway (also, I think its assumed that everything in CChainState either takes, or requires, and certainly for private stuff requires, cs_main).",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-02T17:59:37Z",
      "diff_hunk" : "@@ -2319,78 +2314,11 @@ static int64_t nTimeFlush = 0;\n static int64_t nTimeChainState = 0;\n static int64_t nTimePostConnect = 0;\n \n-struct PerBlockConnectTrace {\n-    CBlockIndex* pindex = nullptr;\n-    std::shared_ptr<const CBlock> pblock;\n-    std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;\n-    PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}\n-};\n-/**\n- * Used to track blocks whose transactions were applied to the UTXO state as a\n- * part of a single ActivateBestChainStep call.\n- *\n- * This class also tracks transactions that are removed from the mempool as\n- * conflicts (per block) and can be used to pass all those transactions\n- * through SyncTransaction.\n- *\n- * This class assumes (and asserts) that the conflicted transactions for a given\n- * block are added via mempool callbacks prior to the BlockConnected() associated\n- * with those transactions. If any transactions are marked conflicted, it is\n- * assumed that an associated block will always be added.\n- *\n- * This class is single-use, once you call GetBlocksConnected() you have to throw\n- * it away and make a new one.\n- */\n-class ConnectTrace {\n-private:\n-    std::vector<PerBlockConnectTrace> blocksConnected;\n-    CTxMemPool &pool;\n-\n-public:\n-    explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n-        pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    ~ConnectTrace() {\n-        pool.NotifyEntryRemoved.disconnect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n-        assert(!blocksConnected.back().pindex);\n-        assert(pindex);\n-        assert(pblock);\n-        blocksConnected.back().pindex = pindex;\n-        blocksConnected.back().pblock = std::move(pblock);\n-        blocksConnected.emplace_back();\n-    }\n-\n-    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {\n-        // We always keep one extra block at the end of our list because\n-        // blocks are added after all the conflicted transactions have\n-        // been filled in. Thus, the last entry should always be an empty\n-        // one waiting for the transactions from the next block. We pop\n-        // the last entry here to make sure the list we return is sane.\n-        assert(!blocksConnected.back().pindex);\n-        assert(blocksConnected.back().conflictedTxs->empty());\n-        blocksConnected.pop_back();\n-        return blocksConnected;\n-    }\n-\n-    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n-        assert(!blocksConnected.back().pindex);\n-        if (reason == MemPoolRemovalReason::CONFLICT) {\n-            blocksConnected.back().conflictedTxs->emplace_back(std::move(txRemoved));\n-        }\n-    }\n-};\n-\n /**\n  * Connect a new block to chainActive. pblock is either nullptr or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n- *\n- * The block is added to connectTrace if connection succeeds.\n  */\n-bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, DisconnectedBlockTransactions &disconnectpool)\n {\n     assert(pindexNew->pprev == chainActive.Tip());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185585758",
      "id" : 185585758,
      "in_reply_to_id" : 185280866,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 798,
      "path" : "src/validation.cpp",
      "position" : 798,
      "pull_request_review_id" : 117004852,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:15:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185585758",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185592206"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185592206"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@TheBlueMatt I'm standing ready! :-)",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-02T18:19:53Z",
      "diff_hunk" : "@@ -2319,78 +2314,11 @@ static int64_t nTimeFlush = 0;\n static int64_t nTimeChainState = 0;\n static int64_t nTimePostConnect = 0;\n \n-struct PerBlockConnectTrace {\n-    CBlockIndex* pindex = nullptr;\n-    std::shared_ptr<const CBlock> pblock;\n-    std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;\n-    PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}\n-};\n-/**\n- * Used to track blocks whose transactions were applied to the UTXO state as a\n- * part of a single ActivateBestChainStep call.\n- *\n- * This class also tracks transactions that are removed from the mempool as\n- * conflicts (per block) and can be used to pass all those transactions\n- * through SyncTransaction.\n- *\n- * This class assumes (and asserts) that the conflicted transactions for a given\n- * block are added via mempool callbacks prior to the BlockConnected() associated\n- * with those transactions. If any transactions are marked conflicted, it is\n- * assumed that an associated block will always be added.\n- *\n- * This class is single-use, once you call GetBlocksConnected() you have to throw\n- * it away and make a new one.\n- */\n-class ConnectTrace {\n-private:\n-    std::vector<PerBlockConnectTrace> blocksConnected;\n-    CTxMemPool &pool;\n-\n-public:\n-    explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n-        pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    ~ConnectTrace() {\n-        pool.NotifyEntryRemoved.disconnect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n-        assert(!blocksConnected.back().pindex);\n-        assert(pindex);\n-        assert(pblock);\n-        blocksConnected.back().pindex = pindex;\n-        blocksConnected.back().pblock = std::move(pblock);\n-        blocksConnected.emplace_back();\n-    }\n-\n-    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {\n-        // We always keep one extra block at the end of our list because\n-        // blocks are added after all the conflicted transactions have\n-        // been filled in. Thus, the last entry should always be an empty\n-        // one waiting for the transactions from the next block. We pop\n-        // the last entry here to make sure the list we return is sane.\n-        assert(!blocksConnected.back().pindex);\n-        assert(blocksConnected.back().conflictedTxs->empty());\n-        blocksConnected.pop_back();\n-        return blocksConnected;\n-    }\n-\n-    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n-        assert(!blocksConnected.back().pindex);\n-        if (reason == MemPoolRemovalReason::CONFLICT) {\n-            blocksConnected.back().conflictedTxs->emplace_back(std::move(txRemoved));\n-        }\n-    }\n-};\n-\n /**\n  * Connect a new block to chainActive. pblock is either nullptr or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n- *\n- * The block is added to connectTrace if connection succeeds.\n  */\n-bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, DisconnectedBlockTransactions &disconnectpool)\n {\n     assert(pindexNew->pprev == chainActive.Tip());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185592206",
      "id" : 185592206,
      "in_reply_to_id" : 185280866,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 798,
      "path" : "src/validation.cpp",
      "position" : 798,
      "pull_request_review_id" : 117012563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T18:19:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185592206",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185629290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185629290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/core and mempool/validation and mempool",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-02T20:31:21Z",
      "diff_hunk" : "@@ -23,15 +23,20 @@ class uint256;\n class CScheduler;\n class CTxMemPool;\n enum class MemPoolRemovalReason;\n+class MempoolInterface;\n \n // These functions dispatch to one or all registered wallets\n \n-/** Register a wallet to receive updates from core */\n+/** Register a wallet to receive updates from validation */\n void RegisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister a wallet from core */\n+/** Unregister a wallet from validation */\n void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister all wallets from core */\n-void UnregisterAllValidationInterfaces();\n+/** Register a listener to receive updates from mempool */\n+void RegisterMempoolInterface(MempoolInterface* listener);\n+/** Unregister a listener from mempool */\n+void UnregisterMempoolInterface(MempoolInterface* listener);\n+/** Unregister all listeners from core and mempool */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185629290",
      "id" : 185629290,
      "original_commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "original_position" : 20,
      "path" : "src/validationinterface.h",
      "position" : 20,
      "pull_request_review_id" : 117057777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T20:48:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185629290",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185633968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185633968"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, I understand now. Suggested wording:\r\n\r\n`Note that a transaction may fire a TransactionRemovedFromMempool notification without having previously fired a TransactionAddedToMempool notification (for example if it passes all AcceptToMemoryPool checks, but isn't added to the mempool due to a LimitMempoolSize() step).` or similar",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-02T20:48:06Z",
      "diff_hunk" : "@@ -53,52 +58,120 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  */\n void SyncWithValidationInterfaceQueue();\n \n-class CValidationInterface {\n+/**\n+ * An interface to get callbacks about transactions entering and leaving\n+ * mempool.\n+ *\n+ * Any class which extends both MempoolInterface and CValidationInterface will\n+ * see all callbacks across both well-ordered (see individual callback text for\n+ * details on the order guarantees).\n+ *\n+ * Callbacks called on a background thread have a separate order from those\n+ * called on the thread generating the callbacks.\n+ */\n+class MempoolInterface {\n protected:\n     /**\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~CValidationInterface() = default;\n+    ~MempoolInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of a transaction having been added to mempool.\n      *\n      * Called on a background thread.\n      */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn, const std::vector<CTransactionRef>& txn_replaced) {}\n     /**\n-     * Notifies listeners of a transaction having been added to mempool.\n+     * Notifies listeners of a transaction leaving mempool.\n+     *\n+     * This only fires for transactions which leave mempool because of expiry,\n+     * size limiting, or reorg (changes in lock times/coinbase maturity). This\n+     * does not include any transactions which are included in\n+     * MempoolUpdatedForBlockConnect or TransactionAddedToMempool(txn_replaced)\n+     *\n+     * reason == REORG is not ordered with BlockDisconnected/BlockDisconnected!\n+     *\n+     * Note that in some rare cases (eg mempool limiting) a\n+     * TransactionRemovedFromMempool event may fire with no corresponding\n+     * TransactionAddedToMempool event.\n+     * (TODO: remove this edge case)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185633968",
      "id" : 185633968,
      "in_reply_to_id" : 185257616,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 69,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 117057777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T20:48:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185633968",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185634207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185634207"
         }
      },
      "author_association" : "MEMBER",
      "body" : "sure, sounds good",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-02T20:48:58Z",
      "diff_hunk" : "@@ -2319,78 +2314,11 @@ static int64_t nTimeFlush = 0;\n static int64_t nTimeChainState = 0;\n static int64_t nTimePostConnect = 0;\n \n-struct PerBlockConnectTrace {\n-    CBlockIndex* pindex = nullptr;\n-    std::shared_ptr<const CBlock> pblock;\n-    std::shared_ptr<std::vector<CTransactionRef>> conflictedTxs;\n-    PerBlockConnectTrace() : conflictedTxs(std::make_shared<std::vector<CTransactionRef>>()) {}\n-};\n-/**\n- * Used to track blocks whose transactions were applied to the UTXO state as a\n- * part of a single ActivateBestChainStep call.\n- *\n- * This class also tracks transactions that are removed from the mempool as\n- * conflicts (per block) and can be used to pass all those transactions\n- * through SyncTransaction.\n- *\n- * This class assumes (and asserts) that the conflicted transactions for a given\n- * block are added via mempool callbacks prior to the BlockConnected() associated\n- * with those transactions. If any transactions are marked conflicted, it is\n- * assumed that an associated block will always be added.\n- *\n- * This class is single-use, once you call GetBlocksConnected() you have to throw\n- * it away and make a new one.\n- */\n-class ConnectTrace {\n-private:\n-    std::vector<PerBlockConnectTrace> blocksConnected;\n-    CTxMemPool &pool;\n-\n-public:\n-    explicit ConnectTrace(CTxMemPool &_pool) : blocksConnected(1), pool(_pool) {\n-        pool.NotifyEntryRemoved.connect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    ~ConnectTrace() {\n-        pool.NotifyEntryRemoved.disconnect(boost::bind(&ConnectTrace::NotifyEntryRemoved, this, _1, _2));\n-    }\n-\n-    void BlockConnected(CBlockIndex* pindex, std::shared_ptr<const CBlock> pblock) {\n-        assert(!blocksConnected.back().pindex);\n-        assert(pindex);\n-        assert(pblock);\n-        blocksConnected.back().pindex = pindex;\n-        blocksConnected.back().pblock = std::move(pblock);\n-        blocksConnected.emplace_back();\n-    }\n-\n-    std::vector<PerBlockConnectTrace>& GetBlocksConnected() {\n-        // We always keep one extra block at the end of our list because\n-        // blocks are added after all the conflicted transactions have\n-        // been filled in. Thus, the last entry should always be an empty\n-        // one waiting for the transactions from the next block. We pop\n-        // the last entry here to make sure the list we return is sane.\n-        assert(!blocksConnected.back().pindex);\n-        assert(blocksConnected.back().conflictedTxs->empty());\n-        blocksConnected.pop_back();\n-        return blocksConnected;\n-    }\n-\n-    void NotifyEntryRemoved(CTransactionRef txRemoved, MemPoolRemovalReason reason) {\n-        assert(!blocksConnected.back().pindex);\n-        if (reason == MemPoolRemovalReason::CONFLICT) {\n-            blocksConnected.back().conflictedTxs->emplace_back(std::move(txRemoved));\n-        }\n-    }\n-};\n-\n /**\n  * Connect a new block to chainActive. pblock is either nullptr or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n- *\n- * The block is added to connectTrace if connection succeeds.\n  */\n-bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, DisconnectedBlockTransactions &disconnectpool)\n {\n     assert(pindexNew->pprev == chainActive.Tip());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185634207",
      "id" : 185634207,
      "in_reply_to_id" : 185280866,
      "original_commit_id" : "e95db395592c763e8c77f619db7a8f5dbaa0a604",
      "original_position" : 798,
      "path" : "src/validation.cpp",
      "position" : 798,
      "pull_request_review_id" : 117063822,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-02T20:48:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185634207",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185807826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185807826"
         }
      },
      "author_association" : "OWNER",
      "body" : "Thanks for adding the documentation.\r\nI think it'd be better to open an issue to track the TODOs, instead of putting them in the source code comments (this tends to get out of date very quickly).",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-03T14:01:27Z",
      "diff_hunk" : "@@ -53,46 +58,110 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  */\n void SyncWithValidationInterfaceQueue();\n \n-class CValidationInterface {\n+/**\n+ * An interface to get callbacks about transactions entering and leaving\n+ * mempool.\n+ *\n+ * Any class which extends both MempoolInterface and CValidationInterface will\n+ * see all callbacks across both well-ordered (see individual callback text for\n+ * details on the order guarantees).\n+ *\n+ * Callbacks called on a background thread have a separate order from those\n+ * called on the thread generating the callbacks.\n+ */\n+class MempoolInterface {\n protected:\n     /**\n      * Protected destructor so that instances can only be deleted by derived classes.\n      * If that restriction is no longer desired, this should be made public and virtual.\n      */\n-    ~CValidationInterface() = default;\n+    ~MempoolInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of a transaction having been added to mempool.\n      *\n      * Called on a background thread.\n      */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn, const std::vector<CTransactionRef>& txn_replaced) {}\n     /**\n-     * Notifies listeners of a transaction having been added to mempool.\n+     * Notifies listeners of a transaction leaving mempool.\n+     *\n+     * This only fires for transactions which leave mempool because of expiry,\n+     * size limiting, or reorg (changes in lock times/coinbase maturity). This\n+     * does not include any transactions which are included in\n+     * MempoolUpdatedForBlockConnect or TransactionAddedToMempool(txn_replaced)\n+     *\n+     * reason == REORG is not ordered with BlockConnected/BlockDisconnected!\n+     *\n+     * Note that in some rare cases (eg mempool limiting) a\n+     * TransactionRemovedFromMempool event may fire with no corresponding\n+     * TransactionAddedToMempool event for the same transaction.\n+     * (TODO: remove this edge case)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185807826",
      "id" : 185807826,
      "original_commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "original_position" : 71,
      "path" : "src/validationinterface.h",
      "position" : 71,
      "pull_request_review_id" : 117271806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-03T14:01:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185807826",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185813127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185813127"
         }
      },
      "author_association" : "OWNER",
      "body" : "What is the rationale to put mempool signals on something else than on the mempool itself (or an object contained in it)? \r\nNaively I'd think it'd be a more appropriate place than on the global validation interface.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-03T14:17:03Z",
      "diff_hunk" : "@@ -648,9 +647,6 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n-    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185813127",
      "id" : 185813127,
      "original_commit_id" : "4da034275353dc483f35a286b025ecfa7482e124",
      "original_position" : 12,
      "path" : "src/txmempool.h",
      "position" : 30,
      "pull_request_review_id" : 117278473,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-03T14:29:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185813127",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185906307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185906307"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "CTxMemPool isn't really \"the mempool\" its more like \"the data structure that stores mempool and has some of the logic from validation.cpp's mempool management stuff in it\". While it'd be nice to clean that up, I don't think its as cut-and-dry as \"belongs elsewhere\". More directly, the reason I wanted to do this is it means one less place we have to include boost signals in an included-everywhere .h file, and I'd like to be moving towards not using it even inside the validationinterface for more paralellism as we need it, eventually.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-03T19:05:43Z",
      "diff_hunk" : "@@ -648,9 +647,6 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n-    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r185906307",
      "id" : 185906307,
      "in_reply_to_id" : 185813127,
      "original_commit_id" : "4da034275353dc483f35a286b025ecfa7482e124",
      "original_position" : 12,
      "path" : "src/txmempool.h",
      "position" : 30,
      "pull_request_review_id" : 117391709,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-03T19:05:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185906307",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r186747801"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186747801"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@ryanofsky \"without forward-progress\" means being at a worse-tip than we were previously at before (less work, or same work but a block that sorts worse than our prior tip, eg we received it second) -- exposing such an intermediate state to listeners is a bug.  Note that this would be fixed by #13023.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-08T14:29:58Z",
      "diff_hunk" : "@@ -61,7 +61,14 @@ class CValidationInterface {\n      */\n     ~CValidationInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of updated block chain tip.\n+     *\n+     * Is called after a series of BlockConnected/BlockDisconnected events once\n+     * the chain has made forward progress and is now at the best-known-tip.\n+     *\n+     * If a block is found to be invalid, this event may trigger without\n+     * forward-progress, only to trigger again soon thereafter.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r186747801",
      "id" : 186747801,
      "in_reply_to_id" : 185045834,
      "original_commit_id" : "e7d7edc898c31ef37d6d64e61c72979c32253a43",
      "original_position" : 11,
      "path" : "src/validationinterface.h",
      "position" : 123,
      "pull_request_review_id" : 118387379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-16T13:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186747801",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 53b90df. Tested by running with `-debug=mempool`, sending to wallet and checking unconfirmed balance, spending from wallet and checking balance. Did not attempt to test conflicts/double spends.",
      "created_at" : "2018-05-11T00:19:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#issuecomment-388223339",
      "id" : 388223339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12979",
      "updated_at" : "2018-05-11T00:19:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388223339",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r187766482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187766482"
         }
      },
      "author_association" : "OWNER",
      "body" : "If CTxMempool isn't really \"the mempool\" that doesn't mean it shouldn't be. I think grouping the functionality for a certain concern together in one module makes sense.\r\nE.g. when trying to understand the code, \"Mempool\" is definitely a more useful conceptual grouping than \"all notification signals\".\r\nBut I don't feel strongly enough about this to NACK this.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-12T07:04:01Z",
      "diff_hunk" : "@@ -648,9 +647,6 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n-    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r187766482",
      "id" : 187766482,
      "in_reply_to_id" : 185813127,
      "original_commit_id" : "4da034275353dc483f35a286b025ecfa7482e124",
      "original_position" : 12,
      "path" : "src/txmempool.h",
      "position" : 30,
      "pull_request_review_id" : 119619404,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-12T07:04:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187766482",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r188603956"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188603956"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it would make sense to return both the version removed from the mempool and the version in the block, in the event that a malleated witness is mined.\r\n\r\nMy thinking is that listeners should either be expected to track everything they care about, in which case we should only return wtxid's to them when referencing something they've already seen, or they should not -- in which case we should give them full transactions everywhere.  Right now we're giving full transactions for the added to mempool and removed from mempool cases, so I think we should also give the full transaction in this last edge case, for completeness.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-16T12:23:23Z",
      "diff_hunk" : "@@ -575,15 +580,18 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     }\n     // Before the txs in the new block have been removed from the mempool, update policy estimates\n     if (minerPolicyEstimator) {minerPolicyEstimator->processBlock(nBlockHeight, entries);}\n+    std::vector<CTransactionRef> txn_conflicts, txn_removed_in_block;\n+    txn_removed_in_block.reserve(vtx.size());\n     for (const auto& tx : vtx)\n     {\n         txiter it = mapTx.find(tx->GetHash());\n         if (it != mapTx.end()) {\n             setEntries stage;\n             stage.insert(it);\n             RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n+            txn_removed_in_block.push_back(tx); // Use the block's copy as witness may be different",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r188603956",
      "id" : 188603956,
      "original_commit_id" : "1ea56d14aede2d58dc27a6e3578d40bb3e81d2c4",
      "original_position" : 36,
      "path" : "src/txmempool.cpp",
      "position" : 132,
      "pull_request_review_id" : 118387379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-16T13:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188603956",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r188608403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188608403"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it could make sense either way, with mempool signals living inside and coming from the mempool itself, or completely pulled out and coming from validation.cpp.  However it does seem suboptimal to have the call-sites be split, with some coming from validation.cpp and others coming from the mempool.\r\n\r\nIs it a design goal to eventually move all the call-sites to validation.cpp?  If so then I think this intermediate state is fine for now, as this is still overall an improvement (and it's the existing logic that is already split between ATMP living in validation.cpp, but removeForBlock living in txmempool.cpp), but I would suggest that we add some comments indicating that these invocations of GetMainSignals() should be moved out eventually.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-16T12:39:39Z",
      "diff_hunk" : "@@ -648,9 +647,6 @@ class CTxMemPool\n \n     size_t DynamicMemoryUsage() const;\n \n-    boost::signals2::signal<void (CTransactionRef)> NotifyEntryAdded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r188608403",
      "id" : 188608403,
      "in_reply_to_id" : 185813127,
      "original_commit_id" : "4da034275353dc483f35a286b025ecfa7482e124",
      "original_position" : 12,
      "path" : "src/txmempool.h",
      "position" : 30,
      "pull_request_review_id" : 118387379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-16T13:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188608403",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r188610254"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188610254"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I haven't though through the numbers required here to make this a practical DoS, but should we make sure to drain the callback queue before processing too many tx messages to prevent unbounded memory?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-16T12:46:25Z",
      "diff_hunk" : "@@ -2318,9 +2325,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n         }\n \n-        for (const CTransactionRef& removedTx : lRemovedTxn)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r188610254",
      "id" : 188610254,
      "original_commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "original_position" : 41,
      "path" : "src/net_processing.cpp",
      "position" : 50,
      "pull_request_review_id" : 118387379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-16T13:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188610254",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r188613243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188613243"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: would be nice to add a comment explaining what txn_replaced is.",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-16T12:55:57Z",
      "diff_hunk" : "@@ -81,14 +81,14 @@ class MempoolInterface {\n      *\n      * Called on a background thread.\n      */\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn, const std::vector<CTransactionRef>& txn_replaced) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r188613243",
      "id" : 188613243,
      "original_commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "original_position" : 5,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 118387379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-16T13:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188613243",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r189069737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189069737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: could add a small comment in this method to explain why txn_replaced can safely be dropped?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-05-17T19:09:28Z",
      "diff_hunk" : "@@ -165,18 +165,22 @@ void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef&\n     }\n }\n \n-void CZMQNotificationInterface::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted)\n+void CZMQNotificationInterface::TransactionAddedToMempool(const CTransactionRef& ptx, const std::vector<CTransactionRef>& txn_replaced) {\n+    NotifyTransaction(ptx);\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r189069737",
      "id" : 189069737,
      "original_commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "original_position" : 16,
      "path" : "src/zmq/zmqnotificationinterface.cpp",
      "position" : 16,
      "pull_request_review_id" : 121177631,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-05-17T19:09:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/189069737",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase.",
      "created_at" : "2018-05-21T19:26:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#issuecomment-390756546",
      "id" : 390756546,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12979",
      "updated_at" : "2018-05-21T19:26:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390756546",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r219880246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219880246"
         }
      },
      "author_association" : "MEMBER",
      "body" : "#13023 was merged so this TODO can be removed?",
      "commit_id" : "53b90df75c4d37c261c8ecfed5390bec24a44b6b",
      "created_at" : "2018-09-24T15:26:28Z",
      "diff_hunk" : "@@ -61,7 +61,14 @@ class CValidationInterface {\n      */\n     ~CValidationInterface() = default;\n     /**\n-     * Notifies listeners of updated block chain tip\n+     * Notifies listeners of updated block chain tip.\n+     *\n+     * Is called after a series of BlockConnected/BlockDisconnected events once\n+     * the chain has made forward progress and is now at the best-known-tip.\n+     *\n+     * If a block is found to be invalid, this event may trigger without\n+     * forward-progress, only to trigger again soon thereafter.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12979#discussion_r219880246",
      "id" : 219880246,
      "in_reply_to_id" : 185045834,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTg4MDI0Ng==",
      "original_commit_id" : "e7d7edc898c31ef37d6d64e61c72979c32253a43",
      "original_position" : 11,
      "path" : "src/validationinterface.h",
      "position" : 123,
      "pull_request_review_id" : 158159919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12979",
      "updated_at" : "2018-09-24T15:26:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219880246",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
