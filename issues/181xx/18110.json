{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "This has been discussed briefly with theuni and fanquake in the past, but I want to put it out there as an issue for more general discussion. I recommend reading through musl's project introduction [here](https://www.musl-libc.org/intro.html). Reproduced:\r\n\r\n> musl provides consistent quality and implementation behavior from tiny embedded systems to full-fledged servers. Minimal machine-specific code means less chance of breakage on minority architectures and better success with âwrite once run everywhereâ C development.\r\n>\r\n> musl's efficiency is unparalleled in Linux libc implementations. Designed from the ground up for static linking, musl carefully avoids pulling in large amounts of code or data that the application will not use. Dynamic linking is also efficient; by integrating the entire standard library implementation, including threads, math, and even the dynamic linker itself into a single shared object, most of the startup time and memory overhead of dynamic linking have been eliminated.\r\n>\r\n> musl features the first post-NPTL implementation of POSIX threads for Linux, and the first aimed at complete conformance and robustness. Thread cancellation has been re-designed to avoid serious race conditions in the original NPTL design. As for efficiency, the whole threads implementation weighs in at around 10-20k depending on target architecture and compiler settings.\r\n>\r\n> Not only the threads implementation, but all code in musl has been designed for realtime-quality robustness. Low-memory or resource exhaustion conditions are never fatal. musl has no unnecessary dynamic allocation and no unrecoverable late failures. All error conditions can be detected and handled by applications; interfaces for which an application could not reasonably handle failure do not fail.\r\n>\r\n> Using musl maximizes application deployability. Its permissive MIT license is compatible with all FOSS licenses, static-linking-friendly, and makes commercial use painless too. Binaries statically linked with musl have no external dependencies, even for features like DNS lookups or character set conversions that are implemented with dynamic loading on glibc. An application can really be deployed as a single binary file and run on any machine with the appropriate instruction set architecture and Linux kernel or Linux syscall ABI emulation layer.\r\n>\r\n> Finally, musl has simple source code and source tree layout, so itâs easy to customize or track down the cause of unexpected behavior or bugs, or simply learn how the library works.\r\n\r\nA few more resources for people to consider:\r\n\r\nIn-depth discussion of some design decisions: https://wiki.musl-libc.org/design-concepts.html\r\nA comparison of different libcs: http://www.etalabs.net/compare_libcs.html\r\nComprehensive compatibility information: https://wiki.musl-libc.org/compatibility.html\r\nFAQ: https://www.musl-libc.org/faq.html\r\n\r\nPerhaps being able to build fully-static Bitcoin Core binaries is a worthwhile features, as I've heard that glibc supports static builds in theory, but has many quirks in practice.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18110/comments",
   "created_at" : "2020-02-10T20:37:14Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18110/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/18110",
   "id" : 562813127,
   "labels" : [
      {
         "color" : "ebd775",
         "default" : false,
         "description" : null,
         "id" : 64584,
         "name" : "Brainstorming",
         "node_id" : "MDU6TGFiZWw2NDU4NA==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      },
      {
         "color" : "5319e7",
         "default" : false,
         "description" : null,
         "id" : 61889416,
         "name" : "Build system",
         "node_id" : "MDU6TGFiZWw2MTg4OTQxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system"
      },
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18110/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU1NjI4MTMxMjc=",
   "number" : 18110,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "build: Explore building with musl as libc",
   "updated_at" : "2020-02-10T21:02:00Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18110",
   "user" : {
      "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
      "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
      "followers_url" : "https://api.github.com/users/dongcarl/followers",
      "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/dongcarl",
      "id" : 3445290,
      "login" : "dongcarl",
      "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
      "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
      "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
      "repos_url" : "https://api.github.com/users/dongcarl/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/dongcarl"
   }
}
