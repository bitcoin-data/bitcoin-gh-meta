[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380680793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380680793"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "typo: s/defied/defined",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T13:47:45Z",
      "diff_hunk" : "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defied by DEFAULT_MEMPOOL_EXPIRY and a user",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380680793",
      "id" : 380680793,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4MDc5Mw==",
      "original_commit_id" : "a7aced8fb6f309ce02167590713b1827febcc7f7",
      "original_position" : 8,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360348882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380680793",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380682245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380682245"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could be moved to the top, right below `DEFAULT_MEMPOOL_EXPIRY`, to have all expiry constants at one place?",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T13:50:22Z",
      "diff_hunk" : "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defied by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (assert_equal, assert_raises_rpc_error,\n+                                 find_vout_for_address)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(\n+            str(timedelta(seconds=(nearly_expiry_time-entry_time)))))\n+        assert_equal(entry_time, node.getmempoolentry(parent_txid)[\"time\"])\n+\n+        # Transaction should be evicted from the mempool after the expiry time\n+        # has passed.\n+        expiry_time = entry_time + 60 * 60 * timeout + 5\n+        node.setmocktime(expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx expiry after {} hours.\".format(\n+            str(timedelta(seconds=(expiry_time-entry_time)))))\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, parent_txid)\n+\n+        # The child transaction should be removed from the mempool as well.\n+        self.log.info(\"Test child tx is evicted as well.\")\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, child_txid)\n+\n+    def run_test(self):\n+\n+        self.log.info(\"Test default mempool expiry timeout of %d hours.\" %\n+                      DEFAULT_MEMPOOL_EXPIRY)\n+        self.test_transaction_expiry(DEFAULT_MEMPOOL_EXPIRY)\n+\n+        self.log.info(\"----\")\n+\n+        CUSTOM_MEMPOOL_EXPIRY = 10",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380682245",
      "id" : 380682245,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4MjI0NQ==",
      "original_commit_id" : "a7aced8fb6f309ce02167590713b1827febcc7f7",
      "original_position" : 92,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360348882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380682245",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380685327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380685327"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If not all imports fit on one line, usually each import is on a single line, e.g.:\r\nhttps://github.com/bitcoin/bitcoin/blob/36f42e1bf43f2c9f3b4642814051cedf66f05a5e/test/functional/rpc_fundrawtransaction.py#L9-L18\r\n",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T13:55:36Z",
      "diff_hunk" : "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defied by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (assert_equal, assert_raises_rpc_error,\n+                                 find_vout_for_address)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380685327",
      "id" : 380685327,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4NTMyNw==",
      "original_commit_id" : "a7aced8fb6f309ce02167590713b1827febcc7f7",
      "original_position" : 17,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360348882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380685327",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thank you for the review @theStack! Addressed comments and force pushed.",
      "created_at" : "2020-02-18T14:20:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-587482492",
      "id" : 587482492,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NzQ4MjQ5Mg==",
      "updated_at" : "2020-02-18T14:20:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587482492",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380785284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380785284"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think `str(` is not needed when using `format(`",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T16:26:23Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380785284",
      "id" : 380785284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc4NTI4NA==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 58,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360483807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380785284",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380793633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380793633"
         }
      },
      "author_association" : "NONE",
      "body" : "will remove it on the next push",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T16:39:22Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380793633",
      "id" : 380793633,
      "in_reply_to_id" : 380785284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MzYzMw==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 58,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360494316,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380793633",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380935667"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935667"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, I'd drop this.",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T21:08:46Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(\n+            str(timedelta(seconds=(nearly_expiry_time-entry_time)))))\n+        assert_equal(entry_time, node.getmempoolentry(parent_txid)[\"time\"])\n+\n+        # Transaction should be evicted from the mempool after the expiry time\n+        # has passed.\n+        expiry_time = entry_time + 60 * 60 * timeout + 5\n+        node.setmocktime(expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx expiry after {} hours.\".format(\n+            str(timedelta(seconds=(expiry_time-entry_time)))))\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, parent_txid)\n+\n+        # The child transaction should be removed from the mempool as well.\n+        self.log.info(\"Test child tx is evicted as well.\")\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, child_txid)\n+\n+    def run_test(self):\n+\n+        self.log.info(\"Test default mempool expiry timeout of %d hours.\" %\n+                      DEFAULT_MEMPOOL_EXPIRY)\n+        self.test_transaction_expiry(DEFAULT_MEMPOOL_EXPIRY)\n+\n+        self.log.info(\"----\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380935667",
      "id" : 380935667,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNTY2Nw==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 94,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360673702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935667",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380935982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935982"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, add comment with unit.",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T21:09:24Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380935982",
      "id" : 380935982,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNTk4Mg==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 22,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360673702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380935982",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380936458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380936458"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, could stick to `\"` or `'` for strings. My preference is `'`.",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T21:10:14Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380936458",
      "id" : 380936458,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNjQ1OA==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 43,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360673702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380936458",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380937939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380937939"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, maybe keep these as comment instead? Not sure if logging this adds value.",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T21:12:54Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380937939",
      "id" : 380937939,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNzkzOQ==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 67,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360673702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380937939",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380938108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380938108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, drop empty line?",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T21:13:17Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(\n+            str(timedelta(seconds=(nearly_expiry_time-entry_time)))))\n+        assert_equal(entry_time, node.getmempoolentry(parent_txid)[\"time\"])\n+\n+        # Transaction should be evicted from the mempool after the expiry time\n+        # has passed.\n+        expiry_time = entry_time + 60 * 60 * timeout + 5\n+        node.setmocktime(expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx expiry after {} hours.\".format(\n+            str(timedelta(seconds=(expiry_time-entry_time)))))\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, parent_txid)\n+\n+        # The child transaction should be removed from the mempool as well.\n+        self.log.info(\"Test child tx is evicted as well.\")\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\",\n+                                node.getmempoolentry, child_txid)\n+\n+    def run_test(self):\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380938108",
      "id" : 380938108,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzODEwOA==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 89,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360673702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380938108",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380944577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380944577"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Logging is preferred over inline comments in the test because logging statements serve as \"checkpoints\" (to see how far a test run until failure). Also, they help to illustrate the test log better, which would otherwise only contain Bitcoin Core logs.",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T21:26:54Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380944577",
      "id" : 380944577,
      "in_reply_to_id" : 380937939,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NDU3Nw==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 67,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360684570,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380944577",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380947691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380947691"
         }
      },
      "author_association" : "MEMBER",
      "body" : "When a test fails we see trace. I think logging makes sense when it shows some computed values or so, which a trace doesn't help.",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T21:33:11Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380947691",
      "id" : 380947691,
      "in_reply_to_id" : 380937939,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NzY5MQ==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 67,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360688454,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380947691",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380953432"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380953432"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The trace is one data point that can help debug a test failure. The entire history of the log up to that point is also useful. For example transaction relay (inv-getdata) often takes several seconds, so it is useful to know when a subtest has started and when it ended. If some Bitcoin Core logs from one subtest interleave with the ones of another subtest we can conclude that we are missing a syncronisation call. This is the most common test error we are running into.",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T21:45:04Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380953432",
      "id" : 380953432,
      "in_reply_to_id" : 380937939,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MzQzMg==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 67,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360695668,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380953432",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380954952"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380954952"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes makes sense in those cases.",
      "commit_id" : "8cdee02ca72929e718d409801bd72a126faa356b",
      "created_at" : "2020-02-18T21:47:49Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests that a mempool transaction expires after a given timeout and that its\n+children are removed as well.\n+\n+Both the default expiry timeout defined by DEFAULT_MEMPOOL_EXPIRY and a user\n+definable expiry timeout via the '-mempoolexpiry=<n>' command line argument\n+(<n> is the timeout in hours) are tested.\n+\"\"\"\n+\n+from datetime import timedelta\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+\n+DEFAULT_MEMPOOL_EXPIRY = 336\n+CUSTOM_MEMPOOL_EXPIRY = 10\n+\n+\n+class MempoolExpiryTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_transaction_expiry(self, timeout):\n+        \"\"\"Tests that a transaction expires after the expiry timeout and its\n+        children are removed as well.\"\"\"\n+        node = self.nodes[0]\n+\n+        # Send a parent transaction that will expire.\n+        parent_address = node.getnewaddress()\n+        parent_txid = node.sendtoaddress(parent_address, 1.0)\n+\n+        # Set the mocktime to the arrival time of the parent transaction.\n+        entry_time = node.getmempoolentry(parent_txid)[\"time\"]\n+        node.setmocktime(entry_time)\n+\n+        # Create child transaction spending the parent transaction\n+        vout = find_vout_for_address(node, parent_txid, parent_address)\n+        inputs = [{'txid': parent_txid, 'vout': vout}]\n+        outputs = {node.getnewaddress(): 0.99}\n+        child_raw = node.createrawtransaction(inputs, outputs)\n+        child_signed = node.signrawtransactionwithwallet(child_raw)[\"hex\"]\n+\n+        # Let half of the timeout elapse and broadcast the child transaction.\n+        half_expiry_time = entry_time + int(60 * 60 * timeout/2)\n+        node.setmocktime(half_expiry_time)\n+        child_txid = node.sendrawtransaction(child_signed)\n+        self.log.info(\"Broadcast child transaction after {} hours.\".format(\n+            str(timedelta(seconds=(half_expiry_time-entry_time)))))\n+\n+        # Let most of the timeout elapse and check that the parent tx is still\n+        # in the mempool.\n+        nearly_expiry_time = entry_time + 60 * 60 * timeout - 5\n+        node.setmocktime(nearly_expiry_time)\n+        # Expiry of mempool transactions is only checked when a new transaction\n+        # is added to the to the mempool.\n+        node.sendtoaddress(node.getnewaddress(), 1.0)\n+        self.log.info(\"Test parent tx not expired after {} hours.\".format(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380954952",
      "id" : 380954952,
      "in_reply_to_id" : 380937939,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1NDk1Mg==",
      "original_commit_id" : "608c572077ff39d4183ac65aa0b332659977766a",
      "original_position" : 67,
      "path" : "test/functional/mempool_expiry.py",
      "position" : null,
      "pull_request_review_id" : 360697339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18172",
      "updated_at" : "2020-02-18T22:05:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/380954952",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thanks @promag and @MarcoFalke! Addressed nit's, but decided to keep https://github.com/bitcoin/bitcoin/pull/18172#discussion_r380937939 open for now. ",
      "created_at" : "2020-02-18T22:08:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-587927916",
      "id" : 587927916,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NzkyNzkxNg==",
      "updated_at" : "2020-02-18T22:08:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587927916",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK d6d2602a32251c1017da88b47c801b7283c66ce3",
      "created_at" : "2020-02-19T15:05:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-588280105",
      "id" : 588280105,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4ODI4MDEwNQ==",
      "updated_at" : "2020-02-19T15:05:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588280105",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK d6d2602a32251c1017da88b47c801b7283c66ce3",
      "created_at" : "2020-02-19T15:05:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-588280227",
      "id" : 588280227,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4ODI4MDIyNw==",
      "updated_at" : "2020-02-19T15:05:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588280227",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 18172](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18172/total.coverage/index.html), 8ed789fe4894a474074a55657b83f7d659aa35e0) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html), eb3c6b0912349873113bfd49baf1c505bb48d9cf)   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.0202 %            | 89.9453 %        |\n| Functions | +0.0000 %            | 85.8836 %        |\n| Branches  | +0.0241 %            | 51.5363 %        |\n\n<sup>Updated at: 2020-02-21T17:00:37.583978.</sup>\n",
      "created_at" : "2020-02-21T17:00:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-589742040",
      "id" : 589742040,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTc0MjA0MA==",
      "updated_at" : "2020-02-21T17:00:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589742040",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Before https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/src/validation.cpp.gcov.html#318\r\n\r\nAfter https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18172/total.coverage/src/validation.cpp.gcov.html#318",
      "created_at" : "2020-02-21T17:33:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18172#issuecomment-589754963",
      "id" : 589754963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18172",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTc1NDk2Mw==",
      "updated_at" : "2020-02-21T17:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589754963",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
