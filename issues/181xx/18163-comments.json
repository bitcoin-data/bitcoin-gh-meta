[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18204 (descriptors: improve descriptor cache and cache xpubs by achow101)\n* #16549 ([WIP] UI external signer support (e.g. hardware wallet) by Sjors)\n* #16546 ([WIP] External signer support - Wallet Box edition by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-02-17T03:53:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-586806563",
      "id" : 586806563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NjgwNjU2Mw==",
      "updated_at" : "2020-02-25T22:55:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586806563",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381209343"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381209343"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Travis doesn't like this: https://travis-ci.org/bitcoin/bitcoin/jobs/651243106#L4064\r\n\r\n```\r\nError: attempt to decrement a dereferenceable (start-of-sequence) iterator.\r\n```\r\n\r\nIt sounds like a job for `std::find_end` with a binary predicate, since you're looking for a hardened path element by an unhardened one. ",
      "commit_id" : "f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
      "created_at" : "2020-02-19T10:37:31Z",
      "diff_hunk" : "@@ -713,6 +716,51 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+        if (!hardened && type != DeriveType::HARDENED && path.size() > 0) {\n+            KeyOriginInfo last_hardened_info;\n+            CKeyID extpubkeyid = extpubkey.pubkey.GetID();\n+            std::copy(extpubkeyid.begin(), extpubkeyid.begin() + 4, last_hardened_info.fingerprint);\n+\n+            KeyPath::iterator it = path.end() - 1;\n+            for (; it >= path.begin(); it--) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381209343",
      "id" : 381209343,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwOTM0Mw==",
      "original_commit_id" : "c1068140edbeadfacb218241224d8109dd3ca56a",
      "original_position" : 31,
      "path" : "src/script/descriptor.cpp",
      "position" : null,
      "pull_request_review_id" : 361004852,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163",
      "updated_at" : "2020-02-21T19:49:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381209343",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is there a practical consideration for this change? It seems to make sense, just wondering if downstream applications are made easier by this or something.",
      "created_at" : "2020-02-19T13:56:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-588243652",
      "id" : 588243652,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4ODI0MzY1Mg==",
      "updated_at" : "2020-02-19T13:56:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588243652",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Is there a practical consideration for this change?\r\n\r\nIt would allow for descriptor wallets that import a descriptor with a private key and hardened steps to be able to derive scriptPubKeys without needing to be unlocked.",
      "created_at" : "2020-02-19T17:22:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-588339344",
      "id" : 588339344,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4ODMzOTM0NA==",
      "updated_at" : "2020-02-19T17:22:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588339344",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Adding that to OP would be OP\r\n\r\nconcept ACK!",
      "created_at" : "2020-02-19T17:26:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-588341241",
      "id" : 588341241,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4ODM0MTI0MQ==",
      "updated_at" : "2020-02-19T17:26:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588341241",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381599319"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381599319"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I was able to use `std::find_if` for this.",
      "commit_id" : "f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
      "created_at" : "2020-02-19T23:06:17Z",
      "diff_hunk" : "@@ -713,6 +716,51 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+        if (!hardened && type != DeriveType::HARDENED && path.size() > 0) {\n+            KeyOriginInfo last_hardened_info;\n+            CKeyID extpubkeyid = extpubkey.pubkey.GetID();\n+            std::copy(extpubkeyid.begin(), extpubkeyid.begin() + 4, last_hardened_info.fingerprint);\n+\n+            KeyPath::iterator it = path.end() - 1;\n+            for (; it >= path.begin(); it--) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381599319",
      "id" : 381599319,
      "in_reply_to_id" : 381209343,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5OTMxOQ==",
      "original_commit_id" : "c1068140edbeadfacb218241224d8109dd3ca56a",
      "original_position" : 31,
      "path" : "src/script/descriptor.cpp",
      "position" : null,
      "pull_request_review_id" : 361505014,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163",
      "updated_at" : "2020-02-21T19:49:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381599319",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381870224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381870224"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: add helper function in `key.h`: `bool DerivePath(CExtKey& out, KeyPath& path, bool neutered = false) const;`",
      "commit_id" : "f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
      "created_at" : "2020-02-20T09:14:35Z",
      "diff_hunk" : "@@ -713,6 +721,48 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+        if (!hardened && type != DeriveType::HARDENED && path.size() > 0) {\n+            KeyOriginInfo last_hardened_info;\n+            CKeyID extpubkeyid = extpubkey.pubkey.GetID();\n+            std::copy(extpubkeyid.begin(), extpubkeyid.begin() + 4, last_hardened_info.fingerprint);\n+\n+            // Finds the last hardened element\n+            // reverse_iterator::base() points to the next element, so the first unhardened step\n+            KeyPath::iterator last_hard_it = std::find_if(path.rbegin(), path.rend(), IsHardened).base();\n+\n+            last_hardened_info.path.insert(last_hardened_info.path.end(), path.begin(), last_hard_it);\n+\n+            // Only continue with this last hardened stuff if there are actually hardened steps in path\n+            if (!last_hardened_info.path.empty()) {\n+                // Derive that last hardened key",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381870224",
      "id" : 381870224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3MDIyNA==",
      "original_commit_id" : "0e54ba78ea7e7468ce5a185c4195b0dd58f3f82d",
      "original_position" : 50,
      "path" : "src/script/descriptor.cpp",
      "position" : 50,
      "pull_request_review_id" : 361737378,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163",
      "updated_at" : "2020-02-21T19:49:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381870224",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381887868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381887868"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: \"one\"",
      "commit_id" : "f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
      "created_at" : "2020-02-20T09:45:29Z",
      "diff_hunk" : "@@ -713,6 +721,48 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+        if (!hardened && type != DeriveType::HARDENED && path.size() > 0) {\n+            KeyOriginInfo last_hardened_info;\n+            CKeyID extpubkeyid = extpubkey.pubkey.GetID();\n+            std::copy(extpubkeyid.begin(), extpubkeyid.begin() + 4, last_hardened_info.fingerprint);\n+\n+            // Finds the last hardened element\n+            // reverse_iterator::base() points to the next element, so the first unhardened step\n+            KeyPath::iterator last_hard_it = std::find_if(path.rbegin(), path.rend(), IsHardened).base();\n+\n+            last_hardened_info.path.insert(last_hardened_info.path.end(), path.begin(), last_hard_it);\n+\n+            // Only continue with this last hardened stuff if there are actually hardened steps in path\n+            if (!last_hardened_info.path.empty()) {\n+                // Derive that last hardened key\n+                for (const uint32_t& i : last_hardened_info.path) {\n+                    CExtKey der;\n+                    extkey.Derive(der, i);\n+                    extkey = der;\n+                }\n+                extpubkey = extkey.Neuter();\n+                out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+                // Shorten path to the unhardened stuff\n+                if (last_hardened_info.path.size() < path.size()) {\n+                    // At least on step is unhardened",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381887868",
      "id" : 381887868,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4Nzg2OA==",
      "original_commit_id" : "0e54ba78ea7e7468ce5a185c4195b0dd58f3f82d",
      "original_position" : 61,
      "path" : "src/script/descriptor.cpp",
      "position" : null,
      "pull_request_review_id" : 361737378,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163",
      "updated_at" : "2020-02-21T19:49:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381887868",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381890427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381890427"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Duplicate line",
      "commit_id" : "f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
      "created_at" : "2020-02-20T09:49:52Z",
      "diff_hunk" : "@@ -713,6 +721,48 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+        if (!hardened && type != DeriveType::HARDENED && path.size() > 0) {\n+            KeyOriginInfo last_hardened_info;\n+            CKeyID extpubkeyid = extpubkey.pubkey.GetID();\n+            std::copy(extpubkeyid.begin(), extpubkeyid.begin() + 4, last_hardened_info.fingerprint);\n+\n+            // Finds the last hardened element\n+            // reverse_iterator::base() points to the next element, so the first unhardened step\n+            KeyPath::iterator last_hard_it = std::find_if(path.rbegin(), path.rend(), IsHardened).base();\n+\n+            last_hardened_info.path.insert(last_hardened_info.path.end(), path.begin(), last_hard_it);\n+\n+            // Only continue with this last hardened stuff if there are actually hardened steps in path\n+            if (!last_hardened_info.path.empty()) {\n+                // Derive that last hardened key\n+                for (const uint32_t& i : last_hardened_info.path) {\n+                    CExtKey der;\n+                    extkey.Derive(der, i);\n+                    extkey = der;\n+                }\n+                extpubkey = extkey.Neuter();\n+                out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+                // Shorten path to the unhardened stuff\n+                if (last_hardened_info.path.size() < path.size()) {\n+                    // At least on step is unhardened\n+                    KeyPath new_path;\n+                    new_path.insert(new_path.end(), last_hard_it, path.end());\n+                    path = new_path;\n+                } else {\n+                    // All steps are hardened\n+                    path.clear();\n+                }\n+\n+                // Make a BIP32PubkeyProvider for the unhardened derivation\n+                extpubkey = extkey.Neuter();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r381890427",
      "id" : 381890427,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5MDQyNw==",
      "original_commit_id" : "0e54ba78ea7e7468ce5a185c4195b0dd58f3f82d",
      "original_position" : 71,
      "path" : "src/script/descriptor.cpp",
      "position" : null,
      "pull_request_review_id" : 361737378,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163",
      "updated_at" : "2020-02-21T19:49:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/381890427",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> That said, I feel a bit ambivalent about adding origin info to descriptors that don't already have it. For example `pkh(xprv9...C2U/0'/0'/0)` becomes `pkh([bd16bee5/0'/0']xpub6AVD...pQKh/0)`. Perhaps normalisation should only happen for descriptors with origin info.\r\n\r\nThen we wouldn't achieve the primary goal of this PR. People could import xprvs without origin info that have some hardened derivation steps and we wouldn't be able to derive the public keys from them.\r\n\r\n> Also, an xpub encodes its depth, so if in the example the original xpriv depth wasn't 0 it would be weird (or maybe not; depends on if we interpret the fingerprint as depth 0).\r\n\r\nThe xpub at the end would still contain that depth information. Even without an origin info, an xprv could have a non-zero depth but that doesn't bother us.\r\n\r\n> Also, what would be the next step to have `InferDescriptor` benefit from this change? It would be nice to have `getaddressinfo` in return an xpub, instead of individual public key, for BIP44/49/84 style watch-only (legacy) wallets.\r\n\r\nI think that requires changes to `SigningProvider`.\r\n",
      "created_at" : "2020-02-21T16:25:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589727243",
      "id" : 589727243,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTcyNzI0Mw==",
      "updated_at" : "2020-02-21T16:25:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589727243",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r382722253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382722253"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
      "created_at" : "2020-02-21T17:55:58Z",
      "diff_hunk" : "@@ -713,6 +721,48 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+        if (!hardened && type != DeriveType::HARDENED && path.size() > 0) {\n+            KeyOriginInfo last_hardened_info;\n+            CKeyID extpubkeyid = extpubkey.pubkey.GetID();\n+            std::copy(extpubkeyid.begin(), extpubkeyid.begin() + 4, last_hardened_info.fingerprint);\n+\n+            // Finds the last hardened element\n+            // reverse_iterator::base() points to the next element, so the first unhardened step\n+            KeyPath::iterator last_hard_it = std::find_if(path.rbegin(), path.rend(), IsHardened).base();\n+\n+            last_hardened_info.path.insert(last_hardened_info.path.end(), path.begin(), last_hard_it);\n+\n+            // Only continue with this last hardened stuff if there are actually hardened steps in path\n+            if (!last_hardened_info.path.empty()) {\n+                // Derive that last hardened key",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r382722253",
      "id" : 382722253,
      "in_reply_to_id" : 381870224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMjI1Mw==",
      "original_commit_id" : "0e54ba78ea7e7468ce5a185c4195b0dd58f3f82d",
      "original_position" : 50,
      "path" : "src/script/descriptor.cpp",
      "position" : 50,
      "pull_request_review_id" : 362809781,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163",
      "updated_at" : "2020-02-21T19:49:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382722253",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r382722287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382722287"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
      "created_at" : "2020-02-21T17:56:03Z",
      "diff_hunk" : "@@ -713,6 +721,48 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+        if (!hardened && type != DeriveType::HARDENED && path.size() > 0) {\n+            KeyOriginInfo last_hardened_info;\n+            CKeyID extpubkeyid = extpubkey.pubkey.GetID();\n+            std::copy(extpubkeyid.begin(), extpubkeyid.begin() + 4, last_hardened_info.fingerprint);\n+\n+            // Finds the last hardened element\n+            // reverse_iterator::base() points to the next element, so the first unhardened step\n+            KeyPath::iterator last_hard_it = std::find_if(path.rbegin(), path.rend(), IsHardened).base();\n+\n+            last_hardened_info.path.insert(last_hardened_info.path.end(), path.begin(), last_hard_it);\n+\n+            // Only continue with this last hardened stuff if there are actually hardened steps in path\n+            if (!last_hardened_info.path.empty()) {\n+                // Derive that last hardened key\n+                for (const uint32_t& i : last_hardened_info.path) {\n+                    CExtKey der;\n+                    extkey.Derive(der, i);\n+                    extkey = der;\n+                }\n+                extpubkey = extkey.Neuter();\n+                out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+                // Shorten path to the unhardened stuff\n+                if (last_hardened_info.path.size() < path.size()) {\n+                    // At least on step is unhardened",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r382722287",
      "id" : 382722287,
      "in_reply_to_id" : 381887868,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMjI4Nw==",
      "original_commit_id" : "0e54ba78ea7e7468ce5a185c4195b0dd58f3f82d",
      "original_position" : 61,
      "path" : "src/script/descriptor.cpp",
      "position" : null,
      "pull_request_review_id" : 362809824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163",
      "updated_at" : "2020-02-21T19:49:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382722287",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r382722320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382722320"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed",
      "commit_id" : "f8274751f6eb7dbd2207ff4232131dfc0f9ff978",
      "created_at" : "2020-02-21T17:56:08Z",
      "diff_hunk" : "@@ -713,6 +721,48 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n     if (extkey.key.IsValid()) {\n         extpubkey = extkey.Neuter();\n         out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+        if (!hardened && type != DeriveType::HARDENED && path.size() > 0) {\n+            KeyOriginInfo last_hardened_info;\n+            CKeyID extpubkeyid = extpubkey.pubkey.GetID();\n+            std::copy(extpubkeyid.begin(), extpubkeyid.begin() + 4, last_hardened_info.fingerprint);\n+\n+            // Finds the last hardened element\n+            // reverse_iterator::base() points to the next element, so the first unhardened step\n+            KeyPath::iterator last_hard_it = std::find_if(path.rbegin(), path.rend(), IsHardened).base();\n+\n+            last_hardened_info.path.insert(last_hardened_info.path.end(), path.begin(), last_hard_it);\n+\n+            // Only continue with this last hardened stuff if there are actually hardened steps in path\n+            if (!last_hardened_info.path.empty()) {\n+                // Derive that last hardened key\n+                for (const uint32_t& i : last_hardened_info.path) {\n+                    CExtKey der;\n+                    extkey.Derive(der, i);\n+                    extkey = der;\n+                }\n+                extpubkey = extkey.Neuter();\n+                out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+\n+                // Shorten path to the unhardened stuff\n+                if (last_hardened_info.path.size() < path.size()) {\n+                    // At least on step is unhardened\n+                    KeyPath new_path;\n+                    new_path.insert(new_path.end(), last_hard_it, path.end());\n+                    path = new_path;\n+                } else {\n+                    // All steps are hardened\n+                    path.clear();\n+                }\n+\n+                // Make a BIP32PubkeyProvider for the unhardened derivation\n+                extpubkey = extkey.Neuter();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#discussion_r382722320",
      "id" : 382722320,
      "in_reply_to_id" : 381890427,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyMjMyMA==",
      "original_commit_id" : "0e54ba78ea7e7468ce5a185c4195b0dd58f3f82d",
      "original_position" : 71,
      "path" : "src/script/descriptor.cpp",
      "position" : null,
      "pull_request_review_id" : 362809873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18163",
      "updated_at" : "2020-02-21T19:49:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382722320",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK b674297c7c491ea09cef171ed083533f23c9ffa9\r\n\r\nI've never imported keys without origin info, but if you find it useful, I'm fine with supporting it.",
      "created_at" : "2020-02-21T18:42:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589781864",
      "id" : 589781864,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTc4MTg2NA==",
      "updated_at" : "2020-02-21T18:42:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589781864",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Had to rebase",
      "created_at" : "2020-02-21T19:50:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589808558",
      "id" : 589808558,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTgwODU1OA==",
      "updated_at" : "2020-02-21T19:50:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589808558",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review re-ACK f8274751f6eb7dbd2207ff4232131dfc0f9ff978 (rebased on #18034)",
      "created_at" : "2020-02-21T21:43:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589849715",
      "id" : 589849715,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTg0OTcxNQ==",
      "updated_at" : "2020-02-21T21:43:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589849715",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I discussed this with @achow101 IRL.\n\nOne alternative I'd like to see explored is instead of rewriting the descriptor itself, having an \"xpub cache\" added to the descriptor interface (and later the wallet itself), similar to the existing pubkey cache, but shared across indexes. This would have all the availability benefits of a change like this, but also speed up operations on descriptors that include several non-hardened steps in xpubs.",
      "created_at" : "2020-02-22T17:53:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589981472",
      "id" : 589981472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTk4MTQ3Mg==",
      "updated_at" : "2020-02-22T17:53:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589981472",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "That would take case of this TODO, right?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/ab9de435880c9d77e4137b65050591ef2d14f809/src/script/descriptor.cpp#L286-L291\r\n\r\nRewriting the descriptor has merit in any case; a descriptor like `wpkh([d34db33f/xpub /0'/0'].../*)` makes no sense, because you can't actually derive any addresses without also knowing the `xpriv`. Whereas with `wpkh([d34db33f/0'/0']xpub.../*)` you can. Normalising makes them more straight-forward to share.\r\n\r\nFor BIP44/49/84 style descriptors (`wpkh([d34db33f/84'/0'/0']xpub.../0/*)`) it would indeed make sense to cache an xpub for the `0` after the visible `xpub`. But I think that can be hidden as an ephemeral implementation detail; I don't think it needs to be serialised into the wallet payload. Unlike the individual key cache, the savings don't scale with wallet size.",
      "created_at" : "2020-02-22T18:57:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-589987371",
      "id" : 589987371,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTk4NzM3MQ==",
      "updated_at" : "2020-02-22T18:57:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589987371",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "something \"like\" this is probably nice to have for multisig setups. I'm looking into it for a `dumpdescriptors` RPC command for that type of setup",
      "created_at" : "2020-04-08T15:44:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18163#issuecomment-611034886",
      "id" : 611034886,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18163",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMTAzNDg4Ng==",
      "updated_at" : "2020-04-08T15:44:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/611034886",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   }
]
