[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2020-02-22T09:26:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-589936663",
      "id" : 589936663,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTkzNjY2Mw==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589936663/reactions"
      },
      "updated_at" : "2020-09-04T15:18:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589936663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384107992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384107992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Github won't let me leave a comment up at line 106, so I'm leaving it here.  I think the change in this commit of trying to not include things in `exclude` is broken, because it's possible you'll have a cache entry hit for something that is excluded, and then because things that are in the cache get swapped at line 106 to an entry in the vector that `already_traversed` is advanced past, you'll never pop it before you get down to this loop.\r\n\r\nI tend to think that this improvement to leaving things out from exclude isn't worth it; seems like quite a bit of added complexity to this logic without an obvious performance improvement.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-02-25T20:28:03Z",
      "diff_hunk" : "@@ -108,18 +122,23 @@ void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache, const s\n     int64_t modify_size = 0;\n     CAmount modify_fee = 0;\n     int64_t modify_count = 0;\n+    // All entries in the update_cache have\n+    // already been checked against excluded list\n     for (txiter child_it : update_cache) {\n         const CTxMemPoolEntry& child = *child_it;\n-        if (!exclude.count(child.GetTx().GetHash())) {\n-            modify_size += child.GetTxSize();\n-            modify_fee += child.GetModifiedFee();\n-            modify_count++;\n-            mapTx.modify(child_it, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n-        }\n+        modify_size += child.GetTxSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384107992",
      "id" : 384107992,
      "line" : 123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwNzk5Mg==",
      "original_commit_id" : "ec237cf8c640f9e85c3c7aad0d3eb243a346b1f9",
      "original_line" : 123,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 85,
      "pull_request_review_id" : 364424930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384107992",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384108456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384108456"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I overlooked this issue in #18120 -- is this the regression you're referring to in the commit message?",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-02-25T20:28:59Z",
      "diff_hunk" : "@@ -108,18 +122,23 @@ void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache, const s\n     int64_t modify_size = 0;\n     CAmount modify_fee = 0;\n     int64_t modify_count = 0;\n+    // All entries in the update_cache have\n+    // already been checked against excluded list\n     for (txiter child_it : update_cache) {\n         const CTxMemPoolEntry& child = *child_it;\n-        if (!exclude.count(child.GetTx().GetHash())) {\n-            modify_size += child.GetTxSize();\n-            modify_fee += child.GetModifiedFee();\n-            modify_count++;\n-            mapTx.modify(child_it, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n-        }\n+        modify_size += child.GetTxSize();\n+        modify_fee += child.GetModifiedFee();\n+        modify_count++;\n+        mapTx.modify(child_it, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n     }\n     mapTx.modify(update_it, update_descendant_state(modify_size, modify_fee, modify_count));\n     // share the cache (if there is one)\n-    if (!update_cache.empty()) cache.emplace(update_it, std::move(update_cache));\n+    if (!update_cache.empty()) {\n+        // Ask to shrink to fit if we're using space poorly\n+        if (update_cache.size() > 100 && update_cache.capacity() > 2 * update_cache.size())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384108456",
      "id" : 384108456,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwODQ1Ng==",
      "original_commit_id" : "ec237cf8c640f9e85c3c7aad0d3eb243a346b1f9",
      "original_line" : 138,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 364424930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384108456",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384734328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384734328"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nope this is *as a result* of the fix, we sometimes now have a cache that is too big because we remove things from the cache if they are in exclude. We could not do this -- and then it would still be possible for the cache entries to have an excess of O(direct children in exlcude), rather than O(exclude) without this patch, and an excess of 100 or not more than 2*size with this patch. It also only does anything on systems that implement shrink_to_fit fwiw.\r\n\r\n\r\nI'll tag you on the relevant line....",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-02-26T20:04:19Z",
      "diff_hunk" : "@@ -108,18 +122,23 @@ void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache, const s\n     int64_t modify_size = 0;\n     CAmount modify_fee = 0;\n     int64_t modify_count = 0;\n+    // All entries in the update_cache have\n+    // already been checked against excluded list\n     for (txiter child_it : update_cache) {\n         const CTxMemPoolEntry& child = *child_it;\n-        if (!exclude.count(child.GetTx().GetHash())) {\n-            modify_size += child.GetTxSize();\n-            modify_fee += child.GetModifiedFee();\n-            modify_count++;\n-            mapTx.modify(child_it, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n-        }\n+        modify_size += child.GetTxSize();\n+        modify_fee += child.GetModifiedFee();\n+        modify_count++;\n+        mapTx.modify(child_it, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n     }\n     mapTx.modify(update_it, update_descendant_state(modify_size, modify_fee, modify_count));\n     // share the cache (if there is one)\n-    if (!update_cache.empty()) cache.emplace(update_it, std::move(update_cache));\n+    if (!update_cache.empty()) {\n+        // Ask to shrink to fit if we're using space poorly\n+        if (update_cache.size() > 100 && update_cache.capacity() > 2 * update_cache.size())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384734328",
      "id" : 384734328,
      "in_reply_to_id" : 384108456,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczNDMyOA==",
      "original_commit_id" : "ec237cf8c640f9e85c3c7aad0d3eb243a346b1f9",
      "original_line" : 138,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 365203421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384734328",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384735187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384735187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We hold the invariant that everything in the cache is not excluded? So how would this have a bug?",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-02-26T20:05:45Z",
      "diff_hunk" : "@@ -108,18 +122,23 @@ void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache, const s\n     int64_t modify_size = 0;\n     CAmount modify_fee = 0;\n     int64_t modify_count = 0;\n+    // All entries in the update_cache have\n+    // already been checked against excluded list\n     for (txiter child_it : update_cache) {\n         const CTxMemPoolEntry& child = *child_it;\n-        if (!exclude.count(child.GetTx().GetHash())) {\n-            modify_size += child.GetTxSize();\n-            modify_fee += child.GetModifiedFee();\n-            modify_count++;\n-            mapTx.modify(child_it, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n-        }\n+        modify_size += child.GetTxSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384735187",
      "id" : 384735187,
      "in_reply_to_id" : 384107992,
      "line" : 123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczNTE4Nw==",
      "original_commit_id" : "ec237cf8c640f9e85c3c7aad0d3eb243a346b1f9",
      "original_line" : 123,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 85,
      "pull_request_review_id" : 365204339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384735187",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384740067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384740067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah I see what you're saying. See comment above, will fix.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-02-26T20:15:44Z",
      "diff_hunk" : "@@ -108,18 +122,23 @@ void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache, const s\n     int64_t modify_size = 0;\n     CAmount modify_fee = 0;\n     int64_t modify_count = 0;\n+    // All entries in the update_cache have\n+    // already been checked against excluded list\n     for (txiter child_it : update_cache) {\n         const CTxMemPoolEntry& child = *child_it;\n-        if (!exclude.count(child.GetTx().GetHash())) {\n-            modify_size += child.GetTxSize();\n-            modify_fee += child.GetModifiedFee();\n-            modify_count++;\n-            mapTx.modify(child_it, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n-        }\n+        modify_size += child.GetTxSize();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r384740067",
      "id" : 384740067,
      "in_reply_to_id" : 384107992,
      "line" : 123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MDA2Nw==",
      "original_commit_id" : "ec237cf8c640f9e85c3c7aad0d3eb243a346b1f9",
      "original_line" : 123,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 85,
      "pull_request_review_id" : 365210436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384740067",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed and updated comment.",
      "created_at" : "2020-03-03T04:46:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-593765658",
      "id" : 593765658,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5Mzc2NTY1OA==",
      "updated_at" : "2020-03-03T04:46:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593765658",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sorry for all the line noise; I realized I forgot to add a continue, and then decided that I could DRY up the code a bit. I'm pretty happy with the final version, I think it's a bit easier to view because we don't treat update_it special from other iterators we walk (other than it not going into the cache line).\r\n\r\nI can squash this all down into one commit and replace #18120.",
      "created_at" : "2020-03-03T05:55:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-593781580",
      "id" : 593781580,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5Mzc4MTU4MA==",
      "updated_at" : "2020-03-03T05:55:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593781580",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-03-29T17:43:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-605673033",
      "id" : 605673033,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTY3MzAzMw==",
      "updated_at" : "2020-03-29T17:43:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605673033",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r399846953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399846953"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm confused with \"... have already been checked against _excluded list_\". Which list?",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-29T20:10:36Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r399846953",
      "id" : 399846953,
      "line" : 120,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg0Njk1Mw==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 120,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 82,
      "pull_request_review_id" : 383450072,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399846953",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r399892304"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399892304"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "mapMemPoolDescebdabtsToUpdate grows to contain the set of things to exclude while processing.\r\n\r\nPreviously this list was explicitly constructed, now it's implicit",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T02:02:59Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r399892304",
      "id" : 399892304,
      "in_reply_to_id" : 399846953,
      "line" : 120,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5MjMwNA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 120,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 82,
      "pull_request_review_id" : 383491437,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399892304",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "IIUC, the first pass of the `do ... while (true);` loop just emplaces all of the direct descendants of `update_it` tx, i.e., its children, to the `new_cache_line`, and taints their `m_epoch`. All of the following loop passes process grand children, grand-grand children and so on. And two thing are confusing to me:\r\n\r\n1) the following comment: https://github.com/bitcoin/bitcoin/blob/32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a/src/txmempool.cpp#L79-L80\r\n\r\nI'd suggest to remove it completely.\r\n\r\n2) the following variable name: https://github.com/bitcoin/bitcoin/blob/32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a/src/txmempool.cpp#L87\r\n\r\nI'd suggest:\r\n- s/`cached_grand_children`/`cached_descendants`/\r\n- s/`grand_child_it`/`descendant_it`/\r\n- s/`the grand child`/`the descendant`/ in the comment\r\n\r\nEDIT: I realized, that you mean \"children\" and \"grandchildren\" relative to an element of the `new_cache_line`. So, ignore my suggestion (2).",
      "created_at" : "2020-03-30T08:41:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-605863701",
      "id" : 605863701,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTg2MzcwMQ==",
      "updated_at" : "2020-03-30T08:56:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605863701",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400041234"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400041234"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Previously this list was explicitly constructed, now it's implicit\r\n\r\nYes. And the new logic does not apply any rule or list \"to exclude\" an element. It seems, the comments should avoid any \"excluding\" notions, and describe the logic in terms of \"including\" or \"conditional including\".",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T09:14:53Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400041234",
      "id" : 400041234,
      "in_reply_to_id" : 399846953,
      "line" : 120,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MTIzNA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 120,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 82,
      "pull_request_review_id" : 383667748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400041234",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400057301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400057301"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The internal loop seems redundant. Could this work:\r\n```\r\n    do {\r\n        for (const txiter child_it : GetMemPoolChildren(next_it)) {\r\n            if (visited(child_it)) continue;\r\n            new_cache_line.emplace_back(child_it);\r\n        }\r\n\r\n        // finish loop here!\r\n        if (next_idx_to_walk >= new_cache_line.size()) break;\r\n\r\n        // Prepare for next iteration:\r\n        next_it = new_cache_line[next_idx_to_walk];\r\n        ++next_idx_to_walk;\r\n    } while (true);\r\n```\r\n?\r\n\r\nUPDATED: ... or even\r\n```\r\n    txiter next_it = update_it;\r\n    for (size_t next_idx_to_walk = 0; next_idx_to_walk < new_cache_line.size(); ++next_idx_to_walk) {\r\n        for (const txiter child_it : GetMemPoolChildren(next_it)) {\r\n            if (visited(child_it)) continue;\r\n            new_cache_line.emplace_back(child_it);\r\n        }\r\n        next_it = new_cache_line[next_idx_to_walk];\r\n    }\r\n```",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T09:40:20Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400057301",
      "id" : 400057301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1NzMwMQ==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 103,
      "original_position" : 65,
      "original_start_line" : 87,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 383687369,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400057301",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400085843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400085843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why a new variable is needed? `child_it->GetTxSize()` and `child_it->GetModifiedFee()` seems to work well, no?",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T10:27:46Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list\n+    for (txiter child_it : new_cache_line) {\n+        const CTxMemPoolEntry& child = *child_it;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400085843",
      "id" : 400085843,
      "line" : 122,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA4NTg0Mw==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 122,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 84,
      "pull_request_review_id" : 383722330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400085843",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400476700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400476700"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No because then we aren't using the cached traversal at all.\r\n\r\nIt could be correct, but has some algorithmic complexity blowups.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T20:34:29Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400476700",
      "id" : 400476700,
      "in_reply_to_id" : 400057301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3NjcwMA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 103,
      "original_position" : 65,
      "original_start_line" : 87,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 384208947,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400476700",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400478978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400478978"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It would work but I have a preference to access through a const ref where possible to avoid using non const APIs where not explicitly offered.\r\n\r\nNo performance overhead of this, it shouldn't even allocate a variable in the code.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T20:38:37Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list\n+    for (txiter child_it : new_cache_line) {\n+        const CTxMemPoolEntry& child = *child_it;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400478978",
      "id" : 400478978,
      "in_reply_to_id" : 400085843,
      "line" : 122,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3ODk3OA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 122,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 84,
      "pull_request_review_id" : 384210609,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400478978",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400480589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400480589"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You update is still not using the cache lines....",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T20:41:41Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400480589",
      "id" : 400480589,
      "in_reply_to_id" : 400057301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MDU4OQ==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 103,
      "original_position" : 65,
      "original_start_line" : 87,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 384213894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400480589",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400494926"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400494926"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> It could be correct, but has some algorithmic complexity blowups.\r\n\r\nHow it could be, if every element is visited once only?",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T21:08:15Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400494926",
      "id" : 400494926,
      "in_reply_to_id" : 400057301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5NDkyNg==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 103,
      "original_position" : 65,
      "original_start_line" : 87,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 384231611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400494926",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400529948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400529948"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm saying \"could be\" because I haven't bothered to actually check your code above for correctness, given the glaring issue that it doesn't use the caches which leads to unacceptable algorithmic complexity.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T22:22:18Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400529948",
      "id" : 400529948,
      "in_reply_to_id" : 400057301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTk0OA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 103,
      "original_position" : 65,
      "original_start_line" : 87,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 384274377,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400529948",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400532152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400532152"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Well the list does exist -- it's vHashesToUpdate. We just don't need to actually check or construct it because it's an implicit invariant held by the code.\r\n\r\nI can't comment on the semantic difference between excluding or conditional including, but it does seem that what we're doing is excluding.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T22:27:36Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400532152",
      "id" : 400532152,
      "in_reply_to_id" : 399846953,
      "line" : 120,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzMjE1Mg==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 120,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 82,
      "pull_request_review_id" : 384276918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400532152",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400532974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400532974"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In any case this comment & the function comment serve to document what the expected invariant is for the caller, so I prefer to leave this comment.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-30T22:29:31Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400532974",
      "id" : 400532974,
      "in_reply_to_id" : 399846953,
      "line" : 120,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzMjk3NA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 120,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 82,
      "pull_request_review_id" : 384277819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400532974",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400594651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400594651"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I guess to pull up -- I do agree that the loop is a bit atypical in structure, but I do think that it's the most straightforward to reason about because it's pretty critical when certain checks or variable updates happen.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-31T01:46:11Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400594651",
      "id" : 400594651,
      "in_reply_to_id" : 400057301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDY1MQ==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 103,
      "original_position" : 65,
      "original_start_line" : 87,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 384348791,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400594651",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400781249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400781249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> \"... it doesn't use the caches...\"\r\n\r\nCorrected:\r\n```\r\n    txiter next_it = update_it;\r\n    for (size_t next_idx_to_walk = 0; next_idx_to_walk < new_cache_line.size(); ++next_idx_to_walk) {\r\n        for (const txiter child_it : GetMemPoolChildren(next_it)) {\r\n            if (visited(child_it)) continue;\r\n            if (cache.find(child_it) != cache.end()) continue;\r\n            new_cache_line.emplace_back(child_it);\r\n        }\r\n        next_it = new_cache_line[next_idx_to_walk];\r\n    }\r\n```",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-31T09:47:19Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r400781249",
      "id" : 400781249,
      "in_reply_to_id" : 400057301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4MTI0OQ==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 103,
      "original_position" : 65,
      "original_start_line" : 87,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 384570872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/400781249",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r401181019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401181019"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "So now the code checks if there is a cache, and then continues... but you're now both not using the cache, and incorrect. If you find a cache line for a child then you must include all of it's cache entries into the new_cache_line otherwise a future call will skip updating descendants properly.\r\n\r\nThe code that is in the PR is (I believe) correct & does not have superfluous lines. If there was a good simplification of that logic I'd be for it, but I think that it already sort of is at the minimal correct form. There's not an extra internal loop to get rid of. ",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-03-31T20:05:10Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r401181019",
      "id" : 401181019,
      "in_reply_to_id" : 400057301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MTAxOQ==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 103,
      "original_position" : 65,
      "original_start_line" : 87,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 385063635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401181019",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r402878779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402878779"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Code in the PR passes the test from #18485. \r\nAll my suggestions fail the test.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-04-03T09:30:45Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r402878779",
      "id" : 402878779,
      "in_reply_to_id" : 400057301,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODc3OQ==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 103,
      "original_position" : 65,
      "original_start_line" : 87,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 387099072,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402878779",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429649340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429649340"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        for (const txiter& child_it : GetMemPoolChildren(next_it)) {\r\n```\r\n\r\nto avoid these compile warnings:\r\n```\r\ntxmempool.cpp:78:27: warning: loop variable 'child_it' of type 'const CTxMemPool::txiter' (aka 'const hashed_index_iterator<hashed_index_node<ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>') creates a copy from type 'const CTxMemPool::txiter' [-Wrange-loop-analysis]\r\n        for (const txiter child_it : GetMemPoolChildren(next_it)) {\r\n                          ^\r\ntxmempool.cpp:78:14: note: use reference type 'const CTxMemPool::txiter &' (aka 'const hashed_index_iterator<hashed_index_node<ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag> &') to prevent copying\r\n        for (const txiter child_it : GetMemPoolChildren(next_it)) {\r\n```",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T15:44:52Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429649340",
      "id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0OTM0MA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417369693,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429649340",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429649352"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429649352"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                for (const txiter& grand_child_it : cached_grand_children->second) {\r\n```\r\n\r\nto avoid these compile warnings:\r\n```\r\ntxmempool.cpp:89:35: warning: loop variable 'grand_child_it' of type 'const CTxMemPool::txiter' (aka 'const hashed_index_iterator<hashed_index_node<ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>') creates a copy from type 'const CTxMemPool::txiter' [-Wrange-loop-analysis]\r\n                for (const txiter grand_child_it : cached_grand_children->second) {\r\n                                  ^\r\ntxmempool.cpp:89:22: note: use reference type 'const CTxMemPool::txiter &' (aka 'const hashed_index_iterator<hashed_index_node<ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag> &') to prevent copying\r\n                for (const txiter grand_child_it : cached_grand_children->second) {\r\n```\r\n",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T15:44:56Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter grand_child_it : cached_grand_children->second) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429649352",
      "id" : 429649352,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0OTM1Mg==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 89,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417369697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429649352",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429650512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429650512"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suppose you compiled with clang?",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T15:57:10Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429650512",
      "id" : 429650512,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1MDUxMg==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417370657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429650512",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429652758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429652758"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, this was a clang warning (I often compile with both gcc and clang for anything non-trivial as they seem to have complementary results).",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T16:23:56Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429652758",
      "id" : 429652758,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1Mjc1OA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417372580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429652758",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429673764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429673764"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm I think specifically we *do* want copying here because it's an iter, which in boost::multiindex should be just a pointer, so a reference to an iter implies extra unnecessary indirection?\r\n\r\n@sipa is probably most familiar with multiindex innards to know if this is correct.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T20:48:37Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429673764",
      "id" : 429673764,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3Mzc2NA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417390343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429673764",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429675967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429675967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, `CTxMemPool::txiter` is just a single pointer, a copy would be desirable here.\r\n\r\nHowever, I suspect that the compiler will figure this out, and produce pretty much equal code for both.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T21:13:08Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429675967",
      "id" : 429675967,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NTk2Nw==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417392452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429675967",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429678707"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429678707"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks sipa.\r\n\r\nMy preference is to leave the code as is if the behavior is correct & desirable (even if the compiler is likely to optimize out the indirection), as the warning seems to be just an aggressive warning from clang, unless a warning is excessively bad. The right solution seems to be to annotate somehow that txiter is a copyable type. How can this be done?",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T21:52:42Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429678707",
      "id" : 429678707,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3ODcwNw==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417394920,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429678707",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429680012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429680012"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It seems there are two solutions: not mark the loop variable const (if you want something mutable, a copy is needed anyway), or upgrade to clang 10.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T22:11:22Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429680012",
      "id" : 429680012,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY4MDAxMg==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417396000,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429680012",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429680491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429680491"
         }
      },
      "author_association" : "MEMBER",
      "body" : "FWIW, at -O2, clang 9 compiles both to the same code.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T22:17:38Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429680491",
      "id" : 429680491,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY4MDQ5MQ==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417396432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429680491",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429681119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429681119"
         }
      },
      "author_association" : "MEMBER",
      "body" : "txiter is already const (it would be illegal to modify a mempool entry by the iterator). I don't think we write 'const txiter' anywhere",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T22:27:20Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429681119",
      "id" : 429681119,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY4MTExOQ==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417397020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429681119",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429681657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429681657"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's a const_iterator. The `const` here just prevents modifying the txiter object, not what it points to. It's a vaguely sensible thing to do when you know a variable isn't going to be modified.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T22:35:06Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429681657",
      "id" : 429681657,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY4MTY1Nw==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417397518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429681657",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429683092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429683092"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke this is not quite true, it's perfectly legal to modify through the iterator via at least two means:\r\n\r\n1) Const cast -- the txiter is known to be non const *somewhere* so updating is fine\r\n2) Mutable fields -- the txiter epochs are mutable, same with the vtxhashesidx\r\n\r\nIn this case we are modifying the epochs via the mutable fields even though it's const.\r\n",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-24T22:54:59Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429683092",
      "id" : 429683092,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY4MzA5Mg==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417398761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429683092",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429786514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429786514"
         }
      },
      "author_association" : "MEMBER",
      "body" : "On Clang 6 (Debian), I confirm that making it non-const also removes the warning.\r\n\r\nIf the resulting code is the same, my suggestion would be to appease the warnings to not add needlessly to the noise and friction for reviewers, here and down the road.",
      "commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "created_at" : "2020-05-25T07:54:10Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429786514",
      "id" : 429786514,
      "in_reply_to_id" : 429649340,
      "line" : 78,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4NjUxNA==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 38,
      "pull_request_review_id" : 417525099,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T08:40:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429786514",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It seems that performance is the motivation for this PR. Could benchmarks, or a link to them, be added to the PR description?",
      "created_at" : "2020-05-25T07:58:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-633436164",
      "id" : 633436164,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzQzNjE2NA==",
      "updated_at" : "2020-05-25T07:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633436164",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jonatack \r\n> It seems that performance is the motivation for this PR. Could benchmarks, or a link to them, be added to the PR description?\r\n\r\nSome benchmarks are [done](https://github.com/bitcoin/bitcoin/pull/18191#pullrequestreview-387559737) :)",
      "created_at" : "2020-05-25T08:04:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-633438899",
      "id" : 633438899,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzQzODg5OQ==",
      "updated_at" : "2020-05-25T08:04:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633438899",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429816429"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429816429"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, on Clang 6 (Debian), making the txiters non-const also removes the warning.\r\n\r\nIf the resulting code is the same, my suggestion would be to appease the warnings to not add needlessly to the noise and friction for reviewers, here and down the road. Could be added as a follow-up if this is merged.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-05-25T08:54:28Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter child_it : GetMemPoolChildren(next_it)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r429816429",
      "id" : 429816429,
      "in_reply_to_id" : 429649340,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxNjQyOQ==",
      "original_commit_id" : "32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a",
      "original_line" : 78,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 417562346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-17T20:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429816429",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Benchmarking:\r\n- on master (24f70290642c9c5108d3dc62dbe055f5d1bcff9d)\r\n```\r\n$ for i in {1..10}; do ./test/functional/mempool_updatefromblock.py | grep -o 'in [0-9]\\.[0-9]*'; done\r\nin 0.2627599239349365\r\nin 0.26287293434143066\r\nin 0.26229262351989746\r\nin 0.2730386257171631\r\nin 0.29637765884399414\r\nin 0.29340052604675293\r\nin 0.32193946838378906\r\nin 0.26309871673583984\r\nin 0.2626173496246338\r\nin 0.2927675247192383\r\n```\r\n- this PR on top of the master\r\n```\r\n$ for i in {1..10}; do ./test/functional/mempool_updatefromblock.py | grep -o 'in [0-9]\\.[0-9]*'; done\r\nin 0.2642529010772705\r\nin 0.29978084564208984\r\nin 0.26271796226501465\r\nin 0.28136396408081055\r\nin 0.2789490222930908\r\nin 0.2894265651702881\r\nin 0.2904317378997803\r\nin 0.2793881893157959\r\nin 0.31591129302978516\r\nin 0.317304134368896\r\n```\r\n\r\nThe [previous benchmarking](https://github.com/bitcoin/bitcoin/pull/18191#pullrequestreview-387559737) was done on different platform.",
      "created_at" : "2020-05-25T09:27:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-633476244",
      "id" : 633476244,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzQ3NjI0NA==",
      "updated_at" : "2020-05-25T09:27:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633476244",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @hebasto, I've been running your benchmarks all day long on a 2012 MacBookPro that seems to run them 6x slower than you :). Results here when it's done.\r\n\r\nInitial results for 12 runs on a more recent Debian laptop were showing 1-3% improvement on average but with quite a bit more variance than you, for this PR rebased on master versus master. Not statistically significant given the wide variance in results, which is why I offloaded a longer benchmarking to the older computer that is also doing nothing else.",
      "created_at" : "2020-05-25T17:21:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-633659268",
      "id" : 633659268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzY1OTI2OA==",
      "updated_at" : "2020-05-25T17:27:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633659268",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks all for running and developing these benches!\r\n\r\n@jonatack \r\n\r\nI think the thing to look at is that this is being done for a bunch of reasons that encapsulate performance more than just run time on a bench mark. If the run time is similar on a given bench that's a very favorable outcome for this patch. If it's better, that's great.\r\n\r\nBut this is ultimately more about DoS surface than sheer performance -- even if this algorithm were *slower* on benches but guaranteed to perform within a better asymptotic it would be an improvement over the current code.\r\n\r\nWith this patch we allocate way less memory. So the maximally bad block (which it's unclear if @hebasto's bench is maximally bad) is improved. Profilers should also look at the allocation differences between runs of master and this PR. Back of the envelope in this PR we make N allocations of size N, v.s. N^2 allocations of size 1. At too small N, the N of size N will look the same or worse, but getting rid of a N^2 path is very desirable.",
      "created_at" : "2020-05-25T20:07:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-633702539",
      "id" : 633702539,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzcwMjUzOQ==",
      "updated_at" : "2020-05-25T20:07:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633702539",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jonatack @JeremyRubin \r\nPlease note that `mempool_updatefromblock.py` from #18485 is not a specially designed for benchmarking. It's a functional test that was adapted for benchmarking while we have no a special one.",
      "created_at" : "2020-05-26T03:55:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-633794306",
      "id" : 633794306,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzc5NDMwNg==",
      "updated_at" : "2020-05-26T03:55:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633794306",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "For what it's worth, 30 test runs on master versus this branch rebased on master seem to show no significant difference in run time (~0.5%). They do appear to show a significant reduction in run time variance with this PR. I ran four alternating cycles of 15: master, PR, master, PR; it took most of a day to for the 60 runs.\r\n\r\n<details><summary>results with a 2012 MacBookPro running Mojave</summary><p>\r\n\r\n```\r\nmaster\r\n\r\n(/ (+\r\n 1.6158521175384521\r\n 1.5466628074645996\r\n 1.6130828857421875\r\n 1.5822479724884033\r\n 1.8187620639801025\r\n 1.5548689365386963\r\n 1.5336580276489258\r\n 1.5182380676269531\r\n 1.5340137481689453\r\n 1.5922291278839111\r\n 1.6903131008148193\r\n 1.8066248893737793\r\n 1.8288109302520752\r\n 1.5529100894927979\r\n 1.4984791278839111\r\n 1.6140100955963135\r\n 1.6495018005371094\r\n 1.6218130588531494\r\n 1.6670641899108887\r\n 1.550534963607788\r\n 1.540299654006958\r\n 1.6754770278930664\r\n 1.548105001449585\r\n 1.5992188453674316\r\n 1.5701148509979248\r\n 1.5563862323760986\r\n 1.5182199478149414\r\n 1.5484421253204346\r\n 1.578866958618164\r\n 1.5370879173278809\r\n) 30)\r\n1.602063\r\n\r\n(HEAD, origin/pr/18191) rebased on master\r\n\r\n(/ (+\r\n 1.5921480655670166\r\n 1.5645711421966553\r\n 1.5695910453796387\r\n 1.5787348747253418\r\n 1.6047391891479492\r\n 1.563709020614624\r\n 1.5736000537872314\r\n 1.5630147457122803\r\n 1.5653061866760254\r\n 1.599463939666748\r\n 1.5765950679779053\r\n 1.692945957183838\r\n 1.580806016921997\r\n 1.5970890522003174\r\n 1.5502479076385498\r\n 1.7198941707611084\r\n 1.5886380672454834\r\n 1.5441138744354248\r\n 1.601973056793213\r\n 1.5830471515655518\r\n 1.7337110042572021\r\n 1.5389633178710938\r\n 1.5398321151733398\r\n 1.588163137435913\r\n 1.744027853012085\r\n 1.569767951965332\r\n 1.6018469333648682\r\n 1.560020923614502\r\n 1.542902946472168\r\n 1.5561339855194092\r\n) 30)\r\n1.5928533\r\n\r\n(/ 1.5928533 1.602063)\r\n0.9942514\r\n```\r\n</p></details>\r\n",
      "created_at" : "2020-05-27T07:35:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-634484859",
      "id" : 634484859,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDQ4NDg1OQ==",
      "updated_at" : "2020-05-27T07:35:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634484859",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The build warnings I encountered building in Debian with Clang 6 were also present when building on MacOS with the default Apple clang version 11.\r\n\r\nIn both cases, these are the only compiler warnings I'm seeing while building Bitcoin Core. They can be removed by either making the txiters const reference or non-const.\r\n```bash\r\ntxmempool.cpp:89:35: warning: loop variable 'grand_child_it' of type 'const CTxMemPool::txiter' (aka 'const hashed_index_iterator<hashed_index_node<ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, index_node_base<CTxMemPoolEntry, std::__1::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, bucket_array<allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>') creates a copy from type 'const CTxMemPool::txiter' [-Wrange-loop-analysis]\r\n                for (const txiter grand_child_it : cached_grand_children->second) {\r\n                                  ^\r\ntxmempool.cpp:89:22: note: use reference type 'const CTxMemPool::txiter &' (aka 'const hashed_index_iterator<hashed_index_node<ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, index_node_base<CTxMemPoolEntry, std::__1::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, bucket_array<allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag> &') to prevent copying\r\n                for (const txiter grand_child_it : cached_grand_children->second) {\r\n                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntxmempool.cpp:78:27: warning: loop variable 'child_it' of type 'const CTxMemPool::txiter' (aka 'const hashed_index_iterator<hashed_index_node<ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, index_node_base<CTxMemPoolEntry, std::__1::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, bucket_array<allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>') creates a copy from type 'const CTxMemPool::txiter' [-Wrange-loop-analysis]\r\n        for (const txiter child_it : GetMemPoolChildren(next_it)) {\r\n                          ^\r\ntxmempool.cpp:78:14: note: use reference type 'const CTxMemPool::txiter &' (aka 'const hashed_index_iterator<hashed_index_node<ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, ordered_index_node<boost::multi_index::detail::null_augment_policy, index_node_base<CTxMemPoolEntry, std::__1::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, bucket_array<allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag> &') to prevent copying\r\n        for (const txiter child_it : GetMemPoolChildren(next_it)) {\r\n             ^~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n2 warnings generated.\r\n```",
      "created_at" : "2020-05-27T07:43:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-634488578",
      "id" : 634488578,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDQ4ODU3OA==",
      "updated_at" : "2020-05-27T07:43:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634488578",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Thanks all for running and developing these benches!\r\n> \r\n> With this patch we allocate way less memory.\r\n\r\nI think it would help the PR to feature relevant benchmarkings, with instructions to reproduce them, in the PR description.",
      "created_at" : "2020-05-27T07:48:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-634490659",
      "id" : 634490659,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDQ5MDY1OQ==",
      "updated_at" : "2020-05-27T07:48:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634490659",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't think we have documentation on how to track memory usage. I remember I used massif at one point, but I forgot to write down notes. https://github.com/bitcoin/bitcoin/pull/17164#issuecomment-542862195",
      "created_at" : "2020-05-27T11:38:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-634603007",
      "id" : 634603007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNDYwMzAwNw==",
      "updated_at" : "2020-05-27T11:38:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634603007",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think it would help the PR to feature relevant benchmarkings, with instructions to reproduce them, in the PR description.\r\n\r\nGood point. Generally this one is supposed to be an obviously better version that doesn't really require much benching. You can easily see from the code that std::sets go to vectors and a std::set of all conflicts is removed. But it's a good standard to hold to I suppose to want benches/testing for this stuff even if it seems obvious -- but as @MarcoFalke points out, benching memory is a bit tricky...\r\n\r\n@sdaftuar do you think any of the benches you've run previously can be published in a reproducible way?",
      "created_at" : "2020-05-28T04:21:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-635089930",
      "id" : 635089930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTA4OTkzMA==",
      "updated_at" : "2020-05-28T04:21:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635089930",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack I'll fix the iterator reference thing. Is there a way to make this warning trigger on all platforms that you know about?",
      "created_at" : "2020-05-28T04:29:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-635092526",
      "id" : 635092526,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzNTA5MjUyNg==",
      "updated_at" : "2020-05-28T04:29:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635092526",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I encountered identical [build warnings](https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-634488578) with MacOS clang 10.",
      "created_at" : "2020-06-15T19:19:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-644328268",
      "id" : 644328268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDMyODI2OA==",
      "updated_at" : "2020-06-15T19:19:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644328268",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK, also encountered the build warnings though.",
      "created_at" : "2020-06-17T15:50:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-645458400",
      "id" : 645458400,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTQ1ODQwMA==",
      "updated_at" : "2020-06-17T15:50:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645458400",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Will fix the build warnings soon; thanks all for the review (will tag some people when I try to fix as I can't trigger locally).",
      "created_at" : "2020-06-17T17:05:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-645501104",
      "id" : 645501104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTUwMTEwNA==",
      "updated_at" : "2020-06-17T17:05:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645501104",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack can you confirm this fixes the build warning you encountered?",
      "created_at" : "2020-06-17T20:35:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-645610159",
      "id" : 645610159,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTYxMDE1OQ==",
      "updated_at" : "2020-06-17T20:35:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645610159",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Confirming that 32985d34a0a0cfd4ff8c4d96ff461778eaf72a8a produced the warnings but 8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5 does not.",
      "created_at" : "2020-06-18T00:31:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-645697964",
      "id" : 645697964,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTY5Nzk2NA==",
      "updated_at" : "2020-06-18T00:31:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645697964",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r452378883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452378883"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you should layout high-level algorithm behavior here, like \"cacheMap maintain a key-elements mapping where each key represents a back-to-the-mempool transactions, elements represents its children sorted XXX. We merge cache line based on key intersecting with children of a latter cache entry evaluation\"\r\n\r\nYou can keep per-line comments but it would be better to normalize style, IMO you blur code behavior description (e.g \"Create something\") and assumptions (\"Elements are excluded, ...\") which is a bit confusing. \r\n",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-07-09T17:30:34Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r452378883",
      "id" : 452378883,
      "line" : 62,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM3ODg4Mw==",
      "original_commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "original_line" : 62,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 22,
      "pull_request_review_id" : 445826461,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-09T18:05:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452378883",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r452386503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452386503"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I wonder if previous accounting logic was correct to exclude already-processed `vHashesToUpdate` member from descendant state update. E.g if back-to-mempool transaction Y is processed first, as `reverse_iterate` enforces, its parents X, also to process as second, won't account it as part of `modify_fee` and others. \r\n\r\nAFAICT, new code maintains behavior by not including Y as part of X's children cache line.   \r\n\r\nCorrect me if I miss some boost:multi_index internals ?",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-07-09T17:44:36Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter& child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter& grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list\n+    for (txiter child_it : new_cache_line) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r452386503",
      "id" : 452386503,
      "line" : 121,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4NjUwMw==",
      "original_commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "original_line" : 121,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 83,
      "pull_request_review_id" : 445826461,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-09T18:05:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452386503",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r452414471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452414471"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok so suppose vhashestoupdate is {X, Y}.\r\n\r\nFirst we submit X to mempool and Y to mempool.\r\n\r\nThen we reverse iterate and update Y, then X.\r\n\r\nPreviously, we scanned across all of the direct children in the mempool of Y then of X and updated the parent/child relationships. So Y would do only things already in the mempool, and X would see Y in this list, but exclude it in setExcluded as it was set properly when Y was put in the mempool.\r\n\r\nIn the new patch, we scanned across all of the direct children in the mempool of Y then of X and updated the parent/child relationships. So Y would do only things already in the mempool, and X would see Y in this list, but exclude it in mapMemPoolDescendants as it was set properly when Y was put in the mempool, and mapMemPoolDescendants will get a cacheline entry for everything in vHashesToUpdate; and because of iteration order, children will always be visible to parents.\r\n\r\nWhen we actually call into UpdateForDescendants, we only update against things that are in the cachelines, and not the keys to those cachelines. This is because earlier when Y was accepted to the mempool it should have already modified X's fees.\r\n\r\n\r\n\r\n",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-07-09T18:36:11Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter& child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter& grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list\n+    for (txiter child_it : new_cache_line) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r452414471",
      "id" : 452414471,
      "in_reply_to_id" : 452386503,
      "line" : 121,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNDQ3MQ==",
      "original_commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "original_line" : 121,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 83,
      "pull_request_review_id" : 445872234,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-09T18:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452414471",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r452444596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452444596"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Gotcha, thanks for the laid-out explanation, I forgot that ancestor state X is well-modified at Y new mempool insertion. I was just confused by the sybillic comment \"because any descendants in cache were added to the mempool after the transaction being updated and hence their state is already reflected in the parent state\". In fact that's should point to `AcceptToMemoryPool` in validation's `UpdateMempoolForReorg` to enhance clarity.",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2020-07-09T19:34:27Z",
      "diff_hunk" : "@@ -57,46 +57,75 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+void CTxMemPool::UpdateForDescendants(txiter update_it, cacheMap& cache)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n-\n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+    const auto epoch = GetFreshEpoch();\n+    // set up the new_cache_line to contain all of our transaction's children (note --\n+    // already de-duplicated in case multiple outputs of ours are spent in one\n+    // transaction).\n+    // Always creates a new cache line entry.\n+    vecEntries& new_cache_line = cache[update_it];\n+    assert(new_cache_line.empty());\n+    // next_idx_to_walk index keeps track of the elements that we've\n+    // already expanded.\n+    // Invariants:\n+    // If index is < next_idx_to_walk, we've already walked it.\n+    // If index is >= next_idx_to_walk, we need to walk it.\n+    // If next_idx_to_walk >= new_cache_line.size(), we're finished.\n+    size_t next_idx_to_walk = 0;\n+    txiter next_it = update_it;\n+    do {\n+        for (const txiter& child_it : GetMemPoolChildren(next_it)) {\n+            // N.B. children can also be grand children, so guarding\n+            // here is neccessary\n+            if (visited(child_it)) continue;\n+            // if it exists in the cache, copy cached descendants\n+            // - All elements in cache are not excluded, no need to check when adding.\n+            // - All keys in the cache are already excluded, no need to add\n+            //   `child_it` to the new_cache_line (but not all excluded keys\n+            //   are in the cache yet!)\n+            cacheMap::iterator cached_grand_children = cache.find(child_it);\n+            if (cached_grand_children != cache.end()) {\n+                for (const txiter& grand_child_it : cached_grand_children->second) {\n+                    if (visited(grand_child_it)) continue;\n+                    // place on the back and then swap into the next_idx_to_walk index\n+                    // so we don't walk it ourselves (whoever put the grand\n+                    // child in the cache must have already traversed this, so it must\n+                    // not be excluded)\n+                    new_cache_line.emplace_back(grand_child_it);\n+                    std::swap(new_cache_line[next_idx_to_walk], new_cache_line.back());\n+                    ++next_idx_to_walk;\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                // Element must not be excluded, or it would be in the cache already.\n+                new_cache_line.emplace_back(child_it);\n             }\n         }\n+\n+        // finish loop here!\n+        if (next_idx_to_walk >= new_cache_line.size()) break;\n+\n+        // Prepare for next iteration:\n+        next_it = new_cache_line[next_idx_to_walk];\n+        ++next_idx_to_walk;\n+    } while (true);\n+\n+    // new_cache_line now contains all in-mempool descendants of update_it,\n+    // compute updates now.\n+    int64_t modify_size = 0;\n+    CAmount modify_fee = 0;\n+    int64_t modify_count = 0;\n+    // All entries in the new_cache_line have\n+    // already been checked against excluded list\n+    for (txiter child_it : new_cache_line) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r452444596",
      "id" : 452444596,
      "in_reply_to_id" : 452386503,
      "line" : 121,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ0NDU5Ng==",
      "original_commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "original_line" : 121,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 83,
      "pull_request_review_id" : 445910752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-09T19:34:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452444596",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-09-07T11:21:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-688260499",
      "id" : 688260499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODI2MDQ5OQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688260499/reactions"
      },
      "updated_at" : "2020-09-07T11:21:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688260499",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--13523179cfe9479db18ec6c5d236f789-->There hasn't been much activity lately and the patch still needs rebase. What is the status here?\n\n* Is it still relevant? â¡ï¸ Please solve the conflicts to make it ready for review and to ensure the CI passes.\n* Is it no longer relevant? â¡ï¸ Please close.\n* Did the author lose interest or time to work on this? â¡ï¸ Please close it and mark it 'Up for grabs' with the label, so that it can be picked up in the future.\n",
      "created_at" : "2022-02-22T12:18:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-1047738521",
      "id" : 1047738521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "IC_kwDOABII584-cziZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047738521/reactions"
      },
      "updated_at" : "2022-02-22T12:18:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047738521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r853168861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853168861"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure if this PR is still active, but I believe it may be more efficient to check:\r\n```diff\r\n\r\n+++ if (!visited(childIter) && !childIter->GetMemPoolParentsConst().count(it) {\r\n```\r\nsince if the child is unvisited and is in `vHashesToUpdate`, it will have `it` as a parent, which isn't the case otherwise. I think this would be more efficient if the childiter's set of parents is < cache size, which I would expect to be true more often than not",
      "commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "created_at" : "2022-04-19T14:49:10Z",
      "diff_hunk" : "@@ -139,13 +167,13 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n                 assert(childIter != mapTx.end());\n                 // We can skip updating entries we've encountered before or that\n                 // are in the block (which are already accounted for).\n-                if (!visited(childIter) && !setAlreadyIncluded.count(childHash)) {\n+                if (!visited(childIter) && !mapMemPoolDescendantsToUpdate.count(childIter)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#discussion_r853168861",
      "id" : 853168861,
      "line" : 170,
      "node_id" : "PRRC_kwDOABII584y2lLd",
      "original_commit_id" : "8e5aa08df4d0f55eae8842d01b1ab3d9a3b74fc5",
      "original_line" : 170,
      "original_position" : 131,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 131,
      "pull_request_review_id" : 945846654,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18191",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853168861/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T14:49:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853168861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "this is a duplicate of #24158 and has needed rebase for 18 months, close?",
      "created_at" : "2022-04-22T21:58:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-1106920125",
      "id" : 1106920125,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "IC_kwDOABII585B-kK9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106920125/reactions"
      },
      "updated_at" : "2022-04-22T21:58:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106920125",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> close?\r\n\r\nI think so. Looking at the [comments in #24158](https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042219410):\r\n> oh oops.\r\n> uh yeah TBH I forgot I had that other PR open.\r\n> They should be mostly the same.\r\n> The main difference is the earlier one also applies an optimization getting rid of setExclude and just using the cache line presence instead, which ends up being redundant with the setExclude.\r\n> We can add that optimization as a separate PR since it's a little bit less obvious why it works, I left it out when I rewrote this one.",
      "created_at" : "2022-04-25T09:01:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18191#issuecomment-1108284934",
      "id" : 1108284934,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18191",
      "node_id" : "IC_kwDOABII585CDxYG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108284934/reactions"
      },
      "updated_at" : "2022-04-25T09:01:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108284934",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
