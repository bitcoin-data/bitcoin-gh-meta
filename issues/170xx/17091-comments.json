[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, thanks.",
      "created_at" : "2019-10-10T09:16:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#issuecomment-540478923",
      "id" : 540478923,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17091",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDQ3ODkyMw==",
      "updated_at" : "2019-10-10T09:16:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540478923",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333413682"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333413682"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do you really need the `shell=True` here? The immediate problem is that the arguments aren't escaped, so this won't work with paths with spaces, or other characters in it. You could escape the args with `shlex.quote`, but in general, it's better to avoid the shell completely and use Python's stdin/stdout/stderr redirection.",
      "commit_id" : "d7b466f81fc92fd7cc8e8dafc57d1629f824dab6",
      "created_at" : "2019-10-10T09:18:15Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333413682",
      "id" : 333413682,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzQxMzY4Mg==",
      "original_commit_id" : "b94959e1a1021ee13b6b6537b771e01e6908c058",
      "original_position" : 61,
      "path" : "test/functional/feature_loadblock.py",
      "position" : null,
      "pull_request_review_id" : 299926684,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
      "updated_at" : "2019-10-13T00:04:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333413682",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333511366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511366"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think there is no way around it since output redirect with `>` is a shell feature. I could not find a different way to achieve it. In a normal case I would have used Pythons output redirect but I wanted to simulate the use of the scripts exactly as described in the script's README. I guess one way to get rid of it would be to extend `linearize-hashes.py` to take an output parameter like `linearize-data.py` does. I could do this here or in a follow-up PR. ",
      "commit_id" : "d7b466f81fc92fd7cc8e8dafc57d1629f824dab6",
      "created_at" : "2019-10-10T13:14:21Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333511366",
      "id" : 333511366,
      "in_reply_to_id" : 333413682,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzUxMTM2Ng==",
      "original_commit_id" : "b94959e1a1021ee13b6b6537b771e01e6908c058",
      "original_position" : 61,
      "path" : "test/functional/feature_loadblock.py",
      "position" : null,
      "pull_request_review_id" : 300055796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
      "updated_at" : "2019-10-13T00:04:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511366",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333511857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511857"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added `quote` for now to make it more robust.",
      "commit_id" : "d7b466f81fc92fd7cc8e8dafc57d1629f824dab6",
      "created_at" : "2019-10-10T13:15:19Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333511857",
      "id" : 333511857,
      "in_reply_to_id" : 333413682,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzUxMTg1Nw==",
      "original_commit_id" : "b94959e1a1021ee13b6b6537b771e01e6908c058",
      "original_position" : 61,
      "path" : "test/functional/feature_loadblock.py",
      "position" : null,
      "pull_request_review_id" : 300056443,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
      "updated_at" : "2019-10-13T00:04:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511857",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333541923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333541923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In python it is possible to capture the output in a string and then write it to a file",
      "commit_id" : "d7b466f81fc92fd7cc8e8dafc57d1629f824dab6",
      "created_at" : "2019-10-10T14:09:20Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333541923",
      "id" : 333541923,
      "in_reply_to_id" : 333413682,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzU0MTkyMw==",
      "original_commit_id" : "b94959e1a1021ee13b6b6537b771e01e6908c058",
      "original_position" : 61,
      "path" : "test/functional/feature_loadblock.py",
      "position" : null,
      "pull_request_review_id" : 300096727,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
      "updated_at" : "2019-10-13T00:04:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333541923",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333542693"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333542693"
         }
      },
      "author_association" : "MEMBER",
      "body" : "or directly redirect the output to a file\r\n\r\nI am pretty sure we already do that in various places in our framework.",
      "commit_id" : "d7b466f81fc92fd7cc8e8dafc57d1629f824dab6",
      "created_at" : "2019-10-10T14:10:35Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333542693",
      "id" : 333542693,
      "in_reply_to_id" : 333413682,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzU0MjY5Mw==",
      "original_commit_id" : "b94959e1a1021ee13b6b6537b771e01e6908c058",
      "original_position" : 61,
      "path" : "test/functional/feature_loadblock.py",
      "position" : null,
      "pull_request_review_id" : 300097715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
      "updated_at" : "2019-10-13T00:04:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333542693",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333589035"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333589035"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Like this? https://github.com/bitcoin/bitcoin/blob/2a0164085b001a79b8d37b28751b115322124cfc/test/functional/test_runner.py#L506-L519",
      "commit_id" : "d7b466f81fc92fd7cc8e8dafc57d1629f824dab6",
      "created_at" : "2019-10-10T15:29:56Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333589035",
      "id" : 333589035,
      "in_reply_to_id" : 333413682,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzU4OTAzNQ==",
      "original_commit_id" : "b94959e1a1021ee13b6b6537b771e01e6908c058",
      "original_position" : 61,
      "path" : "test/functional/feature_loadblock.py",
      "position" : null,
      "pull_request_review_id" : 300159460,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
      "updated_at" : "2019-10-13T00:04:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333589035",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17104](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17104.html) (build: `make dist` uses `git archive` by ch4ot1c)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-10-11T01:12:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#issuecomment-540859045",
      "id" : 540859045,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17091",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDg1OTA0NQ==",
      "updated_at" : "2019-10-20T16:07:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540859045",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r334257430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334257430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Alright, I changed it do the output redirect in python now.",
      "commit_id" : "d7b466f81fc92fd7cc8e8dafc57d1629f824dab6",
      "created_at" : "2019-10-13T00:06:41Z",
      "diff_hunk" : "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r334257430",
      "id" : 334257430,
      "in_reply_to_id" : 333413682,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDI1NzQzMA==",
      "original_commit_id" : "b94959e1a1021ee13b6b6537b771e01e6908c058",
      "original_position" : 61,
      "path" : "test/functional/feature_loadblock.py",
      "position" : null,
      "pull_request_review_id" : 301026943,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
      "updated_at" : "2019-10-13T00:06:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334257430",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 89339d14607434b33cfa343dc75877b62b1dfe0e",
      "created_at" : "2019-10-23T09:21:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#issuecomment-545352646",
      "id" : 545352646,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17091",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTM1MjY0Ng==",
      "updated_at" : "2019-10-23T09:21:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545352646",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks. ACK",
      "created_at" : "2019-10-23T13:42:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17091#issuecomment-545450071",
      "id" : 545450071,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17091",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTQ1MDA3MQ==",
      "updated_at" : "2019-10-23T13:42:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545450071",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
