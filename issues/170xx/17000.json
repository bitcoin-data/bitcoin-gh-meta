{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Add `test_fuzzing_harnesses.sh` for easy verification that our fuzz harnesses work the way we expect them to work. One thing tested is that we are able to reach different unique code paths when varying input.\r\n\r\nEach fuzz target is given one second of running time after which coverage is evaluated.\r\n\r\nIntentionally running without a starting corpus to make sure the fuzzers can evolve from thin air :)\r\n\r\nThe total running time of `test_fuzzing_harnesses.sh` is less than a minute.\r\n\r\nExample output:\r\n\r\n```\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\r\n$ make\r\n$ contrib/devtools/test_fuzzing_harnesses.sh\r\nFound 21 fuzz harnesses to test.\r\n\r\nTesting fuzzer address_deserialize during 1 second(s)\r\nA subset of reached functions:\r\n\tNEW_FUNC[1/6]: 0x5592a0fa3430 in CDataStream& CDataStream::operator>><CAddress&>(CAddress&) src/./streams.h:460\r\n\tNEW_FUNC[2/6]: 0x5592a0fa4950 in void CAddress::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./protocol.h:337\r\n\tNEW_FUNC[3/6]: 0x5592a1ed2360 in CService::CService() src/netaddress.cpp:570\r\n\tNEW_FUNC[4/6]: 0x5592a1f03670 in CAddress::CAddress() src/protocol.cpp:145\r\n\tNEW_FUNC[5/6]: 0x5592a1f03780 in CAddress::Init() src/protocol.cpp:156\r\n\tNEW_FUNC[0/3]: 0x5592a0fa5440 in void SerReadWriteMany<CDataStream, CService&>(CDataStream&, CSerActionUnserialize, CService&) src/./serialize.h:989\r\n\tNEW_FUNC[1/3]: 0x5592a0fa5670 in void CService::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) src/./netaddress.h:167\r\n\tNEW_FUNC[2/3]: 0x5592a0fa5ac0 in void BigEndian<unsigned short>::Unserialize<CDataStream>(CDataStream&) src/./serialize.h:474\r\nstat::number_of_executed_units: 10343\r\nstat::average_exec_per_sec:     5171\r\nstat::new_units_added:          41\r\nstat::slowest_unit_time_sec:    0\r\nstat::peak_rss_mb:              147\r\nNumber of unique code paths reached during fuzzing round: 13\r\n\r\nTesting fuzzer addrman_deserialize during 1 second(s)\r\nA subset of reached functions:\r\n\tNEW_FUNC[0/61]: 0x55c567eabaa0 in UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) src/./sync.h:146\r\n\tNEW_FUNC[1/61]: 0x55c567eabf00 in UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::~UniqueLock() src/./sync.h:165\r\n\tNEW_FUNC[2/61]: 0x55c567eae5b0 in FastRandomContext::FillByteBuffer() src/./random.h:114\r\n\tNEW_FUNC[3/61]: 0x55c567eca850 in uint256::uint256() src/./uint256.h:123\r\n\tNEW_FUNC[4/61]: 0x55c567ed4f50 in UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) src/./sync.h:123\r\n\tNEW_FUNC[12/61]: 0x55c567f07320 in CDataStream& CDataStream::operator>><unsigned char&>(unsigned char&) src/./streams.h:460\r\n\tNEW_FUNC[13/61]: 0x55c567f1d750 in CAddrMan::CAddrMan() src/./addrman.h:481\r\n\tNEW_FUNC[14/61]: 0x55c567f1dec0 in CDataStream& CDataStream::operator>><CAddrMan&>(CAddrMan&) src/./streams.h:460\r\n\tNEW_FUNC[15/61]: 0x55c567f1e050 in CAddrMan::~CAddrMan() src/./addrman.h:486\r\n\tNEW_FUNC[16/61]: 0x55c567f1e250 in CAddrMan::Clear() src/./addrman.h:457\r\nstat::number_of_executed_units: 394\r\nstat::average_exec_per_sec:     197\r\nstat::new_units_added:          14\r\nstat::slowest_unit_time_sec:    0\r\nstat::peak_rss_mb:              111\r\nNumber of unique code paths reached during fuzzing round: 12\r\n\r\nâ¦\r\n\r\nAll fuzz harnesses seem to work as expected.\r\n```\r\n\r\nCommits:\r\n\r\n* Add `contrib/devtools/test_fuzzing_harnesses.sh`\r\n* Run `test_fuzzing_harnesses.sh` as part of `RUN_FUZZ_TESTS` in Travis\r\n* Enable UBSan for Travis fuzzer job",
   "closed_at" : "2019-10-14T15:28:12Z",
   "closed_by" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   },
   "comments" : 5,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17000/comments",
   "created_at" : "2019-09-30T18:22:22Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17000/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/17000",
   "id" : 500440931,
   "labels" : [
      {
         "color" : "ffffee",
         "default" : false,
         "id" : 231994551,
         "name" : "Scripts and tools",
         "node_id" : "MDU6TGFiZWwyMzE5OTQ1NTE=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Scripts%20and%20tools"
      },
      {
         "color" : "d4c5f9",
         "default" : false,
         "id" : 62963516,
         "name" : "Tests",
         "node_id" : "MDU6TGFiZWw2Mjk2MzUxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17000/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0MzIyOTExNzM1",
   "number" : 17000,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/17000.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17000",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/17000.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17000"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "tests: Add test_fuzzing_harnesses.sh for quick testing/verification of fuzzing harness coverage",
   "updated_at" : "2019-10-14T15:28:12Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17000",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
