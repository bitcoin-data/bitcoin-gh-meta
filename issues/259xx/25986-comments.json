[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@kouloumos Thanks for the tip. I changed all tests to use MiniWallet methods in 10edc9c0d7b686808c040204103da01ed386a3c9.",
      "created_at" : "2022-09-03T08:25:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#issuecomment-1236074633",
      "id" : 1236074633,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25986",
      "node_id" : "IC_kwDOABII585JrQCJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236074633/reactions"
      },
      "updated_at" : "2022-09-03T08:25:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236074633",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962135171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135171"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe this could become part of the MiniWallet methods as `create_self_transfer_chain` (see [`send_self_transfer_chain`](https://github.com/bitcoin/bitcoin/blob/ea67232cdb80c4bc3f16fcd823f6f811fd8903e1/test/functional/test_framework/wallet.py#L341)) to be also used at [`mempool_package_limits.py`](https://github.com/bitcoin/bitcoin/blob/ea67232cdb80c4bc3f16fcd823f6f811fd8903e1/test/functional/mempool_package_limits.py#L50-L530).\r\n\r\nSee also https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685084219 for `chain_length=25`\r\n",
      "commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "created_at" : "2022-09-03T10:28:56Z",
      "diff_hunk" : "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962135171",
      "id" : 962135171,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII5845WQSD",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 41,
      "pull_request_review_id" : 1095489108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135171/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T11:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962135359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135359"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685061119 about tuple. Also iirc we are mostly returning dictionaries in most of the other functions.",
      "commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "created_at" : "2022-09-03T10:31:16Z",
      "diff_hunk" : "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962135359",
      "id" : 962135359,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII5845WQU_",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 52,
      "pull_request_review_id" : 1095489108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135359/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T11:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962135640"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135640"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Since recently `rescan_utxos()` is called at the end of `generate`.\r\nhttps://github.com/bitcoin/bitcoin/blob/ea67232cdb80c4bc3f16fcd823f6f811fd8903e1/test/functional/test_framework/wallet.py#L171",
      "commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "created_at" : "2022-09-03T10:34:07Z",
      "diff_hunk" : "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)\n+\n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n-        node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n-                \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n-                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+        self.wallet = MiniWallet(self.nodes[0])\n \n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+        self.wallet.rescan_utxos()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962135640",
      "id" : 962135640,
      "line" : 58,
      "node_id" : "PRRC_kwDOABII5845WQZY",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 58,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 71,
      "pull_request_review_id" : 1095489108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135640/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T11:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135640",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962136086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962136086"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`create_self_transfer` returns the hex, so you could  avoid `tx.serialize().hex()` \r\n```suggestion\r\n            tx_hex = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"hex]\r\n```",
      "commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "created_at" : "2022-09-03T10:38:45Z",
      "diff_hunk" : "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)\n+\n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n-        node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n-                \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n-                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+        self.wallet = MiniWallet(self.nodes[0])\n \n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+        self.wallet.rescan_utxos()\n+\n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"tx\"]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962136086",
      "id" : 962136086,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII5845WQgW",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 65,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 84,
      "pull_request_review_id" : 1095489108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962136086/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T11:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962136086",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962137464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137464"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Where is this used?",
      "commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "created_at" : "2022-09-03T10:52:37Z",
      "diff_hunk" : "@@ -91,52 +82,64 @@ def run_test(self):\n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n+                \"txid\": coinbase[\"txid\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+        self.generate(node, COINBASE_MATURITY, sync_fun=self.no_op)\n+\n+        tx_bad_sig = self.wallet.create_self_transfer(utxo_to_spend=coin)['tx']\n+        tx_bad_sig.wit.vtxinwit = []\n+        tx_bad_sig_hex = tx_bad_sig.serialize().hex()\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n         # transactions here but empty results in other cases.\n         assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n             \"txid\": tx_bad_sig.rehash(),\n-            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"wtxid\": tx_bad_sig.getwtxid(),\n+            \"allowed\": False,\n             \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n         }])\n \n         self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n-        coin = self.coins.pop()\n-        tx_high_fee_raw = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n-        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n-        assert tx_high_fee_signed[\"complete\"]\n-        tx_high_fee = tx_from_hex(tx_high_fee_signed[\"hex\"])\n-        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        coin = self.wallet.get_utxo()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962137464",
      "id" : 962137464,
      "line" : 128,
      "node_id" : "PRRC_kwDOABII5845WQ14",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 128,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 155,
      "pull_request_review_id" : 1095489108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137464/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T11:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137464",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962137598"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137598"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: double #",
      "commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "created_at" : "2022-09-03T10:54:21Z",
      "diff_hunk" : "@@ -158,156 +161,115 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n-        # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        # # Child B",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962137598",
      "id" : 962137598,
      "line" : 173,
      "node_id" : "PRRC_kwDOABII5845WQ3-",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 173,
      "original_position" : 212,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 212,
      "pull_request_review_id" : 1095489108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137598/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T11:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137598",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962137676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this comment is still useful. \r\n\r\nSame for the rest of the comments that you deleted later in the code, just writing it here to avoid multiple comments.",
      "commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "created_at" : "2022-09-03T10:55:01Z",
      "diff_hunk" : "@@ -158,156 +161,115 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n-        # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        # # Child B\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962137676",
      "id" : 962137676,
      "line" : 224,
      "node_id" : "PRRC_kwDOABII5845WQ5M",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 224,
      "original_position" : 256,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 256,
      "pull_request_review_id" : 1095489108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137676/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T11:11:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962138910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962138910"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`create_self_transfer` already returns `wtxid`, maybe it makes sense for `create_self_transfer_multi` to also return it.",
      "commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "created_at" : "2022-09-03T11:07:56Z",
      "diff_hunk" : "@@ -330,31 +292,22 @@ def assert_equal_package_results(self, node, testmempoolaccept_result, submitpac\n     def test_submit_child_with_parents(self, num_parents, partial_submit):\n         node = self.nodes[0]\n         peer = node.add_p2p_connection(P2PTxInvStore())\n-        # Test a package with num_parents parents and 1 child transaction.\n-        package_hex = []\n+\n         package_txns = []\n-        values = []\n-        scripts = []\n         for _ in range(num_parents):\n-            parent_coin = self.coins.pop()\n-            value = parent_coin[\"amount\"]\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-            package_hex.append(txhex)\n-            package_txns.append(tx)\n-            values.append(value)\n-            scripts.append(spk)\n+            parent_tx = self.wallet.create_self_transfer(fee=DEFAULT_FEE)\n+            package_txns.append(parent_tx)\n             if partial_submit and random.choice([True, False]):\n-                node.sendrawtransaction(txhex)\n-        child_hex = create_child_with_parents(node, self.address, self.privkeys, package_txns, values, scripts)\n-        package_hex.append(child_hex)\n-        package_txns.append(tx_from_hex(child_hex))\n+                node.sendrawtransaction(parent_tx[\"hex\"])\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx[\"new_utxo\"] for tx in package_txns], fee_per_output=10000) #DEFAULT_FEE\n+        package_txns.append(child_tx)\n \n-        testmempoolaccept_result = node.testmempoolaccept(rawtxs=package_hex)\n-        submitpackage_result = node.submitpackage(package=package_hex)\n+        testmempoolaccept_result = node.testmempoolaccept(rawtxs=[tx[\"hex\"] for tx in package_txns])\n+        submitpackage_result = node.submitpackage(package=[tx[\"hex\"] for tx in package_txns])\n \n         # Check that each result is present, with the correct size and fees\n-        for i in range(num_parents + 1):\n-            tx = package_txns[i]\n+        for package_tx in package_txns:\n+            tx = package_tx['tx']\n             wtxid = tx.getwtxid()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962138910",
      "id" : 962138910,
      "line" : 311,
      "node_id" : "PRRC_kwDOABII5845WRMe",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 311,
      "original_position" : 417,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 417,
      "pull_request_review_id" : 1095489108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962138910/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T11:11:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962138910",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25038](https://github.com/bitcoin/bitcoin/pull/25038) (policy: nVersion=3 and Package RBF by glozow)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-09-03T15:14:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#issuecomment-1236140765",
      "id" : 1236140765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25986",
      "node_id" : "IC_kwDOABII585JrgLd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236140765/reactions"
      },
      "updated_at" : "2022-09-03T15:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236140765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962196925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196925"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-03T20:03:30Z",
      "diff_hunk" : "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962196925",
      "id" : 962196925,
      "in_reply_to_id" : 962135171,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5845WfW9",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1095554933,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196925/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T20:03:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196925",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962196946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196946"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-03T20:03:36Z",
      "diff_hunk" : "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962196946",
      "id" : 962196946,
      "in_reply_to_id" : 962135359,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5845WfXS",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1095554941,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196946/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T20:03:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197018"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-03T20:04:24Z",
      "diff_hunk" : "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)\n+\n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n-        node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n-                \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n-                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+        self.wallet = MiniWallet(self.nodes[0])\n \n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+        self.wallet.rescan_utxos()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197018",
      "id" : 962197018,
      "in_reply_to_id" : 962135640,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5845WfYa",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 58,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1095554996,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T20:04:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197027"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-03T20:04:37Z",
      "diff_hunk" : "@@ -91,52 +82,64 @@ def run_test(self):\n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n+                \"txid\": coinbase[\"txid\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+        self.generate(node, COINBASE_MATURITY, sync_fun=self.no_op)\n+\n+        tx_bad_sig = self.wallet.create_self_transfer(utxo_to_spend=coin)['tx']\n+        tx_bad_sig.wit.vtxinwit = []\n+        tx_bad_sig_hex = tx_bad_sig.serialize().hex()\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n         # transactions here but empty results in other cases.\n         assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n             \"txid\": tx_bad_sig.rehash(),\n-            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"wtxid\": tx_bad_sig.getwtxid(),\n+            \"allowed\": False,\n             \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n         }])\n \n         self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n-        coin = self.coins.pop()\n-        tx_high_fee_raw = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n-        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n-        assert tx_high_fee_signed[\"complete\"]\n-        tx_high_fee = tx_from_hex(tx_high_fee_signed[\"hex\"])\n-        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        coin = self.wallet.get_utxo()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197027",
      "id" : 962197027,
      "in_reply_to_id" : 962137464,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5845WfYj",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 128,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1095555012,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197027/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T20:04:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197042"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-03T20:04:44Z",
      "diff_hunk" : "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)\n+\n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n-        node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n-                \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n-                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+        self.wallet = MiniWallet(self.nodes[0])\n \n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+        self.wallet.rescan_utxos()\n+\n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"tx\"]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197042",
      "id" : 962197042,
      "in_reply_to_id" : 962136086,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5845WfYy",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 65,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1095555018,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197042/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T20:04:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197042",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197095"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It was unintentionally removed. Fixed it in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-03T20:05:22Z",
      "diff_hunk" : "@@ -158,156 +161,115 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n-        # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        # # Child B\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197095",
      "id" : 962197095,
      "in_reply_to_id" : 962137676,
      "line" : 224,
      "node_id" : "PRRC_kwDOABII5845WfZn",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 224,
      "original_position" : 256,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 241,
      "pull_request_review_id" : 1095555053,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197095/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T20:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197095",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197112"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197112"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677. Thanks for the review.",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-03T20:05:39Z",
      "diff_hunk" : "@@ -330,31 +292,22 @@ def assert_equal_package_results(self, node, testmempoolaccept_result, submitpac\n     def test_submit_child_with_parents(self, num_parents, partial_submit):\n         node = self.nodes[0]\n         peer = node.add_p2p_connection(P2PTxInvStore())\n-        # Test a package with num_parents parents and 1 child transaction.\n-        package_hex = []\n+\n         package_txns = []\n-        values = []\n-        scripts = []\n         for _ in range(num_parents):\n-            parent_coin = self.coins.pop()\n-            value = parent_coin[\"amount\"]\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-            package_hex.append(txhex)\n-            package_txns.append(tx)\n-            values.append(value)\n-            scripts.append(spk)\n+            parent_tx = self.wallet.create_self_transfer(fee=DEFAULT_FEE)\n+            package_txns.append(parent_tx)\n             if partial_submit and random.choice([True, False]):\n-                node.sendrawtransaction(txhex)\n-        child_hex = create_child_with_parents(node, self.address, self.privkeys, package_txns, values, scripts)\n-        package_hex.append(child_hex)\n-        package_txns.append(tx_from_hex(child_hex))\n+                node.sendrawtransaction(parent_tx[\"hex\"])\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx[\"new_utxo\"] for tx in package_txns], fee_per_output=10000) #DEFAULT_FEE\n+        package_txns.append(child_tx)\n \n-        testmempoolaccept_result = node.testmempoolaccept(rawtxs=package_hex)\n-        submitpackage_result = node.submitpackage(package=package_hex)\n+        testmempoolaccept_result = node.testmempoolaccept(rawtxs=[tx[\"hex\"] for tx in package_txns])\n+        submitpackage_result = node.submitpackage(package=[tx[\"hex\"] for tx in package_txns])\n \n         # Check that each result is present, with the correct size and fees\n-        for i in range(num_parents + 1):\n-            tx = package_txns[i]\n+        for package_tx in package_txns:\n+            tx = package_tx['tx']\n             wtxid = tx.getwtxid()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197112",
      "id" : 962197112,
      "in_reply_to_id" : 962138910,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5845WfZ4",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 311,
      "original_position" : 417,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1095555070,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197112/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T20:05:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197112",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962202697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962202697"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-03T21:13:34Z",
      "diff_hunk" : "@@ -158,156 +161,115 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n-        # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        # # Child B",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962202697",
      "id" : 962202697,
      "in_reply_to_id" : 962137598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5845WgxJ",
      "original_commit_id" : "10edc9c0d7b686808c040204103da01ed386a3c9",
      "original_line" : 173,
      "original_position" : 212,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1095559004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962202697/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-03T21:13:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962202697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r963868741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963868741"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe generate all the coins at the beginning so we don't need to multiple chains of 100 blocks for coinbase maturity?",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-06T15:42:08Z",
      "diff_hunk" : "@@ -91,52 +68,65 @@ def run_test(self):\n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n+                \"txid\": coinbase[\"txid\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+        self.generate(node, COINBASE_MATURITY, sync_fun=self.no_op)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r963868741",
      "id" : 963868741,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII5845c3hF",
      "original_commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "original_line" : 97,
      "original_position" : 115,
      "original_start_line" : 87,
      "path" : "test/functional/rpc_packages.py",
      "position" : 115,
      "pull_request_review_id" : 1097830340,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963868741/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 87,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-06T15:48:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963868741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r963876323"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963876323"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it's necessary to add these fields since the caller can get them from the `CTransaction` object... though I don't feel that strongly about it.",
      "commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "created_at" : "2022-09-06T15:47:45Z",
      "diff_hunk" : "@@ -291,6 +290,8 @@ def create_self_transfer_multi(\n                 height=0,\n             ) for i in range(len(tx.vout))],\n             \"txid\": txid,\n+            \"wtxid\": tx.getwtxid(),\n+            \"vsize\": tx.get_vsize(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r963876323",
      "id" : 963876323,
      "line" : 294,
      "node_id" : "PRRC_kwDOABII5845c5Xj",
      "original_commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "original_line" : 294,
      "original_position" : 13,
      "original_start_line" : 293,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 13,
      "pull_request_review_id" : 1097830340,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963876323/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 293,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-06T15:48:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963876323",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r967548438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548438"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in b21329d50639fc383d92c75ab7f20187de4ae0e9.",
      "commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "created_at" : "2022-09-10T00:11:17Z",
      "diff_hunk" : "@@ -91,52 +68,65 @@ def run_test(self):\n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n+                \"txid\": coinbase[\"txid\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+        self.generate(node, COINBASE_MATURITY, sync_fun=self.no_op)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r967548438",
      "id" : 967548438,
      "in_reply_to_id" : 963868741,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5845q54W",
      "original_commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "original_line" : 97,
      "original_position" : 115,
      "original_start_line" : 87,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1103008584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548438/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-10T00:11:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548438",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r967548513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548513"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/b21329d50639fc383d92c75ab7f20187de4ae0e9.",
      "commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "created_at" : "2022-09-10T00:11:28Z",
      "diff_hunk" : "@@ -291,6 +290,8 @@ def create_self_transfer_multi(\n                 height=0,\n             ) for i in range(len(tx.vout))],\n             \"txid\": txid,\n+            \"wtxid\": tx.getwtxid(),\n+            \"vsize\": tx.get_vsize(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r967548513",
      "id" : 967548513,
      "in_reply_to_id" : 963876323,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5845q55h",
      "original_commit_id" : "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "original_line" : 294,
      "original_position" : 13,
      "original_start_line" : 293,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : null,
      "pull_request_review_id" : 1103008613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548513/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-10T00:11:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983373466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983373466"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There's no reason not to construct this coin inside `test_independent`. You can use `node.getblock(blockhash=node.getblockhash(height=1), verbosity=2)[\"tx\"][0]` to get the coinbase from that specific block, but also why not just use create self transfer?",
      "commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "created_at" : "2022-09-29T10:35:31Z",
      "diff_hunk" : "@@ -49,94 +39,94 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983373466",
      "id" : 983373466,
      "line" : 54,
      "node_id" : "PRRC_kwDOABII5846nRaa",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 54,
      "original_position" : 63,
      "original_start_line" : 48,
      "path" : "test/functional/rpc_packages.py",
      "position" : 63,
      "pull_request_review_id" : 1125052275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983373466/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 48,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-29T10:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983373466",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983376594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983376594"
         }
      },
      "author_association" : "MEMBER",
      "body" : "These changes aren't necessary, as `createrawtransaction` is not a wallet RPC and we want a tx with no signature. It's a little weird to have `MiniWallet` sign it and then manually edit the tx to remove the signature.",
      "commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "created_at" : "2022-09-29T10:39:18Z",
      "diff_hunk" : "@@ -49,94 +39,94 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n \n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx_hex = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"hex\"]\n+            testres = self.nodes[0].testmempoolaccept([tx_hex])\n             assert testres[0][\"allowed\"]\n-            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            self.independent_txns_hex.append(tx_hex)\n             # testmempoolaccept returns a list of length one, avoid creating a 2D list\n             self.independent_txns_testres.append(testres[0])\n         self.independent_txns_testres_blank = [{\n             \"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n \n-        self.test_independent()\n+        self.test_independent(coin)\n         self.test_chain()\n         self.test_multiple_children()\n         self.test_multiple_parents()\n         self.test_conflicting()\n         self.test_rbf()\n         self.test_submitpackage()\n \n-    def test_independent(self):\n+    def test_independent(self, coin):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        tx_bad_sig = self.wallet.create_self_transfer(utxo_to_spend=coin)['tx']\n+        tx_bad_sig.wit.vtxinwit = []\n+        tx_bad_sig_hex = tx_bad_sig.serialize().hex()\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n         # transactions here but empty results in other cases.\n         assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n             \"txid\": tx_bad_sig.rehash(),\n-            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"wtxid\": tx_bad_sig.getwtxid(),\n+            \"allowed\": False,\n             \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983376594",
      "id" : 983376594,
      "line" : 110,
      "node_id" : "PRRC_kwDOABII5846nSLS",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 110,
      "original_position" : 137,
      "original_start_line" : 98,
      "path" : "test/functional/rpc_packages.py",
      "position" : 137,
      "pull_request_review_id" : 1125052275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983376594/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 98,
      "start_side" : "LEFT",
      "updated_at" : "2022-09-29T10:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983376594",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983383284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983383284"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You have reversed the order of the transactions here, so this is submitting the same package twice and no longer testing that it works in either order.",
      "commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "created_at" : "2022-09-29T10:46:54Z",
      "diff_hunk" : "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983383284",
      "id" : 983383284,
      "line" : 166,
      "node_id" : "PRRC_kwDOABII5846nTz0",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 166,
      "original_position" : 213,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 213,
      "pull_request_review_id" : 1125052275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983383284/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-29T10:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983383284",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983386023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Prefer double quotes for consistency",
      "commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "created_at" : "2022-09-29T10:49:52Z",
      "diff_hunk" : "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983386023",
      "id" : 983386023,
      "line" : 242,
      "node_id" : "PRRC_kwDOABII5846nUen",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 242,
      "original_position" : 335,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 335,
      "pull_request_review_id" : 1125052275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386023/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-29T10:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983386540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386540"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why delete the comment?",
      "commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "created_at" : "2022-09-29T10:50:22Z",
      "diff_hunk" : "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n-        # Replacement transaction is identical except has double the fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983386540",
      "id" : 983386540,
      "line" : 288,
      "node_id" : "PRRC_kwDOABII5846nUms",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 288,
      "original_position" : 338,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 338,
      "pull_request_review_id" : 1125052275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386540/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-29T10:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386540",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983386778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386778"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why delete the comment?",
      "commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "created_at" : "2022-09-29T10:50:35Z",
      "diff_hunk" : "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n-        # Replacement transaction is identical except has double the fee\n-        replacement_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n-        replacement_tx.vout[0].nValue -= int(fee * COIN)  # Doubled fee\n-        signed_replacement_tx = node.signrawtransactionwithkey(replacement_tx.serialize().hex(), self.privkeys)\n-        replacement_tx = tx_from_hex(signed_replacement_tx[\"hex\"])\n-\n-        self.log.info(\"Test that transactions within a package cannot replace each other\")\n-        testres_rbf_conflicting = node.testmempoolaccept([signed_replaceable_tx[\"hex\"], signed_replacement_tx[\"hex\"]])\n+        replacement_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = 2 * fee)\n+        testres_rbf_conflicting = node.testmempoolaccept([replaceable_tx[\"hex\"], replacement_tx[\"hex\"]])\n         assert_equal(testres_rbf_conflicting, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": replacement_tx[\"txid\"], \"wtxid\": replacement_tx[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test that packages cannot conflict with mempool transactions, even if a valid BIP125 RBF\")\n-        node.sendrawtransaction(signed_replaceable_tx[\"hex\"])\n-        testres_rbf_single = node.testmempoolaccept([signed_replacement_tx[\"hex\"]])\n-        # This transaction is a valid BIP125 replace-by-fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983386778",
      "id" : 983386778,
      "line" : 304,
      "node_id" : "PRRC_kwDOABII5846nUqa",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 304,
      "original_position" : 358,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 358,
      "pull_request_review_id" : 1125052275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386778/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-29T10:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386778",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983389136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983389136"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nice, but needs documentation. You can copy paste the docstring from `make_chain` to here.",
      "commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "created_at" : "2022-09-29T10:53:12Z",
      "diff_hunk" : "@@ -338,6 +337,19 @@ def sendrawtransaction(self, *, from_node, tx_hex, maxfeerate=0, **kwargs):\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n         return txid\n \n+    def create_self_transfer_chain(self, *, chain_length):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983389136",
      "id" : 983389136,
      "line" : 340,
      "node_id" : "PRRC_kwDOABII5846nVPQ",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 340,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 12,
      "pull_request_review_id" : 1125052275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983389136/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-29T10:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983389136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986362485"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986362485"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 17cad448516a6906ff637593ab57df332fade5d2.",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-10-04T01:39:02Z",
      "diff_hunk" : "@@ -338,6 +337,19 @@ def sendrawtransaction(self, *, from_node, tx_hex, maxfeerate=0, **kwargs):\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n         return txid\n \n+    def create_self_transfer_chain(self, *, chain_length):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986362485",
      "id" : 986362485,
      "in_reply_to_id" : 983389136,
      "line" : 340,
      "node_id" : "PRRC_kwDOABII5846yrJ1",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 340,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 12,
      "pull_request_review_id" : 1129204370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986362485/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-04T01:39:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986362485",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363070"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Was inadvertently. Done in 17cad448516a6906ff637593ab57df332fade5d2.",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-10-04T01:40:34Z",
      "diff_hunk" : "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n-        # Replacement transaction is identical except has double the fee\n-        replacement_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n-        replacement_tx.vout[0].nValue -= int(fee * COIN)  # Doubled fee\n-        signed_replacement_tx = node.signrawtransactionwithkey(replacement_tx.serialize().hex(), self.privkeys)\n-        replacement_tx = tx_from_hex(signed_replacement_tx[\"hex\"])\n-\n-        self.log.info(\"Test that transactions within a package cannot replace each other\")\n-        testres_rbf_conflicting = node.testmempoolaccept([signed_replaceable_tx[\"hex\"], signed_replacement_tx[\"hex\"]])\n+        replacement_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = 2 * fee)\n+        testres_rbf_conflicting = node.testmempoolaccept([replaceable_tx[\"hex\"], replacement_tx[\"hex\"]])\n         assert_equal(testres_rbf_conflicting, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": replacement_tx[\"txid\"], \"wtxid\": replacement_tx[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test that packages cannot conflict with mempool transactions, even if a valid BIP125 RBF\")\n-        node.sendrawtransaction(signed_replaceable_tx[\"hex\"])\n-        testres_rbf_single = node.testmempoolaccept([signed_replacement_tx[\"hex\"]])\n-        # This transaction is a valid BIP125 replace-by-fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363070",
      "id" : 986363070,
      "in_reply_to_id" : 983386778,
      "line" : 304,
      "node_id" : "PRRC_kwDOABII5846yrS-",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 304,
      "original_position" : 358,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 343,
      "pull_request_review_id" : 1129205132,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363070/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-04T01:40:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363094"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Was inadvertently. Done in 17cad448516a6906ff637593ab57df332fade5d2.",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-10-04T01:40:39Z",
      "diff_hunk" : "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n-        # Replacement transaction is identical except has double the fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363094",
      "id" : 986363094,
      "in_reply_to_id" : 983386540,
      "line" : 288,
      "node_id" : "PRRC_kwDOABII5846yrTW",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 288,
      "original_position" : 338,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 323,
      "pull_request_review_id" : 1129205172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363094/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-04T01:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363094",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363196"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/17cad448516a6906ff637593ab57df332fade5d2.",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-10-04T01:40:51Z",
      "diff_hunk" : "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363196",
      "id" : 986363196,
      "in_reply_to_id" : 983386023,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846yrU8",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 242,
      "original_position" : 335,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1129205276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363196/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-04T01:40:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363311"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed in https://github.com/bitcoin/bitcoin/commit/17cad448516a6906ff637593ab57df332fade5d2.",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-10-04T01:41:03Z",
      "diff_hunk" : "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363311",
      "id" : 986363311,
      "in_reply_to_id" : 983383284,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846yrWv",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 166,
      "original_position" : 213,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1129205393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363311/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-04T01:41:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363385"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363385"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/17cad448516a6906ff637593ab57df332fade5d2.",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-10-04T01:41:13Z",
      "diff_hunk" : "@@ -49,94 +39,94 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n \n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx_hex = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"hex\"]\n+            testres = self.nodes[0].testmempoolaccept([tx_hex])\n             assert testres[0][\"allowed\"]\n-            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            self.independent_txns_hex.append(tx_hex)\n             # testmempoolaccept returns a list of length one, avoid creating a 2D list\n             self.independent_txns_testres.append(testres[0])\n         self.independent_txns_testres_blank = [{\n             \"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n \n-        self.test_independent()\n+        self.test_independent(coin)\n         self.test_chain()\n         self.test_multiple_children()\n         self.test_multiple_parents()\n         self.test_conflicting()\n         self.test_rbf()\n         self.test_submitpackage()\n \n-    def test_independent(self):\n+    def test_independent(self, coin):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        tx_bad_sig = self.wallet.create_self_transfer(utxo_to_spend=coin)['tx']\n+        tx_bad_sig.wit.vtxinwit = []\n+        tx_bad_sig_hex = tx_bad_sig.serialize().hex()\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n         # transactions here but empty results in other cases.\n         assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n             \"txid\": tx_bad_sig.rehash(),\n-            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"wtxid\": tx_bad_sig.getwtxid(),\n+            \"allowed\": False,\n             \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363385",
      "id" : 986363385,
      "in_reply_to_id" : 983376594,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846yrX5",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 112,
      "original_position" : 137,
      "original_start_line" : 98,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1129205485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363385/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "updated_at" : "2022-10-04T01:41:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363385",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986365874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986365874"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`node.getblock(blockhash=node.getblockhash(height=1), verbosity=2)[\"tx\"][0]` returns a UTXO that does not need a signature, as the UTXO are being generated for a `ADDRESS_OP_TRUE` miniwallet.\r\n\r\nThe same applies to `create_self_transfer`.\r\n\r\nThe reason why this code is not inside `test_independent` is https://github.com/bitcoin/bitcoin/pull/25986#discussion_r963868741.",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-10-04T01:47:47Z",
      "diff_hunk" : "@@ -49,94 +39,94 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986365874",
      "id" : 986365874,
      "in_reply_to_id" : 983373466,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846yr-y",
      "original_commit_id" : "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "original_line" : 57,
      "original_position" : 63,
      "original_start_line" : 48,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 1129208706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986365874/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-04T16:34:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986365874",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1029043259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029043259"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `get_deterministic_priv_key` is not often used alongside the MinWallet is used. Why not use its own method?\r\n```suggestion\r\n        address = self.wallet.getaddress()\r\n        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {address: 1})\r\n```\r\nAlso, if you decide to touch this, `garbage_tx_hex` follows better the naming scheme.",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-11-22T09:00:08Z",
      "diff_hunk" : "@@ -49,53 +42,54 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n                 \"amount\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n \n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+\n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx_hex = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"hex\"]\n+            testres = self.nodes[0].testmempoolaccept([tx_hex])\n             assert testres[0][\"allowed\"]\n-            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            self.independent_txns_hex.append(tx_hex)\n             # testmempoolaccept returns a list of length one, avoid creating a 2D list\n             self.independent_txns_testres.append(testres[0])\n         self.independent_txns_testres_blank = [{\n             \"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n \n-        self.test_independent()\n+        self.test_independent(coin)\n         self.test_chain()\n         self.test_multiple_children()\n         self.test_multiple_parents()\n         self.test_conflicting()\n         self.test_rbf()\n         self.test_submitpackage()\n \n-    def test_independent(self):\n+    def test_independent(self, coin):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        address = node.get_deterministic_priv_key().address\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {address: 1})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1029043259",
      "id" : 1029043259,
      "line" : 92,
      "node_id" : "PRRC_kwDOABII5849VfQ7",
      "original_commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "original_line" : 92,
      "original_position" : 106,
      "original_start_line" : 91,
      "path" : "test/functional/rpc_packages.py",
      "position" : 106,
      "pull_request_review_id" : 1189630994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029043259/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 91,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-22T15:26:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029043259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1029462564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029462564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: I believe that is for the best when similar implementation details follow similar checks in code across functional tests. Although I believe this is important, I consider it a nit as this is not code you've written as part of this refactor. \r\n\r\nWhat I am referring to, is the assertion after a `testmepoolaccept()`. In a similar example at `mempool_package_limits`, the implementation logic differs a bit and imo improves the readability by not checking for `(w)txid`.\r\nhttps://github.com/bitcoin/bitcoin/blob/85892f77c98c7a08834a06d52af3eb474275afd8/test/functional/mempool_package_limits.py#L116-L118\r\n\r\nJust a note that a similar assertion-of-`testmepoolaccept()` logic is already a method as part of another test. I've tried to implement it as part of this test, but it ended up not worth it.\r\nhttps://github.com/bitcoin/bitcoin/blob/85892f77c98c7a08834a06d52af3eb474275afd8/test/functional/mempool_accept.py#L49-L55\r\n\r\n*This assertion-of-`testmepoolaccept()` pattern can be observed in multiple occasions, this highlights just one of them. \r\n",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-11-22T15:15:19Z",
      "diff_hunk" : "@@ -158,156 +150,118 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n \n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_b_tx[\"hex\"], child_a_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx[\"hex\"]]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1029462564",
      "id" : 1029462564,
      "line" : 225,
      "node_id" : "PRRC_kwDOABII5849XFok",
      "original_commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "original_line" : 225,
      "original_position" : 288,
      "original_start_line" : 224,
      "path" : "test/functional/rpc_packages.py",
      "position" : 288,
      "pull_request_review_id" : 1189630994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029462564/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 224,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-22T15:26:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029462564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1029472846"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029472846"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "comment good",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-11-22T15:22:31Z",
      "diff_hunk" : "@@ -376,30 +320,25 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         assert \"package-feerate\" not in submitpackage_result\n \n         # The node should announce each transaction. No guarantees for propagation.\n-        peer.wait_for_broadcast([tx.getwtxid() for tx in package_txns])\n+        peer.wait_for_broadcast([tx[\"tx\"].getwtxid() for tx in package_txns])\n         self.generate(node, 1)\n \n-\n     def test_submit_cpfp(self):\n         node = self.nodes[0]\n         peer = node.add_p2p_connection(P2PTxInvStore())\n \n-        # 2 parent 1 child CPFP. First parent pays high fees, second parent pays 0 fees and is\n-        # fee-bumped by the child.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1029472846",
      "id" : 1029472846,
      "line" : 388,
      "node_id" : "PRRC_kwDOABII5849XIJO",
      "original_commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "original_line" : 388,
      "original_position" : 421,
      "original_start_line" : 387,
      "path" : "test/functional/rpc_packages.py",
      "position" : 421,
      "pull_request_review_id" : 1189630994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029472846/reactions"
      },
      "side" : "LEFT",
      "start_line" : 387,
      "start_side" : "LEFT",
      "updated_at" : "2022-11-22T15:26:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029472846",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1033444790"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1033444790"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree doing similar checks each time is good and having a helper like `check_mempool_result()` is a way to achieve that. Fine for a future PR.",
      "commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "created_at" : "2022-11-28T11:47:43Z",
      "diff_hunk" : "@@ -158,156 +150,118 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n \n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_b_tx[\"hex\"], child_a_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx[\"hex\"]]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1033444790",
      "id" : 1033444790,
      "in_reply_to_id" : 1029462564,
      "line" : 225,
      "node_id" : "PRRC_kwDOABII5849mR22",
      "original_commit_id" : "17cad448516a6906ff637593ab57df332fade5d2",
      "original_line" : 225,
      "original_position" : 288,
      "original_start_line" : 224,
      "path" : "test/functional/rpc_packages.py",
      "position" : 288,
      "pull_request_review_id" : 1195667232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1033444790/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 224,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-28T11:50:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1033444790",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
