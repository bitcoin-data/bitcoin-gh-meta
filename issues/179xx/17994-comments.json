[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r370530478"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370530478"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The last height, or the maximum height?",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-01-24T09:05:55Z",
      "diff_hunk" : "@@ -1757,6 +1761,12 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n+        // rev files are written in block height order, whereas blk files are written as blocks come in (often out of order)\n+        // we want to flush the rev (undo) file once we've written the last block, which is indicated by the last height",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r370530478",
      "id" : 370530478,
      "line" : 1766,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMDQ3OA==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1766,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 38,
      "pull_request_review_id" : 347820235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370530478",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r370535220"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370535220"
         }
      },
      "author_association" : "MEMBER",
      "body" : "They are the same:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/28fbe68fdcac2a06f359b1e48555a3d23015c2b7/src/chain.h#L85-L86",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-01-24T09:18:34Z",
      "diff_hunk" : "@@ -1757,6 +1761,12 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n+        // rev files are written in block height order, whereas blk files are written as blocks come in (often out of order)\n+        // we want to flush the rev (undo) file once we've written the last block, which is indicated by the last height",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r370535220",
      "id" : 370535220,
      "in_reply_to_id" : 370530478,
      "line" : 1766,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNTIyMA==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1766,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 38,
      "pull_request_review_id" : 347826438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370535220",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2020-01-24T10:03:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-578065964",
      "id" : 578065964,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODA2NTk2NA==",
      "updated_at" : "2020-05-09T01:29:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578065964",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Synced two datadirs (master and this branch) to block 484516, which resulted in 995 rev files, master using 38277312 bytes, and this branch 35573680 bytes. The average wasted space per rev file comes out at 2717 bytes (~3kb), which is quite a bit lower than my assumptions (if it was completely random, it should be ~500kb per rev file).\r\n\r\nCopying blocks/rev* into a separate dir reveals a few kb lower for this branch -- 35570968 -- caused by the latest rev file having some pre-allocation. The same for the master datadir results in 36547408 bytes.\r\n\r\nNot sure why it's not higher, but still. I don't think a backport is even necessary, but fixing this bug and adding a one time sweep/finalize of all rev files is something that we should do.",
      "created_at" : "2020-01-26T11:38:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-578493533",
      "id" : 578493533,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODQ5MzUzMw==",
      "updated_at" : "2020-01-26T11:38:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578493533",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK 48081229c10969ac5993c826c8bd7687cd0503e5\r\n\r\nAgree, looks cleaner than #17892!",
      "created_at" : "2020-02-17T16:54:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-587082534",
      "id" : 587082534,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NzA4MjUzNA==",
      "updated_at" : "2020-02-17T16:54:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587082534",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I looked at the code and just want to confirm that I got it right. Is the following example correct?\r\n\r\nLet's assume for simplicity that `blk*.dat` and `rev*.dat` files can contain up to 3 blocks.\r\nInitially just the genesis block (height 0) is in `blk01` and `rev01`. Then:\r\n* block at height 2 is downloaded\r\n  * it is written to `blk01`\r\n  * undo for it will be written to `rev01`, but not yet\r\n* block at height 3 is downloaded\r\n  * it is written to `blk01`\r\n  * undo for it will be written to `rev01`, but not yet\r\n* block at height 4 is downloaded\r\n  * `blk01` is finalized as it is full with 3 blocks (with heights 0, 2, 3)\r\n  * the downloaded block with height 4 is written to `blk02`\r\n  * its undo will eventually be in `rev02`\r\n* block at height 1 is downloaded\r\n  * it is written to `blk02`\r\n  * its undo is written to `rev02`\r\n  * now that the block at height 2 is chained, undo for it is written to `rev01`\r\n  * now that the block at height 3 is chained, undo for it is written to `rev01`\r\n  * now that the block at height 4 is chained, undo for it is written to `rev02`",
      "created_at" : "2020-03-11T19:16:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-597819294",
      "id" : 597819294,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzgxOTI5NA==",
      "updated_at" : "2020-03-11T20:14:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597819294",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391244966"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391244966"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We want to flush the rev file along with the block file, but we are not going to do that if `fFinalize` is `true`. What about calling `FlushUndoFile(nLastBlockFile)` unconditionally here?",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-11T20:19:13Z",
      "diff_hunk" : "@@ -1731,19 +1731,23 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\n }\n \n-void static FlushBlockFile(bool fFinalize = false)\n+static void FlushUndoFile(int block_file, bool finalize = false)\n {\n-    LOCK(cs_LastBlockFile);\n+    FlatFilePos undo_pos_old(block_file, vinfoBlockFile[block_file].nUndoSize);\n+    if (!UndoFileSeq().Flush(undo_pos_old, finalize)) {\n+        AbortNode(\"Flushing undo file to disk failed. This is likely the result of an I/O error.\");\n+    }\n+}\n \n+static void FlushBlockFile(bool fFinalize = false)\n+{\n+    LOCK(cs_LastBlockFile);\n     FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n-    FlatFilePos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n-\n-    bool status = true;\n-    status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n-    status &= UndoFileSeq().Flush(undo_pos_old, fFinalize);\n-    if (!status) {\n+    if (!BlockFileSeq().Flush(block_pos_old, fFinalize)) {\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\n     }\n+    // the undo file is actually finalized at a later stage, but we do want to flush it along with the block file\n+    if (!fFinalize) FlushUndoFile(nLastBlockFile);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391244966",
      "id" : 391244966,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NDk2Ng==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1750,
      "original_position" : 28,
      "original_start_line" : 1749,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 373096135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391244966",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391249970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391249970"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe I am missing something, but it looks to me that if blocks are being downloaded in-order, then the `_pos.nFile < nLastBlockFile` condition will never be true because those will always be equal?",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-11T20:29:18Z",
      "diff_hunk" : "@@ -1757,6 +1761,12 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n+        // rev files are written in block height order, whereas blk files are written as blocks come in (often out of order)\n+        // we want to flush the rev (undo) file once we've written the last block, which is indicated by the last height\n+        // in the block file info as below\n+        if (_pos.nFile < nLastBlockFile && static_cast<uint32_t>(pindex->nHeight) == vinfoBlockFile[_pos.nFile].nHeightLast) {\n+            FlushUndoFile(_pos.nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391249970",
      "id" : 391249970,
      "line" : 1771,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0OTk3MA==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1771,
      "original_position" : 40,
      "original_start_line" : 1767,
      "path" : "src/validation.cpp",
      "position" : 43,
      "pull_request_review_id" : 373102528,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : 1770,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391249970",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391416459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391416459"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There's basically no reason to do a non-final flush of the undo file, except on shutdown (which happens now). This is the same for the block file (since the case you are arguing is for a finalized flush).",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-12T06:04:01Z",
      "diff_hunk" : "@@ -1731,19 +1731,23 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\n }\n \n-void static FlushBlockFile(bool fFinalize = false)\n+static void FlushUndoFile(int block_file, bool finalize = false)\n {\n-    LOCK(cs_LastBlockFile);\n+    FlatFilePos undo_pos_old(block_file, vinfoBlockFile[block_file].nUndoSize);\n+    if (!UndoFileSeq().Flush(undo_pos_old, finalize)) {\n+        AbortNode(\"Flushing undo file to disk failed. This is likely the result of an I/O error.\");\n+    }\n+}\n \n+static void FlushBlockFile(bool fFinalize = false)\n+{\n+    LOCK(cs_LastBlockFile);\n     FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n-    FlatFilePos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n-\n-    bool status = true;\n-    status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n-    status &= UndoFileSeq().Flush(undo_pos_old, fFinalize);\n-    if (!status) {\n+    if (!BlockFileSeq().Flush(block_pos_old, fFinalize)) {\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\n     }\n+    // the undo file is actually finalized at a later stage, but we do want to flush it along with the block file\n+    if (!fFinalize) FlushUndoFile(nLastBlockFile);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391416459",
      "id" : 391416459,
      "in_reply_to_id" : 391244966,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxNjQ1OQ==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1750,
      "original_position" : 28,
      "original_start_line" : 1749,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 373296604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391416459",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391416617"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391416617"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I am pretty sure I tested this but I can't convince myself that you're wrong by looking at the code so I will test this again.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-12T06:04:41Z",
      "diff_hunk" : "@@ -1757,6 +1761,12 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n+        // rev files are written in block height order, whereas blk files are written as blocks come in (often out of order)\n+        // we want to flush the rev (undo) file once we've written the last block, which is indicated by the last height\n+        // in the block file info as below\n+        if (_pos.nFile < nLastBlockFile && static_cast<uint32_t>(pindex->nHeight) == vinfoBlockFile[_pos.nFile].nHeightLast) {\n+            FlushUndoFile(_pos.nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391416617",
      "id" : 391416617,
      "in_reply_to_id" : 391249970,
      "line" : 1771,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxNjYxNw==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1771,
      "original_position" : 40,
      "original_start_line" : 1767,
      "path" : "src/validation.cpp",
      "position" : 43,
      "pull_request_review_id" : 373296807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : 1770,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391416617",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391452419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391452419"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, then this turns into a nit, feel free to ignore: maybe update the comment to be in line with the code: \"we do want to flush it along with the block file _in non-finalizing flushes_\".",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-12T08:01:23Z",
      "diff_hunk" : "@@ -1731,19 +1731,23 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\n }\n \n-void static FlushBlockFile(bool fFinalize = false)\n+static void FlushUndoFile(int block_file, bool finalize = false)\n {\n-    LOCK(cs_LastBlockFile);\n+    FlatFilePos undo_pos_old(block_file, vinfoBlockFile[block_file].nUndoSize);\n+    if (!UndoFileSeq().Flush(undo_pos_old, finalize)) {\n+        AbortNode(\"Flushing undo file to disk failed. This is likely the result of an I/O error.\");\n+    }\n+}\n \n+static void FlushBlockFile(bool fFinalize = false)\n+{\n+    LOCK(cs_LastBlockFile);\n     FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n-    FlatFilePos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n-\n-    bool status = true;\n-    status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n-    status &= UndoFileSeq().Flush(undo_pos_old, fFinalize);\n-    if (!status) {\n+    if (!BlockFileSeq().Flush(block_pos_old, fFinalize)) {\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\n     }\n+    // the undo file is actually finalized at a later stage, but we do want to flush it along with the block file\n+    if (!fFinalize) FlushUndoFile(nLastBlockFile);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391452419",
      "id" : 391452419,
      "in_reply_to_id" : 391244966,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1MjQxOQ==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1750,
      "original_position" : 28,
      "original_start_line" : 1749,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 373341156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391452419",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391454552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391454552"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The way I see it is that `_pos.nFile < nLastBlockFile && ` can (should) be dropped and the second condition suffices - if we are writing the last (highest) block in the rev file, then also finalize it because we are not going to touch it again.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-12T08:07:03Z",
      "diff_hunk" : "@@ -1757,6 +1761,12 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n+        // rev files are written in block height order, whereas blk files are written as blocks come in (often out of order)\n+        // we want to flush the rev (undo) file once we've written the last block, which is indicated by the last height\n+        // in the block file info as below\n+        if (_pos.nFile < nLastBlockFile && static_cast<uint32_t>(pindex->nHeight) == vinfoBlockFile[_pos.nFile].nHeightLast) {\n+            FlushUndoFile(_pos.nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r391454552",
      "id" : 391454552,
      "in_reply_to_id" : 391249970,
      "line" : 1771,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ1NDU1Mg==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1771,
      "original_position" : 40,
      "original_start_line" : 1767,
      "path" : "src/validation.cpp",
      "position" : 43,
      "pull_request_review_id" : 373341156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : 1770,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/391454552",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r392558570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392558570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry for tardiness, work kept me busy, but I managed to verify that this is *not* working as it should. I will fix soon.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-14T05:23:56Z",
      "diff_hunk" : "@@ -1757,6 +1761,12 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n+        // rev files are written in block height order, whereas blk files are written as blocks come in (often out of order)\n+        // we want to flush the rev (undo) file once we've written the last block, which is indicated by the last height\n+        // in the block file info as below\n+        if (_pos.nFile < nLastBlockFile && static_cast<uint32_t>(pindex->nHeight) == vinfoBlockFile[_pos.nFile].nHeightLast) {\n+            FlushUndoFile(_pos.nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r392558570",
      "id" : 392558570,
      "in_reply_to_id" : 391249970,
      "line" : 1771,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1ODU3MA==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1771,
      "original_position" : 40,
      "original_start_line" : 1767,
      "path" : "src/validation.cpp",
      "position" : 43,
      "pull_request_review_id" : 374699402,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : 1770,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392558570",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I reproduced the bug in a controlled, deterministic environment with a [unit test + tweaks](https://gist.github.com/vasild/8c06b3dbc493522f683a671d71b4c122). The current patch in this PR (4808122) indeed fixes it, but it introduces another problem - it would wrongly skip finalizing of the undo files in case the blocks are downloaded in-height-order.\r\n\r\nThere are two cases when we should finalize an undo file (IFF):\r\n* we have just moved to a subsequent one (like with block files) - \"normal\" in-height-order scenario or\r\n* we are coming back to a lower undo file from a higher undo file to complete an out-of-order block's undo and this undo slot is the last/final in the lower undo file.\r\n\r\nThe following patch (on top of master @ 9cc7eba1b) fixes it:\r\n\r\n```diff\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -131,13 +131,39 @@ CTxMemPool mempool(&feeEstimator);\r\n // Internal stuff\r\n namespace {\r\n     CBlockIndex* pindexBestInvalid = nullptr;\r\n \r\n     RecursiveMutex cs_LastBlockFile;\r\n     std::vector<CBlockFileInfo> vinfoBlockFile;\r\n+\r\n+    /** Last blk*.dat file that has been written to.\r\n+     * Used to detect when we move from blkN to blkN+1 so we can trigger a\r\n+     * finalization of blkN.\r\n+     * Blocks are appended to blk files in the order they are received from\r\n+     * the network (which may not be height order). When a blk file is about\r\n+     * to become larger than MAX_BLOCKFILE_SIZE then we move to the next blk\r\n+     * file and finalize the one we just left.\r\n+     */\r\n     int nLastBlockFile = 0;\r\n+\r\n+    /** Highest rev*.dat file that has been written to.\r\n+     * Used to detect the last write to revN so it can be finalized.\r\n+     * Undo files don't have a max size limit. For every block that resides in\r\n+     * blkN, its corresponding undo resides in revN.\r\n+     * However, the undo for a given block is only appended to the rev file\r\n+     * after all blocks at a lower height have been stored together with their\r\n+     * undos. It follows that block and undo data may be in different order\r\n+     * in the corresponding blk and rev files, for example:\r\n+     * blkN: block5, block7, block6\r\n+     * revN: block5, block6, block7\r\n+     * if block7 was received before block6.\r\n+     * Also we may write to revN after writing to revM, for N < M which never\r\n+     * happens with blk files.\r\n+     */\r\n+    int nHighestUndoFile = 0;\r\n+\r\n     /** Global flag to indicate we should check to see if there are\r\n      *  block/undo files that should be deleted.  Set on startup\r\n      *  or if we allocate more file space when we're in prune mode\r\n      */\r\n     bool fCheckForPruning = false;\r\n \r\n@@ -1733,23 +1759,25 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\r\n     // move best block pointer to prevout block\r\n     view.SetBestBlock(pindex->pprev->GetBlockHash());\r\n \r\n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\r\n }\r\n \r\n-void static FlushBlockFile(bool fFinalize = false)\r\n+static void FlushUndoFile(int undo_file, bool finalize = false)\r\n {\r\n-    LOCK(cs_LastBlockFile);\r\n-\r\n-    FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\r\n-    FlatFilePos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\r\n+    FlatFilePos pos(undo_file, vinfoBlockFile[undo_file].nUndoSize);\r\n+    if (!UndoFileSeq().Flush(pos, finalize)) {\r\n+        AbortNode(\"Flushing undo file to disk failed. This is likely the result of an I/O error.\");\r\n+    }\r\n+}\r\n \r\n-    bool status = true;\r\n-    status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\r\n-    status &= UndoFileSeq().Flush(undo_pos_old, fFinalize);\r\n-    if (!status) {\r\n+static void FlushBlockFile(bool fFinalize = false)\r\n+{\r\n+    LOCK(cs_LastBlockFile);\r\n+    FlatFilePos pos(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\r\n+    if (!BlockFileSeq().Flush(pos, fFinalize)) {\r\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\r\n     }\r\n }\r\n \r\n static bool FindUndoPos(BlockValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize);\r\n \r\n@@ -1760,12 +1788,37 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\r\n         FlatFilePos _pos;\r\n         if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, CLIENT_VERSION) + 40))\r\n             return error(\"ConnectBlock(): FindUndoPos failed\");\r\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\r\n             return AbortNode(state, \"Failed to write undo data\");\r\n \r\n+        const unsigned thisHeight = static_cast<unsigned>(pindex->nHeight);\r\n+\r\n+        // Flush and finalize the preceding undo file in the case when blocks\r\n+        // come in height order and we have moved to a subsequent undo file.\r\n+        const bool movedToSubsequent = _pos.nFile > nHighestUndoFile;\r\n+        const bool adjacentHeights =\r\n+            thisHeight == vinfoBlockFile[nHighestUndoFile].nHeightLast + 1;\r\n+\r\n+        if (movedToSubsequent && adjacentHeights) {\r\n+            FlushUndoFile(nHighestUndoFile, true);\r\n+        }\r\n+\r\n+        // Flush and finalize the old undo file if we went back to write\r\n+        // to it and we wrote its last entry.\r\n+        const bool wroteToOldFile = _pos.nFile < nHighestUndoFile;\r\n+        const bool isLastEntry = thisHeight == vinfoBlockFile[_pos.nFile].nHeightLast;\r\n+\r\n+        if (wroteToOldFile && isLastEntry) {\r\n+            FlushUndoFile(_pos.nFile, true);\r\n+        }\r\n+\r\n+        if (movedToSubsequent) {\r\n+            nHighestUndoFile = _pos.nFile;\r\n+        }\r\n+\r\n         // update nUndoPos in block index\r\n         pindex->nUndoPos = _pos.nPos;\r\n         pindex->nStatus |= BLOCK_HAVE_UNDO;\r\n         setDirtyBlockIndex.insert(pindex);\r\n     }\r\n \r\n@@ -2291,12 +2344,13 @@ bool CChainState::FlushStateToDisk(\r\n             }\r\n             {\r\n                 LOG_TIME_MILLIS(\"write block and undo data to disk\", BCLog::BENCH);\r\n \r\n                 // First make sure all block and undo data is flushed to disk.\r\n                 FlushBlockFile();\r\n+                FlushUndoFile(nHighestUndoFile);\r\n             }\r\n \r\n             // Then update all block file information (which may refer to block and undo files).\r\n             {\r\n                 LOG_TIME_MILLIS(\"write block index to disk\", BCLog::BENCH);\r\n \r\n```\r\n\r\nFeel free to pick it in its entirety, just pieces of it, just the idea or propose another approach. I will test it.\r\n\r\n[Annotated debug output with the bug present and with the bug fixed (by the above patch).](https://gist.github.com/vasild/34e342c869aff9a5a870b3ef3fff154c)\r\n\r\nRun the unit test like `./src/test/test_bitcoin --run_test=\"*/download_blocks_out_of_order\" --log_level=all -x 0 > /tmp/log`\r\nFilter its output: `grep -w BBB /tmp/log |sed -E -e 's/^2020[^ ]+ //' -e 's/BBB //'`\r\n\r\nI hope this helps!",
      "created_at" : "2020-03-14T09:07:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-599031098",
      "id" : 599031098,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5OTAzMTA5OA==",
      "updated_at" : "2020-03-14T09:07:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599031098",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r392570411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392570411"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No worries. I started at this problem long enough and finally it cracked.\r\n\r\nIndeed `_pos.nFile < nLastBlockFile` is never true if blocks come in-height-order and this needs to be adjusted. However, just removing that condition, as I suggest above, is not ok because then the second condition will be true for every in-height-order write and this will cause excessive flushing and finalizing. See the proposed [patch](https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-599031098) for a fully working solution (I hope).",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-14T09:11:51Z",
      "diff_hunk" : "@@ -1757,6 +1761,12 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n+        // rev files are written in block height order, whereas blk files are written as blocks come in (often out of order)\n+        // we want to flush the rev (undo) file once we've written the last block, which is indicated by the last height\n+        // in the block file info as below\n+        if (_pos.nFile < nLastBlockFile && static_cast<uint32_t>(pindex->nHeight) == vinfoBlockFile[_pos.nFile].nHeightLast) {\n+            FlushUndoFile(_pos.nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r392570411",
      "id" : 392570411,
      "in_reply_to_id" : 391249970,
      "line" : 1771,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3MDQxMQ==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1771,
      "original_position" : 40,
      "original_start_line" : 1767,
      "path" : "src/validation.cpp",
      "position" : 43,
      "pull_request_review_id" : 374709388,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : 1770,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392570411",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r394916198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394916198"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've got something but testing takes time (I don't wanna have to wait days each time so I'm juggling 300 GB full node dirs around).",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-19T10:09:51Z",
      "diff_hunk" : "@@ -1757,6 +1761,12 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationSt\n             return error(\"ConnectBlock(): FindUndoPos failed\");\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\n             return AbortNode(state, \"Failed to write undo data\");\n+        // rev files are written in block height order, whereas blk files are written as blocks come in (often out of order)\n+        // we want to flush the rev (undo) file once we've written the last block, which is indicated by the last height\n+        // in the block file info as below\n+        if (_pos.nFile < nLastBlockFile && static_cast<uint32_t>(pindex->nHeight) == vinfoBlockFile[_pos.nFile].nHeightLast) {\n+            FlushUndoFile(_pos.nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r394916198",
      "id" : 394916198,
      "in_reply_to_id" : 391249970,
      "line" : 1771,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxNjE5OA==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1771,
      "original_position" : 40,
      "original_start_line" : 1767,
      "path" : "src/validation.cpp",
      "position" : 43,
      "pull_request_review_id" : 377579484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : 1770,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/394916198",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@vasild Tremendous work. Thank you very much. I will look closer at your patch, and also evaluate my solution over the next few days to see if it does what I want. (And compare it to yours.)\r\n\r\nMy solution was to patch this in two places; one for the case \"rev file lags behind\", and one for \"rev file is up to date\". This was very little code (note that the last commit is a NOMERGE to demonstrate the fix).\r\n\r\n\r\n<details>\r\n    <summary>Log outputs</summary>\r\n\r\nI see this, for a node that was a week or so behind, if I grep -v 'UpdateTip':\r\n\r\n```\r\n2020-03-19T12:34:31Z Pre-allocating up to position 0x7000000 in blk02004.dat\r\n2020-03-19T12:34:32Z Pre-allocating up to position 0x8000000 in blk02004.dat\r\n2020-03-19T12:34:33Z iterating nFile:\r\n    last height = 622161;\r\n    chain tip height = 621899\r\n    -> DO NOT FLUSH UNDO FILE\r\n2020-03-19T12:34:33Z Leaving block file 2004: CBlockFileInfo(blocks=112, size=133860058, heights=621899...622161, time=2020-03-16...2020-03-19)\r\n2020-03-19T12:34:34Z unflushed undo: [2003 2004]\r\n2020-03-19T12:34:34Z Pre-allocating up to position 0x1000000 in blk02005.dat\r\n...\r\n2020-03-19T12:34:38Z Pre-allocating up to position 0x5000000 in blk02005.dat\r\n2020-03-19T12:34:43Z Pre-allocating up to position 0x100000 in rev02005.dat\r\n...\r\n2020-03-19T12:44:01Z Pre-allocating up to position 0x400000 in rev02005.dat\r\n2020-03-19T12:44:02Z Pre-allocating up to position 0x600000 in rev02003.dat\r\n...\r\n2020-03-19T12:44:05Z Pre-allocating up to position 0xb00000 in rev02003.dat\r\n2020-03-19T12:44:06Z Pre-allocating up to position 0x500000 in rev02005.dat\r\n2020-03-19T12:44:06Z Pre-allocating up to position 0x200000 in rev02004.dat\r\n2020-03-19T12:44:06Z Pre-allocating up to position 0xc00000 in rev02003.dat\r\n2020-03-19T12:44:07Z Pre-allocating up to position 0xd00000 in rev02003.dat\r\n2020-03-19T12:44:08Z Pre-allocating up to position 0xe00000 in rev02003.dat\r\n2020-03-19T12:44:09Z Pre-allocating up to position 0x300000 in rev02004.dat\r\n2020-03-19T12:44:09Z Pre-allocating up to position 0x600000 in rev02005.dat\r\n2020-03-19T12:44:10Z Pre-allocating up to position 0xf00000 in rev02003.dat\r\n2020-03-19T12:44:11Z Pre-allocating up to position 0x400000 in rev02004.dat\r\n2020-03-19T12:44:12Z Pre-allocating up to position 0x500000 in rev02004.dat\r\n2020-03-19T12:44:12Z Pre-allocating up to position 0x1000000 in rev02003.dat\r\n2020-03-19T12:44:13Z Pre-allocating up to position 0x1100000 in rev02003.dat\r\n2020-03-19T12:44:14Z *** FLUSH UNDO FILE 2003 ***\r\n2020-03-19T12:44:14Z finalize undo 2003\r\n2020-03-19T12:44:14Z unflushed undo: [2004 2005]\r\n2020-03-19T12:44:14Z Pre-allocating up to position 0x600000 in rev02004.dat\r\n...\r\n2020-03-19T12:44:16Z Pre-allocating up to position 0x900000 in rev02004.dat\r\n2020-03-19T12:44:16Z Leaving InitialBlockDownload (latching to false)\r\n2020-03-19T12:44:18Z Pre-allocating up to position 0x700000 in rev02005.dat\r\n2020-03-19T12:44:19Z Pre-allocating up to position 0xa00000 in rev02004.dat\r\n...\r\n2020-03-19T12:44:22Z Pre-allocating up to position 0xe00000 in rev02004.dat\r\n2020-03-19T12:44:22Z Pre-allocating up to position 0x800000 in rev02005.dat\r\n2020-03-19T12:44:23Z Pre-allocating up to position 0x900000 in rev02005.dat\r\n2020-03-19T12:44:23Z Pre-allocating up to position 0xf00000 in rev02004.dat\r\n2020-03-19T12:44:24Z Pre-allocating up to position 0x1000000 in rev02004.dat\r\n2020-03-19T12:44:25Z Pre-allocating up to position 0xa00000 in rev02005.dat\r\n2020-03-19T12:44:26Z Pre-allocating up to position 0x1100000 in rev02004.dat\r\n2020-03-19T12:44:26Z Pre-allocating up to position 0xb00000 in rev02005.dat\r\n2020-03-19T12:44:27Z *** FLUSH UNDO FILE 2004 ***\r\n2020-03-19T12:44:27Z finalize undo 2004\r\n2020-03-19T12:44:27Z unflushed undo: [2005]\r\n2020-03-19T12:44:27Z Pre-allocating up to position 0xc00000 in rev02005.dat\r\n...\r\n2020-03-19T13:09:43Z Pre-allocating up to position 0x1100000 in rev02005.dat\r\n2020-03-19T13:32:41Z unflushed undo: [2005]\r\n2020-03-19T13:53:07Z iterating nFile:\r\n    last height = 622198;\r\n    chain tip height = 622198\r\n    -> FLUSH UNDO FILE\r\n2020-03-19T13:53:07Z finalize undo 2005\r\n2020-03-19T13:53:07Z unflushed undo: []\r\n2020-03-19T13:53:07Z Leaving block file 2005: CBlockFileInfo(blocks=104, size=133278069, heights=621900...622198, time=2020-03-16...2020-03-19)\r\n2020-03-19T13:53:07Z unflushed undo: []\r\n2020-03-19T13:53:07Z Pre-allocating up to position 0x1000000 in blk02006.dat\r\n2020-03-19T13:53:07Z Pre-allocating up to position 0x100000 in rev02006.dat\r\n2020-03-19T14:32:42Z unflushed undo: [2006]\r\n2020-03-19T15:35:22Z Pre-allocating up to position 0x200000 in rev02006.dat\r\n..\r\n2020-03-19T16:35:07Z Pre-allocating up to position 0x2000000 in blk02006.dat\r\n..\r\n2020-03-20T12:12:27Z Pre-allocating up to position 0x8000000 in blk02006.dat\r\n2020-03-20T13:32:23Z Pre-allocating up to position 0x1100000 in rev02006.dat\r\n2020-03-20T15:01:34Z iterating nFile:\r\n    last height = 622304;\r\n    chain tip height = 622304\r\n    -> FLUSH UNDO FILE\r\n2020-03-20T15:01:34Z finalize undo 2006\r\n2020-03-20T15:01:34Z unflushed undo: []\r\n2020-03-20T15:01:34Z Leaving block file 2006: CBlockFileInfo(blocks=106, size=133794291, heights=622199...622304, time=2020-03-19...2020-03-20)\r\n2020-03-20T15:01:34Z unflushed undo: []\r\n2020-03-20T15:01:34Z Pre-allocating up to position 0x1000000 in blk02007.dat\r\n2020-03-20T15:01:34Z Pre-allocating up to position 0x100000 in rev02007.dat\r\n..\r\n2020-03-21T12:09:59Z Pre-allocating up to position 0x8000000 in blk02007.dat\r\n2020-03-21T13:13:00Z Pre-allocating up to position 0x1100000 in rev02007.dat\r\n2020-03-21T14:46:12Z iterating nFile:\r\n    last height = 622417;\r\n    chain tip height = 622417\r\n    -> FLUSH UNDO FILE\r\n2020-03-21T14:46:12Z finalize undo 2007\r\n2020-03-21T14:46:12Z unflushed undo: []\r\n2020-03-21T14:46:12Z Leaving block file 2007: CBlockFileInfo(blocks=113, size=133506562, heights=622305...622417, time=2020-03-20...2020-03-21)\r\n2020-03-21T14:46:12Z unflushed undo: []\r\n2020-03-21T14:46:12Z Pre-allocating up to position 0x1000000 in blk02008.dat\r\n2020-03-21T14:46:12Z Pre-allocating up to position 0x100000 in rev02008.dat\r\n2020-03-21T15:32:45Z unflushed undo: [2008]\r\n..\r\n```\r\n\r\n(Edit: stripped out entries pre-allocating up to the next position in the same file as the previous and next line.)\r\n\r\nLast week worth (trimmed down to bare essentials, i.e. no duplicate pre-allocs for the same file & file #, etc):\r\n\r\n```\r\n2020-03-23T13:48:11Z Bitcoin Core version v0.19.99.0-84ed7228b-dirty (release build)\r\n2020-03-23T13:50:37Z Pre-allocating up to position 0xc00000 in rev02009.dat\r\n2020-03-23T14:48:19Z unflushed undo: [2009]\r\n2020-03-23T15:14:29Z Pre-allocating up to position 0x7000000 in blk02009.dat\r\n2020-03-23T21:18:48Z iterating nFile: last height = 622686; chain tip height = 622686 -> FLUSH UNDO FILE\r\n2020-03-23T21:18:48Z Leaving block file 2009: CBlockFileInfo(blocks=123, size=133738361, heights=622564...622686, time=2020-03-22...2020-03-23)\r\n2020-03-23T21:18:48Z finalize undo 2009\r\n2020-03-23T21:18:48Z unflushed undo: []\r\n2020-03-23T21:18:48Z Pre-allocating up to position 0x1000000 in blk02010.dat\r\n2020-03-23T21:18:49Z Pre-allocating up to position 0x100000 in rev02010.dat\r\n2020-03-23T21:48:26Z unflushed undo: [2010]\r\n2020-03-24T17:37:20Z iterating nFile: last height = 622800; chain tip height = 622800 -> FLUSH UNDO FILE\r\n2020-03-24T17:37:20Z Leaving block file 2010: CBlockFileInfo(blocks=114, size=133105740, heights=622687...622800, time=2020-03-23...2020-03-24)\r\n2020-03-24T17:37:20Z finalize undo 2010\r\n2020-03-24T17:37:20Z unflushed undo: []\r\n2020-03-24T17:37:20Z Pre-allocating up to position 0x1000000 in blk02011.dat\r\n2020-03-24T17:37:20Z Pre-allocating up to position 0x100000 in rev02011.dat\r\n2020-03-24T18:48:22Z unflushed undo: [2011]\r\n2020-03-25T22:07:57Z iterating nFile: last height = 622918; chain tip height = 622918 -> FLUSH UNDO FILE\r\n2020-03-25T22:07:57Z Leaving block file 2011: CBlockFileInfo(blocks=118, size=133871217, heights=622801...622918, time=2020-03-24...2020-03-25)\r\n2020-03-25T22:07:57Z finalize undo 2011\r\n2020-03-25T22:07:57Z unflushed undo: []\r\n2020-03-25T22:07:57Z Pre-allocating up to position 0x1000000 in blk02012.dat\r\n2020-03-25T22:07:57Z Pre-allocating up to position 0x100000 in rev02012.dat\r\n2020-03-25T22:48:29Z unflushed undo: [2012]\r\n2020-03-26T16:59:04Z iterating nFile: last height = 623044; chain tip height = 623044 -> FLUSH UNDO FILE\r\n2020-03-26T16:59:04Z Leaving block file 2012: CBlockFileInfo(blocks=126, size=133001579, heights=622919...623044, time=2020-03-25...2020-03-26)\r\n2020-03-26T16:59:04Z finalize undo 2012\r\n2020-03-26T16:59:05Z unflushed undo: []\r\n2020-03-26T16:59:05Z Pre-allocating up to position 0x1000000 in blk02013.dat\r\n2020-03-26T16:59:05Z Pre-allocating up to position 0x100000 in rev02013.dat\r\n2020-03-26T17:48:23Z unflushed undo: [2013]\r\n2020-03-27T08:53:09Z iterating nFile: last height = 623152; chain tip height = 623152 -> FLUSH UNDO FILE\r\n2020-03-27T08:53:09Z Leaving block file 2013: CBlockFileInfo(blocks=108, size=134054702, heights=623045...623152, time=2020-03-26...2020-03-27)\r\n2020-03-27T08:53:09Z finalize undo 2013\r\n2020-03-27T08:53:09Z unflushed undo: []\r\n2020-03-27T08:53:09Z Pre-allocating up to position 0x1000000 in blk02014.dat\r\n2020-03-27T08:53:09Z Pre-allocating up to position 0x100000 in rev02014.dat\r\n2020-03-27T09:48:41Z unflushed undo: [2014]\r\n2020-03-28T08:17:02Z iterating nFile: last height = 623299; chain tip height = 623299 -> FLUSH UNDO FILE\r\n2020-03-28T08:17:02Z Leaving block file 2014: CBlockFileInfo(blocks=147, size=133428978, heights=623153...623299, time=2020-03-27...2020-03-28)\r\n2020-03-28T08:17:02Z finalize undo 2014\r\n2020-03-28T08:17:02Z unflushed undo: []\r\n2020-03-28T08:17:02Z Pre-allocating up to position 0x1000000 in blk02015.dat\r\n2020-03-28T08:17:02Z Pre-allocating up to position 0x100000 in rev02015.dat\r\n2020-03-28T08:48:34Z unflushed undo: [2015]\r\n2020-03-29T10:30:39Z iterating nFile: last height = 623444; chain tip height = 623444 -> FLUSH UNDO FILE\r\n2020-03-29T10:30:39Z Leaving block file 2015: CBlockFileInfo(blocks=145, size=133249498, heights=623300...623444, time=2020-03-28...2020-03-29)\r\n2020-03-29T10:30:39Z finalize undo 2015\r\n2020-03-29T10:30:39Z unflushed undo: []\r\n2020-03-29T10:30:39Z Pre-allocating up to position 0x1000000 in blk02016.dat\r\n2020-03-29T10:30:39Z Pre-allocating up to position 0x100000 in rev02016.dat\r\n2020-03-29T10:48:46Z unflushed undo: [2016]\r\n```\r\n</details>\r\n",
      "created_at" : "2020-03-19T14:01:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-601195517",
      "id" : 601195517,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMTE5NTUxNw==",
      "updated_at" : "2020-03-30T08:24:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/601195517",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395061642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395061642"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I didn't see this comment until now. I'll update the code in the next push.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-19T14:21:17Z",
      "diff_hunk" : "@@ -1731,19 +1731,23 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\n }\n \n-void static FlushBlockFile(bool fFinalize = false)\n+static void FlushUndoFile(int block_file, bool finalize = false)\n {\n-    LOCK(cs_LastBlockFile);\n+    FlatFilePos undo_pos_old(block_file, vinfoBlockFile[block_file].nUndoSize);\n+    if (!UndoFileSeq().Flush(undo_pos_old, finalize)) {\n+        AbortNode(\"Flushing undo file to disk failed. This is likely the result of an I/O error.\");\n+    }\n+}\n \n+static void FlushBlockFile(bool fFinalize = false)\n+{\n+    LOCK(cs_LastBlockFile);\n     FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n-    FlatFilePos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n-\n-    bool status = true;\n-    status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n-    status &= UndoFileSeq().Flush(undo_pos_old, fFinalize);\n-    if (!status) {\n+    if (!BlockFileSeq().Flush(block_pos_old, fFinalize)) {\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\n     }\n+    // the undo file is actually finalized at a later stage, but we do want to flush it along with the block file\n+    if (!fFinalize) FlushUndoFile(nLastBlockFile);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395061642",
      "id" : 395061642,
      "in_reply_to_id" : 391244966,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2MTY0Mg==",
      "original_commit_id" : "48081229c10969ac5993c826c8bd7687cd0503e5",
      "original_line" : 1750,
      "original_position" : 28,
      "original_start_line" : 1749,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 377765292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395061642",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395301371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395301371"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This will flush the undo file before the corresponding block file which is flushed a [few lines below](https://github.com/bitcoin/bitcoin/pull/17994/files#diff-24efdb00bfbe56b140fb006b562cc70bR3279). Also visible in the log you pasted where `finalize undo 2005` appears before `Leaving block file 2005`.\r\n\r\nI am not sure but I think we want to always flush the block file first and the undo file afterwards.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-19T20:29:34Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\n+            // when the undo file is keeping up with the block file, we flush it explicitly, here\n+            // when it is lagging behind (more blocks arrive than are being connected), we let the\n+            // undo block write case handle it\n+            LogPrintf(\"iterating nFile: last height = %d; chain tip height = %d -> %s\\n\",\n+                vinfoBlockFile[nFile].nHeightLast,\n+                ChainActive().Tip()->nHeight,\n+                vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight ? \"FLUSH UNDO FILE\" : \"DO NOT FLUSH UNDO FILE\");\n+            if (vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight) {\n+                FlushUndoFile(nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395301371",
      "id" : 395301371,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwMTM3MQ==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3241,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 378070039,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395301371",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395303817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395303817"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I find this `while` extremely confusing - it looks to me that it will never iterate more than once. We need a block size of more than 128MB (blk file size limit) to get this execute 2 or more times, so that one block spans multiple blk files (!?).\r\n\r\nMaybe out of the scope of this PR, but I think we should `s/while/if/`. Is my understanding correct? If not then we will end up finalizing an empty undo file with this patch on the second and subsequent iterations.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-19T20:34:29Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395303817",
      "id" : 395303817,
      "line" : 3238,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwMzgxNw==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3238,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 54,
      "pull_request_review_id" : 378070039,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395303817",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395446941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395446941"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I *think* the way it works now is fine; the \"unflushed undo files\" output is consistently showing the current opened one only, so it indicates the same.\r\n\r\nLet me go through the steps:\r\n\r\n* Sync state: HEIGHT = 100, BLK = 100, UNDO = 100, block file 0\r\n* Block 101 comes in (we assume it does not fit into the current block file, so we will move to block file 1)\r\n* First we want to store it to disk: \r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/c4400e1b8a62269d04b57a46d68941fdbaae4303/src/validation.cpp#L3731-L3736\r\n\r\n* We go find a position and end up in the next block file (1), at which point we flush the undo file (0):\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/c4400e1b8a62269d04b57a46d68941fdbaae4303/src/validation.cpp#L3254-L3264\r\n\r\n* Sync state: HEIGHT = 100, BLK = 101, UNDO = 100, block file 1\r\n* We now want to accept block 101, and at this point we write the undo data (for block 101)\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/c4400e1b8a62269d04b57a46d68941fdbaae4303/src/validation.cpp#L1773-L1787\r\n\r\n* The condition does not trigger here, because we are synced up (as you pointed out), but we end up writing into undo file 1, and undo file 0 was finalized as it should.\r\n* Sync state: HEIGHT = 101, BLK = 101, UNDO = 101, block file 1\r\n\r\nLet me know if I got something wrong in the above (or if there are any other holes in the patch). I will update the log above once it moves to block file 2007.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-20T05:40:53Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\n+            // when the undo file is keeping up with the block file, we flush it explicitly, here\n+            // when it is lagging behind (more blocks arrive than are being connected), we let the\n+            // undo block write case handle it\n+            LogPrintf(\"iterating nFile: last height = %d; chain tip height = %d -> %s\\n\",\n+                vinfoBlockFile[nFile].nHeightLast,\n+                ChainActive().Tip()->nHeight,\n+                vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight ? \"FLUSH UNDO FILE\" : \"DO NOT FLUSH UNDO FILE\");\n+            if (vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight) {\n+                FlushUndoFile(nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395446941",
      "id" : 395446941,
      "in_reply_to_id" : 395301371,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0Njk0MQ==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3241,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 378242564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395446941",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395448123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395448123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I dug into this. Apparently, the system is supposed to support multiple files *per block*. This was a change made 8 years ago in 5382bcf8cd23c36a435c29080770a79b5e28af42 by @sipa. It doesn't look like it is actually working, though, but I could be wrong.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-20T05:47:50Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395448123",
      "id" : 395448123,
      "in_reply_to_id" : 395303817,
      "line" : 3238,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0ODEyMw==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3238,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 54,
      "pull_request_review_id" : 378243995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395448123",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395449720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395449720"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@kallewoof No, that commit adds support for multiple *blocks per file*, which is definitely used. There has never been support for multiple files per block.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-20T05:56:48Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395449720",
      "id" : 395449720,
      "in_reply_to_id" : 395303817,
      "line" : 3238,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0OTcyMA==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3238,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 54,
      "pull_request_review_id" : 378245881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395449720",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395454053"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395454053"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, yeah you're right. But this while loop makes no sense to me still.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-20T06:20:03Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395454053",
      "id" : 395454053,
      "in_reply_to_id" : 395303817,
      "line" : 3238,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NDA1Mw==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3238,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 54,
      "pull_request_review_id" : 378251059,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395454053",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395457390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395457390"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's just iterating to find the first block file with space for the new block.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-20T06:36:10Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395457390",
      "id" : 395457390,
      "in_reply_to_id" : 395303817,
      "line" : 3238,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1NzM5MA==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3238,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 54,
      "pull_request_review_id" : 378255053,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395457390",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395461388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395461388"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Okay, so assuming we one day decided to stop writing block files sequentially, we may have a situation where we try to `find block pos` for `nFile = 2007` where the last block file in existence is actually `nFile = 2010` or something `>2008`, in which case this while loop becomes necessary.\r\n\r\nI don't really see that ever happening though, and it feels like someone mixed up \"block file writing order\" (sequentially; we never write into older block files or into the middle of a file in between other stuff) with \"connect order\" (non-sequentially, as blocks are not stored in height order).",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-20T06:53:25Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395461388",
      "id" : 395461388,
      "in_reply_to_id" : 395303817,
      "line" : 3238,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2MTM4OA==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3238,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 54,
      "pull_request_review_id" : 378259946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395461388",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395635091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395635091"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, the above is correct (or at least coincides with my understanding for this elusive code!) - I think the code will do what you describe and that it is the correct behavior wrt finalizing the undo.\r\n\r\nHowever, one piece is missing from the above - when do we flush block file 0?\r\n> We go find a position and end up in the next block file (1), at which point we flush the undo file (0)\r\n\r\n... and _after this_ we flush the blk file 0.\r\n\r\nJust to be explicit, something like this may be warranted, delay the flush of the undo until after we have flushed the block file:\r\n\r\n```diff\r\n+    int thisUndoNeedsFlushingAndFinalizing = -1;\r\n+\r\n     if (!fKnown) {\r\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\r\n             // when the undo file is keeping up with the block file, we flush it explicitly, here\r\n             // when it is lagging behind (more blocks arrive than are being connected), we let the\r\n             // undo block write case handle it\r\n             LogPrintf(\"iterating nFile: last height = %d; chain tip height = %d -> %s\\n\",\r\n                 vinfoBlockFile[nFile].nHeightLast,\r\n                 ChainActive().Tip()->nHeight,\r\n                 vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight ? \"FLUSH UNDO FILE\" : \"DO NOT FLUSH UNDO FILE\");\r\n             if (vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight) {\r\n-                FlushUndoFile(nFile, true);\r\n+                thisUndoNeedsFlushingAndFinalizing = nFile;\r\n             }\r\n             nFile++;\r\n             if (vinfoBlockFile.size() <= nFile) {\r\n                 vinfoBlockFile.resize(nFile + 1);\r\n             }\r\n         }\r\n         pos.nFile = nFile;\r\n         pos.nPos = vinfoBlockFile[nFile].nSize;\r\n     }\r\n \r\n     if ((int)nFile != nLastBlockFile) {\r\n         if (!fKnown) {\r\n             LogPrintf(\"Leaving block file %i: %s\\n\", nLastBlockFile, vinfoBlockFile[nLastBlockFile].ToString());\r\n         }\r\n+        // Order is important: first FlushBlockFile(), then FlushUndoFile().\r\n+        // FlushBlockFile() will flush internally nLastBlockFile and at this\r\n+        // point I believe thisUndoNeedsFlushingAndFinalizing == nLastBlockFile\r\n+        // so we will flush corresponding blk and undo files.\r\n         FlushBlockFile(!fKnown);\r\n+        if (thisUndoNeedsFlushingAndFinalizing != -1) {\r\n+            FlushUndoFile(thisUndoNeedsFlushingAndFinalizing, true);\r\n+        }\r\n         nLastBlockFile = nFile;\r\n     }\r\n```",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-20T13:28:31Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\n+            // when the undo file is keeping up with the block file, we flush it explicitly, here\n+            // when it is lagging behind (more blocks arrive than are being connected), we let the\n+            // undo block write case handle it\n+            LogPrintf(\"iterating nFile: last height = %d; chain tip height = %d -> %s\\n\",\n+                vinfoBlockFile[nFile].nHeightLast,\n+                ChainActive().Tip()->nHeight,\n+                vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight ? \"FLUSH UNDO FILE\" : \"DO NOT FLUSH UNDO FILE\");\n+            if (vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight) {\n+                FlushUndoFile(nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395635091",
      "id" : 395635091,
      "in_reply_to_id" : 395301371,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNTA5MQ==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3241,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 378480849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395635091",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395653474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395653474"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, for the purposes of this PR we just need to agree that this `while` loop will never iterate more than once (if it is possible that it iterates 2 or more times then I am wrong and this PR will have to be adjusted).\r\n\r\nObservation: before the loop condition is evaluated for the first time `nFile` equals `nLastBlockFile`. I.e. we start the search at the end.\r\n\r\nSo two things can happen:\r\n1. We find space in the last file - the loop condition evaluates to `false` and the loop iterates 0 times\r\n2. There is no space in the last file, the loop condition evaluates to `true` and the loop body \"creates\" a new empty block file (not yet on disk, but this is not relevant). The new empty block file has `nSize == 0` and so the next loop condition will for sure evaluate to `false` because `nSize + addedBlockSize` cannot be `>=` than 128 MiB.\r\n\r\n> I think it's just iterating to find the first block file with space for the new block.\r\n\r\nYes, and given that it always starts the search at the last file it will never iterate more than once, as per above.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-20T13:57:42Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395653474",
      "id" : 395653474,
      "in_reply_to_id" : 395303817,
      "line" : 3238,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY1MzQ3NA==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3238,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 54,
      "pull_request_review_id" : 378504959,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395653474",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395828475"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395828475"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think in the original version of this code the loop was there so that after a restart a good file number would be found (even if it always reset to 0). I don't know if that's still needed.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-20T18:46:45Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395828475",
      "id" : 395828475,
      "in_reply_to_id" : 395303817,
      "line" : 3238,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyODQ3NQ==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3238,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 54,
      "pull_request_review_id" : 378732278,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395828475",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395959750"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395959750"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh wait, I see what you mean -- you're concerned about the non-finalized undo flush happening after the finalized undo flush (called from within the finalized block flush), right?\r\n\r\nI don't think this it's a problem to flush twice. The only difference between a finalized=true flush and a finalized=false flush is L87 in\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a3abe25f720104e4abf0d3f01f0b847929167b8b/src/flatfile.cpp#L81-L98\r\n\r\nwhich means the non-finalized flush is a NOP, I think.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-21T04:17:19Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\n+            // when the undo file is keeping up with the block file, we flush it explicitly, here\n+            // when it is lagging behind (more blocks arrive than are being connected), we let the\n+            // undo block write case handle it\n+            LogPrintf(\"iterating nFile: last height = %d; chain tip height = %d -> %s\\n\",\n+                vinfoBlockFile[nFile].nHeightLast,\n+                ChainActive().Tip()->nHeight,\n+                vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight ? \"FLUSH UNDO FILE\" : \"DO NOT FLUSH UNDO FILE\");\n+            if (vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight) {\n+                FlushUndoFile(nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r395959750",
      "id" : 395959750,
      "in_reply_to_id" : 395301371,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1OTc1MA==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3241,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 378890873,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395959750",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r396451804"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396451804"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, sorry, I mentioned my concern (order of flushing of blk and undo files), but did not mention why is that a concern. Previously the code always flushed blkN before flushing revN (finalizing is not relevant for this):\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/97b0687501cee77a9170f9e288755a5d268e9bd4/src/validation.cpp#L1747-L1748\r\n\r\nIn case of a crash (or power failure) between the two, we would end up with a block data on disk without a corresponding undo data. I presume this is ok in the current code.\r\n\r\nNow, with the change in this PR we would flush revN first and blkN afterwards. This could potentially leave us with an undo data for some block(s) without the corresponding block data. There is at least this code which would get upset by that:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/97b0687501cee77a9170f9e288755a5d268e9bd4/src/validation.cpp#L4810\r\n\r\nNow, I am not 100% sure if that is a real concern or not, but is relatively easy to tweak in the current patch so that it keeps flushing first blk and then undo (as before the patch).",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-03-23T13:32:00Z",
      "diff_hunk" : "@@ -3222,6 +3253,16 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n \n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\n+            // when the undo file is keeping up with the block file, we flush it explicitly, here\n+            // when it is lagging behind (more blocks arrive than are being connected), we let the\n+            // undo block write case handle it\n+            LogPrintf(\"iterating nFile: last height = %d; chain tip height = %d -> %s\\n\",\n+                vinfoBlockFile[nFile].nHeightLast,\n+                ChainActive().Tip()->nHeight,\n+                vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight ? \"FLUSH UNDO FILE\" : \"DO NOT FLUSH UNDO FILE\");\n+            if (vinfoBlockFile[nFile].nHeightLast == ChainActive().Tip()->nHeight) {\n+                FlushUndoFile(nFile, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r396451804",
      "id" : 396451804,
      "in_reply_to_id" : 395301371,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MTgwNA==",
      "original_commit_id" : "c4400e1b8a62269d04b57a46d68941fdbaae4303",
      "original_line" : 3241,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 379429796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-24T02:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396451804",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK ed34e00da. Code review and manual testing.\r\n\r\nI tested this by applying the patch folded below which introduces a unit test and lowers the max size of blk files so that they can accommodate just 4 test blocks. It also adds some printouts which I manually analyzed after running the unit test as described at the bottom of https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-599031098. I think this unit test does not qualify for an automated unit test.\r\n\r\nMaybe squash all 4 commits in this PR to one.\r\n\r\n<details>\r\n<summary>unit test + tweaks on top of ed34e00da</summary>\r\n\r\n```diff\r\n--- i/src/flatfile.cpp\r\n+++ w/src/flatfile.cpp\r\n@@ -55,21 +55,23 @@ FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool read_only)\r\n size_t FlatFileSeq::Allocate(const FlatFilePos& pos, size_t add_size, bool& out_of_space)\r\n {\r\n     out_of_space = false;\r\n \r\n     unsigned int n_old_chunks = (pos.nPos + m_chunk_size - 1) / m_chunk_size;\r\n     unsigned int n_new_chunks = (pos.nPos + add_size + m_chunk_size - 1) / m_chunk_size;\r\n+    LogPrintf(\"BBB FlatFileSeq::Allocate(): %s%05u@[%u..%zu]\\n\",\r\n+            m_prefix, pos.nFile, pos.nPos, pos.nPos + add_size - 1);\r\n     if (n_new_chunks > n_old_chunks) {\r\n         size_t old_size = pos.nPos;\r\n         size_t new_size = n_new_chunks * m_chunk_size;\r\n         size_t inc_size = new_size - old_size;\r\n \r\n         if (CheckDiskSpace(m_dir, inc_size)) {\r\n             FILE *file = Open(pos);\r\n             if (file) {\r\n-                LogPrintf(\"Pre-allocating up to position 0x%x in %s%05u.dat\\n\", new_size, m_prefix, pos.nFile);\r\n+                LogPrintf(\"BBB FlatFileSeq::Allocate(): Pre-allocating up to position %u in %s%05u\\n\", new_size, m_prefix, pos.nFile);\r\n                 AllocateFileRange(file, pos.nPos, inc_size);\r\n                 fclose(file);\r\n                 return inc_size;\r\n             }\r\n         } else {\r\n             out_of_space = true;\r\ndiff --git i/src/test/validation_block_tests.cpp w/src/test/validation_block_tests.cpp\r\nindex dae389a16..4f3dcab30 100644\r\n--- i/src/test/validation_block_tests.cpp\r\n+++ w/src/test/validation_block_tests.cpp\r\n@@ -211,12 +211,66 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\r\n     UnregisterValidationInterface(&sub);\r\n \r\n     LOCK(cs_main);\r\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\r\n }\r\n \r\n+BOOST_AUTO_TEST_CASE(download_blocks_out_of_order)\r\n+{\r\n+    const int numberOfExtraBlocks = 10;\r\n+    std::vector<std::shared_ptr<const CBlock>> extraBlocks;\r\n+\r\n+    BuildChain(Params().GenesisBlock().GetHash(), numberOfExtraBlocks, 0, 0, numberOfExtraBlocks, extraBlocks);\r\n+\r\n+    assert(extraBlocks.size() == numberOfExtraBlocks);\r\n+\r\n+    bool ignored;\r\n+    BlockValidationState state;\r\n+    std::vector<CBlockHeader> headers;\r\n+    std::transform(extraBlocks.begin(), extraBlocks.end(), std::back_inserter(headers), [](std::shared_ptr<const CBlock> b) { return b->GetBlockHeader(); });\r\n+\r\n+    // Process all the headers so we understand the toplogy of the chain\r\n+    BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\r\n+\r\n+    // Connect the genesis block and drain any outstanding events\r\n+    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored));\r\n+    SyncWithValidationInterfaceQueue();\r\n+\r\n+    // subscribe to events (this subscriber will validate event ordering)\r\n+    const CBlockIndex* initial_tip = nullptr;\r\n+    {\r\n+        LOCK(cs_main);\r\n+        initial_tip = ::ChainActive().Tip();\r\n+    }\r\n+    TestSubscriber sub(initial_tip->GetBlockHash());\r\n+    RegisterValidationInterface(&sub);\r\n+\r\n+    // Just 4 blocks fit in one blk file\r\n+\r\n+    //std::vector<size_t> order{0, 1, 2, 3,  4, 5, 6, 7,  8, 9, 10};\r\n+    std::vector<size_t> order{0, 1, 2, 3,  4, 5, 6, 8,  7, 9, 10};\r\n+    //std::vector<size_t> order{0, 1, 2, 3,  4, 5, 6, 7,  9, 8, 10};\r\n+    //std::vector<size_t> order{0, 1, 2, 3,  4, 7, 8, 9,  10, 5, 6};\r\n+    //std::vector<size_t> order{0, 2, 3, 4,  5, 6, 7, 8,  9, 1, 10};\r\n+\r\n+    for (size_t i = 1; i <= numberOfExtraBlocks; ++i) {\r\n+        // Block at height H is in extraBlocks[H - 1].\r\n+        bool ok = ProcessNewBlock(Params(), extraBlocks[order[i] - 1], true, &ignored);\r\n+        assert(ok);\r\n+    }\r\n+\r\n+    while (GetMainSignals().CallbacksPending() > 0) {\r\n+        MilliSleep(100);\r\n+    }\r\n+\r\n+    UnregisterValidationInterface(&sub);\r\n+\r\n+    LOCK(cs_main);\r\n+    BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\r\n+}\r\n+\r\n /**\r\n  * Test that mempool updates happen atomically with reorgs.\r\n  *\r\n  * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\r\n  * during large reorgs.\r\n  *\r\ndiff --git i/src/validation.cpp w/src/validation.cpp\r\nindex faf92b3b0..0ff0dbcd9 100644\r\n--- i/src/validation.cpp\r\n+++ w/src/validation.cpp\r\n@@ -1731,40 +1731,44 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\r\n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\r\n }\r\n \r\n static void FlushUndoFile(int block_file, bool finalize = false)\r\n {\r\n     FlatFilePos undo_pos_old(block_file, vinfoBlockFile[block_file].nUndoSize);\r\n+    LogPrintf(\"BBB FlushUndoFile(): rev%05u pos=%u, finalize=%d\\n\", undo_pos_old.nFile, undo_pos_old.nPos, finalize);\r\n     if (!UndoFileSeq().Flush(undo_pos_old, finalize)) {\r\n         AbortNode(\"Flushing undo file to disk failed. This is likely the result of an I/O error.\");\r\n     }\r\n }\r\n \r\n static void FlushBlockFile(bool fFinalize = false, bool finalize_undo = false)\r\n {\r\n     LOCK(cs_LastBlockFile);\r\n     FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\r\n+    LogPrintf(\"BBB FlushBlockFile(): blk%05u pos=%u, finalize=%d\\n\", block_pos_old.nFile, block_pos_old.nPos, fFinalize);\r\n     if (!BlockFileSeq().Flush(block_pos_old, fFinalize)) {\r\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\r\n     }\r\n     // we do not always flush the undo file, as the chain tip may be lagging behind the incoming blocks,\r\n     // e.g. during IBD or a sync after a node going offline\r\n     if (!fFinalize || finalize_undo) FlushUndoFile(nLastBlockFile, finalize_undo);\r\n }\r\n \r\n-static bool FindUndoPos(BlockValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize);\r\n+static bool FindUndoPos(BlockValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize, int nHeight);\r\n \r\n static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, BlockValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\r\n {\r\n     // Write undo information to disk\r\n     if (pindex->GetUndoPos().IsNull()) {\r\n         FlatFilePos _pos;\r\n-        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, CLIENT_VERSION) + 40))\r\n+        if (!FindUndoPos(state, pindex->nFile, _pos, ::GetSerializeSize(blockundo, CLIENT_VERSION) + 40, pindex->nHeight))\r\n             return error(\"ConnectBlock(): FindUndoPos failed\");\r\n         if (!UndoWriteToDisk(blockundo, _pos, pindex->pprev->GetBlockHash(), chainparams.MessageStart()))\r\n             return AbortNode(state, \"Failed to write undo data\");\r\n+        LogPrintf(\"BBB WriteUndoDataForBlock(): _pos.nFile=%d, nLastBlockFile=%d, pindex->height=%d, last height in file=%d\\n\",\r\n+            _pos.nFile, nLastBlockFile, pindex->nHeight, vinfoBlockFile[_pos.nFile].nHeightLast);\r\n         // rev files are written in block height order, whereas blk files are written as blocks come in (often out of order)\r\n         // we want to flush the rev (undo) file once we've written the last block, which is indicated by the last height\r\n         // in the block file info as below; note that this does not catch the case where the undo writes are keeping up\r\n         // with the block writes (usually when a synced up node is getting newly mined blocks) -- this case is caught in\r\n         // the FindBlockPos function\r\n         if (_pos.nFile < nLastBlockFile && static_cast<uint32_t>(pindex->nHeight) == vinfoBlockFile[_pos.nFile].nHeightLast) {\r\n@@ -3246,12 +3250,15 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\r\n             }\r\n         }\r\n         pos.nFile = nFile;\r\n         pos.nPos = vinfoBlockFile[nFile].nSize;\r\n     }\r\n \r\n+    LogPrintf(\"BBB FindBlockPos(): height=%u, belongs to blk%05u[%u..%u]\\n\",\r\n+        nHeight, pos.nFile, pos.nPos, pos.nPos + nAddSize - 1);\r\n+\r\n     if ((int)nFile != nLastBlockFile) {\r\n         if (!fKnown) {\r\n             LogPrintf(\"Leaving block file %i: %s\\n\", nLastBlockFile, vinfoBlockFile[nLastBlockFile].ToString());\r\n         }\r\n         FlushBlockFile(!fKnown, finalize_undo);\r\n         nLastBlockFile = nFile;\r\n@@ -3275,22 +3282,25 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\r\n     }\r\n \r\n     setDirtyFileInfo.insert(nFile);\r\n     return true;\r\n }\r\n \r\n-static bool FindUndoPos(BlockValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize)\r\n+static bool FindUndoPos(BlockValidationState &state, int nFile, FlatFilePos &pos, unsigned int nAddSize, int nHeight)\r\n {\r\n     pos.nFile = nFile;\r\n \r\n     LOCK(cs_LastBlockFile);\r\n \r\n     pos.nPos = vinfoBlockFile[nFile].nUndoSize;\r\n     vinfoBlockFile[nFile].nUndoSize += nAddSize;\r\n     setDirtyFileInfo.insert(nFile);\r\n \r\n+    LogPrintf(\"BBB FindUndoPos(): height=%d, belongs to: rev%05u[%u..%u]\\n\",\r\n+        nHeight, nFile, pos.nPos, pos.nPos + nAddSize - 1);\r\n+\r\n     bool out_of_space;\r\n     size_t bytes_allocated = UndoFileSeq().Allocate(pos, nAddSize, out_of_space);\r\n     if (out_of_space) {\r\n         return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\r\n     }\r\n     if (bytes_allocated != 0 && fPruneMode) {\r\n@@ -3703,12 +3713,13 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, BlockValid\r\n     }\r\n     return true;\r\n }\r\n \r\n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\r\n static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const FlatFilePos* dbp) {\r\n+    LogPrintf(\"BBB SaveBlockToDisk(): height=%d\\n\", nHeight);\r\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\r\n     FlatFilePos blockPos;\r\n     if (dbp != nullptr)\r\n         blockPos = *dbp;\r\n     if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {\r\n         error(\"%s: FindBlockPos failed\", __func__);\r\ndiff --git i/src/validation.h w/src/validation.h\r\nindex a5335edc4..e45d29ef5 100644\r\n--- i/src/validation.h\r\n+++ w/src/validation.h\r\n@@ -67,17 +67,25 @@ static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\r\n static const unsigned int EXTRA_DESCENDANT_TX_SIZE_LIMIT = 10000;\r\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\r\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\r\n /** Maximum kilobytes for transactions to store for processing during reorg */\r\n static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\r\n /** The maximum size of a blk?????.dat file (since 0.8) */\r\n-static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\r\n+// Size chosen so that just 4 blocks from the download_blocks_out_of_order unit\r\n+// tests fit in one blk file.\r\n+static const unsigned int MAX_BLOCKFILE_SIZE = 1200;\r\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */\r\n-static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\r\n+static const unsigned int BLOCKFILE_CHUNK_SIZE = 600;\r\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\r\n-static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\r\n+// Size chosen so that one chunk can accommodate 3 undos from the\r\n+// download_blocks_out_of_order unit test. Given that we will have max\r\n+// 4 undos per one undo file it means that when writing the first undo\r\n+// we allocate space for 3 undos, when writing the 4th undo we allocate\r\n+// space for 3 more (6 in total). During finalizing we should shrink\r\n+// the file size from 6 to 4 undos.\r\n+static const unsigned int UNDOFILE_CHUNK_SIZE = 130;\r\n \r\n /** Maximum number of dedicated script-checking threads allowed */\r\n static const int MAX_SCRIPTCHECK_THREADS = 15;\r\n /** -par default (number of script-checking threads, 0 = auto) */\r\n static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\r\n /** Number of blocks that can be requested at any given time from a single peer. */\r\n```\r\n\r\n</details>",
      "created_at" : "2020-03-23T19:43:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-602816183",
      "id" : 602816183,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMjgxNjE4Mw==",
      "updated_at" : "2020-03-23T19:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602816183",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@vasild Thanks a lot for testing and for helping get this into shape!\r\n\r\nI've squashed the commits into one, and also updated the commit description. I am going to post updated results from the node running this in a bit.",
      "created_at" : "2020-03-24T02:56:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-602982538",
      "id" : 602982538,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMjk4MjUzOA==",
      "updated_at" : "2020-03-24T02:56:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602982538",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK ac94141af (no changes in the code since ed34e00da).",
      "created_at" : "2020-03-24T08:11:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-603091411",
      "id" : 603091411,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMzA5MTQxMQ==",
      "updated_at" : "2020-03-24T08:11:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603091411",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-601195517 with more logs. They're not very exciting, but they indicate things are working as they should.",
      "created_at" : "2020-03-30T08:24:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-605855801",
      "id" : 605855801,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNTg1NTgwMQ==",
      "updated_at" : "2020-03-30T08:24:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605855801",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code review re-ACK ac94141af0c16161afa68de1c3720f254ae4e12c\r\n\r\nOnly changes since my last review is the introduction of the `finalize_undo` parameter and another comments change.",
      "created_at" : "2020-04-20T18:56:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-616745685",
      "id" : 616745685,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNjc0NTY4NQ==",
      "updated_at" : "2020-04-20T18:56:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616745685",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r413142088"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413142088"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`finalize_undo` is clear but it might be good to comment on the `fFinalize` meaning and logic",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-04-22T16:43:33Z",
      "diff_hunk" : "@@ -1731,19 +1731,24 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\n }\n \n-void static FlushBlockFile(bool fFinalize = false)\n+static void FlushUndoFile(int block_file, bool finalize = false)\n {\n-    LOCK(cs_LastBlockFile);\n+    FlatFilePos undo_pos_old(block_file, vinfoBlockFile[block_file].nUndoSize);\n+    if (!UndoFileSeq().Flush(undo_pos_old, finalize)) {\n+        AbortNode(\"Flushing undo file to disk failed. This is likely the result of an I/O error.\");\n+    }\n+}\n \n+static void FlushBlockFile(bool fFinalize = false, bool finalize_undo = false)\n+{\n+    LOCK(cs_LastBlockFile);\n     FlatFilePos block_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nSize);\n-    FlatFilePos undo_pos_old(nLastBlockFile, vinfoBlockFile[nLastBlockFile].nUndoSize);\n-\n-    bool status = true;\n-    status &= BlockFileSeq().Flush(block_pos_old, fFinalize);\n-    status &= UndoFileSeq().Flush(undo_pos_old, fFinalize);\n-    if (!status) {\n+    if (!BlockFileSeq().Flush(block_pos_old, fFinalize)) {\n         AbortNode(\"Flushing block file to disk failed. This is likely the result of an I/O error.\");\n     }\n+    // we do not always flush the undo file, as the chain tip may be lagging behind the incoming blocks,\n+    // e.g. during IBD or a sync after a node going offline\n+    if (!fFinalize || finalize_undo) FlushUndoFile(nLastBlockFile, finalize_undo);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r413142088",
      "id" : 413142088,
      "line" : 1751,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE0MjA4OA==",
      "original_commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "original_line" : 1751,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 29,
      "pull_request_review_id" : 398378200,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-22T16:58:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413142088",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r413145289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413145289"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It did take a couple of readings to parse this paragraph as two sentences rather than one. I think that adding the missing punctuation would be more clear.",
      "commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "created_at" : "2020-04-22T16:47:00Z",
      "diff_hunk" : "@@ -3220,8 +3233,13 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n         vinfoBlockFile.resize(nFile + 1);\n     }\n \n+    bool finalize_undo = false;\n     if (!fKnown) {\n         while (vinfoBlockFile[nFile].nSize + nAddSize >= MAX_BLOCKFILE_SIZE) {\n+            // when the undo file is keeping up with the block file, we want to flush it explicitly\n+            // when it is lagging behind (more blocks arrive than are being connected), we let the\n+            // undo block write case handle it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#discussion_r413145289",
      "id" : 413145289,
      "line" : 3241,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE0NTI4OQ==",
      "original_commit_id" : "ac94141af0c16161afa68de1c3720f254ae4e12c",
      "original_line" : 3241,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 57,
      "pull_request_review_id" : 398378200,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17994",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-22T16:59:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413145289",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Will address @jonatack points if I need to rebase or modify in other ways.",
      "created_at" : "2020-04-28T09:07:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-620480196",
      "id" : 620480196,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMDQ4MDE5Ng==",
      "updated_at" : "2020-04-28T09:07:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/620480196",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> benchmark how much the pre-allocation actually helps nowadays (to maybe remove it entirely).\r\n\r\nYou could be letting the operating system handle your speculative preallocation. On Linux you can even set the allocation extent size manually if you really want to maintain your 16MB-at-a-time behavior. See the [`XFS_IOC_FSSETXATTR`](http://man7.org/linux/man-pages/man2/ioctl_xfs_fsgetxattr.2.html) ioctl and the `fsx_extsize` structure member. (Note, this API was introduced by XFS but is now implemented by several popular Linux file systems.)",
      "created_at" : "2020-05-20T14:37:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-631514635",
      "id" : 631514635,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMTUxNDYzNQ==",
      "updated_at" : "2020-05-20T14:37:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631514635",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/797782?v=4",
         "events_url" : "https://api.github.com/users/whitslack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/whitslack/followers",
         "following_url" : "https://api.github.com/users/whitslack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/whitslack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/whitslack",
         "id" : 797782,
         "login" : "whitslack",
         "node_id" : "MDQ6VXNlcjc5Nzc4Mg==",
         "organizations_url" : "https://api.github.com/users/whitslack/orgs",
         "received_events_url" : "https://api.github.com/users/whitslack/received_events",
         "repos_url" : "https://api.github.com/users/whitslack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/whitslack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/whitslack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/whitslack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> See the XFS_IOC_FSSETXATTR ioctl and the fsx_extsize structure member. (Note, this API was introduced by XFS but is now implemented by several popular Linux file systems.)\r\n\r\nTIL! Looks like the generic name is `FS_IOC_FSSETXATTR`, searching for that gives hits in btrfs, ext4, f2fs (besides xfs itself ofc.).\r\n\r\nWill leave this to a follow-up PR though.",
      "created_at" : "2020-06-04T14:32:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17994#issuecomment-638887016",
      "id" : 638887016,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17994",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzODg4NzAxNg==",
      "updated_at" : "2020-06-04T14:34:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/638887016",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
