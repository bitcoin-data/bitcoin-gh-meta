[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18134 (Replace std::to_string with locale-independent alternative by Empact)\n* #17997 (refactor: Remove mempool global from net by MarcoFalke)\n* #16442 (Serve BIP 157 compact filters by jimpo)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-23T14:47:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-577712875",
      "id" : 577712875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NzcxMjg3NQ==",
      "updated_at" : "2020-03-10T22:29:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577712875",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "code review ACK 1b67435bccb8e159130ee8dc558c039cbcc5767c",
      "created_at" : "2020-02-10T16:42:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-584215068",
      "id" : 584215068,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NDIxNTA2OA==",
      "updated_at" : "2020-02-10T16:42:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584215068",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Thanks for reviewing. Pushed a commit which removes the tinyformat dependency from `ToString(â¦)`. Please re-review :)",
      "created_at" : "2020-02-10T18:36:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-584285257",
      "id" : 584285257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NDI4NTI1Nw==",
      "updated_at" : "2020-02-10T18:36:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584285257",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased! :)",
      "created_at" : "2020-03-09T15:19:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596594877",
      "id" : 596594877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjU5NDg3Nw==",
      "updated_at" : "2020-03-09T15:19:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596594877",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/fa733bbd78add587e19f0175ab9c127a8c27e024/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-03-09T19:15:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596730189",
      "id" : 596730189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjczMDE4OQ==",
      "updated_at" : "2020-03-09T19:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596730189",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased :)",
      "created_at" : "2020-03-09T19:27:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-596735801",
      "id" : 596735801,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjczNTgwMQ==",
      "updated_at" : "2020-03-09T19:27:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596735801",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390418127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390418127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is this needed and why does it reimplement stuff that could be inherited from `RegTestingSetup`?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T15:50:40Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390418127",
      "id" : 390418127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxODEyNw==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 110,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372083928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390418127",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390421010"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390421010"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nstd::unique_ptr<FuzzingSetup> g_fuzzing_setup;\r\n```\r\n\r\nThis should be prefixed with `g_` to convey this is global state that is shared between fuzz calls and might lead to non-determinism.",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T15:54:32Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup\n+{\n+    boost::thread_group m_thread_group;\n+    const fs::path m_path;\n+    std::unique_ptr<PeerLogicValidation> m_peer_logic_validation;\n+\n+public:\n+    CScheduler m_scheduler;\n+    NodeContext m_node_context;\n+    std::unique_ptr<CNode> m_dummy_p2p_node;\n+\n+    FuzzingSetup(const std::string& fuzzer_name) : m_path{fs::temp_directory_path() / \"fuzzers\" / fuzzer_name / ToString(FastRandomContext().rand64())}\n+    {\n+        SelectParams(CBaseChainParams::REGTEST);\n+        fs::remove_all(m_path);\n+        fs::create_directories(m_path);\n+        ::gArgs.ForceSetArg(\"-datadir\", m_path.string());\n+        InitLogging();\n+        LogInstance().m_print_to_console = false;\n+        LogInstance().StartLogging();\n+        ::g_chainstate = MakeUnique<CChainState>();\n+        ::pblocktree = MakeUnique<CBlockTreeDB>(1 << 20, true);\n+        m_dummy_p2p_node = MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false);\n+        m_dummy_p2p_node->fSuccessfullyConnected = true;\n+        m_dummy_p2p_node->nVersion = PROTOCOL_VERSION;\n+        m_dummy_p2p_node->SetSendVersion(PROTOCOL_VERSION);\n+        m_node_context.mempool = &::mempool;\n+        m_node_context.mempool->setSanityCheck(1.0);\n+        m_node_context.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+        m_node_context.connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+        m_thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &m_scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(m_scheduler);\n+        ChainstateActive().InitCoinsDB(1 << 23, true, false);\n+        ChainstateActive().InitCoinsCache();\n+        if (!LoadGenesisBlock(Params())) {\n+            throw std::runtime_error(\"LoadGenesisBlock(...) failed.\");\n+        }\n+        BlockValidationState block_validation_state;\n+        if (!ActivateBestChain(block_validation_state, Params())) {\n+            throw std::runtime_error(\"ActivateBestChain(...) failed.\");\n+        }\n+        for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+            CreateAndProcessNextBlock(*m_node_context.mempool);\n+            SleepUntilSchedulerCompletion(m_scheduler);\n+        }\n+        assert(ChainActive().Tip() != nullptr);\n+        m_peer_logic_validation = MakeUnique<PeerLogicValidation>(m_node_context.connman.get(), nullptr, m_scheduler);\n+        m_peer_logic_validation->InitializeNode(m_dummy_p2p_node.get());\n+        assert(GetMainSignals().CallbacksPending() == 0);\n+        SleepUntilSchedulerCompletion(m_scheduler, 1);\n+        LogInstance().m_print_to_console = true;\n+    }\n+\n+    ~FuzzingSetup()\n+    {\n+        LogInstance().DisconnectTestLogger();\n+        fs::remove_all(m_path);\n+        m_thread_group.interrupt_all();\n+        m_thread_group.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    }\n+};\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<FuzzingSetup> fuzzing_setup;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390421010",
      "id" : 390421010,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyMTAxMA==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 185,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372083928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390421010",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390429237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390429237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point! Fixed!",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T16:05:28Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup\n+{\n+    boost::thread_group m_thread_group;\n+    const fs::path m_path;\n+    std::unique_ptr<PeerLogicValidation> m_peer_logic_validation;\n+\n+public:\n+    CScheduler m_scheduler;\n+    NodeContext m_node_context;\n+    std::unique_ptr<CNode> m_dummy_p2p_node;\n+\n+    FuzzingSetup(const std::string& fuzzer_name) : m_path{fs::temp_directory_path() / \"fuzzers\" / fuzzer_name / ToString(FastRandomContext().rand64())}\n+    {\n+        SelectParams(CBaseChainParams::REGTEST);\n+        fs::remove_all(m_path);\n+        fs::create_directories(m_path);\n+        ::gArgs.ForceSetArg(\"-datadir\", m_path.string());\n+        InitLogging();\n+        LogInstance().m_print_to_console = false;\n+        LogInstance().StartLogging();\n+        ::g_chainstate = MakeUnique<CChainState>();\n+        ::pblocktree = MakeUnique<CBlockTreeDB>(1 << 20, true);\n+        m_dummy_p2p_node = MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false);\n+        m_dummy_p2p_node->fSuccessfullyConnected = true;\n+        m_dummy_p2p_node->nVersion = PROTOCOL_VERSION;\n+        m_dummy_p2p_node->SetSendVersion(PROTOCOL_VERSION);\n+        m_node_context.mempool = &::mempool;\n+        m_node_context.mempool->setSanityCheck(1.0);\n+        m_node_context.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+        m_node_context.connman = MakeUnique<CConnman>(0x1337, 0x1337);\n+        m_thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &m_scheduler));\n+        GetMainSignals().RegisterBackgroundSignalScheduler(m_scheduler);\n+        ChainstateActive().InitCoinsDB(1 << 23, true, false);\n+        ChainstateActive().InitCoinsCache();\n+        if (!LoadGenesisBlock(Params())) {\n+            throw std::runtime_error(\"LoadGenesisBlock(...) failed.\");\n+        }\n+        BlockValidationState block_validation_state;\n+        if (!ActivateBestChain(block_validation_state, Params())) {\n+            throw std::runtime_error(\"ActivateBestChain(...) failed.\");\n+        }\n+        for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+            CreateAndProcessNextBlock(*m_node_context.mempool);\n+            SleepUntilSchedulerCompletion(m_scheduler);\n+        }\n+        assert(ChainActive().Tip() != nullptr);\n+        m_peer_logic_validation = MakeUnique<PeerLogicValidation>(m_node_context.connman.get(), nullptr, m_scheduler);\n+        m_peer_logic_validation->InitializeNode(m_dummy_p2p_node.get());\n+        assert(GetMainSignals().CallbacksPending() == 0);\n+        SleepUntilSchedulerCompletion(m_scheduler, 1);\n+        LogInstance().m_print_to_console = true;\n+    }\n+\n+    ~FuzzingSetup()\n+    {\n+        LogInstance().DisconnectTestLogger();\n+        fs::remove_all(m_path);\n+        m_thread_group.interrupt_all();\n+        m_thread_group.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    }\n+};\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<FuzzingSetup> fuzzing_setup;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390429237",
      "id" : 390429237,
      "in_reply_to_id" : 390421010,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyOTIzNw==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 185,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372098117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390429237",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390441097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390441097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The setup requirements for the fuzzers are a bit different from the requirements for the unit tests. To name one thing I wanted `FastRandomContext().rand64()` instead of `g_insecure_rand_ctx_temp_path.rand32()` to guarantee unique directory names. I ran in to a few such issues until I gave up on inheriting from `RegTestingSetup` which was my initial plan :)",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T16:22:04Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390441097",
      "id" : 390441097,
      "in_reply_to_id" : 390418127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0MTA5Nw==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 110,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372113227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390441097",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390493966"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390493966"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry, I don't understand.\r\n\r\n* The fuzzing setup here is a single global, so it is one datadir per process that does not change. Assuming 60 processes or so, 32 bits of randomness should be sufficient. Though, feel free to change it to 256 bits of randomness.\r\n\r\n* Why are the requirements different? There are different `*TestingSetup`s to accommodate for different needs, but they are mostly inheriting from each other. Why is this not possible for FuzzingSetup? I can replace it with a plain `RegTestingSetup` and everything works just fine. Please explain the issues you are running into.\r\n\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/process_message.cpp b/src/test/fuzz/process_message.cpp\r\nindex 3048b09564..ffb7a78b5b 100644\r\n--- a/src/test/fuzz/process_message.cpp\r\n+++ b/src/test/fuzz/process_message.cpp\r\n@@ -28,6 +28,7 @@\r\n #include <test/fuzz/FuzzedDataProvider.h>\r\n #include <test/fuzz/fuzz.h>\r\n #include <test/util/setup_common.h>\r\n+#include <test/util/mining.h>\r\n #include <txdb.h>\r\n #include <txmempool.h>\r\n #include <util/memory.h>\r\n@@ -58,23 +59,6 @@ bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vR\r\n \r\n namespace {\r\n \r\n-size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\r\n-{\r\n-    std::chrono::system_clock::time_point first, last;\r\n-    return scheduler.getQueueInfo(first, last);\r\n-}\r\n-\r\n-void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\r\n-{\r\n-    for (int i = 0; i < 10; ++i) {\r\n-        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\r\n-            return;\r\n-        }\r\n-        UninterruptibleSleep(std::chrono::milliseconds{10});\r\n-    }\r\n-    assert(false);\r\n-}\r\n-\r\n #ifdef MESSAGE_TYPE\r\n #define TO_STRING_(s) #s\r\n #define TO_STRING(s) TO_STRING_(s)\r\n@@ -83,94 +67,6 @@ const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\r\n const std::string LIMIT_TO_MESSAGE_TYPE;\r\n #endif\r\n \r\n-void CreateAndProcessNextBlock(const CTxMemPool& mempool)\r\n-{\r\n-    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\r\n-    CBlock& block = block_template->block;\r\n-    {\r\n-        LOCK(cs_main);\r\n-        unsigned int extra_nonce;\r\n-        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\r\n-    }\r\n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\r\n-        ++block.nNonce;\r\n-    }\r\n-    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\r\n-}\r\n-\r\n-template <typename T>\r\n-std::string ToString(const T t)\r\n-{\r\n-    std::ostringstream oss;\r\n-    oss.imbue(std::locale::classic());\r\n-    oss << t;\r\n-    return oss.str();\r\n-}\r\n-\r\n-class FuzzingSetup\r\n-{\r\n-    boost::thread_group m_thread_group;\r\n-    const fs::path m_path;\r\n-    std::unique_ptr<PeerLogicValidation> m_peer_logic_validation;\r\n-\r\n-public:\r\n-    CScheduler m_scheduler;\r\n-    NodeContext m_node_context;\r\n-    std::unique_ptr<CNode> m_dummy_p2p_node;\r\n-\r\n-    FuzzingSetup(const std::string& fuzzer_name) : m_path{fs::temp_directory_path() / \"fuzzers\" / fuzzer_name / ToString(FastRandomContext().rand64())}\r\n-    {\r\n-        SelectParams(CBaseChainParams::REGTEST);\r\n-        fs::remove_all(m_path);\r\n-        fs::create_directories(m_path);\r\n-        ::gArgs.ForceSetArg(\"-datadir\", m_path.string());\r\n-        InitLogging();\r\n-        LogInstance().m_print_to_console = false;\r\n-        LogInstance().StartLogging();\r\n-        ::g_chainstate = MakeUnique<CChainState>();\r\n-        ::pblocktree = MakeUnique<CBlockTreeDB>(1 << 20, true);\r\n-        m_dummy_p2p_node = MakeUnique<CNode>(0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false);\r\n-        m_dummy_p2p_node->fSuccessfullyConnected = true;\r\n-        m_dummy_p2p_node->nVersion = PROTOCOL_VERSION;\r\n-        m_dummy_p2p_node->SetSendVersion(PROTOCOL_VERSION);\r\n-        m_node_context.mempool = &::mempool;\r\n-        m_node_context.mempool->setSanityCheck(1.0);\r\n-        m_node_context.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\r\n-        m_node_context.connman = MakeUnique<CConnman>(0x1337, 0x1337);\r\n-        m_thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &m_scheduler));\r\n-        GetMainSignals().RegisterBackgroundSignalScheduler(m_scheduler);\r\n-        ChainstateActive().InitCoinsDB(1 << 23, true, false);\r\n-        ChainstateActive().InitCoinsCache();\r\n-        if (!LoadGenesisBlock(Params())) {\r\n-            throw std::runtime_error(\"LoadGenesisBlock(...) failed.\");\r\n-        }\r\n-        BlockValidationState block_validation_state;\r\n-        if (!ActivateBestChain(block_validation_state, Params())) {\r\n-            throw std::runtime_error(\"ActivateBestChain(...) failed.\");\r\n-        }\r\n-        for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\r\n-            CreateAndProcessNextBlock(*m_node_context.mempool);\r\n-            SleepUntilSchedulerCompletion(m_scheduler);\r\n-        }\r\n-        assert(ChainActive().Tip() != nullptr);\r\n-        m_peer_logic_validation = MakeUnique<PeerLogicValidation>(m_node_context.connman.get(), nullptr, m_scheduler);\r\n-        m_peer_logic_validation->InitializeNode(m_dummy_p2p_node.get());\r\n-        assert(GetMainSignals().CallbacksPending() == 0);\r\n-        SleepUntilSchedulerCompletion(m_scheduler, 1);\r\n-        LogInstance().m_print_to_console = true;\r\n-    }\r\n-\r\n-    ~FuzzingSetup()\r\n-    {\r\n-        LogInstance().DisconnectTestLogger();\r\n-        fs::remove_all(m_path);\r\n-        m_thread_group.interrupt_all();\r\n-        m_thread_group.join_all();\r\n-        GetMainSignals().FlushBackgroundCallbacks();\r\n-        GetMainSignals().UnregisterBackgroundSignalScheduler();\r\n-    }\r\n-};\r\n-\r\n const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\r\n     {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\r\n     {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\r\n@@ -182,12 +78,20 @@ const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCE\r\n     {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\r\n };\r\n \r\n-std::unique_ptr<FuzzingSetup> g_fuzzing_setup;\r\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\r\n } // namespace\r\n \r\n void initialize()\r\n {\r\n-    g_fuzzing_setup = MakeUnique<FuzzingSetup>(\"process_message-\" + (LIMIT_TO_MESSAGE_TYPE.empty() ? \"all\" : LIMIT_TO_MESSAGE_TYPE));\r\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\r\n+\r\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\r\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\r\n+    }\r\n+    SyncWithValidationInterfaceQueue();\r\n+    assert(ChainActive().Tip() != nullptr);\r\n+    assert(GetMainSignals().CallbacksPending() == 0);\r\n+    LogInstance().m_print_to_console = true;\r\n }\r\n \r\n void test_one_input(const std::vector<uint8_t>& buffer)\r\n@@ -206,9 +110,13 @@ void test_one_input(const std::vector<uint8_t>& buffer)\r\n         return;\r\n     }\r\n     CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\r\n-    CNode& p2p_node = *g_fuzzing_setup->m_dummy_p2p_node;\r\n+    CNode p2p_node{0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false};\r\n+    p2p_node.fSuccessfullyConnected = true;\r\n+    p2p_node.nVersion = PROTOCOL_VERSION;\r\n+    p2p_node.SetSendVersion(PROTOCOL_VERSION);\r\n+    g_fuzzing_setup->m_node.peer_logic->InitializeNode(&p2p_node);\r\n     try {\r\n-        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node_context.connman.get(), g_fuzzing_setup->m_node_context.banman.get(), std::atomic<bool>{false});\r\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node.connman.get(), g_fuzzing_setup->m_node.banman.get(), std::atomic<bool>{false});\r\n     } catch (const std::ios_base::failure& e) {\r\n         const std::string exception_message{e.what()};\r\n         const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\r\n@@ -219,18 +127,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\r\n     } catch (...) {\r\n         assert(false);\r\n     }\r\n-    p2p_node.fDisconnect = false;\r\n-    p2p_node.fPauseSend = false;\r\n-    p2p_node.nSendSize = 0;\r\n-    {\r\n-        LOCK(p2p_node.cs_inventory);\r\n-        p2p_node.vInventoryBlockToSend.clear();\r\n-    }\r\n-    p2p_node.vRecvGetData.clear();\r\n-    {\r\n-        LOCK(p2p_node.cs_vSend);\r\n-        p2p_node.vSendMsg.clear();\r\n-    }\r\n     assert(GetMainSignals().CallbacksPending() == 0);\r\n-    SleepUntilSchedulerCompletion(g_fuzzing_setup->m_scheduler, 1);\r\n+    SyncWithValidationInterfaceQueue();\r\n }\r\ndiff --git a/src/test/util/setup_common.cpp b/src/test/util/setup_common.cpp\r\nindex 53eb9ff43b..7fdbbdfd1d 100644\r\n--- a/src/test/util/setup_common.cpp\r\n+++ b/src/test/util/setup_common.cpp\r\n@@ -7,6 +7,7 @@\r\n #include <banman.h>\r\n #include <chainparams.h>\r\n #include <consensus/consensus.h>\r\n+#include <net_processing.h>\r\n #include <consensus/params.h>\r\n #include <consensus/validation.h>\r\n #include <crypto/sha256.h>\r\n@@ -62,7 +63,7 @@ std::ostream& operator<<(std::ostream& os, const uint256& num)\r\n }\r\n \r\n BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\r\n-    : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / std::to_string(g_insecure_rand_ctx_temp_path.rand32())}\r\n+    : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / g_insecure_rand_ctx_temp_path.rand256().ToString()}\r\n {\r\n     fs::create_directories(m_path_root);\r\n     gArgs.ForceSetArg(\"-datadir\", m_path_root.string());\r\n@@ -136,6 +137,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\r\n     m_node.mempool->setSanityCheck(1.0);\r\n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\r\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\r\n+    m_node.peer_logic = MakeUnique<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler);\r\n }\r\n \r\n TestingSetup::~TestingSetup()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T17:39:56Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390493966",
      "id" : 390493966,
      "in_reply_to_id" : 390418127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5Mzk2Ng==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 110,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372178850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390493966",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390494749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390494749"
         }
      },
      "author_association" : "MEMBER",
      "body" : "100 lines of undocumented code without a given reason are even too much for unit or fuzz tests. This makes it harder to understand and change the tests in the future.",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T17:41:08Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390494749",
      "id" : 390494749,
      "in_reply_to_id" : 390418127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5NDc0OQ==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 110,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372179796,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390494749",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390514338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390514338"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> The fuzzing setup here is a single global, so it is one datadir per process that does not change. Assuming 60 processes or so, 32 bits of randomness should be sufficient.\r\n\r\nOh, true. I experimented with having the fuzzing setup non-global to start with (one setup per `test_one_input`). That's probably when `FastRandomContext().rand64()` was thought to be needed IIRC.\r\n\r\nI'll try your patch: if we can get it working with `RegTestingSetup` then that's great :)",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:11:37Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390514338",
      "id" : 390514338,
      "in_reply_to_id" : 390418127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNDMzOA==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 110,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372203351,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390514338",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390524897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390524897"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:29:13Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390524897",
      "id" : 390524897,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNDg5Nw==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 36,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390524897",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390525259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390525259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:29:51Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390525259",
      "id" : 390525259,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNTI1OQ==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 15,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390525259",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390525911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390525911"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:30:52Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390525911",
      "id" : 390525911,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNTkxMQ==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 13,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390525911",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526189"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:31:17Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526189",
      "id" : 390526189,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNjE4OQ==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 20,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526189",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526318"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:31:29Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526318",
      "id" : 390526318,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNjMxOA==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 27,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526318",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526557"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526557"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:31:55Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390526557",
      "id" : 390526557,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNjU1Nw==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 33,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390526557",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390527256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390527256"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused except for map, set, assert and string?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:33:12Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390527256",
      "id" : 390527256,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNzI1Ng==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 56,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390527256",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390528317"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390528317"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE)};\r\n```",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:35:07Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390528317",
      "id" : 390528317,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyODMxNw==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 105,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : 75,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390528317",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390529390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390529390"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why? Bitcoin Core should just drop the message on the floor itself",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:36:56Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390529390",
      "id" : 390529390,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyOTM5MA==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 109,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390529390",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390530482"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390530482"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated. Now using `RegTestingSetup`. Thanks for the patch!",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:38:45Z",
      "diff_hunk" : "@@ -0,0 +1,236 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+size_t GetNumberOfScheduledTasks(const CScheduler& scheduler)\n+{\n+    std::chrono::system_clock::time_point first, last;\n+    return scheduler.getQueueInfo(first, last);\n+}\n+\n+void SleepUntilSchedulerCompletion(const CScheduler& scheduler, const size_t consider_completed_at_size = 0)\n+{\n+    for (int i = 0; i < 10; ++i) {\n+        if (GetNumberOfScheduledTasks(scheduler) <= consider_completed_at_size) {\n+            return;\n+        }\n+        UninterruptibleSleep(std::chrono::milliseconds{10});\n+    }\n+    assert(false);\n+}\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+void CreateAndProcessNextBlock(const CTxMemPool& mempool)\n+{\n+    std::unique_ptr<CBlockTemplate> block_template = BlockAssembler(mempool, Params()).CreateNewBlock(CScript() << OP_TRUE);\n+    CBlock& block = block_template->block;\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce;\n+        IncrementExtraNonce(&block, ChainActive().Tip(), extra_nonce);\n+    }\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus())) {\n+        ++block.nNonce;\n+    }\n+    ProcessNewBlock(Params(), std::make_shared<const CBlock>(block), true, nullptr);\n+}\n+\n+template <typename T>\n+std::string ToString(const T t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n+class FuzzingSetup",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390530482",
      "id" : 390530482,
      "in_reply_to_id" : 390418127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzMDQ4Mg==",
      "original_commit_id" : "fadf53c5b2305ce1f9680e95dddc79274d747a97",
      "original_position" : 110,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372223160,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390530482",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390530731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390530731"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why? Seems a bit verbose to have everything interleaved with the libfuzzer log.\r\n\r\nFor debugging a specific failure, this can always be enabled.",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:39:08Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390530731",
      "id" : 390530731,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzMDczMQ==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 96,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390530731",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390533597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390533597"
         }
      },
      "author_association" : "MEMBER",
      "body" : "pls sort",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:43:38Z",
      "diff_hunk" : "@@ -7,6 +7,7 @@\n #include <banman.h>\n #include <chainparams.h>\n #include <consensus/consensus.h>\n+#include <net_processing.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390533597",
      "id" : 390533597,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzMzU5Nw==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 4,
      "path" : "src/test/util/setup_common.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390533597",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390534051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390534051"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why?\r\n\r\nThis will erase the whole bt",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:44:29Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;\n+        }\n+    } else if (random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+    CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n+    CNode p2p_node{0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false};\n+    p2p_node.fSuccessfullyConnected = true;\n+    p2p_node.nVersion = PROTOCOL_VERSION;\n+    p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+    g_fuzzing_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+    try {\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node.connman.get(), g_fuzzing_setup->m_node.banman.get(), std::atomic<bool>{false});\n+    } catch (const std::ios_base::failure& e) {\n+        const std::string exception_message{e.what()};\n+        const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\n+        if (p == EXPECTED_DESERIALIZATION_EXCEPTIONS.cend() || p->second.count(random_message_type) == 0) {\n+            std::cout << \"Unexpected exception when processing message type \\\"\" << random_message_type << \"\\\": \" << exception_message << std::endl;\n+            assert(false);\n+        }\n+    } catch (...) {\n+        assert(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390534051",
      "id" : 390534051,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNDA1MQ==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 130,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390534051",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390535156"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390535156"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this needed, given that we synced with the queue?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:46:16Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390535156",
      "id" : 390535156,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNTE1Ng==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 95,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390535156",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390535217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390535217"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this needed, given that we synced with the queue?",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T18:46:23Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;\n+        }\n+    } else if (random_message_type != LIMIT_TO_MESSAGE_TYPE) {\n+        return;\n+    }\n+    CDataStream random_bytes_data_stream{fuzzed_data_provider.ConsumeRemainingBytes<unsigned char>(), SER_NETWORK, PROTOCOL_VERSION};\n+    CNode p2p_node{0, ServiceFlags(NODE_NETWORK | NODE_WITNESS | NODE_BLOOM), 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, false};\n+    p2p_node.fSuccessfullyConnected = true;\n+    p2p_node.nVersion = PROTOCOL_VERSION;\n+    p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+    g_fuzzing_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+    try {\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node.connman.get(), g_fuzzing_setup->m_node.banman.get(), std::atomic<bool>{false});\n+    } catch (const std::ios_base::failure& e) {\n+        const std::string exception_message{e.what()};\n+        const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\n+        if (p == EXPECTED_DESERIALIZATION_EXCEPTIONS.cend() || p->second.count(random_message_type) == 0) {\n+            std::cout << \"Unexpected exception when processing message type \\\"\" << random_message_type << \"\\\": \" << exception_message << std::endl;\n+            assert(false);\n+        }\n+    } catch (...) {\n+        assert(false);\n+    }\n+    assert(GetMainSignals().CallbacksPending() == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390535217",
      "id" : 390535217,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNTIxNw==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 132,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372216336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390535217",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Also, travis is failing ",
      "created_at" : "2020-03-10T18:53:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597254875",
      "id" : 597254875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzI1NDg3NQ==",
      "updated_at" : "2020-03-10T18:53:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597254875",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Concept ACK. Is there a reason to both allow all message types and then add some fuzzers that only allow one message type?\r\n\r\nYes there is :)\r\n\r\n1. The reason to allow all message types in one of the fuzzers: this allows auto-detection and thus fuzzing of newly introduced messages types without updating the fuzzer. See https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596803815 for a real-world example of that :)\r\n\r\n2. The reason to have also have per-message-type fuzzers is largely for the same reason that we have one fuzzing binary per deserialization: to make it relatively easier for coverage guided fuzzers to reach deep. See sipa's rationale [here](https://github.com/bitcoin/bitcoin/issues/11045#issuecomment-323108021) and kcc's confirmation [here](https://github.com/bitcoin/bitcoin/issues/11045#issuecomment-323198955). Note that @kcc is the one of the libFuzzer authors :)",
      "created_at" : "2020-03-10T18:59:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597257649",
      "id" : 597257649,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzI1NzY0OQ==",
      "updated_at" : "2020-03-10T18:59:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597257649",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390555860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390555860"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Purged unused includes.",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T19:22:16Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390555860",
      "id" : 390555860,
      "in_reply_to_id" : 390524897,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NTg2MA==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 36,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372253491,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390555860",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390556242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390556242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done!",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T19:23:00Z",
      "diff_hunk" : "@@ -7,6 +7,7 @@\n #include <banman.h>\n #include <chainparams.h>\n #include <consensus/consensus.h>\n+#include <net_processing.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390556242",
      "id" : 390556242,
      "in_reply_to_id" : 390533597,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NjI0Mg==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 4,
      "path" : "src/test/util/setup_common.cpp",
      "position" : null,
      "pull_request_review_id" : 372253967,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390556242",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390572745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390572745"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This was intentional to truncate at first `\\0` :)",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T19:54:17Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390572745",
      "id" : 390572745,
      "in_reply_to_id" : 390528317,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3Mjc0NQ==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 105,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : 75,
      "pull_request_review_id" : 372274546,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390572745",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390573020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390573020"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This was intentional to maximize fuzzer throughput :)",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T19:54:51Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390573020",
      "id" : 390573020,
      "in_reply_to_id" : 390529390,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3MzAyMA==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 109,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372274918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390573020",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390580279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390580279"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps it was a premature optimization. Skipping!",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T20:08:17Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    if (buffer.size() <= CMessageHeader::COMMAND_SIZE) {\n+        return;\n+    }\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+    if (LIMIT_TO_MESSAGE_TYPE.empty()) {\n+        const std::vector<std::string>& valid_message_types = getAllNetMessageTypes();\n+        if (std::find(valid_message_types.begin(), valid_message_types.end(), random_message_type) == valid_message_types.end()) {\n+            return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390580279",
      "id" : 390580279,
      "in_reply_to_id" : 390529390,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MDI3OQ==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 109,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372283659,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390580279",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390580531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390580531"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Makes sense. Now skipping.",
      "commit_id" : "626174dd6ac025d7e9101713c34572a94020efa2",
      "created_at" : "2020-03-10T20:08:48Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <consensus/consensus.h>\n+#include <consensus/params.h>\n+#include <consensus/validation.h>\n+#include <fs.h>\n+#include <init.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <miner.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <node/context.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <random.h>\n+#include <scheduler.h>\n+#include <script/script.h>\n+#include <script/sigcache.h>\n+#include <streams.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/mining.h>\n+#include <txdb.h>\n+#include <txmempool.h>\n+#include <util/memory.h>\n+#include <util/system.h>\n+#include <util/time.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+#include <version.h>\n+\n+#include <boost/thread.hpp>\n+\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <cstdint>\n+#include <functional>\n+#include <initializer_list>\n+#include <ios>\n+#include <iostream>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+bool ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+\n+namespace {\n+\n+#ifdef MESSAGE_TYPE\n+#define TO_STRING_(s) #s\n+#define TO_STRING(s) TO_STRING_(s)\n+const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n+#else\n+const std::string LIMIT_TO_MESSAGE_TYPE;\n+#endif\n+\n+const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n+    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n+    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n+    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n+    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n+    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n+    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n+};\n+\n+std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\n+} // namespace\n+\n+void initialize()\n+{\n+    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+    assert(ChainActive().Tip() != nullptr);\n+    assert(GetMainSignals().CallbacksPending() == 0);\n+    LogInstance().m_print_to_console = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#discussion_r390580531",
      "id" : 390580531,
      "in_reply_to_id" : 390530731,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MDUzMQ==",
      "original_commit_id" : "3e2185cbaed4329a6b3566139b90c721ef5b10ae",
      "original_position" : 96,
      "path" : "src/test/fuzz/process_message.cpp",
      "position" : null,
      "pull_request_review_id" : 372283990,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17989",
      "updated_at" : "2020-03-10T20:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/390580531",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. This seems super-useful.",
      "created_at" : "2020-03-10T20:55:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597309905",
      "id" : 597309905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzMwOTkwNQ==",
      "updated_at" : "2020-03-10T20:55:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597309905",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke After applying the suggested patch and switching to `RegTestingSetup` I'm running in to this issue on fuzzer exit:\r\n\r\n```\r\n$ touch dummy_file\r\n$ src/test/fuzz/process_message dummy_file\r\nprocess_message: /usr/include/boost/thread/pthread/condition_variable_fwd.hpp:116: boost::condition_variable::~condition_variable(): Assertion `!ret' failed.\r\n==12861== ERROR: libFuzzer: deadly signal\r\n    #0 0x5654b00081c1 in __sanitizer_print_stack_trace llvm-project/compiler-rt/lib/asan/asan_stack.cpp:86:3\r\n    #1 0x5654aff47738 in fuzzer::PrintStackTrace() llvm-project/compiler-rt/lib/fuzzer/FuzzerUtil.cpp:205:5\r\n    #2 0x5654aff2b3d6 in fuzzer::Fuzzer::CrashCallback() llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:232:3\r\n    #3 0x7f87e1a8e88f  (/lib/x86_64-linux-gnu/libpthread.so.0+0x1288f)\r\n    #4 0x7f87e06aee96 in __libc_signal_restore_set /build/glibc-OTsEL5/glibc-2.27/signal/../sysdeps/unix/sysv/linux/nptl-signals.h:80\r\n    #5 0x7f87e06aee96 in raise /build/glibc-OTsEL5/glibc-2.27/signal/../sysdeps/unix/sysv/linux/raise.c:48\r\n    #6 0x7f87e06b0800 in abort /build/glibc-OTsEL5/glibc-2.27/stdlib/abort.c:79\r\n    #7 0x7f87e06a0399 in __assert_fail_base /build/glibc-OTsEL5/glibc-2.27/assert/assert.c:92\r\n    #8 0x7f87e06a0411 in __assert_fail /build/glibc-OTsEL5/glibc-2.27/assert/assert.c:101\r\n    #9 0x5654b077009f in boost::condition_variable::~condition_variable() /usr/include/boost/thread/pthread/condition_variable_fwd.hpp:116:13\r\n    #10 0x5654b0620ef0 in CCheckQueue<CScriptCheck>::~CCheckQueue() src/./checkqueue.h:161:5\r\n    #11 0x7f87e06b3040 in __run_exit_handlers /build/glibc-OTsEL5/glibc-2.27/stdlib/exit.c:108\r\n    #12 0x7f87e06b3139 in exit /build/glibc-OTsEL5/glibc-2.27/stdlib/exit.c:139\r\n    #13 0x5654aff1cf98 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:783:8\r\n    #14 0x5654aff47e32 in main llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10\r\n    #15 0x7f87e0691b96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310\r\n    #16 0x5654afef0119 in _start (src/test/fuzz/process_message+0x1859119)\r\n```\r\n\r\nSeems like `RegTestingSetup` is missing some part of the teardown logic I provided in the previous custom setup :)",
      "created_at" : "2020-03-10T22:06:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597340705",
      "id" : 597340705,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzM0MDcwNQ==",
      "updated_at" : "2020-03-10T22:06:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597340705",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift C++ is a shitshow when it comes to static initialization (order). You might have to manually set up everything in the \"right\" order:\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/process_message.cpp b/src/test/fuzz/process_message.cpp\r\nindex dcf0809e52..92bbc2681e 100644\r\n--- a/src/test/fuzz/process_message.cpp\r\n+++ b/src/test/fuzz/process_message.cpp\r\n@@ -80,15 +80,16 @@ const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCE\r\n     {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\r\n };\r\n \r\n-std::unique_ptr<RegTestingSetup> g_fuzzing_setup;\r\n+const RegTestingSetup* g_setup;\r\n } // namespace\r\n \r\n void initialize()\r\n {\r\n-    g_fuzzing_setup = MakeUnique<RegTestingSetup>();\r\n+    static RegTestingSetup setup{};\r\n+    g_setup = &setup;\r\n \r\n     for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\r\n-        MineBlock(g_fuzzing_setup->m_node, CScript() << OP_TRUE);\r\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\r\n     }\r\n     SyncWithValidationInterfaceQueue();\r\n     assert(ChainActive().Tip() != nullptr);\r\n@@ -116,9 +117,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\r\n     p2p_node.fSuccessfullyConnected = true;\r\n     p2p_node.nVersion = PROTOCOL_VERSION;\r\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);\r\n-    g_fuzzing_setup->m_node.peer_logic->InitializeNode(&p2p_node);\r\n+    g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\r\n     try {\r\n-        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_fuzzing_setup->m_node.connman.get(), g_fuzzing_setup->m_node.banman.get(), std::atomic<bool>{false});\r\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});\r\n     } catch (const std::ios_base::failure& e) {\r\n         const std::string exception_message{e.what()};\r\n         const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\r\n",
      "created_at" : "2020-03-10T23:19:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597366595",
      "id" : 597366595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzM2NjU5NQ==",
      "updated_at" : "2020-03-10T23:19:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597366595",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Indeed :) Thanks for the patch - that fixed the issue!\r\n\r\nPlease re-review - I think we should be ready to go :)",
      "created_at" : "2020-03-11T07:02:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597475525",
      "id" : 597475525,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzQ3NTUyNQ==",
      "updated_at" : "2020-03-11T07:02:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597475525",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift pls push your local branch to GitHub, thx",
      "created_at" : "2020-03-11T11:55:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597590051",
      "id" : 597590051,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzU5MDA1MQ==",
      "updated_at" : "2020-03-11T11:55:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597590051",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Sorry! Done! :)",
      "created_at" : "2020-03-11T12:07:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597595100",
      "id" : 597595100,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzU5NTEwMA==",
      "updated_at" : "2020-03-11T12:07:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597595100",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 9220a0fdd0 ð\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 9220a0fdd0 ð\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjT1QwAhjXDNbw5aYFTlg68glVfl5CPdMNZ4gKbD/RkTp3bWXzxo7f/RvRh1WCc\r\n+ifotMLe4Ihdj2r6H6guhYy46Damnk+qPhaDfLxGQAc2mwZrJ4gHiS2LDiZsvckD\r\nX6+SMgJK2uHEy9u5zjXLEFOoHArGb2J73XloMTmJR7HTLlFy53hEMJsYqu9+Fmo+\r\nsxzXBF1Mn40I+NnHr9bEPe66fgw6Nf3PiM9CIbJLQRBhCXRLAnkurO6Ai7gK71a+\r\nDjxaCie+KBcpupVdbHPTRIyRO98jSndZYzK9ksSDshh2ifxGhrUQGSKRQ3e6CGtZ\r\nfgZsB3o+TKmMPKIawyxU1oAfpuCmWC/seqoLPvR7ymoYgd+gsNZGjp7w+hVbiku9\r\n6SwRrQSRqGg5cio4qWbqqlyqmzGBpDrs9MjcY3/NF/mJrafarZ2UB+BKQ5IrXkZj\r\nBidwPFy4zJS+8hPUGeRqH8igHzG3cY5xkB1Q+Wpy2McjDguh1qkzWJcU/9ifRqnj\r\n2DQxCmcw\r\n=VmPE\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `11743d3aff704a992c2abdf56c51b9f75f57199d2d9b269edff015d74f3fe9c3  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010811743d3aff704a992c2abdf56c51b9f75f57199d2d9b269edff015d74f3fe9c3f010e01341c2b0bfe8ce3a90fdf73a431aa508fff01002983f3c9f137b09ac6611d8aea05aa508f1045e68de70f0089357c329825c675c0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0103692e1ac0f3bc671bddcd989d1c5031008f1045e68de70f008300cb06bde33dfc60083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010d2f9a7014293b7f14070534a40f5315e08f1045e68de70f008c33a7c2594c07c460083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010f1cdf71bc2fcead3ec92d4911d58e32308f1045e68de70f00895e1427478902c910083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-03-11T12:49:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17989#issuecomment-597613039",
      "id" : 597613039,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17989",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzYxMzAzOQ==",
      "updated_at" : "2020-03-11T12:50:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597613039",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
