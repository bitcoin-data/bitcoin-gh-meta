[
   {
      "author_association" : "MEMBER",
      "body" : "Nice observation.\r\n\r\n(Brainstorm idea) How about something like doubling the timeout every time it causes a disconnection. And then reducing/resetting it when the window actually moves?",
      "created_at" : "2022-08-19T19:51:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1221043636",
      "id" : 1221043636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585Ix6W0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1221043636/reactions"
      },
      "updated_at" : "2022-08-19T19:51:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1221043636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">Collect statistics from recent block download times during IBD and have a dynamic timeout based on this. (Introduces more complexity, but might be better in certain situations, e.g. when 6s aren't sufficient either).\r\n\r\nRather than this, it might be better to track download speeds from each peer, and check the speeds of this peer after 2 seconds.\r\n\r\nFor an immediate fix, though, maybe just making the timeout configurable would be a good idea?\r\n\r\nPerhaps as an interim between these two ideas, if we disconnect N stalling peers, start increasing the timeout.",
      "created_at" : "2022-08-20T20:40:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1221405113",
      "id" : 1221405113,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585IzSm5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1221405113/reactions"
      },
      "updated_at" : "2022-08-20T20:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1221405113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Rather than this, it might be better to track download speeds from each peer, and check the speeds of this peer after 2 seconds.\r\n\r\nWe would also have to compare it to the speed of others and have some criterion what deviation would be enough to disconnect.\r\n\r\n>How about something like doubling the timeout every time it causes a disconnection. And then reducing/resetting it when the window actually moves?\r\n\r\n> Perhaps as an interim between these two ideas, if we disconnect N stalling peers, start increasing the timeout.\r\n\r\nThanks! These suggestions are similar, make a lot of sense to me, and don't look very invasive to implement, planning to change to this approach and update soon.",
      "created_at" : "2022-08-22T14:21:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1222432129",
      "id" : 1222432129,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585I3NWB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1222432129/reactions"
      },
      "updated_at" : "2022-08-22T14:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1222432129",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I now implemented the suggestion by @sipa to double the timeout and updated the OP.\r\n\r\nI tested this manually by catching up to the best chain with an ~1 month old datadir with `-onlynet=tor` (slow, blocks take ~10s to download), while reducing `BLOCK_DOWNLOAD_WINDOW` and `MAX_BLOCKS_IN_TRANSIT_PER_PEER` to make stalling situations happen more quickly. ",
      "created_at" : "2022-08-24T15:06:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1225853199",
      "id" : 1225853199,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585JEQkP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1225853199/reactions"
      },
      "updated_at" : "2022-08-24T15:08:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1225853199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Nice! This seems a fine improvement.\r\n\r\nI think one way of looking at stalling is that it happens when one peer's bandwidth is less than 1/64th of the total bandwidth (64 = 1024/16 = window/max in transit) [0]. \r\n\r\nI think that means there might be a clever way of preventing slow nodes from stalling the download by reducing the in transit limit instead -- so that instead of supplying 16 blocks in the time it takes the other peers to supply 1008 to avoid stalling, the peer only needs to supply 8 or 4 blocks in the time it takes the other peers to supply 1016 or 1020. [1]\r\n\r\nI think adding the blocks only nodes probably made this slightly worse, since there are now 2 extra peers, so now you need something like 25% more bandwidth in order to still have 1/64th of the total...\r\n\r\n[0] Measured in blocks of course, so even if your bandwidth in bytes is fine, you might be unlucky to be asked for 16 blocks that are 2MB each, while everyone else is just being asked for 1008 50kB blocks at you (32MB total vs 7.2MB per peer).\r\n\r\n[1] Perhaps you could implement this by keeping a global and per-peer exponential rolling average of how many blocks you download per second; then you could set the peer's in-transit limit to `1024 * peer_avg / global_avg`; capping it at 16, and marking the peer as stalling and disconnecting if that value drops below 2 (in which case the remaining peers *each* have 50x this peer's bandwidth)?",
      "created_at" : "2022-08-26T14:31:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1228565836",
      "id" : 1228565836,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585JOm1M",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1228565836/reactions"
      },
      "updated_at" : "2022-08-26T14:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1228565836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r956425910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956425910"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would think only reduce the timeout if the block was in fact downloaded in less time (than the would-be *new* timeout).",
      "commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "created_at" : "2022-08-26T20:27:05Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r956425910",
      "id" : 956425910,
      "line" : 1732,
      "node_id" : "PRRC_kwDOABII5845Aea2",
      "original_commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "original_line" : 1732,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 28,
      "pull_request_review_id" : 1087492146,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956425910/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-26T20:28:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/956425910",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958962230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958962230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I like about the current solution that it is very simple, prevents the node from getting stuck, and doesn't require additional bookkeeping of historical block download times.\r\n\r\nI think your suggestion wouldn't be completely straightforward to implement: The block being connected here might have been downloaded some time in the past, saved to disk, but only connected now (as a result of its predecessor being connected). So we'd need some data structure to keep track of download times for not-yet-connected blocks and add/remove entries from it during IBD.\r\n\r\nIf we did this, it would help us cycle through less peers in situations where we assign multiple blocks to a peer and halving the timeout after successfully downloading a block would lead to a stalling situation again - but note that there are also other sources of disconnections that could be improved if we kept track of this kind data during IBD: E.g. if doubling the timeout is not sufficient and we'd need to 4x or 8x it.\r\n\r\nSo if we want something better but more complicated (with bookkeeping), my feeling is that we should go for another approach altogether, like basing the stalling timeout on a running average over the last received block times from multiple peers instead of a doubling/halving approach.\r\n",
      "commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "created_at" : "2022-08-30T21:54:44Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958962230",
      "id" : 958962230,
      "in_reply_to_id" : 956425910,
      "line" : 1732,
      "node_id" : "PRRC_kwDOABII5845KJo2",
      "original_commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "original_line" : 1732,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 28,
      "pull_request_review_id" : 1091011833,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958962230/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-30T21:54:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958962230",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958969743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958969743"
         }
      },
      "author_association" : "MEMBER",
      "body" : "With this current code, it will stall, get a block, stall, get a block, stall, etc repeatedly...",
      "commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "created_at" : "2022-08-30T22:08:04Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958969743",
      "id" : 958969743,
      "in_reply_to_id" : 956425910,
      "line" : 1732,
      "node_id" : "PRRC_kwDOABII5845KLeP",
      "original_commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "original_line" : 1732,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 28,
      "pull_request_review_id" : 1091021888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958969743/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-30T22:08:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958969743",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958972383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958972383"
         }
      },
      "author_association" : "NONE",
      "body" : "Okay ",
      "commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "created_at" : "2022-08-30T22:12:46Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958972383",
      "id" : 958972383,
      "in_reply_to_id" : 956425910,
      "line" : 1732,
      "node_id" : "PRRC_kwDOABII5845KMHf",
      "original_commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "original_line" : 1732,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 28,
      "pull_request_review_id" : 1091025263,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958972383/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-30T22:12:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958972383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/99142380?v=4",
         "events_url" : "https://api.github.com/users/Ellajoke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Ellajoke/followers",
         "following_url" : "https://api.github.com/users/Ellajoke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Ellajoke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Ellajoke",
         "id" : 99142380,
         "login" : "Ellajoke",
         "node_id" : "U_kgDOBejK7A",
         "organizations_url" : "https://api.github.com/users/Ellajoke/orgs",
         "received_events_url" : "https://api.github.com/users/Ellajoke/received_events",
         "repos_url" : "https://api.github.com/users/Ellajoke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Ellajoke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Ellajoke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Ellajoke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think that means there might be a clever way of preventing slow nodes from stalling the download by reducing the in transit limit instead -- so that instead of supplying 16 blocks in the time it takes the other peers to supply 1008 to avoid stalling, the peer only needs to supply 8 or 4 blocks in the time it takes the other peers to supply 1016 or 1020. [1]\r\n\r\nThat sounds like a very interesting alternative approach. I'm not sure I understand it completely though: Are you suggesting to assign slower peers less blocks simultaneously, to help prevent stalling situations from occurring in the first place? And also move away from the concept that a stalling situation occurs only when we can't move the 1024 block window forward, but make it dependent on the other peers instead, so that we'd possibly disconnect slow peers much earlier than that if they are slower in comparison to faster ones?\r\n",
      "created_at" : "2022-08-30T22:30:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1232235365",
      "id" : 1232235365,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585Jcmtl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232235365/reactions"
      },
      "updated_at" : "2022-08-30T22:30:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232235365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958991800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958991800"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> With this current code, it will stall, get a block, stall, get a block, stall, etc repeatedly...\r\n\r\nYes, but only a few times until the blocks preventing the tip from moving are downloaded, then the tip advances by connecting the large number of stashed blocks from the 1024 window, ending the stalling situation. If every peer is equally slow, it doesn't matter if you download a block in 2s or 1 minute from the viewpoint of the stalling logic.",
      "commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "created_at" : "2022-08-30T22:38:30Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958991800",
      "id" : 958991800,
      "in_reply_to_id" : 956425910,
      "line" : 1732,
      "node_id" : "PRRC_kwDOABII5845KQ24",
      "original_commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "original_line" : 1732,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 28,
      "pull_request_review_id" : 1091051121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958991800/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-30T22:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958991800",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958999282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958999282"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe instead of halving the timeout, we should, on block connection, multiply it with a factor `0.5 < f < 1` to let it go back slower? ",
      "commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "created_at" : "2022-08-30T22:54:51Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r958999282",
      "id" : 958999282,
      "in_reply_to_id" : 956425910,
      "line" : 1732,
      "node_id" : "PRRC_kwDOABII5845KSry",
      "original_commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "original_line" : 1732,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 28,
      "pull_request_review_id" : 1091060970,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958999282/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-30T22:55:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/958999282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959253273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959253273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Once the max is reached, this would print repeated messages like\r\n```\r\nIncreased timeout to 64 seconds\r\nIncreased timeout to 64 seconds\r\nIncreased timeout to 64 seconds\r\n...\r\n```\r\n\r\nwhich would be misleading because the timeout was not _increased_.",
      "commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "created_at" : "2022-08-31T07:34:49Z",
      "diff_hunk" : "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\n+            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959253273",
      "id" : 959253273,
      "line" : 5246,
      "node_id" : "PRRC_kwDOABII5845LQsZ",
      "original_commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "original_line" : 5246,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 48,
      "pull_request_review_id" : 1091419557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959253273/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-31T08:18:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959253273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959286134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959286134"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This sequence is not atomic. If two threads execute concurrently the increase/decrease code it would lead to unexpected results. Consider this, it only does the inc/dec if no other thread changed the value in the meantime, otherwise leaves it untouched:\r\n\r\n<details>\r\n<summary>atomic</summary>\r\n\r\n```diff\r\ndiff --git i/src/net_processing.cpp w/src/net_processing.cpp\r\nindex 42686f0db0..fd2f22cdcd 100644\r\n--- i/src/net_processing.cpp\r\n+++ w/src/net_processing.cpp\r\n@@ -1726,14 +1726,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\r\n         LOCK(cs_main);\r\n         for (const auto& ptx : pblock->vtx) {\r\n             m_txrequest.ForgetTxHash(ptx->GetHash());\r\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\r\n         }\r\n     }\r\n-    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\r\n-        m_block_stalling_timeout = std::max(m_block_stalling_timeout.load() / 2, DEFAULT_BLOCK_STALLING_TIMEOUT);\r\n+    auto stalling_timeout = m_block_stalling_timeout.load();\r\n+    const auto new_timeout = std::max(stalling_timeout / 2, DEFAULT_BLOCK_STALLING_TIMEOUT);\r\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {\r\n+        LogPrint(BCLog::NET, \"Decreased stalling timeout to %d seconds\\n\", new_timeout.count());\r\n     }\r\n }\r\n \r\n void PeerManagerImpl::BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex)\r\n {\r\n     // To avoid relay problems with transactions that were previously\r\n@@ -5231,22 +5233,25 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\r\n                 }\r\n         }\r\n         if (!vInv.empty())\r\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\r\n \r\n         // Detect whether we're stalling\r\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\r\n+        auto stalling_timeout = m_block_stalling_timeout.load();\r\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - stalling_timeout) {\r\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\r\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\r\n             // should only happen during initial block download.\r\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\r\n             pto->fDisconnect = true;\r\n             // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\r\n             // bandwidth is insufficient.\r\n-            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\r\n-            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());\r\n+            const auto new_timeout = std::min(2 * stalling_timeout, MAX_BLOCK_STALLING_TIMEOUT);\r\n+            if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {\r\n+                LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", new_timeout.count());\r\n+            }\r\n             return true;\r\n         }\r\n         // In case there is a block that has been in flight from this peer for block_interval * (1 + 0.5 * N)\r\n         // (with N the number of peers from which we're downloading validated blocks), disconnect due to timeout.\r\n         // We compensate for other peers to prevent killing off peers due to our own downstream link\r\n         // being saturated. We only count validated in-flight blocks so peers can't advertise non-existing block hashes\r\n```\r\n</details>\r\n",
      "commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "created_at" : "2022-08-31T08:09:15Z",
      "diff_hunk" : "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\n+            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959286134",
      "id" : 959286134,
      "line" : 5246,
      "node_id" : "PRRC_kwDOABII5845LYt2",
      "original_commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "original_line" : 5246,
      "original_position" : 48,
      "original_start_line" : 5245,
      "path" : "src/net_processing.cpp",
      "position" : 48,
      "pull_request_review_id" : 1091419557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959286134/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 5245,
      "start_side" : "RIGHT",
      "updated_at" : "2022-08-31T08:20:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959286134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959291124"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959291124"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The increase would happen regardless of IBD, but decrease - only if IBD. In theory, this means that once out of IBD, the timeout could only increase or stay unchanged, but never decrease. Is this intended? \r\n\r\nMaybe better have the IBD condition on both inc/dec or remove it from both.",
      "commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "created_at" : "2022-08-31T08:13:38Z",
      "diff_hunk" : "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959291124",
      "id" : 959291124,
      "line" : 5237,
      "node_id" : "PRRC_kwDOABII5845LZ70",
      "original_commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "original_line" : 5237,
      "original_position" : 39,
      "original_start_line" : 5228,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 1091419557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959291124/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 5228,
      "start_side" : "LEFT",
      "updated_at" : "2022-08-31T08:18:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959291124",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959293576"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959293576"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The decrease does not log anything, but increase does. For symmetry and more log clarity, is it better to log both operations?\r\n",
      "commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "created_at" : "2022-08-31T08:15:48Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n+        m_block_stalling_timeout = std::max(m_block_stalling_timeout.load() / 2, DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959293576",
      "id" : 959293576,
      "line" : 1733,
      "node_id" : "PRRC_kwDOABII5845LaiI",
      "original_commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "original_line" : 1733,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 29,
      "pull_request_review_id" : 1091419557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959293576/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-31T08:18:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959293576",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959300991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959300991"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree it seems better to decrease it slowly. If it was a single slow peer, then there would be many blocks coming on time afterwards.",
      "commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "created_at" : "2022-08-31T08:23:38Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r959300991",
      "id" : 959300991,
      "in_reply_to_id" : 956425910,
      "line" : 1732,
      "node_id" : "PRRC_kwDOABII5845LcV_",
      "original_commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "original_line" : 1732,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 28,
      "pull_request_review_id" : 1091484437,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959300991/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-31T08:23:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/959300991",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. I will give a code review ACK once you resolve vasil's comments :)",
      "created_at" : "2022-08-31T10:10:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1232740885",
      "id" : 1232740885,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585JeiIV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232740885/reactions"
      },
      "updated_at" : "2022-08-31T10:10:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232740885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> That sounds like a very interesting alternative approach.\r\n\r\nYeah, it shouldn't hold up this fix though, I think.\r\n\r\n> I'm not sure I understand it completely though: Are you suggesting to assign slower peers less blocks simultaneously, to help prevent stalling situations from occurring in the first place?\r\n\r\nYes.\r\n\r\n> And also move away from the concept that a stalling situation occurs only when we can't move the 1024 block window forward, but make it dependent on the other peers instead, so that we'd possibly disconnect slow peers much earlier than that if they are slower in comparison to faster ones?\r\n\r\nNot really. I think you need to keep the 1024 block window (since increasing that hurts pruning), and I think that if the window gets full you should still call that \"stalling\".\r\n\r\nBut I think if you change the `MAX_BLOCKS_IN_TRANSIT_PER_PEER` so that slower peers have fewer in-transit blocks, then you'll be stalling much less often, and may not need to disconnect them at all -- that lets you stay connected to tor peers during IBD (for partition/sybil resistance) even if your ipv4/ipv6 peers are *much* faster. Maybe you could disconnect them when their `max_blocks_in_transit` drops to 1 or 2, before they actually cause stalling?\r\n\r\nMaybe a more specific example would be worthwhile. As it stands, if your first peer will give you one block every 5 seconds, and your other 9 peers will collectively give you 14 blocks every second (on average, 7.8 times faster than the first peer, in total 70 times faster), then by the time that first peer has downloaded blocks 1..15 (which takes 75 seconds), the other peers will have given you blocks 17..1039 after 73.1 seconds, and stalling gets triggered. But if the slow peer had only queued up 8 blocks, then it would have supplied them in 40 seconds, which only gives the other peers enough time to supply 560 blocks, so they won't fill up the window. Hmm, I guess it ought to be possible to simulate that scenario via the functional test's `P2PInterface` stuff...",
      "created_at" : "2022-08-31T15:51:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1233119551",
      "id" : 1233119551,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585Jf-k_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1233119551/reactions"
      },
      "updated_at" : "2022-08-31T15:51:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1233119551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nI think it would be nice if this PR also added some tests, because it looks like we didn't have any tests for the stalling mechanism in the first place.",
      "created_at" : "2022-09-09T09:39:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1241745370",
      "id" : 1241745370,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585KA4fa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1241745370/reactions"
      },
      "updated_at" : "2022-09-09T09:39:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1241745370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Will address feedback soon (and work on adding a test for the stalling logic).",
      "created_at" : "2022-09-12T17:50:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1244092572",
      "id" : 1244092572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585KJ1ic",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1244092572/reactions"
      },
      "updated_at" : "2022-09-12T17:50:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1244092572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971116652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971116652"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "With the latest push, I decrease it by a factor 0.85 with each connected block.",
      "commit_id" : "a764c20f35e5c42edea6f5b75a74a77f7590ef57",
      "created_at" : "2022-09-14T17:39:26Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971116652",
      "id" : 971116652,
      "in_reply_to_id" : 956425910,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58454hBs",
      "original_commit_id" : "686936c92afa30b38ad11e4c04af6b98e104e79f",
      "original_line" : 1732,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1107946552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971116652/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-14T17:39:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971116652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971117842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971117842"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I took your suggestion and added you as coauthor - didn't know about `compare_exchange_strong` before.",
      "commit_id" : "a764c20f35e5c42edea6f5b75a74a77f7590ef57",
      "created_at" : "2022-09-14T17:40:47Z",
      "diff_hunk" : "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\n+            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971117842",
      "id" : 971117842,
      "in_reply_to_id" : 959286134,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58454hUS",
      "original_commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "original_line" : 5246,
      "original_position" : 48,
      "original_start_line" : 5245,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1107948292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971117842/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-14T17:40:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971117842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971118033"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118033"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed the IBD condition",
      "commit_id" : "a764c20f35e5c42edea6f5b75a74a77f7590ef57",
      "created_at" : "2022-09-14T17:41:01Z",
      "diff_hunk" : "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971118033",
      "id" : 971118033,
      "in_reply_to_id" : 959291124,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58454hXR",
      "original_commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "original_line" : 5237,
      "original_position" : 39,
      "original_start_line" : 5228,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1107948584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118033/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "updated_at" : "2022-09-14T17:41:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118033",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971118262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118262"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "a764c20f35e5c42edea6f5b75a74a77f7590ef57",
      "created_at" : "2022-09-14T17:41:15Z",
      "diff_hunk" : "@@ -1723,6 +1729,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n+        m_block_stalling_timeout = std::max(m_block_stalling_timeout.load() / 2, DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971118262",
      "id" : 971118262,
      "in_reply_to_id" : 959293576,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58454ha2",
      "original_commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "original_line" : 1733,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1107948882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118262/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-14T17:41:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971118262",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "[a764c20 ](https://github.com/bitcoin/bitcoin/commit/a764c20f35e5c42edea6f5b75a74a77f7590ef57)to [48e5385](https://github.com/bitcoin/bitcoin/commit/48e538510b3c4339dde4c70a9ed1f83f031245c4):\r\n* Addressed review comments: In particular, don't halve the adaptive timeout each time a block is connected, but let it go back to the default value more slowly\r\n* Added a functional test for the stalling logic.",
      "created_at" : "2022-09-14T17:58:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1247119108",
      "id" : 1247119108,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585KVYcE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1247119108/reactions"
      },
      "updated_at" : "2022-09-14T18:56:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1247119108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971135953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971135953"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed according to your suggestion.",
      "commit_id" : "a764c20f35e5c42edea6f5b75a74a77f7590ef57",
      "created_at" : "2022-09-14T17:59:09Z",
      "diff_hunk" : "@@ -5225,12 +5234,16 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - m_block_stalling_timeout.load()) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            m_block_stalling_timeout = std::min(2 * m_block_stalling_timeout.load(), MAX_BLOCK_STALLING_TIMEOUT);\n+            LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r971135953",
      "id" : 971135953,
      "in_reply_to_id" : 959253273,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58454lvR",
      "original_commit_id" : "7c8c4e47137aa8c6e96163f55ccfadc75ba84c1a",
      "original_line" : 5246,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1107974917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971135953/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-14T17:59:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/971135953",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1159651918), [naumenkogs](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1168121389), [achow101](https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1379569979) |\n| Concept ACK | [dergoegge](https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1241745370), [sipa](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1109637149), [RandyMcMillan](https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1379584074) |\n| Stale ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1091129602), [luke-jr](https://github.com/bitcoin/bitcoin/pull/25880#pullrequestreview-1114636676) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "created_at" : "2022-09-15T00:07:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1247419418",
      "id" : 1247419418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585KWhwa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1247419418/reactions"
      },
      "updated_at" : "2023-01-11T22:52:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1247419418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r972000808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972000808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not a fan of timeouts like this but in case i also don't see how to avoid it.",
      "commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "created_at" : "2022-09-15T13:39:28Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r972000808",
      "id" : 972000808,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII5845744o",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 85,
      "pull_request_review_id" : 1109215242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972000808/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-15T13:52:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972000808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r972007511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972007511"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This test actually almost passes for the previous stalling logic as well, it only fails on `Check that stalling timeout gets reduced back to 2 seconds after connecting several blocks` (because of the assertion on the debug log).\r\n\r\nMaybe add a condition to check that after 3 seconds the stalling peer is not disconnected? (same for the next doubling to 8 seconds)",
      "commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "created_at" : "2022-09-15T13:45:01Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and start the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r972007511",
      "id" : 972007511,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584576hX",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 103,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 103,
      "pull_request_review_id" : 1109215242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972007511/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-15T13:52:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972007511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r972284322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972284322"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it intentional that this happens with an accuracy of 1 second?\r\n\r\nSo for example you could have the sequence 64, 54, 45, 38, 32, 27, 22, 18, 15, 12, 10, 8, 6, 5, 4, 3, 2... seconds.\r\n\r\nThe `stalling_timeout != new_timeout` condition can also be placed before the exchange, I think?",
      "commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "created_at" : "2022-09-15T18:01:08Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r972284322",
      "id" : 972284322,
      "line" : 1735,
      "node_id" : "PRRC_kwDOABII58458-Gi",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 1735,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 40,
      "pull_request_review_id" : 1109637149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972284322/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-15T18:04:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/972284322",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r974945067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/974945067"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Let's say `compare_exchange_strong` triggers the `false` path, meaning `m_block_stalling_timeout` was updated elsewhere.\r\n\r\nIf I understand this method correctly, it will update `stalling_timeout` to the new value of `m_block_stalling_timeout`. Then, assuming `stalling_timeout != new_timeout` passes, the logging will be wrong?\r\n1. We haven't decreased the actual value *here*\r\n2. The latest value is *for sure* something different than `new_timeout`\r\n\r\nI suspect this event could be even impossible in our execution, but then I'm wondering if there's a way to express this observation in code, rather than having a meaningless code branch.",
      "commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "created_at" : "2022-09-20T06:44:20Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r974945067",
      "id" : 974945067,
      "line" : 1736,
      "node_id" : "PRRC_kwDOABII5846HHsr",
      "original_commit_id" : "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "original_line" : 1736,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 41,
      "pull_request_review_id" : 1113225192,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/974945067/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-20T06:44:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/974945067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975712293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975712293"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "According to https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange, `compare_exchange_strong` returns `true` if the underlying atomic value was successfully changed, `false` otherwise.\r\nSo my understanding is that if nothing was updated because `m_block_stalling_timeout` was changed by some other thread, the logging statement won't be executed.",
      "commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "created_at" : "2022-09-20T18:56:05Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975712293",
      "id" : 975712293,
      "in_reply_to_id" : 974945067,
      "line" : 1736,
      "node_id" : "PRRC_kwDOABII5846KDAl",
      "original_commit_id" : "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "original_line" : 1736,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 41,
      "pull_request_review_id" : 1114328355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975712293/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-20T19:06:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975712293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975743588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975743588"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In the normal case, the timeout is already at the default, so probably good to optimise for that:\r\n\r\n```c++\r\nif (stalling_timeout > DEFAULT_BLOCK_STALLING_TIMEOUT) {\r\n```",
      "commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "created_at" : "2022-09-20T19:34:49Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975743588",
      "id" : 975743588,
      "line" : 1734,
      "node_id" : "PRRC_kwDOABII5846KKpk",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 1734,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 1114374631,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975743588/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-20T19:36:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975743588",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975744322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975744322"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Perhaps `BLOCK_STALLING_TIMEOUT_`{`DEFAULT`,`MAX`} would be better?",
      "commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "created_at" : "2022-09-20T19:35:22Z",
      "diff_hunk" : "@@ -110,8 +110,11 @@ static constexpr auto GETDATA_TX_INTERVAL{60s};\n static const unsigned int MAX_GETDATA_SZ = 1000;\n /** Number of blocks that can be requested at any given time from a single peer. */\n static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n-/** Time during which a peer must stall block download progress before being disconnected. */\n-static constexpr auto BLOCK_STALLING_TIMEOUT{2s};\n+/** Default time during which a peer must stall block download progress before being disconnected.\n+  * the actual timeout is increased temporarily if peers are disconnected for hitting the timeout */\n+static constexpr auto DEFAULT_BLOCK_STALLING_TIMEOUT{2s};\n+/** Maximum timeout for stalling block download. */\n+static constexpr auto MAX_BLOCK_STALLING_TIMEOUT{64s};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975744322",
      "id" : 975744322,
      "line" : 117,
      "node_id" : "PRRC_kwDOABII5846KK1C",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 117,
      "original_position" : 10,
      "original_start_line" : 115,
      "path" : "src/net_processing.cpp",
      "position" : 10,
      "pull_request_review_id" : 1114374631,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975744322/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 115,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-20T19:36:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975744322",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975745243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975745243"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Probably should be IMO. Not sure how efficient std::atomic is with std::chrono units.",
      "commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "created_at" : "2022-09-20T19:36:03Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975745243",
      "id" : 975745243,
      "in_reply_to_id" : 972284322,
      "line" : 1735,
      "node_id" : "PRRC_kwDOABII5846KLDb",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 1735,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 40,
      "pull_request_review_id" : 1114374631,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975745243/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-20T19:36:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975745243",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975761099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975761099"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yes, I was looking for an RPC we could `wait_until` for to avoid this - but I didn't find a way of querying the number of blocks a node has downloaded (including those not connected to the chain yet).",
      "commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "created_at" : "2022-09-20T19:56:26Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975761099",
      "id" : 975761099,
      "in_reply_to_id" : 972000808,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII5846KO7L",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 85,
      "pull_request_review_id" : 1114398336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975761099/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-20T19:56:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975761099",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975820313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820313"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Is it intentional that this happens with an accuracy of 1 second?\r\n\r\nIt was kind of intentional, I first thought of changing `m_block_stalling_timeout` to microseconds, requiring conversions for the logging etc. but then I wondered whether a higher accuracy adds anything - I also thought of simply decreasing it constantly by one second per block received (instead of using a factor).\r\nDo you or others have a preference here?\r\n\r\n> The stalling_timeout != new_timeout condition can also be placed before the exchange, I think?\r\n\r\nDone - I changed the order within the `if` statements (in two places).",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-20T21:15:22Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975820313",
      "id" : 975820313,
      "in_reply_to_id" : 972284322,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846KdYZ",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 1735,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1114484426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820313/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-20T21:15:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975820561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820561"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done with the latest push.",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-20T21:15:45Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and start the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975820561",
      "id" : 975820561,
      "in_reply_to_id" : 972007511,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII5846KdcR",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 103,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 103,
      "pull_request_review_id" : 1114484791,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820561/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-20T21:15:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975820849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820849"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done, makes sense to me.",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-20T21:16:12Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975820849",
      "id" : 975820849,
      "in_reply_to_id" : 975743588,
      "line" : 1735,
      "node_id" : "PRRC_kwDOABII5846Kdgx",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 1735,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 40,
      "pull_request_review_id" : 1114485235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820849/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-20T21:16:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975820849",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975822057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975822057"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done, maybe that makes it easier to see that they are used for the same thing.",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-20T21:17:56Z",
      "diff_hunk" : "@@ -110,8 +110,11 @@ static constexpr auto GETDATA_TX_INTERVAL{60s};\n static const unsigned int MAX_GETDATA_SZ = 1000;\n /** Number of blocks that can be requested at any given time from a single peer. */\n static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n-/** Time during which a peer must stall block download progress before being disconnected. */\n-static constexpr auto BLOCK_STALLING_TIMEOUT{2s};\n+/** Default time during which a peer must stall block download progress before being disconnected.\n+  * the actual timeout is increased temporarily if peers are disconnected for hitting the timeout */\n+static constexpr auto DEFAULT_BLOCK_STALLING_TIMEOUT{2s};\n+/** Maximum timeout for stalling block download. */\n+static constexpr auto MAX_BLOCK_STALLING_TIMEOUT{64s};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r975822057",
      "id" : 975822057,
      "in_reply_to_id" : 975744322,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846Kdzp",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 117,
      "original_position" : 10,
      "original_start_line" : 115,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1114486811,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975822057/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-20T21:17:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/975822057",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "[48e5385 ](https://github.com/bitcoin/bitcoin/commit/48e538510b3c4339dde4c70a9ed1f83f031245c4)to [4b0dbc0](https://github.com/bitcoin/bitcoin/commit/4b0dbc0f3eb8c57944f9037e017b89c912048206): \r\nAddressed review feedback",
      "created_at" : "2022-09-20T21:19:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1252924878",
      "id" : 1252924878,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585Krh3O",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1252924878/reactions"
      },
      "updated_at" : "2022-09-20T21:19:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1252924878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r976259314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976259314"
         }
      },
      "author_association" : "MEMBER",
      "body" : ">According to https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange, compare_exchange_strong returns true if the underlying atomic value was successfully changed, false otherwise.\r\n\r\nI think this is only a part of what's happening, and if you consider the latter (also from your link), my example would make more sense?\r\n\r\nAtomically compares the [object representation](https://en.cppreference.com/w/cpp/language/object) (until C++20)[value representation](https://en.cppreference.com/w/cpp/language/object) (since C++20) of *this with that of expected, and if those are bitwise-equal, replaces the former with desired (performs read-modify-write operation). Otherwise, loads the actual value stored in *this into expected (performs load operation).\r\n\r\n",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-21T09:09:45Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r976259314",
      "id" : 976259314,
      "in_reply_to_id" : 974945067,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846MIjy",
      "original_commit_id" : "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "original_line" : 1736,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1115061678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976259314/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-21T09:10:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976259314",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r976654710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976654710"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I thought you meant `stalling_timeout` possibly being updated, which might have had an influence on the second condition (`stalling_timeout != new_timeout`).\r\nMy point was that this couldn't possibly matter here because if `stalling_timeout` is updated, that must go together with `compare_exchange_strong()` returning false, and the two conditions are combined with an `&&`-operator so the entire clause is false (and the second condition will not even be evaluated due to short-circuiting).\r\n\r\nNote that I changed the order of the two condition with the last push, so `stalling_timeout != new_timeout` is now the first of the two.",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-21T15:24:52Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r976654710",
      "id" : 976654710,
      "in_reply_to_id" : 974945067,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846NpF2",
      "original_commit_id" : "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "original_line" : 1736,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1115639368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976654710/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-21T15:24:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/976654710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r978392189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978392189"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You are right, I was wrong about the previous version. The updated version is better anyway :) feel free to resolve this.",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-23T08:30:45Z",
      "diff_hunk" : "@@ -1723,6 +1730,12 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds> (stalling_timeout * 0.85), DEFAULT_BLOCK_STALLING_TIMEOUT);\n+    if (m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout) && stalling_timeout != new_timeout) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r978392189",
      "id" : 978392189,
      "in_reply_to_id" : 974945067,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846URR9",
      "original_commit_id" : "41a2b941cd4d4991c5e4dabd6953d095d3955ac3",
      "original_line" : 1736,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1118093700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978392189/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T08:30:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978392189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r978397817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978397817"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would probably replace this with the following code (haven't compiled):\r\n```\r\nAssume(stalling_timeout >= BLOCK_STALLING_TIMEOUT_DEFAULT);\r\nif (stalling_timeout != BLOCK_STALLING_TIMEOUT_DEFAULT)\r\n....\r\n```\r\n\r\nNo big deal though.",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-23T08:37:41Z",
      "diff_hunk" : "@@ -1723,6 +1730,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    if (stalling_timeout > BLOCK_STALLING_TIMEOUT_DEFAULT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r978397817",
      "id" : 978397817,
      "line" : 1736,
      "node_id" : "PRRC_kwDOABII5846USp5",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 1736,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 41,
      "pull_request_review_id" : 1118101728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978397817/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T08:37:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978397817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-23T08:48:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1255950306",
      "id" : 1255950306,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585K3Efi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1255950306/reactions"
      },
      "updated_at" : "2022-09-23T08:48:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1255950306",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r983315571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983315571"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`getpeerinfo()[0][\"bytesrecv_per_msg\"][\"block\"] ?`",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-09-29T09:42:10Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r983315571",
      "id" : 983315571,
      "in_reply_to_id" : 972000808,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII5846nDRz",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 85,
      "pull_request_review_id" : 1124975223,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983315571/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-29T09:42:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983315571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999653144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999653144"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: missing space after `if`",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-10-19T15:52:35Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999653144",
      "id" : 999653144,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII5847lX8Y",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 42,
      "pull_request_review_id" : 1147870452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999653144/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-19T16:49:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999653144",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999689947"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999689947"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "for consistency with earlier and because `assert_equal()` gives better error message:\r\n\r\n```suggestion\r\n        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\r\n```",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-10-19T16:24:47Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and start the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert(len(self.nodes[0].getpeerinfo()) == 7)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999689947",
      "id" : 999689947,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII5847lg7b",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 108,
      "pull_request_review_id" : 1147870452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999689947/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-19T16:49:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999689947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999690410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999690410"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "here too\r\n```suggestion\r\n        assert_equal(len(self.nodes[0].getpeerinfo()), 6)\r\n```",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-10-19T16:25:13Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and start the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert(len(self.nodes[0].getpeerinfo()) == 7)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 6)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert(len(self.nodes[0].getpeerinfo()) == 6)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999690410",
      "id" : 999690410,
      "line" : 121,
      "node_id" : "PRRC_kwDOABII5847lhCq",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 121,
      "original_position" : 121,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 121,
      "pull_request_review_id" : 1147870452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999690410/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-19T16:49:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999690410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999716370"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999716370"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "To follow @glozow's idea, this should work:\r\n\r\n```diff\r\ndiff --git i/test/functional/p2p_ibd_stalling.py w/test/functional/p2p_ibd_stalling.py\r\nindex 78626c003b..d593187d74 100755\r\n--- i/test/functional/p2p_ibd_stalling.py\r\n+++ w/test/functional/p2p_ibd_stalling.py\r\n@@ -79,13 +79,14 @@ class P2PIBDStallingTest(BitcoinTestFramework):\r\n         with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\r\n             for id in range(8):\r\n                 peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\r\n                 peers[-1].block_store = block_dict\r\n                 peers[-1].send_message(headers_message)\r\n             self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\r\n-        time.sleep(0.5)  # Wait until all blocks have arrived at the node\r\n+            self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\r\n+\r\n \r\n         self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\r\n         headers_message.headers = [CBlockHeader(b) for b in blocks]\r\n         with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\r\n             for p in peers:\r\n                 p.send_message(headers_message)\r\n@@ -149,9 +150,15 @@ class P2PIBDStallingTest(BitcoinTestFramework):\r\n     def total_blocks_sent(self, peers):\r\n         num_blocks = 0\r\n         for p in peers:\r\n             num_blocks += p.blocks_sent\r\n         return num_blocks\r\n \r\n+    def total_bytes_recv_for_blocks(self):\r\n+        total = 0\r\n+        for info in self.nodes[0].getpeerinfo():\r\n+            total += info[\"bytesrecv_per_msg\"][\"block\"]\r\n+        return total\r\n+\r\n \r\n if __name__ == '__main__':\r\n     P2PIBDStallingTest().main()\r\n```\r\n\r\nand even better if we can put some formula behind the magic number.",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-10-19T16:51:20Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999716370",
      "id" : 999716370,
      "in_reply_to_id" : 972000808,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII5847lnYS",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 85,
      "pull_request_review_id" : 1147960272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999716370/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-19T16:51:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999716370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999717042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999717042"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think `stalling_timeout != new_timeout` will always be true?",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-10-19T16:52:03Z",
      "diff_hunk" : "@@ -1723,6 +1730,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    if (stalling_timeout > BLOCK_STALLING_TIMEOUT_DEFAULT) {\n+        const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds>(stalling_timeout * 0.85), BLOCK_STALLING_TIMEOUT_DEFAULT);\n+        if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r999717042",
      "id" : 999717042,
      "line" : 1738,
      "node_id" : "PRRC_kwDOABII5847lniy",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 1738,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 43,
      "pull_request_review_id" : 1147961233,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999717042/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-19T16:52:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999717042",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1000371438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000371438"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "or, more pythonish:\r\n\r\n```python\r\nself.wait_until(lambda: sum(e[\"bytesrecv_per_msg\"][\"block\"] for e in self.nodes[0].getpeerinfo()) == 172761)\r\n```",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-10-20T09:16:34Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1000371438",
      "id" : 1000371438,
      "in_reply_to_id" : 972000808,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII5847oHTu",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 85,
      "pull_request_review_id" : 1148875928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000371438/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-20T09:16:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000371438",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1000606032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000606032"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: \r\n```suggestion\r\n        assert_equal(self.nodes[0].num_test_p2p_connections(), 7)\r\n```",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-10-20T13:11:14Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1000606032",
      "id" : 1000606032,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII5847pAlQ",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 97,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 97,
      "pull_request_review_id" : 1149217595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000606032/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-20T13:15:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000606032",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1000607246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000607246"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: even with this variable `self.nodes[0]` is used in some places below. I think it is better to use just one of them.",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-10-20T13:12:12Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1000607246",
      "id" : 1000607246,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII5847pA4O",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 57,
      "pull_request_review_id" : 1149217595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000607246/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-20T13:15:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1000607246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I am ok to drop the test. It is good to have tests to ensure the code works as intended. But we can't have tests for everything and there is a _subjective_ threshold somewhere. If it is too difficult to implement properly or is more complicated than the actual code it tests, then it may be too expensive. There is maintenance cost for the test too. Developers could trash precious time investigating a sporadically failing test, fixing it or trying to figure out whether their (seemingly unrelated) changes broke the test. I am not saying to drop the test, just that I would be ok with that.",
      "created_at" : "2022-10-20T13:27:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1285539185",
      "id" : 1285539185,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585Mn8Vx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1285539185/reactions"
      },
      "updated_at" : "2022-10-20T13:27:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1285539185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002179339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002179339"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, that works!\r\nWe send 1023 blocks, the formula would be `126 * 168 + 897 * 169 = 172761` (at some point the blocks get larger by 1 byte).\r\nNot super stable because `bytesrecv_per_msg` includes the extra 24 bytes magic etc. (not just the payload) - so I think the magic number would e.g. be different for BIP324 - but it's definitely better than a fixed timeout.",
      "commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "created_at" : "2022-10-21T20:53:11Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002179339",
      "id" : 1002179339,
      "in_reply_to_id" : 972000808,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII5847vAsL",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 85,
      "pull_request_review_id" : 1151543910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002179339/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-21T20:53:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002179339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002217383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217383"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done everywhere",
      "commit_id" : "9339230016c87a4e3b7df87caba74059854f20b6",
      "created_at" : "2022-10-21T22:12:50Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Stall started peer=0']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 7)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002217383",
      "id" : 1002217383,
      "in_reply_to_id" : 1000606032,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847vJ-n",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 97,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : null,
      "pull_request_review_id" : 1151598681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217383/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-21T22:12:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002217735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217735"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Used `node` everywhere.",
      "commit_id" : "9339230016c87a4e3b7df87caba74059854f20b6",
      "created_at" : "2022-10-21T22:13:41Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002217735",
      "id" : 1002217735,
      "in_reply_to_id" : 1000607246,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII5847vKEH",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 57,
      "pull_request_review_id" : 1151599107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217735/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-21T22:13:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002217735",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed the test feedback (will get to the outstanding comment for the main commit a bit later).\r\n\r\n> * First test (should not stall):\r\n>   those `received: block...` messages in the log above (from the failure of the second test) are produced from the first test. The `sleep(0.5)` was apparently not enough, so I _fixed_ it to `sleep(5)` (just for testing, not to actually have it in the final test). This means that in practice it could stall and remain undetected by the first test because it will be happy to not see `Stall started` in the log even though it may be printed shortly after the first test has eagerly declared success. We want to check that there are 1023 `received: block` messages in the log and that afterwards the stalling logic from `SendMessages()` is executed and after that there is no \"Stall started\" in the log. I am not sure how to do that. Checking the bytes received for block messages seems to be better than the sleep, but could still end the wait too early.\r\n\r\nI rewrote the test such that it doesn't use the log anymore, but waits until all blocks are received, syncs (so that a peer could get mark as a staller), waits for 3s, syncs again (so that a peer could get disconnected), and then checks that no peer gets disconnected.\r\n\r\n> * Second test (should stall):\r\n>   it fails because there is no \"Stall started peer=0\" message. I added `sleep(10)` at the end of the `with...` block to wait even more for the stall. Then it fails with this error:\r\n\r\nI removed the `peer=0` part of the check and added a missing `self.all_sync_send_with_ping(peers)` to the `with` block. With that, the tests succeeds for me even with some slow sanitizers enabled - will do more runs over the weekend to check for intermittent failures.\r\n\r\n> I am ok to drop the test. It is good to have tests to ensure the code works as intended. But we can't have tests for everything and there is a subjective threshold somewhere. If it is too difficult to implement properly or is more complicated than the actual code it tests, then it may be too expensive. There is maintenance cost for the test too. Developers could trash precious time investigating a sporadically failing test, fixing it or trying to figure out whether their (seemingly unrelated) changes broke the test. I am not saying to drop the test, just that I would be ok with that.\r\n \r\nIf everyone agrees that would be ok with me. However, the stalling logic was completely untested before, which is not ideal, so the test doesn't just cover the changes from this PR. \r\n@dergoegge do you have an opinion, since you suggested the test? Do you think that the stalling logic could maybe better be covered by a unit test after #25515? (which would have less problems with timeouts).",
      "created_at" : "2022-10-21T22:26:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1287494641",
      "id" : 1287494641,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585MvZvx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1287494641/reactions"
      },
      "updated_at" : "2022-10-21T22:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1287494641",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002223585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002223585"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I ended up using the less pythonish version because we also need a check that the \"block\" field exists in \"bytesrecv_per_msg\", and I find that easier to read. Added a comment for the magic number.",
      "commit_id" : "9339230016c87a4e3b7df87caba74059854f20b6",
      "created_at" : "2022-10-21T22:29:54Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if(not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that stalling does not start the stalling logic yet if there is a 1024 block window.\")\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Stall started']):\n+            for id in range(8):\n+                peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+                peers[-1].block_store = block_dict\n+                peers[-1].send_message(headers_message)\n+            self.wait_until(lambda: self.total_blocks_sent(peers) == NUM_BLOCKS - 2)\n+        time.sleep(0.5)  # Wait until all blocks have arrived at the node",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1002223585",
      "id" : 1002223585,
      "in_reply_to_id" : 972000808,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847vLfh",
      "original_commit_id" : "48e538510b3c4339dde4c70a9ed1f83f031245c4",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : null,
      "pull_request_review_id" : 1151607331,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002223585/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-21T22:29:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002223585",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1003725273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003725273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done, I agree that it should be impossible that `stalling_timeout` is below the default.",
      "commit_id" : "cc8167902267e29a9b84e822814dde43eb8bd659",
      "created_at" : "2022-10-24T20:17:20Z",
      "diff_hunk" : "@@ -1723,6 +1730,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    if (stalling_timeout > BLOCK_STALLING_TIMEOUT_DEFAULT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1003725273",
      "id" : 1003725273,
      "in_reply_to_id" : 978397817,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584706HZ",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 1736,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1153739875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003725273/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-24T20:17:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003725273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1003735470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003735470"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree, it became unnecessary after moving the code into the `if` statement. Removed.",
      "commit_id" : "cc8167902267e29a9b84e822814dde43eb8bd659",
      "created_at" : "2022-10-24T20:26:10Z",
      "diff_hunk" : "@@ -1723,6 +1730,15 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+    auto stalling_timeout = m_block_stalling_timeout.load();\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value\n+    if (stalling_timeout > BLOCK_STALLING_TIMEOUT_DEFAULT) {\n+        const auto new_timeout = std::max(std::chrono::duration_cast<std::chrono::seconds>(stalling_timeout * 0.85), BLOCK_STALLING_TIMEOUT_DEFAULT);\n+        if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1003735470",
      "id" : 1003735470,
      "in_reply_to_id" : 999717042,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584708mu",
      "original_commit_id" : "4b0dbc0f3eb8c57944f9037e017b89c912048206",
      "original_line" : 1738,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1153752881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003735470/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-24T20:26:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003735470",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "[9339230 ](https://github.com/bitcoin/bitcoin/commit/9339230016c87a4e3b7df87caba74059854f20b6)to [aceff9e](https://github.com/bitcoin/bitcoin/commit/aceff9ed71348f84b1454bb16dbfc5e804f2aaa4):\r\nAlso addressed the outstanding comments to the main commit (plus minor reformatting of comments) and fixed another source of spurious test failures - thanks for the reviews!",
      "created_at" : "2022-10-24T20:29:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1289575526",
      "id" : 1289575526,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585M3Vxm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1289575526/reactions"
      },
      "updated_at" : "2022-10-25T02:34:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1289575526",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004061522"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004061522"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`self.is_stalling` is set to `True` and never changed, I guess it can be removed?",
      "commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "created_at" : "2022-10-25T06:38:25Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004061522",
      "id" : 1004061522,
      "line" : 33,
      "node_id" : "PRRC_kwDOABII58472MNS",
      "original_commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "original_line" : 33,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 33,
      "pull_request_review_id" : 1154213835,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004061522/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-25T08:17:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004061522",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004076095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004076095"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`total_blocks_sent()` is now unused, can be removed.",
      "commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "created_at" : "2022-10-25T06:57:13Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 8)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 7)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == 6)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 6)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == 5)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()\n+\n+    def is_block_requested(self, peers, hash):\n+        for p in peers:\n+            if p.is_connected and (hash in p.getdata_requests):\n+                return True\n+        return False\n+\n+    def total_blocks_sent(self, peers):\n+        num_blocks = 0\n+        for p in peers:\n+            num_blocks += p.blocks_sent\n+        return num_blocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004076095",
      "id" : 1004076095,
      "line" : 168,
      "node_id" : "PRRC_kwDOABII58472Pw_",
      "original_commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "original_line" : 168,
      "original_position" : 168,
      "original_start_line" : 164,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 168,
      "pull_request_review_id" : 1154213835,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004076095/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 164,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-25T08:17:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004076095",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004079465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004079465"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This `8` is the same as the `8` in `for id in range(8):` above (or `len(peers)`). Would be better to put it in a constant, similarly to `NUM_BLOCKS`. Also below, `7`, `6` and `5` are used which are that `8` minus `1`, `2` or `3`.",
      "commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "created_at" : "2022-10-25T07:01:28Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 8)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004079465",
      "id" : 1004079465,
      "line" : 92,
      "node_id" : "PRRC_kwDOABII58472Qlp",
      "original_commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "original_line" : 92,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 92,
      "pull_request_review_id" : 1154213835,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004079465/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-25T08:17:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004079465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004152662"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004152662"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The test takes about 1 minute on my laptop. The slowest parts are:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/aceff9ed71348f84b1454bb16dbfc5e804f2aaa4/test/functional/p2p_ibd_stalling.py#L78-L81\r\n\r\nand this\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/aceff9ed71348f84b1454bb16dbfc5e804f2aaa4/test/functional/p2p_ibd_stalling.py#L99\r\n\r\neach one takes about 30 seconds.\r\n\r\nWhy 8 peers? We disconnect 3, so anything >=3 should be ok? I tried with 4 peers and the test passes, but I could be missing something. With 4 peers it takes about 30 seconds.",
      "commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "created_at" : "2022-10-25T08:17:30Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1004152662",
      "id" : 1004152662,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII58472idW",
      "original_commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "original_line" : 78,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 78,
      "pull_request_review_id" : 1154213835,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004152662/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-25T08:17:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004152662",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007262383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262383"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yes, and `blocks_sent` in `P2PStaller` as well. Done.",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2022-10-27T19:08:10Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 8)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), 7)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 7)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == 6)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 6)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == 5)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()\n+\n+    def is_block_requested(self, peers, hash):\n+        for p in peers:\n+            if p.is_connected and (hash in p.getdata_requests):\n+                return True\n+        return False\n+\n+    def total_blocks_sent(self, peers):\n+        num_blocks = 0\n+        for p in peers:\n+            num_blocks += p.blocks_sent\n+        return num_blocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007262383",
      "id" : 1007262383,
      "in_reply_to_id" : 1004076095,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848CZqv",
      "original_commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "original_line" : 168,
      "original_position" : 168,
      "original_start_line" : 164,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : null,
      "pull_request_review_id" : 1158913003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262383/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-27T19:08:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007262520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262520"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2022-10-27T19:08:17Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007262520",
      "id" : 1007262520,
      "in_reply_to_id" : 1004061522,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848CZs4",
      "original_commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "original_line" : 33,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : null,
      "pull_request_review_id" : 1158913226,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262520/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-27T19:08:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007262520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007263242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007263242"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Introduced NUM_PEERS an used it.",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2022-10-27T19:08:54Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), 8)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007263242",
      "id" : 1007263242,
      "in_reply_to_id" : 1004079465,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848CZ4K",
      "original_commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "original_line" : 92,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : null,
      "pull_request_review_id" : 1158913927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007263242/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-27T19:08:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007263242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007274866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007274866"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The original idea was to have a scenario similar to actual IBD with 8 full outbound peers. But it's obviously not necessary, and since it slows down the test (I didn't experience such a long runtime, for me it was like ~15 seconds) I reduced it to 4 peers.",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2022-10-27T19:19:01Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.is_stalling = True\n+        self.stall_block = stall_block\n+        self.blocks_sent = 0\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (not self.is_stalling or inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+                    self.blocks_sent += 1\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(8):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1007274866",
      "id" : 1007274866,
      "in_reply_to_id" : 1004152662,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848Ccty",
      "original_commit_id" : "aceff9ed71348f84b1454bb16dbfc5e804f2aaa4",
      "original_line" : 78,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : null,
      "pull_request_review_id" : 1158927169,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007274866/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-27T19:19:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007274866",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "[aceff9e ](https://github.com/bitcoin/bitcoin/commit/aceff9ed71348f84b1454bb16dbfc5e804f2aaa4)to [39b9364](https://github.com/bitcoin/bitcoin/commit/39b93649c4b98cd82c64b957fd9f6a6fd3c2a359): addressed feedback by @vasild - the CI failure is unrelated (I opened #26404 to fix it).",
      "created_at" : "2022-10-27T22:10:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1294155328",
      "id" : 1294155328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585NIz5A",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1294155328/reactions"
      },
      "updated_at" : "2022-10-27T22:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1294155328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1013738635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013738635"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: why not use `new_timeout` here in logs?\r\n1. It has the same meaning, unless there was some crazy concurrency, in which case the log might not make sense anyway....\r\n2. It is shorted :)\r\n3. It is probably more efficient\r\n4. Reading the code is easier",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2022-11-04T08:28:56Z",
      "diff_hunk" : "@@ -5225,12 +5242,19 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        auto stalling_timeout = m_block_stalling_timeout.load();\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - stalling_timeout) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            const auto new_timeout = std::min(2 * stalling_timeout, BLOCK_STALLING_TIMEOUT_MAX);\n+            if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {\n+                LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1013738635",
      "id" : 1013738635,
      "line" : 5256,
      "node_id" : "PRRC_kwDOABII5848bGyL",
      "original_commit_id" : "0565951f34e6d155dc825964c5d8b1dd00931682",
      "original_line" : 5256,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 67,
      "pull_request_review_id" : 1168121389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013738635/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-04T08:38:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013738635",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1013742213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013742213"
         }
      },
      "author_association" : "MEMBER",
      "body" : "actually, you do what i suggest in the decreasing code :)",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2022-11-04T08:33:20Z",
      "diff_hunk" : "@@ -5225,12 +5242,19 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        auto stalling_timeout = m_block_stalling_timeout.load();\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - stalling_timeout) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            const auto new_timeout = std::min(2 * stalling_timeout, BLOCK_STALLING_TIMEOUT_MAX);\n+            if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {\n+                LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1013742213",
      "id" : 1013742213,
      "in_reply_to_id" : 1013738635,
      "line" : 5256,
      "node_id" : "PRRC_kwDOABII5848bHqF",
      "original_commit_id" : "0565951f34e6d155dc825964c5d8b1dd00931682",
      "original_line" : 5256,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 67,
      "pull_request_review_id" : 1168121389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013742213/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-04T08:38:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013742213",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-11T22:32:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1379569979",
      "id" : 1379569979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585SOpE7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1379569979/reactions"
      },
      "updated_at" : "2023-01-11T22:32:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1379569979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Strong Concept ACK 39b93649c4b98cd82c64b957fd9f6a6fd3c2a359\r\n\r\nWill do some tests ASAP.",
      "created_at" : "2023-01-11T22:51:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#issuecomment-1379584074",
      "id" : 1379584074,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25880",
      "node_id" : "IC_kwDOABII585SOshK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1379584074/reactions"
      },
      "updated_at" : "2023-01-11T22:51:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1379584074",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/152159?v=4",
         "events_url" : "https://api.github.com/users/RandyMcMillan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RandyMcMillan/followers",
         "following_url" : "https://api.github.com/users/RandyMcMillan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RandyMcMillan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RandyMcMillan",
         "id" : 152159,
         "login" : "RandyMcMillan",
         "node_id" : "MDQ6VXNlcjE1MjE1OQ==",
         "organizations_url" : "https://api.github.com/users/RandyMcMillan/orgs",
         "received_events_url" : "https://api.github.com/users/RandyMcMillan/received_events",
         "repos_url" : "https://api.github.com/users/RandyMcMillan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RandyMcMillan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RandyMcMillan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RandyMcMillan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1067540101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067540101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure we should do this every time a block is connected. Whenever a staller got disconnected, and the missing block arrived from another peer, we may suddenly be able to connect dozens of blocks at once. Performing the timeout-reduction step here 16 times suffices to get it back from the maximum 64 to the minimum 2.\r\n\r\nI think it'd be better to drop it just once every time the download window moves, regardless of how much it moved.",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-11T22:56:21Z",
      "diff_hunk" : "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1067540101",
      "id" : 1067540101,
      "line" : 1734,
      "node_id" : "PRRC_kwDOABII584_oV6F",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 1734,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 1244733611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067540101/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-11T22:56:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067540101",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1067706504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067706504"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually, thinking more about this, I don't think that's ideal either. The window will likely move many times between would-be stalls, even when the stalling timeout has adapted to be close to the \"correct\" value.\r\n\r\nWe should aim to be in a position where the stalling timeout is sort of in an equilibrium between triggering occasionally but not all the time. I think the best way to achieve that is to:\r\n* Increase it when it triggers due to being too low (reducing the probability of triggering in the future) [implemented]\r\n* Decrease it when it didn't trigger *due to being high enough*. And I think we have a way of measuring that: when the stalling detection triggers, and the stalling timer starts, but then the timeout is not reached. And by seeing how long it actually took for before the stalling state is resolved we can even do better than just applying a % drop; e.g. we could set the new timeout to (old_timeout + actual_time_used) / 2.\r\n",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-12T05:13:31Z",
      "diff_hunk" : "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1067706504",
      "id" : 1067706504,
      "in_reply_to_id" : 1067540101,
      "line" : 1734,
      "node_id" : "PRRC_kwDOABII584_o-iI",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 1734,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 1244968098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067706504/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-12T05:13:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067706504",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1069837209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069837209"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@sipa Do you think that your proposed change should be implemented in this PR or can it be done in a followup? From my perspective, this PR seems to be strictly an improvement even if the stalling timeout backs off too aggressively.",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-13T18:34:03Z",
      "diff_hunk" : "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1069837209",
      "id" : 1069837209,
      "in_reply_to_id" : 1067540101,
      "line" : 1734,
      "node_id" : "PRRC_kwDOABII584_xGuZ",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 1734,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 1248256552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069837209/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-13T18:34:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069837209",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1069848852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069848852"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I haven't had time to look into this feedback closely yet - but I am planning to do that next week.",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-13T18:39:57Z",
      "diff_hunk" : "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1069848852",
      "id" : 1069848852,
      "in_reply_to_id" : 1067540101,
      "line" : 1734,
      "node_id" : "PRRC_kwDOABII584_xJkU",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 1734,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 1248269960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069848852/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-13T18:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1069848852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1070902579"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1070902579"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this could be a good follow-up, but anyway, here are my thoughts.\r\n\r\n>Decrease it when it didn't trigger due to being high enough.\r\n\r\nI think this is a very good abstract policy.\r\n\r\n>when the stalling detection triggers, and the stalling timer starts, but then the timeout is not reached.\r\n\r\nThis sounds more efficient at doing what it's supposed to do than what's implemented in this PR currently.\r\n\r\n>; e.g. we could set the new timeout to (old_timeout + actual_time_used) / 2.\r\n\r\nSounds like a good concrete policy, but not going lower than 2 seconds probably. One could do some math modeling, but I don't think it's that helpful:\r\n1) with random data, there is no ground truth âÂ one would have to rely on the human sanity check of the inputs, which we already do verbally here;\r\n2) could be tested against a couple laggy nodes too, comparing between different policies, but eh.",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-16T07:18:37Z",
      "diff_hunk" : "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1070902579",
      "id" : 1070902579,
      "in_reply_to_id" : 1067540101,
      "line" : 1734,
      "node_id" : "PRRC_kwDOABII584_1K0z",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 1734,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 1249658300,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1070902579/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-16T07:19:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1070902579",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1085845808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085845808"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> From my perspective, this PR seems to be strictly an improvement even if the stalling timeout backs off too aggressively.\r\n\r\nI'd say that with its current approach, the PR improves behavior in isolated stalling situations where there are currently repeated disconnections of many/all of our peers without making any progress in getting blocks - but a previous stalling situation will not affect the behavior in future stalling situations because all memory of the previous stalling incident will be lost after a few blocks:\r\n\r\n@sipa's suggestion would introduce a long-lasting memory of previous stalling situations\r\n- I think that one downside of this approach is that the moving window algorithm should only lead to a stalling situation if one peer is significantly slower than the rest of the peers. We'd want to replace this first peer usually - giving it more time based on previous stalling situations is probably not beneficial, because if it was comparably fast to other peers, this would not have led to this peer being marked as a staller in the first place.\r\n- The upside is in situations where the actual time to download a block for us is significantly larger than 2 seconds - we'd churn through multiple peers / timeout doublings again in every stalling situation right now until we reach the \"correct\" timeout, but wouldn't anymore with a longer memory.\r\n\r\n> * Decrease it when it didn't trigger _due to being high enough_. And I think we have a way of measuring that: when the stalling detection triggers, and the stalling timer starts, but then the timeout is not reached. And by seeing how long it actually took for before the stalling state is resolved we can even do better than just applying a % drop; e.g. we could set the new timeout to (old_timeout + actual_time_used) / 2.\r\n\r\nI think this would mean moving to the decrease of the stalling timeout to `ProcessMessages` (`NetMsgType::BLOCK`) where `m_stalling_since` is currently reset back to 0. At this point we haven't validated the block yet or connected it to the chain, wo we'd likely would need to at least make sure that we only decrease it after receiving the actual block that allows us to extend our chain (the peer might also have been sending us another block).",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-24T19:49:56Z",
      "diff_hunk" : "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1085845808",
      "id" : 1085845808,
      "in_reply_to_id" : 1067540101,
      "line" : 1734,
      "node_id" : "PRRC_kwDOABII585AuLEw",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 1734,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 1268186987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085845808/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-24T19:49:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085845808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1088187988"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088187988"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@mzumsande I see. So the point isn't so much that you're trying to build something that tries to measure and converge towards an optimal long-term stalling timeout for your network conditions, but rather want something that deliberately gives a temporary \"cool down\" period after a stalling kick so it doesn't result in a flurry of disconnects.\r\n\r\nSo I think something like my suggestion still makes sense, but it's perhaps an orthogonal thing, and not for this PR.",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-26T18:12:50Z",
      "diff_hunk" : "@@ -1723,6 +1730,16 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             m_txrequest.ForgetTxHash(ptx->GetWitnessHash());\n         }\n     }\n+\n+    // In case the dynamic timeout was doubled once or more, reduce it slowly back to its default value",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1088187988",
      "id" : 1088187988,
      "in_reply_to_id" : 1067540101,
      "line" : 1734,
      "node_id" : "PRRC_kwDOABII585A3G5U",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 1734,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 39,
      "pull_request_review_id" : 1271553295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088187988/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-26T18:12:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1088187988",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089217720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089217720"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This fails?\r\n\r\nhttps://cirrus-ci.com/task/4620776167440384?logs=ci#L2630\r\n\r\n```\r\n test  2023-01-27T16:28:47.291000Z TestFramework.p2p (DEBUG): Received message from 0:0: msg_pong(nonce=0000000f) \r\n node0 2023-01-27T16:28:47.340846Z (mocktime: 2023-01-27T16:29:01Z) [http] [httpserver.cpp:239] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:51554 \r\n node0 2023-01-27T16:28:47.347460Z (mocktime: 2023-01-27T16:29:01Z) [httpworker.0] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getpeerinfo user=__cookie__ \r\n node0 2023-01-27T16:28:47.347940Z (mocktime: 2023-01-27T16:29:01Z) [http] [httpserver.cpp:239] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:51554 \r\n node0 2023-01-27T16:28:47.348962Z (mocktime: 2023-01-27T16:29:01Z) [httpworker.1] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=setmocktime user=__cookie__ \r\n node0 2023-01-27T16:28:47.349250Z (mocktime: 2023-01-27T16:29:03Z) [http] [httpserver.cpp:239] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:51554 \r\n node0 2023-01-27T16:28:47.349271Z (mocktime: 2023-01-27T16:29:03Z) [httpworker.2] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getpeerinfo user=__cookie__ \r\n node0 2023-01-27T16:28:47.393691Z (mocktime: 2023-01-27T16:29:03Z) [msghand] [net_processing.cpp:5738] [SendMessages] Peer=1 is stalling block download, disconnecting \r\n node0 2023-01-27T16:28:47.398607Z (mocktime: 2023-01-27T16:29:03Z) [msghand] [net_processing.cpp:5744] [SendMessages] [net] Increased stalling timeout temporarily to 16 seconds \r\n node0 2023-01-27T16:28:47.406186Z (mocktime: 2023-01-27T16:29:03Z) [net] [net.cpp:573] [CloseSocketDisconnect] [net] disconnecting peer=1 \r\n test  2023-01-27T16:28:47.414000Z TestFramework.p2p (DEBUG): Send message to 0:0: msg_ping(nonce=00000010) \r\n test  2023-01-27T16:28:47.414000Z TestFramework.p2p (DEBUG): Closed connection to: 0:0 \r\n node0 2023-01-27T16:28:47.414007Z (mocktime: 2023-01-27T16:29:03Z) [http] [httpserver.cpp:239] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:51554 \r\n node0 2023-01-27T16:28:47.414037Z (mocktime: 2023-01-27T16:29:03Z) [httpworker.3] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getpeerinfo user=__cookie__ \r\n node0 2023-01-27T16:28:47.414073Z (mocktime: 2023-01-27T16:29:03Z) [net] [net_processing.cpp:1541] [FinalizeNode] [net] Cleared nodestate for peer=1 \r\n test  2023-01-27T16:28:47.474000Z TestFramework (ERROR): Assertion failed \r\n                                   Traceback (most recent call last):\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/test_framework.py\", line 134, in main\r\n                                       self.run_test()\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/p2p_ibd_stalling.py\", line 133, in run_test\r\n                                       self.all_sync_send_with_ping(peers)\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/p2p_ibd_stalling.py\", line 154, in all_sync_send_with_ping\r\n                                       p.sync_send_with_ping()\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/p2p.py\", line 560, in sync_send_with_ping\r\n                                       self.sync_with_ping()\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/p2p.py\", line 570, in sync_with_ping\r\n                                       self.wait_until(test_function, timeout=timeout)\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/p2p.py\", line 463, in wait_until\r\n                                       wait_until_helper(test_function, timeout=timeout, lock=p2p_lock, timeout_factor=self.timeout_factor)\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/util.py\", line 267, in wait_until_helper\r\n                                       if predicate():\r\n                                     File \"/private/var/folders/v7/fs2b0v3s0lz1n57gj9y4xb5m0000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-arm64-apple-darwin/test/functional/test_framework/p2p.py\", line 460, in test_function\r\n                                       assert self.is_connected\r\n                                   AssertionError\r\n test  2023-01-27T16:28:47.489000Z TestFramework (DEBUG): Closing down network thread ",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-27T17:13:32Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.stall_block = stall_block\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        NUM_PEERS = 4\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(NUM_PEERS):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 2)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 2)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 3)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089217720",
      "id" : 1089217720,
      "line" : 154,
      "node_id" : "PRRC_kwDOABII585A7CS4",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 154,
      "original_position" : 154,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 154,
      "pull_request_review_id" : 1273098461,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089217720/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-27T17:13:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089217720",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089306637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089306637"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "looks  like the p2p instance has been disconnected by bitcoind, but python hasn't received the callback yet, so it attempts to send a ping in between these events. I think counting the nodes with `is_connected` instead of using `num_test_p2p_connections()` will fix this. I'll open a PR.\r\n",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-27T18:50:36Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.stall_block = stall_block\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        NUM_PEERS = 4\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(NUM_PEERS):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 2)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 2)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 3)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089306637",
      "id" : 1089306637,
      "in_reply_to_id" : 1089217720,
      "line" : 154,
      "node_id" : "PRRC_kwDOABII585A7YAN",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 154,
      "original_position" : 154,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 154,
      "pull_request_review_id" : 1273272687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089306637/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-27T19:39:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089306637",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089422186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089422186"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "fixed in #26982",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-27T20:55:21Z",
      "diff_hunk" : "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022- The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test stalling logic during IBD\n+\"\"\"\n+\n+import time\n+\n+from test_framework.blocktools import (\n+        create_block,\n+        create_coinbase\n+)\n+from test_framework.messages import (\n+        MSG_BLOCK,\n+        MSG_TYPE_MASK,\n+)\n+from test_framework.p2p import (\n+        CBlockHeader,\n+        msg_block,\n+        msg_headers,\n+        P2PDataStore,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+)\n+\n+\n+class P2PStaller(P2PDataStore):\n+    def __init__(self, stall_block):\n+        self.stall_block = stall_block\n+        super().__init__()\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_BLOCK:\n+                if (inv.hash != self.stall_block):\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        pass\n+\n+\n+class P2PIBDStallingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        NUM_BLOCKS = 1025\n+        NUM_PEERS = 4\n+        node = self.nodes[0]\n+        tip = int(node.getbestblockhash(), 16)\n+        blocks = []\n+        height = 1\n+        block_time = node.getblock(node.getbestblockhash())['time'] + 1\n+        self.log.info(\"Prepare blocks without sending them to the node\")\n+        block_dict = {}\n+        for _ in range(NUM_BLOCKS):\n+            blocks.append(create_block(tip, create_coinbase(height), block_time))\n+            blocks[-1].solve()\n+            tip = blocks[-1].sha256\n+            block_time += 1\n+            height += 1\n+            block_dict[blocks[-1].sha256] = blocks[-1]\n+        stall_block = blocks[0].sha256\n+\n+        headers_message = msg_headers()\n+        headers_message.headers = [CBlockHeader(b) for b in blocks[:NUM_BLOCKS-1]]\n+        peers = []\n+\n+        self.log.info(\"Check that a staller does not get disconnected if the 1024 block lookahead buffer is filled\")\n+        for id in range(NUM_PEERS):\n+            peers.append(node.add_outbound_p2p_connection(P2PStaller(stall_block), p2p_idx=id, connection_type=\"outbound-full-relay\"))\n+            peers[-1].block_store = block_dict\n+            peers[-1].send_message(headers_message)\n+\n+        # Need to wait until 1023 blocks are received - the magic total bytes number is a workaround in lack of an rpc\n+        # returning the number of downloaded (but not connected) blocks.\n+        self.wait_until(lambda: self.total_bytes_recv_for_blocks() == 172761)\n+\n+        self.all_sync_send_with_ping(peers)\n+        # If there was a peer marked for stalling, it would get disconnected\n+        self.mocktime = int(time.time()) + 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS)\n+\n+        self.log.info(\"Check that increasing the window beyond 1024 blocks triggers stalling logic\")\n+        headers_message.headers = [CBlockHeader(b) for b in blocks]\n+        with node.assert_debug_log(expected_msgs=['Stall started']):\n+            for p in peers:\n+                p.send_message(headers_message)\n+            self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling peer is disconnected after 2 seconds\")\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        peers[0].wait_for_disconnect()\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        # Make sure that SendMessages() is invoked, which assigns the missing block\n+        # to another peer and starts the stalling logic for them\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 4 seconds for the next staller\")\n+        # No disconnect after just 3 seconds\n+        self.mocktime += 3\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 1)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 2)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Check that the stalling timeout gets doubled to 8 seconds for the next staller\")\n+        # No disconnect after just 7 seconds\n+        self.mocktime += 7\n+        node.setmocktime(self.mocktime)\n+        self.all_sync_send_with_ping(peers)\n+        assert_equal(node.num_test_p2p_connections(), NUM_PEERS - 2)\n+\n+        self.mocktime += 2\n+        node.setmocktime(self.mocktime)\n+        self.wait_until(lambda: node.num_test_p2p_connections() == NUM_PEERS - 3)\n+        self.wait_until(lambda: self.is_block_requested(peers, stall_block))\n+        self.all_sync_send_with_ping(peers)\n+\n+        self.log.info(\"Provide the withheld block and check that stalling timeout gets reduced back to 2 seconds\")\n+        with node.assert_debug_log(expected_msgs=['Decreased stalling timeout to 2 seconds']):\n+            for p in peers:\n+                if p.is_connected and (stall_block in p.getdata_requests):\n+                    p.send_message(msg_block(block_dict[stall_block]))\n+\n+        self.log.info(\"Check that all outstanding blocks get connected\")\n+        self.wait_until(lambda: node.getblockcount() == NUM_BLOCKS)\n+\n+    def total_bytes_recv_for_blocks(self):\n+        total = 0\n+        for info in self.nodes[0].getpeerinfo():\n+            if (\"block\" in info[\"bytesrecv_per_msg\"].keys()):\n+                total += info[\"bytesrecv_per_msg\"][\"block\"]\n+        return total\n+\n+    def all_sync_send_with_ping(self, peers):\n+        for p in peers:\n+            if p.is_connected:\n+                p.sync_send_with_ping()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089422186",
      "id" : 1089422186,
      "in_reply_to_id" : 1089217720,
      "line" : 154,
      "node_id" : "PRRC_kwDOABII585A70Nq",
      "original_commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "original_line" : 154,
      "original_position" : 154,
      "original_start_line" : null,
      "path" : "test/functional/p2p_ibd_stalling.py",
      "position" : 154,
      "pull_request_review_id" : 1273462436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089422186/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-27T20:55:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089422186",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089423032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089423032"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I somehow missed this, sorry, but added it to #26982.",
      "commit_id" : "39b93649c4b98cd82c64b957fd9f6a6fd3c2a359",
      "created_at" : "2023-01-27T20:56:15Z",
      "diff_hunk" : "@@ -5225,12 +5242,19 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n+        auto stalling_timeout = m_block_stalling_timeout.load();\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - stalling_timeout) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n+            // Increase timeout for the next peer so that we don't disconnect multiple peers if our own\n+            // bandwidth is insufficient.\n+            const auto new_timeout = std::min(2 * stalling_timeout, BLOCK_STALLING_TIMEOUT_MAX);\n+            if (stalling_timeout != new_timeout && m_block_stalling_timeout.compare_exchange_strong(stalling_timeout, new_timeout)) {\n+                LogPrint(BCLog::NET, \"Increased stalling timeout temporarily to %d seconds\\n\", m_block_stalling_timeout.load().count());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25880#discussion_r1089423032",
      "id" : 1089423032,
      "in_reply_to_id" : 1013738635,
      "line" : 5256,
      "node_id" : "PRRC_kwDOABII585A70a4",
      "original_commit_id" : "0565951f34e6d155dc825964c5d8b1dd00931682",
      "original_line" : 5256,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 67,
      "pull_request_review_id" : 1273464206,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25880",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089423032/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-27T20:56:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089423032",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   }
]
