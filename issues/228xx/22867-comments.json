[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, thanks for adding tests",
      "created_at" : "2021-09-09T12:22:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-916043186",
      "id" : 916043186,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5842mbWy",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-09T12:22:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916043186",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cc @ariard @darosior ",
      "created_at" : "2021-09-10T06:21:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-916661393",
      "id" : 916661393,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5842oySR",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-10T06:21:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/916661393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25353](https://github.com/bitcoin/bitcoin/pull/25353) (Add a `-mempoolfullrbf` node setting by ariard)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-09-11T03:40:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-917331926",
      "id" : 917331926,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5842rV_W",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917331926/reactions"
      },
      "updated_at" : "2022-07-08T02:41:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/917331926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-09-21T10:31:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-923849717",
      "id" : 923849717,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5843ENP1",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-21T10:31:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923849717",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased",
      "created_at" : "2021-09-26T20:45:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-927367410",
      "id" : 927367410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5843RoDy",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-26T20:45:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927367410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK. Tested on macOS Big Sur.",
      "created_at" : "2021-10-02T22:21:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-932828013",
      "id" : 932828013,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5843mdNt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932828013/reactions"
      },
      "updated_at" : "2021-10-02T22:21:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932828013",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722382769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722382769"
         }
      },
      "author_association" : "NONE",
      "body" : "This assumes the wallet has at least two utxos, and therefore requires another test creating the utxos to run beforehand. ",
      "commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "created_at" : "2021-10-05T15:53:24Z",
      "diff_hunk" : "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722382769",
      "id" : 722382769,
      "line" : 660,
      "node_id" : "PRRC_kwDOABII584rDq-x",
      "original_commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "original_line" : 660,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 76,
      "pull_request_review_id" : 771639286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722382769/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-05T16:29:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722382769",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722390329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722390329"
         }
      },
      "author_association" : "NONE",
      "body" : "Minor suggestion, otherwise it is possibly unclear if 0 is opt-in and 1 is opt-out, or vice versa.\r\n```suggestion\r\n        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx[\"txid\"])['bip125-replaceable'])\r\n```",
      "commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "created_at" : "2021-10-05T16:01:46Z",
      "diff_hunk" : "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_multiple_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_dynamic_inherited_signaling(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+\n+        # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n+        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n+        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # replaceability, along with _all_ of its descendants.\n+        entry = self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])\n+        assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n+        assert_equal(True, self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])['bip125-replaceable'])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722390329",
      "id" : 722390329,
      "line" : 764,
      "node_id" : "PRRC_kwDOABII584rDs05",
      "original_commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "original_line" : 764,
      "original_position" : 180,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 180,
      "pull_request_review_id" : 771639286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722390329/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-05T16:29:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722390329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722396875"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722396875"
         }
      },
      "author_association" : "NONE",
      "body" : "As `input_utxos` is a pair instead of arbitrary length, does a function name such as `create_double_input_self_transfer` or `create_pair_input_self_transfer` indicate the intention better?",
      "commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "created_at" : "2021-10-05T16:09:32Z",
      "diff_hunk" : "@@ -127,6 +133,20 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), 1)\n \n+    def create_multiple_input_self_transfer(self, input_utxos, fee_rate, sequence=BIP125_SEQUENCE_NUMBER):\n+        \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n+        [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722396875",
      "id" : 722396875,
      "line" : 138,
      "node_id" : "PRRC_kwDOABII584rDubL",
      "original_commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "original_line" : 138,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 28,
      "pull_request_review_id" : 771639286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722396875/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-05T16:29:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722396875",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722681771"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722681771"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this is a good suggestion. I'll make this change as suggested",
      "commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "created_at" : "2021-10-05T20:48:57Z",
      "diff_hunk" : "@@ -127,6 +133,20 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), 1)\n \n+    def create_multiple_input_self_transfer(self, input_utxos, fee_rate, sequence=BIP125_SEQUENCE_NUMBER):\n+        \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n+        [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722681771",
      "id" : 722681771,
      "in_reply_to_id" : 722396875,
      "line" : 138,
      "node_id" : "PRRC_kwDOABII584rEz-r",
      "original_commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "original_line" : 138,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 28,
      "pull_request_review_id" : 771970133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722681771/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-05T20:48:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722681771",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722682751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722682751"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good suggestion, I'll also followup w/ this",
      "commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "created_at" : "2021-10-05T20:49:41Z",
      "diff_hunk" : "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_multiple_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_dynamic_inherited_signaling(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+\n+        # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n+        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n+        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # replaceability, along with _all_ of its descendants.\n+        entry = self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])\n+        assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n+        assert_equal(True, self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])['bip125-replaceable'])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r722682751",
      "id" : 722682751,
      "in_reply_to_id" : 722390329,
      "line" : 764,
      "node_id" : "PRRC_kwDOABII584rE0N_",
      "original_commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "original_line" : 764,
      "original_position" : 180,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 180,
      "pull_request_review_id" : 771970737,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722682751/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-05T20:49:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/722682751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738777187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 6804fc5",
      "commit_id" : "e6c88a358ade07dc491e2def84c6e25766a814f9",
      "created_at" : "2021-10-28T21:09:05Z",
      "diff_hunk" : "@@ -127,6 +133,20 @@ def make_utxo(self, node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRI\n \n         return COutPoint(int(txid, 16), 1)\n \n+    def create_multiple_input_self_transfer(self, input_utxos, fee_rate, sequence=BIP125_SEQUENCE_NUMBER):\n+        \"\"\"Given two input utxos, create one transaction that spends both of them\"\"\"\n+        [tx, staging_tx] = list(map(lambda utxo: self.wallet.create_self_transfer(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738777187",
      "id" : 738777187,
      "in_reply_to_id" : 722396875,
      "line" : 122,
      "node_id" : "PRRC_kwDOABII584sCNhj",
      "original_commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "original_line" : 122,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 36,
      "pull_request_review_id" : 792430303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777187/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T21:09:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738777709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777709"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in e6c88a3",
      "commit_id" : "e6c88a358ade07dc491e2def84c6e25766a814f9",
      "created_at" : "2021-10-28T21:10:00Z",
      "diff_hunk" : "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_multiple_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_dynamic_inherited_signaling(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_multiple_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+\n+        # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n+        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n+        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # replaceability, along with _all_ of its descendants.\n+        entry = self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])\n+        assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n+        assert_equal(True, self.nodes[0].getmempoolentry(parent_txs[0][\"txid\"])['bip125-replaceable'])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738777709",
      "id" : 738777709,
      "in_reply_to_id" : 722390329,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sCNpt",
      "original_commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "original_line" : 764,
      "original_position" : 180,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : null,
      "pull_request_review_id" : 792430992,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777709/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T21:10:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738777709",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738778281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738778281"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems to be a somewhat common pattern, I see other tests that rely on there being some utxos in the wallet. So I'm going to leave it for now. I do realize that these sub-tests are not totally stateless bc of this. If anyone thinks it is a big deal and should be fixed lmk and I'll do it.",
      "commit_id" : "e6c88a358ade07dc491e2def84c6e25766a814f9",
      "created_at" : "2021-10-28T21:10:59Z",
      "diff_hunk" : "@@ -638,5 +656,129 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r738778281",
      "id" : 738778281,
      "in_reply_to_id" : 722382769,
      "line" : 646,
      "node_id" : "PRRC_kwDOABII584sCNyp",
      "original_commit_id" : "85a69f40dd89656077fc5d65df3750b541f7516a",
      "original_line" : 646,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 84,
      "pull_request_review_id" : 792431800,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738778281/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T21:10:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738778281",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed @pg156's comments/improvements and rebased.",
      "created_at" : "2021-10-28T21:11:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-954221106",
      "id" : 954221106,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII58444EIy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/954221106/reactions"
      },
      "updated_at" : "2021-10-28T21:11:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/954221106",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased",
      "created_at" : "2021-11-21T15:27:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-974837509",
      "id" : 974837509,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5846GtcF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/974837509/reactions"
      },
      "updated_at" : "2021-11-21T15:27:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/974837509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I better organized the commits and improved the commit messages. Very minor / no behavior change",
      "created_at" : "2021-11-22T16:03:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-975675231",
      "id" : 975675231,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5846J59f",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975675231/reactions"
      },
      "updated_at" : "2021-11-22T16:03:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/975675231",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased after #23437 and #22677 were merged",
      "created_at" : "2021-12-01T18:10:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-983925970",
      "id" : 983925970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5846pYTS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/983925970/reactions"
      },
      "updated_at" : "2021-12-01T18:10:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/983925970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r761849220"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761849220"
         }
      },
      "author_association" : "MEMBER",
      "body" : "commit 5e72716a457e994c263dc1c226a4a1861cab6bbf \"test: replacement tx rejected bc conflicts may be double counted.\" can be dropped\r\n\r\nI assume the purpose of this test is to illustrate the limitation/overestimation in `GetEntriesForConflicts()`. It is now documented [here](https://github.com/bitcoin/bitcoin/blob/master/doc/policy/mempool-replacements.md#current-replace-by-fee-policy). If we want to test this, as it's a low-level implementation detail, a unit test would be more appropriate than a functional test.",
      "commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "created_at" : "2021-12-03T11:15:48Z",
      "diff_hunk" : "@@ -621,5 +637,64 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r761849220",
      "id" : 761849220,
      "line" : 645,
      "node_id" : "PRRC_kwDOABII584taOWE",
      "original_commit_id" : "5e72716a457e994c263dc1c226a4a1861cab6bbf",
      "original_line" : 640,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 83,
      "pull_request_review_id" : 822532341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761849220/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-04T16:05:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/761849220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r765292617"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765292617"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: My understanding is that it's better not to have actual values in comments\r\n```suggestion\r\n        # Now we have a chain of: `optin_parent_tx`, `joined_tx`, and `MAX_REPLACEMENT_LIMIT - 1` txs. The last tx in the loop exceeded `MAX_REPLACEMENT_LIMIT`\r\n```",
      "commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "created_at" : "2021-12-08T22:25:45Z",
      "diff_hunk" : "@@ -623,5 +642,130 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_double_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_reorged_inherited_signaling_and_descendant_limit(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # If we confirm `optin_parent_tx` descendants will no longer inherit signaling\n+        hash = self.generateblock(self.nodes[0], output=self.wallet.get_address(), transactions=[optin_parent_tx['txid']])['hash']\n+        assert_equal(False, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get `optin_parent_tx` back in our mempool, once again descendants inherit signaling\n+        self.nodes[0].invalidateblock(hash)\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+        # Now we have a chain of: `optin_parent_tx`, `joined_tx`, and 99 txs. The last tx in the loop exceeded `MAX_REPLACEMENT_LIMIT`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r765292617",
      "id" : 765292617,
      "line" : 751,
      "node_id" : "PRRC_kwDOABII584tnXBJ",
      "original_commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "original_line" : 751,
      "original_position" : 189,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 189,
      "pull_request_review_id" : 827020805,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765292617/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T22:39:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765292617",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41220998?v=4",
         "events_url" : "https://api.github.com/users/DariusParvin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DariusParvin/followers",
         "following_url" : "https://api.github.com/users/DariusParvin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DariusParvin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DariusParvin",
         "id" : 41220998,
         "login" : "DariusParvin",
         "node_id" : "MDQ6VXNlcjQxMjIwOTk4",
         "organizations_url" : "https://api.github.com/users/DariusParvin/orgs",
         "received_events_url" : "https://api.github.com/users/DariusParvin/received_events",
         "repos_url" : "https://api.github.com/users/DariusParvin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DariusParvin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DariusParvin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r765296491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765296491"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: To check the specific error message\r\n```suggestion\r\n        replacement_parent_tx = self.wallet.create_self_transfer(\r\n            from_node=self.nodes[0],\r\n            utxo_to_spend=confirmed_utxos[0],\r\n            fee_rate=Decimal('0.01'),\r\n            mempool_valid=False\r\n        )['hex']\r\n        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_parent_tx, 0)\r\n```",
      "commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "created_at" : "2021-12-08T22:33:13Z",
      "diff_hunk" : "@@ -623,5 +642,130 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_double_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)\n+\n+        # However, we can still craft a transaction that replaces the entire descendant chain by only replacing one of the `parent_txs`\n+        replacement_tx = self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=confirmed_utxos[0],  # replace the opt-in parent transaction\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.01'),\n+        )\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_tx['txid'] in mempool\n+        assert parent_txs[0]['txid'] not in mempool\n+        assert parent_txs[1]['txid'] in mempool\n+        assert tx['txid'] not in mempool\n+\n+        # And funny enough, _now_ we can successfully broadcast that same `replacement_tx_hex` which just failed with the\n+        # \"too many potential replacements\" error. It was just a little tricky to get around `MemPoolAccept::PreChecks`\n+        # double-counting evictions.\n+        replacement_attempt_tx_txid = self.nodes[0].sendrawtransaction(replacement_attempt_tx_hex, 0)\n+        mempool = self.nodes[0].getrawmempool()\n+        assert replacement_attempt_tx_txid in mempool\n+        assert replacement_tx['txid'] not in mempool\n+        for parent_tx in parent_txs:\n+            assert parent_tx not in mempool\n+\n+        # clean up all evicted utxos / update wallet utxo state\n+        self.wallet.get_utxo(txid=tx['txid'])\n+        self.wallet.get_utxo(txid=replacement_tx['txid'])\n+\n+    def test_reorged_inherited_signaling_and_descendant_limit(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # One opt-in parent transaction, one opt-out\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER if confirmed_utxos.index(utxo) == 0 else 0xffffffff,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+        optin_parent_tx, optout_parent_tx = parent_txs\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'), sequence=0xffffffff)\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Only a single input needs to signal replaceability (whether explicitly or through inheritance) for the resulting transaction to signal\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # If we confirm `optin_parent_tx` descendants will no longer inherit signaling\n+        hash = self.generateblock(self.nodes[0], output=self.wallet.get_address(), transactions=[optin_parent_tx['txid']])['hash']\n+        assert_equal(False, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Get `optin_parent_tx` back in our mempool, once again descendants inherit signaling\n+        self.nodes[0].invalidateblock(hash)\n+        assert_equal(True, self.nodes[0].getmempoolentry(joined_tx_txid)['bip125-replaceable'])\n+\n+        # Create a chain the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT - 1):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                sequence=0xffffffff,\n+                fee_rate=Decimal('0.0001'),\n+            )\n+            assert_equal(True, self.nodes[0].getmempoolentry(tx['txid'])['bip125-replaceable'])  # inherited\n+        # Now we have a chain of: `optin_parent_tx`, `joined_tx`, and 99 txs. The last tx in the loop exceeded `MAX_REPLACEMENT_LIMIT`\n+\n+        # Attempting to replace the opt-in parent transaction will now result in more than `MAX_REPLACEMENT_LIMIT`\n+        # conflicting txns being evicted from the mempool. However, it (and all of its descendants) are still signaling replaceability.\n+        # We would've expected that once `MAX_REPLACEMENT_LIMIT` is exceeded, the opt-in parent txn stops signaling\n+        # replaceability, along with _all_ of its descendants.\n+        entry = self.nodes[0].getmempoolentry(optin_parent_tx[\"txid\"])\n+        assert_greater_than(entry['descendantcount'], MAX_REPLACEMENT_LIMIT)\n+        assert_equal(True, entry['bip125-replaceable'])\n+        assert_equal(True, self.nodes[0].getmempoolentry(tx[\"txid\"])['bip125-replaceable'])\n+\n+        # Case in point, we can't actually replace `optin_parent_tx` once it has `MAX_REPLACEMENT_LIMIT` descendants\n+        self.wallet.create_self_transfer(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r765296491",
      "id" : 765296491,
      "line" : 763,
      "node_id" : "PRRC_kwDOABII584tnX9r",
      "original_commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "original_line" : 763,
      "original_position" : 201,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 201,
      "pull_request_review_id" : 827020805,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765296491/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T22:39:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765296491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/41220998?v=4",
         "events_url" : "https://api.github.com/users/DariusParvin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DariusParvin/followers",
         "following_url" : "https://api.github.com/users/DariusParvin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DariusParvin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DariusParvin",
         "id" : 41220998,
         "login" : "DariusParvin",
         "node_id" : "MDQ6VXNlcjQxMjIwOTk4",
         "organizations_url" : "https://api.github.com/users/DariusParvin/orgs",
         "received_events_url" : "https://api.github.com/users/DariusParvin/received_events",
         "repos_url" : "https://api.github.com/users/DariusParvin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DariusParvin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DariusParvin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2021-12-09T15:36:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-989965459",
      "id" : 989965459,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII5847AayT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/989965459/reactions"
      },
      "updated_at" : "2021-12-09T15:36:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/989965459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r778182275"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778182275"
         }
      },
      "author_association" : "MEMBER",
      "body" : "commit 64c20402b258709af8c18eac1697939eca07082f \"test: incorrect rbf status when max replacement limit exceeded\"\r\n\r\nI think this one is also a misunderstanding and can be dropped/replaced with a clarification in the RPC helpstring. The `bip125-replaceable` field is only concerned with signaling is not an authority on all RBF rules, so Rule 5 shouldn't affect its result. If that isn't clear to users, we should more clearly document what information it provides.",
      "commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "created_at" : "2022-01-04T15:43:17Z",
      "diff_hunk" : "@@ -705,7 +705,7 @@ def test_prechecks_overestimates_replacements(self):\n         self.wallet.get_utxo(txid=tx['txid'])\n         self.wallet.get_utxo(txid=replacement_tx['txid'])\n \n-    def test_reorged_inherited_signaling(self):\n+    def test_reorged_inherited_signaling_and_descendant_limit(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r778182275",
      "id" : 778182275,
      "line" : 708,
      "node_id" : "PRRC_kwDOABII584uYh6D",
      "original_commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "original_line" : 708,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 16,
      "pull_request_review_id" : 822532341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778182275/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-04T16:05:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778182275",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r825180984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825180984"
         }
      },
      "author_association" : "NONE",
      "body" : "these asserts are redundant because of line 583 and 608\r\nnot sure if intended for readability",
      "commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "created_at" : "2022-03-11T23:04:31Z",
      "diff_hunk" : "@@ -594,14 +616,11 @@ def test_no_inherited_signaling(self):\n             mempool_valid=False,\n         )\n \n-        # Broadcast replacement child tx\n-        # BIP 125 :\n-        # 1. The original transactions signal replaceability explicitly or through inheritance as described in the above\n-        # Summary section.\n-        # The original transaction (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n-        # The replacement transaction (`replacement_child_tx`) should be able to replace the original transaction.\n-        # See CVE-2021-31876 for further explanations.\n-        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+        # The transaction we are attempting to replace (`optout_child_tx`) doesn't signal RBF but its parent (`optin_parent_tx`) does.\n+        # The replacement transaction (`replacement_child_tx`) should be able to replace `optout_child_tx` due to replaceability through inheritance.\n+        # Here we show that this isn't the case. See CVE-2021-31876 for further explanations.\n+        assert_equal(True, self.nodes[0].getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])  # explicitly signals replaceability\n+        assert_equal(True, self.nodes[0].getmempoolentry(optout_child_tx['txid'])['bip125-replaceable'])  # reports `True` due to inherited signaling from `optin_parent_tx`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r825180984",
      "id" : 825180984,
      "line" : 623,
      "node_id" : "PRRC_kwDOABII584xL0M4",
      "original_commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "original_line" : 623,
      "original_position" : 75,
      "original_start_line" : 622,
      "path" : "test/functional/feature_rbf.py",
      "position" : 75,
      "pull_request_review_id" : 907874012,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825180984/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 622,
      "start_side" : "RIGHT",
      "updated_at" : "2022-03-11T23:04:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825180984",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r896065757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896065757"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n      joined_tx_txid = self.wallet.sendrawtransaction(from_node=self.nodes[0], tx_hex=joined_tx_hex)\r\n```",
      "commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "created_at" : "2022-06-13T19:32:44Z",
      "diff_hunk" : "@@ -623,5 +642,130 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r896065757",
      "id" : 896065757,
      "line" : 663,
      "node_id" : "PRRC_kwDOABII5841aODd",
      "original_commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "original_line" : 663,
      "original_position" : 101,
      "original_start_line" : 659,
      "path" : "test/functional/feature_rbf.py",
      "position" : 101,
      "pull_request_review_id" : 1004834566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896065757/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 659,
      "start_side" : "RIGHT",
      "updated_at" : "2022-06-13T20:05:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896065757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r896076495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896076495"
         }
      },
      "author_association" : "NONE",
      "body" : "You are doing good job documenting this limitation, you could maybe add one or two `getmempoolinfo()[\"size\"])` assertions at appropriate places to help even more with the overall explanation.",
      "commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "created_at" : "2022-06-13T19:46:58Z",
      "diff_hunk" : "@@ -623,5 +642,130 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):\n+        confirmed_utxos = [self.wallet.get_utxo(), self.wallet.get_utxo()]\n+\n+        # Two opt-in parent transactions\n+        parent_txs = list(map(lambda utxo: self.wallet.send_self_transfer(\n+            from_node=self.nodes[0],\n+            utxo_to_spend=utxo,\n+            sequence=BIP125_SEQUENCE_NUMBER,\n+            fee_rate=Decimal('0.0001'),\n+        ), confirmed_utxos))\n+\n+        # Craft a transaction that spends both parents so we can create one chain of descendant transactions\n+        parent_utxos = list(map(lambda tx: self.wallet.get_utxo(txid=tx['txid']), parent_txs))\n+        joined_tx_hex = self.create_double_input_self_transfer(parent_utxos, Decimal('0.0001'))\n+        joined_tx_txid = self.nodes[0].sendrawtransaction(joined_tx_hex)\n+\n+        # Get the `joined_tx` utxo into our wallet so we can spend a chain of descendants from it\n+        joined_tx = self.nodes[0].decoderawtransaction(joined_tx_hex)\n+        self.wallet.scan_tx(joined_tx)\n+        joined_utxo = self.wallet.get_utxo(txid=joined_tx_txid)\n+\n+        # Create a chain half the size of `MAX_REPLACEMENT_LIMIT` spending `joined_tx` - well under the BIP125 Rule #5 imposed limit\n+        tx = None\n+        for _ in range(MAX_REPLACEMENT_LIMIT // 2):\n+            tx = self.wallet.send_self_transfer(\n+                from_node=self.nodes[0],\n+                utxo_to_spend=joined_utxo if tx is None else self.wallet.get_utxo(txid=tx['txid']),  # a straight line of descendants\n+                fee_rate=Decimal('0.0001'),\n+            )\n+\n+        # Even though there are well under `MAX_REPLACEMENT_LIMIT` transactions that will be evicted due to this replacement,\n+        # in this case we still reject the replacement attempt because of the way `MemPoolAccept::PreChecks` double-counts descendants.\n+        # Each `confirmed_utxo` has the exact same descendants, but they are each counted twice!\n+        replacement_attempt_tx_hex = self.create_double_input_self_transfer(confirmed_utxos, Decimal('0.01'))\n+        assert_raises_rpc_error(-26, 'too many potential replacements', self.nodes[0].sendrawtransaction, replacement_attempt_tx_hex, 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r896076495",
      "id" : 896076495,
      "line" : 679,
      "node_id" : "PRRC_kwDOABII5841aQrP",
      "original_commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "original_line" : 679,
      "original_position" : 117,
      "original_start_line" : 675,
      "path" : "test/functional/feature_rbf.py",
      "position" : 117,
      "pull_request_review_id" : 1004834566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896076495/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 675,
      "start_side" : "RIGHT",
      "updated_at" : "2022-06-13T20:05:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896076495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r896090535"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896090535"
         }
      },
      "author_association" : "NONE",
      "body" : "What's documented here is not such an important issue as the CVE in `test_no_inherited_signaling` but documenting an issue/limitation seems to have a precedent. Maybe this could make sense as an additional reference for the docs?",
      "commit_id" : "64c20402b258709af8c18eac1697939eca07082f",
      "created_at" : "2022-06-13T20:05:59Z",
      "diff_hunk" : "@@ -621,5 +637,64 @@ def test_replacement_relay_fee(self):\n         tx.vout[0].nValue -= 1\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx.serialize().hex())\n \n+    def test_prechecks_overestimates_replacements(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#discussion_r896090535",
      "id" : 896090535,
      "in_reply_to_id" : 761849220,
      "line" : 645,
      "node_id" : "PRRC_kwDOABII5841aUGn",
      "original_commit_id" : "5e72716a457e994c263dc1c226a4a1861cab6bbf",
      "original_line" : 640,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 83,
      "pull_request_review_id" : 1004869331,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22867",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896090535/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-13T20:05:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/896090535",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-07-08T10:58:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-1178851934",
      "id" : 1178851934,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII585GQ9pe",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1178851934/reactions"
      },
      "updated_at" : "2022-07-08T10:58:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1178851934",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing as I believe this is resolved with doc/policy/mempool_replacements.md (which documents the limitations) and #25674, and this has needed rebase for a while.",
      "created_at" : "2022-09-26T10:00:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22867#issuecomment-1257792550",
      "id" : 1257792550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22867",
      "node_id" : "IC_kwDOABII585K-GQm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1257792550/reactions"
      },
      "updated_at" : "2022-09-26T10:00:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1257792550",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
