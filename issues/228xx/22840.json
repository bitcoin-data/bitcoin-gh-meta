{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "We need to append-to rather than set CXXFLAGS, otherwise we loose `-O2` & `-pipe` from our defaults. Currently this results in zeromq being built without optimizations at all (or whatever the compiler would default too, essentially  always `-O0`).\r\n\r\nBdb is the same, for the CXX portion of its code. C code has been built with `-O2`. Boost has actually been unaffected because it receives `-O3` from it's own build flags.\r\n\r\nNoticed while reworking #22380. For bdb & zeromq, I assume (haven't checked) this has been the case since #7165.\r\n\r\nYou can inspect the effcts in bitcoind comparing a function from a unoptimised library, i.e libzmq.\r\n\r\nBuild bitcoind with zeromq from depends (7be143a960e2bb9ac81144f55c45731c1bb209c5):\r\n```\r\ngmake -C depends NO_QT=1 NO_UPNP=1 NO_NATPMP=1 NO_WALLET=1 -j9\r\n\r\n./autogen.sh\r\nCONFIG_SITE=/path/to/share/config.site ./configure\r\ngmake -C src bitcoind -j9\r\n```\r\n\r\nFind a zeromq function:\r\n```bash\r\nnm -C src/bitcoind | rg zmq\r\n...\r\n000000010053a7e0 T _zmq_ctx_new\r\n```\r\n\r\nDisassemble it:\r\n```bash\r\nlldb src/bitcoind\r\ndisassemble -a 000000010053a7e0\r\n...\r\nbitcoind`zmq_ctx_new:\r\nbitcoind[0x10053a7e0] <+0>:   pushq  %rbp\r\nbitcoind[0x10053a7e1] <+1>:   movq   %rsp, %rbp\r\nbitcoind[0x10053a7e4] <+4>:   subq   $0x50, %rsp\r\nbitcoind[0x10053a7e8] <+8>:   callq  0x1004b2ee0               ; zmq::initialize_network()\r\nbitcoind[0x10053a7ed] <+13>:  testb  $0x1, %al\r\nbitcoind[0x10053a7ef] <+15>:  jne    0x10053a802               ; <+34>\r\nbitcoind[0x10053a7f5] <+21>:  movq   $0x0, -0x8(%rbp)\r\nbitcoind[0x10053a7fd] <+29>:  jmp    0x10053a8e8               ; <+264>\r\nbitcoind[0x10053a802] <+34>:  movq   0xadab7(%rip), %rsi       ; (void *)0x0000000000000000\r\nbitcoind[0x10053a809] <+41>:  movl   $0x2b8, %edi              ; imm = 0x2B8 \r\nbitcoind[0x10053a80e] <+46>:  callq  0x100556c58               ; symbol stub for: operator new(unsigned long, std::nothrow_t const&)\r\nbitcoind[0x10053a813] <+51>:  xorl   %ecx, %ecx\r\nbitcoind[0x10053a815] <+53>:  movl   %ecx, %edx\r\nbitcoind[0x10053a817] <+55>:  movb   $0x0, -0x19(%rbp)\r\nbitcoind[0x10053a81b] <+59>:  cmpq   $0x0, %rax\r\nbitcoind[0x10053a81f] <+63>:  movq   %rax, -0x38(%rbp)\r\nbitcoind[0x10053a823] <+67>:  movq   %rdx, -0x40(%rbp)\r\nbitcoind[0x10053a827] <+71>:  je     0x10053a858               ; <+120>\r\nbitcoind[0x10053a82d] <+77>:  movq   -0x38(%rbp), %rax\r\nbitcoind[0x10053a831] <+81>:  movq   %rax, -0x18(%rbp)\r\nbitcoind[0x10053a835] <+85>:  movb   $0x1, -0x19(%rbp)\r\nbitcoind[0x10053a839] <+89>:  movq   -0x38(%rbp), %rdi\r\nbitcoind[0x10053a83d] <+93>:  movq   %rax, -0x48(%rbp)\r\nbitcoind[0x10053a841] <+97>:  callq  0x100497aa0               ; zmq::ctx_t::ctx_t()\r\nbitcoind[0x10053a846] <+102>: jmp    0x10053a84b               ; <+107>\r\nbitcoind[0x10053a84b] <+107>: movq   -0x48(%rbp), %rax\r\nbitcoind[0x10053a84f] <+111>: movq   %rax, -0x40(%rbp)\r\nbitcoind[0x10053a853] <+115>: jmp    0x10053a858               ; <+120>\r\nbitcoind[0x10053a858] <+120>: movq   -0x40(%rbp), %rax\r\nbitcoind[0x10053a85c] <+124>: movq   %rax, -0x10(%rbp)\r\nbitcoind[0x10053a860] <+128>: cmpq   $0x0, -0x10(%rbp)\r\nbitcoind[0x10053a865] <+133>: je     0x10053a8e0               ; <+256>\r\nbitcoind[0x10053a86b] <+139>: movq   -0x10(%rbp), %rdi\r\nbitcoind[0x10053a86f] <+143>: callq  0x100497ee0               ; zmq::ctx_t::valid() const\r\nbitcoind[0x10053a874] <+148>: testb  $0x1, %al\r\nbitcoind[0x10053a876] <+150>: jne    0x10053a8db               ; <+251>\r\nbitcoind[0x10053a87c] <+156>: movq   -0x10(%rbp), %rax\r\nbitcoind[0x10053a880] <+160>: cmpq   $0x0, %rax\r\nbitcoind[0x10053a884] <+164>: movq   %rax, -0x50(%rbp)\r\nbitcoind[0x10053a888] <+168>: je     0x10053a8a3               ; <+195>\r\nbitcoind[0x10053a88e] <+174>: movq   -0x50(%rbp), %rdi\r\nbitcoind[0x10053a892] <+178>: callq  0x100497ec0               ; zmq::ctx_t::~ctx_t()\r\nbitcoind[0x10053a897] <+183>: movq   -0x50(%rbp), %rax\r\nbitcoind[0x10053a89b] <+187>: movq   %rax, %rdi\r\nbitcoind[0x10053a89e] <+190>: callq  0x100556c3a               ; symbol stub for: operator delete(void*)\r\nbitcoind[0x10053a8a3] <+195>: movq   $0x0, -0x8(%rbp)\r\nbitcoind[0x10053a8ab] <+203>: jmp    0x10053a8e8               ; <+264>\r\nbitcoind[0x10053a8b0] <+208>: movq   %rax, -0x28(%rbp)\r\nbitcoind[0x10053a8b4] <+212>: movl   %edx, -0x2c(%rbp)\r\nbitcoind[0x10053a8b7] <+215>: testb  $0x1, -0x19(%rbp)\r\nbitcoind[0x10053a8bb] <+219>: jne    0x10053a8c6               ; <+230>\r\nbitcoind[0x10053a8c1] <+225>: jmp    0x10053a8d6               ; <+246>\r\nbitcoind[0x10053a8c6] <+230>: movq   0xad9f3(%rip), %rsi       ; (void *)0x0000000000000000\r\nbitcoind[0x10053a8cd] <+237>: movq   -0x18(%rbp), %rdi\r\nbitcoind[0x10053a8d1] <+241>: callq  0x100556c40               ; symbol stub for: operator delete(void*, std::nothrow_t const&)\r\nbitcoind[0x10053a8d6] <+246>: jmp    0x10053a8f2               ; <+274>\r\nbitcoind[0x10053a8db] <+251>: jmp    0x10053a8e0               ; <+256>\r\nbitcoind[0x10053a8e0] <+256>: movq   -0x10(%rbp), %rax\r\nbitcoind[0x10053a8e4] <+260>: movq   %rax, -0x8(%rbp)\r\nbitcoind[0x10053a8e8] <+264>: movq   -0x8(%rbp), %rax\r\nbitcoind[0x10053a8ec] <+268>: addq   $0x50, %rsp\r\nbitcoind[0x10053a8f0] <+272>: popq   %rbp\r\nbitcoind[0x10053a8f1] <+273>: retq   \r\nbitcoind[0x10053a8f2] <+274>: movq   -0x28(%rbp), %rdi\r\nbitcoind[0x10053a8f6] <+278>: callq  0x100556856               ; symbol stub for: _Unwind_Resume\r\nbitcoind[0x10053a8fb] <+283>: ud2    \r\nbitcoind[0x10053a8fd] <+285>: nopl   (%rax)\r\n```\r\n\r\nCleanup and repeat after changing the zeromq cxxflags to be `$(package)_cxxflags+=-std=c++17`:\r\n```bash\r\ngmake clean\r\ngmake -C depends NO_QT=1 NO_UPNP=1 NO_NATPMP=1 NO_WALLET=1 -j9\r\ngmake -C src bitcoind -j9\r\n\r\nnm -C src/bitcoind | rg zmq\r\n...\r\n00000001004d5170 T _zmq_ctx_new\r\n```\r\n\r\nDisassemble the same function which has now been built with `-O2`:\r\n```bash\r\nlldb src/bitcoind\r\ndisassemble -a 00000001004d5170\r\n...\r\nbitcoind`zmq_ctx_new:\r\nbitcoind[0x1004d5170] <+0>:   pushq  %rbp\r\nbitcoind[0x1004d5171] <+1>:   movq   %rsp, %rbp\r\nbitcoind[0x1004d5174] <+4>:   pushq  %r14\r\nbitcoind[0x1004d5176] <+6>:   pushq  %rbx\r\nbitcoind[0x1004d5177] <+7>:   callq  0x10049cbc0               ; zmq::initialize_network()\r\nbitcoind[0x1004d517c] <+12>:  testb  %al, %al\r\nbitcoind[0x1004d517e] <+14>:  je     0x1004d51bd               ; <+77>\r\nbitcoind[0x1004d5180] <+16>:  movq   0xab139(%rip), %rsi       ; (void *)0x0000000000000000\r\nbitcoind[0x1004d5187] <+23>:  movl   $0x2b8, %edi              ; imm = 0x2B8 \r\nbitcoind[0x1004d518c] <+28>:  callq  0x1004f0e5a               ; symbol stub for: operator new(unsigned long, std::nothrow_t const&)\r\nbitcoind[0x1004d5191] <+33>:  testq  %rax, %rax\r\nbitcoind[0x1004d5194] <+36>:  je     0x1004d51bd               ; <+77>\r\nbitcoind[0x1004d5196] <+38>:  movq   %rax, %rbx\r\nbitcoind[0x1004d5199] <+41>:  movq   %rax, %rdi\r\nbitcoind[0x1004d519c] <+44>:  callq  0x100493400               ; zmq::ctx_t::ctx_t()\r\nbitcoind[0x1004d51a1] <+49>:  movq   %rbx, %rdi\r\nbitcoind[0x1004d51a4] <+52>:  callq  0x1004936e0               ; zmq::ctx_t::valid() const\r\nbitcoind[0x1004d51a9] <+57>:  testb  %al, %al\r\nbitcoind[0x1004d51ab] <+59>:  jne    0x1004d51bf               ; <+79>\r\nbitcoind[0x1004d51ad] <+61>:  movq   %rbx, %rdi\r\nbitcoind[0x1004d51b0] <+64>:  callq  0x1004936d0               ; zmq::ctx_t::~ctx_t()\r\nbitcoind[0x1004d51b5] <+69>:  movq   %rbx, %rdi\r\nbitcoind[0x1004d51b8] <+72>:  callq  0x1004f0e42               ; symbol stub for: operator delete(void*)\r\nbitcoind[0x1004d51bd] <+77>:  xorl   %ebx, %ebx\r\nbitcoind[0x1004d51bf] <+79>:  movq   %rbx, %rax\r\nbitcoind[0x1004d51c2] <+82>:  popq   %rbx\r\nbitcoind[0x1004d51c3] <+83>:  popq   %r14\r\nbitcoind[0x1004d51c5] <+85>:  popq   %rbp\r\nbitcoind[0x1004d51c6] <+86>:  retq   \r\nbitcoind[0x1004d51c7] <+87>:  movq   %rax, %r14\r\nbitcoind[0x1004d51ca] <+90>:  movq   0xab0ef(%rip), %rsi       ; (void *)0x0000000000000000\r\nbitcoind[0x1004d51d1] <+97>:  movq   %rbx, %rdi\r\nbitcoind[0x1004d51d4] <+100>: callq  0x1004f0e48               ; symbol stub for: operator delete(void*, std::nothrow_t const&)\r\nbitcoind[0x1004d51d9] <+105>: movq   %r14, %rdi\r\nbitcoind[0x1004d51dc] <+108>: callq  0x1004f0a6a               ; symbol stub for: _Unwind_Resume\r\nbitcoind[0x1004d51e1] <+113>: ud2    \r\nbitcoind[0x1004d51e3] <+115>: nopw   %cs:(%rax,%rax)\r\nbitcoind[0x1004d51ed] <+125>: nopl   (%rax)\r\n```",
   "closed_at" : "2021-09-02T01:44:09Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 6,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22840/comments",
   "created_at" : "2021-08-31T04:45:13Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22840/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/22840",
   "id" : 983437029,
   "labels" : [
      {
         "color" : "5319e7",
         "default" : false,
         "description" : null,
         "id" : 61889416,
         "name" : "Build system",
         "node_id" : "MDU6TGFiZWw2MTg4OTQxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22840/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NzIzMDE0NjAw",
   "number" : 22840,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/22840.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22840",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/22840.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22840"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "build: fix unoptimized libraries in depends",
   "updated_at" : "2021-09-02T01:44:09Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22840",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   }
}
