[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concrete example patch + txvalid vectors. Without the patch the first example would fail because of the DISCOURAGE rules kicking ON with CTV off. The second example would fail becuase when the DISCOURAGE rule is excluded, turning it off to check for failure fails when the CTV rule is on. These kinda sound like the same case, but they're a bit different...\r\n\r\n```json\r\n[\"Check that CTV is Processed with a Taproot Spend\"],\r\n[[[\"f90521604b56c392ffa17a01bcae5914b8cf7728cc6cec00d90838818cc5465f\", 0, \"1 0x20 0x24f5fe807bcee7774dc515f0b7ee8d6ae39eefd1b590264c52ff867e22c49419\", 155000]],\r\n\"020000000001015f46c58c813808d900ec6ccc2877cfb81459aebc017aa1ff92c3564b602105f90000000000000000000ae80300000000000017a914ce0036ae7d49f06967dd92cc1ffff4a878c457f987d00700000000000017a91406e00c3b362e65e03507a2858d7b6499b668669887b80b00000000000017a9142ee42c65592c59b69bfefbd03781140c67e5232487a00f00000000000017a9146b3df16a1e6651d582ca6598900cb4f2d6c9dfb887881300000000000017a914877d55932d4f38b476d4db27e4efbe159ff0a07187701700000000000017a91441e9dc892e861d252d513d594ba833cd6bc8917087581b00000000000017a914b93075800c693dcc78b0553bf9d1cf879d76a02487401f00000000000017a914e9f0ea3a2cae0ad01114e2ec3502ef08bbc50af487282300000000000017a9149a645b5293bdf8be72cb9d1460bce7d64445cfad87102700000000000017a91451e5d6b2ee24ae128234c92245df3624620ea7d3870222209eb65498bfcd4eb90e61c2c5e323a9c16c8bfd8d53ba649915bcdb572099c12fb321c0b7e0105780185688d998a8f8438aa07637a5799755688ec80175cb26c0406e0200000000\",\r\n\"NONE\", \"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"],\r\n[\"Check that CTV upgradability works (taproot)\"],\r\n[[[\"f90521604b56c392ffa17a01bcae5914b8cf7728cc6cec00d90838818cc5465f\", 0, \"1 0x20 0x24f5fe807bcee7774dc515f0b7ee8d6ae39eefd1b590264c52ff867e22c49419\", 155000]],\r\n\"020000000001015f46c58c813808d900ec6ccc2877cfb81459aebc017aa1ff92c3564b602105f90000000000000000000ae80300000000000017a914ce0036ae7d49f06967dd92cc1ffff4a878c457f987d00700000000000017a91406e00c3b362e65e03507a2858d7b6499b668669887b80b00000000000017a9142ee42c65592c59b69bfefbd03781140c67e5232487a00f00000000000017a9146b3df16a1e6651d582ca6598900cb4f2d6c9dfb887881300000000000017a914877d55932d4f38b476d4db27e4efbe159ff0a07187701700000000000017a91441e9dc892e861d252d513d594ba833cd6bc8917087581b00000000000017a914b93075800c693dcc78b0553bf9d1cf879d76a02487401f00000000000017a914e9f0ea3a2cae0ad01114e2ec3502ef08bbc50af487282300000000000017a9149a645b5293bdf8be72cb9d1460bce7d64445cfad87102700000000000017a91451e5d6b2ee24ae128234c92245df3624620ea7d3870222209eb65498bfcd4eb90e61c2c5e323a9c16c8bfd8d53ba649915bcdb572099c12fb321c0b7e0105780185688d998a8f8438aa07637a5799755688ec80175cb26c0406e0200000000\",\r\n\"DISCOURAGE_UPGRADABLE_NOPS\", \"NONE\", true],\r\n```\r\n\r\n\r\n```diff\r\ndiff --git a/src/test/transaction_tests.cpp b/src/test/transaction_tests.cpp\r\nindex df2071d2b..717e30276 100644\r\n--- a/src/test/transaction_tests.cpp\r\n+++ b/src/test/transaction_tests.cpp\r\n@@ -198,11 +198,19 @@ BOOST_AUTO_TEST_CASE(tx_valid)\r\n         std::string strTest = test.write();\r\n         if (test[0].isArray())\r\n         {\r\n-            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\r\n+            const size_t size = test.size();\r\n+            const bool default_args = size == 3;\r\n+            const bool has_skip_exclude_one = size == 5;\r\n+            const bool has_extra_flags = size == 4;\r\n+            const bool size_correct = default_args || has_extra_flags || has_skip_exclude_one;\r\n+            const bool extra_flags_correct = !has_extra_flags || test[3].isStr();\r\n+            const bool skip_exclude_one_correct = !has_skip_exclude_one  || test[4].isBool();\r\n+            if (!size_correct || !test[1].isStr() || !test[2].isStr() || !extra_flags_correct || !skip_exclude_one_correct)\r\n             {\r\n                 BOOST_ERROR(\"Bad test: \" << strTest);\r\n                 continue;\r\n             }\r\n+            const bool skip_exclude_one = has_skip_exclude_one? test[4].get_bool() : false;\r\n \r\n             std::map<COutPoint, CScript> mapprevOutScriptPubKeys;\r\n             std::map<COutPoint, int64_t> mapprevOutValues;\r\n@@ -243,33 +251,36 @@ BOOST_AUTO_TEST_CASE(tx_valid)\r\n \r\n             PrecomputedTransactionData txdata(tx);\r\n             unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\r\n+            unsigned int extra_verify_flags = has_extra_flags? ParseScriptFlags(test[3].get_str()) : 0;\r\n \r\n             // Check that the test gives a valid combination of flags (otherwise VerifyScript will throw). Don't edit the flags.\r\n             if (~verify_flags != FillFlags(~verify_flags)) {\r\n                 BOOST_ERROR(\"Bad test flags: \" << strTest);\r\n             }\r\n \r\n-            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /* expect_valid */ true),\r\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, extra_verify_flags|~verify_flags, txdata, strTest, /* expect_valid */ true),\r\n                                 \"Tx unexpectedly failed: \" << strTest);\r\n \r\n             // Backwards compatibility of script verification flags: Removing any flag(s) should not invalidate a valid transaction\r\n             for (const auto& [name, flag] : mapFlagNames) {\r\n                 // Removing individual flags\r\n-                unsigned int flags = TrimFlags(~(verify_flags | flag));\r\n+                unsigned int flags = TrimFlags(extra_verify_flags | ~(verify_flags | flag));\r\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\r\n                     BOOST_ERROR(\"Tx unexpectedly failed with flag \" << name << \" unset: \" << strTest);\r\n                 }\r\n                 // Removing random combinations of flags\r\n-                flags = TrimFlags(~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\r\n+                flags = TrimFlags(extra_verify_flags | ~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\r\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true)) {\r\n                     BOOST_ERROR(\"Tx unexpectedly failed with random flags \" << ToString(flags) << \": \" << strTest);\r\n                 }\r\n             }\r\n \r\n             // Check that flags are maximal: transaction should fail if any unset flags are set.\r\n-            for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\r\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\r\n-                    BOOST_ERROR(\"Too many flags unset: \" << strTest);\r\n+            if (!skip_exclude_one) {\r\n+                for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\r\n+                    if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~flags_excluding_one, txdata, strTest, /* expect_valid */ false)) {\r\n+                        BOOST_ERROR(\"Too many flags unset: \" << strTest);\r\n+                    }\r\n                 }\r\n             }\r\n         }\r\n```",
      "created_at" : "2021-09-02T21:07:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912057632",
      "id" : 912057632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842XOUg",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-02T21:07:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912057632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Just to make sure I understand you correctly, please correct me if this is inaccurate:\r\n\r\nYour test is a valid OP_CTV transaction, and this is what we get when passing in these combinations of script verification flags\r\n```\r\nDISCOURAGE_NOPS      CHECKTEMPLATEVERIFY   expected result   your result\r\n      on                 on                 success            fail\r\n      on                 off                success            fail\r\n      off                on                 success            success\r\n      off                off                success            success\r\n```\r\n(Edit: I realized that NOP4 should no longer be gated by DISCOURAGE_UPGRADEABLE_NOPS, https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701806626)\r\n\r\nThe transaction_tests framework expects the set of excluded flags to be minimal, i.e. removing any more flags should be fine, but adding any flags should make it fail. Flags are specified as _excluded_ and the default passed in is everything in `STANDARD_SCRIPT_VERIFY_FLAGS`. If your test is failing the flag maximality check when you specify exclude=`DISCOURAGE_UPGRADEABLE_NOPS`, that means either:\r\n\r\n- It passed in an extra flag and it didn't fail. This means your test needs to be more specific.\r\n- It removed an extra flag and it failed. Note that if it removed CTV and it failed, this means CTV isn't a soft fork. There are other possibilities as well.\r\n",
      "created_at" : "2021-09-03T10:49:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912446130",
      "id" : 912446130,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842YtKy",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-03T11:17:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912446130",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "You're missing what's going on. DISCOURAGE_UPGRADABLE_NOPS is a non consensus flag.\r\n\r\nYou should be able to e.g. test the following script spend:\r\n\r\n`<H> CTV`\r\n\r\nin the correct txn for H.\r\n\r\n- When VERIFY_CTV is OFF and DISCOURAGE is ON it will fail.\r\n- When VERIFY_CTV is OFF and DISCOURAGE is OFF it will pass.\r\n- When VERIFY_CTV is ON and DISCOURAGE is ON it will pass.\r\n- When VERIFY_CTV is ON and DISCOURAGE is OFF it will pass.\r\n\r\nTherefore we must either set either VERIFY_CTV is always on, or DISCOURAGE is always off and skip the DISCOURAGE minimal test.\r\n\r\nNow consider the spend:\r\n\r\n`1 CTV`\r\n\r\n- When VERIFY_CTV is OFF and DISCOURAGE is ON it will fail.\r\n- When VERIFY_CTV is OFF and DISCOURAGE is OFF it will pass.\r\n- When VERIFY_CTV is ON and DISCOURAGE is ON it will fail.\r\n- When VERIFY_CTV is ON and DISCOURAGE is OFF it will pass.\r\n\r\nTherefore, if we would like to test this, we need to specify that just DISCOURAGE is OFF (covered by existing behavior). \r\n\r\n\r\nThis is also why we cannot use FillFlags or TrimFlags afaict, since we don't know if the transaction is intended to succeed or fail (<H> CTV or 1 CTV) so we can't infer the correct fill.\r\n\r\n\r\nWe cannot simply change the line back to the form that does not reture discourage upgradable because we need to discourage using such features to protect old mining nodes during a soft fork upgrade in the future.\r\n\r\nThis was botched with CSV; if we wanted to add a new CSV type that uses the disabled flag, we would have to wait to age out old mining nodes for it to be safe for them to continue to mine on the network. Hence my patch to fix it, so we get a head start on that arduous process.",
      "created_at" : "2021-09-03T18:30:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912730697",
      "id" : 912730697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842ZypJ",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-03T18:30:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912730697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "No, I think we have a miscommunication here. When I say a flag is a soft fork, I mean that applying the flag can only restrict the space of acceptable scripts - see #10699\r\n\r\n> in the correct txn for H.\r\n    When VERIFY_CTV is OFF and DISCOURAGE is ON it will fail.\r\n    When VERIFY_CTV is ON and DISCOURAGE is ON it will pass.\r\n\r\nIn the example you're giving here, VERIFY_CTV is not a soft fork, since applying it to this transaction causes it to go from invalid to valid. Thus, I don't think it is the right approach. If you want templates to be upgradeable, you can version them and discourage greater versions, allow an extra field and discourage using it, etc.\r\n\r\n> We cannot simply change the line back to the form that does not reture discourage upgradable because we need to discourage using such features to protect old mining nodes during a soft fork upgrade in the future.\r\n\r\nI agree with protecting old nodes that haven't upgraded in soft forks, but I still don't understand why you're doing it this way. IIUC since #5000 they should be discouraging NOP4 in policy already.",
      "created_at" : "2021-09-04T13:42:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912976502",
      "id" : 912976502,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842aup2",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-04T13:42:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912976502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hard forks / soft fork only applies in that way to consensus flags, not standardness. DISCOURAGE_UPGRADABLE_NOPS is never used in consensus.\r\n\r\nTaproot does something sorta similar currently, albeit in Input standardness rather than interpreter although the distinction is immaterial.\r\n\r\n```c++\r\n    // Check for non-standard pay-to-script-hash in inputs\r\n    const bool taproot_active = DeploymentActiveAfter(m_active_chainstate.m_chain.Tip(), args.m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\r\n    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_active)) {\r\n        return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\r\n    }\r\n```\r\n\r\nTherefore when taproot_active goes from false -> true, a transaction goes from invalid to valid. It's still a soft fork.\r\n\r\n\r\nPart of the reason why we need the discourage in the case that SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH is not set is (if it helps to reason about it) what if CTV never gets activated? We should perfectly preserve the old NOP semantics of discouraging it.",
      "created_at" : "2021-09-04T15:16:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912990346",
      "id" : 912990346,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842ayCK",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-04T15:16:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912990346",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Something else that might help to see this more clearly:\r\n\r\nThe (current BIP119) code for CTV & NOPs:\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    // if flags not enabled; treat as a NOP4\r\n                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\r\n                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                        break;\r\n                    }\r\n\r\n                    if (stack.size() < 1)\r\n                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n\r\n                    // If the argument was not 32 bytes, treat as OP_NOP4:\r\n                    switch (stack.back().size()) {\r\n                        case 32:\r\n                            if (!checker.CheckDefaultCheckTemplateVerifyHash(stack.back())) {\r\n                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            // future upgrade can add semantics for this opcode with different length args\r\n                            // so discourage use when applicable\r\n                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\r\n                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                            }\r\n                    }\r\n                }\r\n                break;\r\n\r\n                case OP_NOP1: case OP_NOP5:\r\n                case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\r\n                {\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                }\r\n                break;\r\n```\r\nThe pruned code if SCRIPT_VERIFY_CHECK_TEMPLATE_VERIFY_HASH is always set:\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    if (stack.size() < 1)\r\n                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n\r\n                    // If the argument was not 32 bytes, treat as OP_NOP4:\r\n                    switch (stack.back().size()) {\r\n                        case 32:\r\n                            if (!checker.CheckDefaultCheckTemplateVerifyHash(stack.back())) {\r\n                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            // future upgrade can add semantics for this opcode with different length args\r\n                            // so discourage use when applicable\r\n                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\r\n                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                            }\r\n                    }\r\n                }\r\n                break;\r\n```\r\nThe (pruned) code if CTV is never set.\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    // if flags not enabled; treat as a NOP4\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                }\r\n                break;\r\n\r\n                case OP_NOP1: case OP_NOP5:\r\n                case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\r\n                {\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                }\r\n                break;\r\n```\r\nWhich is the same as the current (master branch) code:\r\n\r\n```c++\r\n                case OP_NOP1: case OP_NOP4: case OP_NOP5:\r\n                case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\r\n                {\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                }\r\n                break;\r\n```\r\nThe pruned code if SCRIPT_VERIFY_CHECK_TEMPLATE_VERIFY_HASH is always set and the argument is known to be 32 bytes:\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    if (stack.size() < 1)\r\n                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n                    if (!checker.CheckDefaultCheckTemplateVerifyHash(stack.back())) {\r\n                        return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\r\n                    }\r\n                }\r\n                break;\r\n\r\n```\r\nThe pruned code if SCRIPT_VERIFY_CHECK_TEMPLATE_VERIFY_HASH is always set and the argument is known to not be 32 bytes:\r\n\r\n```c++\r\n               case OP_CHECKTEMPLATEVERIFY:\r\n                {\r\n                    if (stack.size() < 1)\r\n                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\r\n                    if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\r\n                        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\r\n                    }\r\n                 }                }\r\n                break;\r\n```\r\n\r\nThe list below (I hope?) makes it more plain to see:\r\n\r\n- When CTV is not active, the semantics are entirely identical to CTV being NOP4.\r\n  - During Consensus, Always Passes\r\n  - During Standardness, Always Fails (DISCOURAGE_UPGRADABLE_NOPS)\r\n- When CTV is active, there must always be at least 1 element on the stack (it's a mild design goal that opcodes should not take a variable # of things off the stack, so we do not allow CTV with an empty stack to have a meaning, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-June/016055.html for some discussion on the matter).\r\n  - During Consensus, Passes if >=1 element on stack\r\n  - During Standardness, Passes if >=1 element on stack\r\n- When CTV is active, and the argument is 32 bytes, we apply CTV rules\r\n  - During Consensus, Passes if CTV Hash Matches TXN\r\n  - During Standardness, Passes if CTV Hash Matches TXN\r\n- When CTV is active, and the argument is not 32 bytes, we continue to treat as a NOP (I could probably clarify the situation a bit better here by making a new flag -- DISCOURAGE_UPGRADABLE_TEMPLATE_PROGRAM, but the first DISCOURAGE_UPGRADABLE_NOP check still causes this problem by itself).\r\n  - During Consensus, always passes\r\n  - During Standardness, always fails (DISCOURAGE_UPGRADABLE_NOPS)\r\n\r\nTherefore we're only ever adding cases where something can fail in consensus, and standardness is more strict that consensus.",
      "created_at" : "2021-09-04T15:40:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-912993667",
      "id" : 912993667,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842ay2D",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912993667/reactions"
      },
      "updated_at" : "2022-05-12T19:37:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912993667",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Taproot does something sorta similar currently, albeit in Input standardness rather than interpreter although the distinction is immaterial.\r\nTherefore when taproot_active goes from false -> true, a transaction goes from invalid to valid. It's still a soft fork.\r\n\r\nTo clarify, I'm talking about soft forks wrt script verification flags as inputs to the interpreter, not about our policy rules. I don't think the distinction is immaterial. Yes, I am aware that when taproot activates we will no longer discourage taproot spends in policy, while consensus rules will tighten, since it is a soft fork.\r\n\r\nWhat I am trying to say is: [a property we desire in the script verification flags](https://github.com/bitcoin/bitcoin/blob/e7c6ed605ca4991856603971f1306dd484dc2f75/src/script/interpreter.h#L37-L41) is that the addition of another flag strictly reduces the space of acceptable scripts. This property is what is being tested by the maximality checks in transaction_tests; they fail because `SCRIPT_VERIFY_CHECK_TEMPLATE_VERIFY_HASH` does not have this property. My suggestion is rather than bypassing this check in transaction_tests, implement CTV extensibility and maintain this property by adding another script verification flag. A method is outlined [here](https://github.com/bitcoin/bitcoin/pull/10699#issue-128042516).\r\n\r\n> When CTV is active, and the argument is not 32 bytes, we continue to treat as a NOP (I could probably clarify the situation a bit better here by making a new flag -- DISCOURAGE_UPGRADABLE_TEMPLATE_PROGRAM, but the first DISCOURAGE_UPGRADABLE_NOP check still causes this problem by itself).\r\n\r\nI believe the approach of having a `SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TEMPLATE_PROGRAM` would be better. Again, I don't think `SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS` should be in the logic that handles the now-repurposed NOP4.",
      "created_at" : "2021-09-07T09:54:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-914165977",
      "id" : 914165977,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842fRDZ",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-07T09:54:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/914165977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Soft fork/hard fork refers strictly to consensus, not to policy. DISCOURAGE_UPGRADABLE_NOPS is policy.\r\n\r\nI don't think we can -- while preserving the (A|B) is subset A -- safely do any OP_NOP upgrade since we need some flag which is DISCOURAGE_UNACTIVE_UPGRADED_BLAH to discourage using a thing before the upgrade is active but where it is still defined. This will be a problem for Taproot, CTV, APO, etc. So it seems either we must break this property of (A|B) is subset A while doing an upgrade, or we don't do any upgrades?\r\n\r\nIn other words, we fundamentally need some sort of IS_EXECUTING_IN_CONSENSUS/IS_EXECUTING_IN_POLICY flag to distinguish if using a to-be activated feature before it is active should be a failure or not. \r\n\r\n(sorry for the deleted comment, accident)",
      "created_at" : "2021-09-07T21:29:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-914641991",
      "id" : 914641991,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842hFRH",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-07T21:29:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/914641991",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't see why this property needs to be broken. To the best of my knowledge, every script validation flag today, is purely restrictive (in the sense that the set of valid scripts under A|B is a subset of the scripts valid under A). It is true that such a property is not strictly required for anything but consensus rules (which the various DISCOURAGE ones aren't), but it is extremely valuable for testing I think.\n\nI haven't followed the discussion, feel free to explain what I'm missing, or where I can find it.",
      "created_at" : "2021-09-07T22:23:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-914666496",
      "id" : 914666496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842hLQA",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-07T22:23:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/914666496",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sure. Suppose you want to introduce a new-fangled thing (like... say a Segwit V1 spend).\r\n\r\nWe want Segwit V1 to be discouraged for spending until such a time that Segwit V1 is active on the network, and if Segwit V1 failed to activate, we don't want it to become able to broadcast.\r\n\r\nTaproot in particular cheats at this, though, because it uses the witnessversion transaction level test. So the fact that V1 is discouraged does not require a flag. However, if we didn't scan witness versions, we would have to have a script flag for discouraging.\r\n\r\nTake for example, any OP_SUCESSX. If we add a semantic to it, before it is active we need to continue to set SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS, and after the rule is active we need to set SCRIPT_VERIFY_NEWFANGLED_DOODAD which should cause us to not have SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS applied. If it fails to activate we must continue to have SCRIPT_VERIFY_NEWFANGLED_DOODAD unset.\r\n\r\nedit: and it's not sufficient to use the TrimFlags/FillFlags because having unset SCRIPT_VERIFY_NEWFANGLED_DOODAD does not mean that SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS must be any value nor does having SCRIPT_VERIFY_NEWFANGLED_DOODAD mean that SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS must be set or unset, and it may be desirable to test that the opcode gracefully continues it's old behavior if the upgrade does not activate.\r\n\r\nThis is currently an issue for OP_CTV that I noticed (and patched) by making it have discouraged if fails to activate.\r\n\r\nHowever, this is problematic for the test_valid.json file because we can't write test vectors that are happy under all circumstances or unhappy under all circumstances. E.g., if VERIFY_CTV is unset, it means we failed to activate, so DISCOURAGE_UPGRADABLE_NOP should takeover and fail an otherwise valid tx. If VERIFY_CTV is set, we succeeded activation, so the transaction should be OK.\r\n\r\nsee https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701305405 for more context. See also https://github.com/bitcoin/bitcoin/pull/22871 where I discovered we are not properly discouraging unknown sequences in the arg for CSV, nor in nSequence (two distinct, but realted issues -- txin.nSequence had some crufty reasons not to be restrictive, but CSV did not).\r\n",
      "created_at" : "2021-09-07T22:35:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-914671108",
      "id" : 914671108,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842hMYE",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-07T22:38:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/914671108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@JeremyRubin Thanks for elaborating.\n\nHistorically I think we used a different mechanism than Taproot used, where as soon as a new opcode was defined, we'd unconditionally remove DISCOURAGE semantics from it, and just always fully enforce it (correctly), even pre-activation, for mempool transactions.\n\nIt hadn't occurred to me that this approach we're taking with Taproot (where even valid taproot spends remain non-standard until activation) is in fact only possible because it's done through non-script IsStandard() rules, and doing the same through DISCOURAGE flags would violate the restricting-only property.\n\nHowever, I do think it's better to take that path, and treat future opcode spends as non-standard until activation. At the very least, it means a more predictable relay policy, new nodes switch policy in lockstep, rather than following adoption patterns.\n\nThat will mean indeed that adding FLAG_NEW_OPCODE to FLAG_DISCOURAGE is not a pure restriction, but that sounds like a reasonable price to pay.",
      "created_at" : "2021-09-07T22:58:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-914679373",
      "id" : 914679373,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842hOZN",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-07T22:58:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/914679373",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The patch https://github.com/bitcoin/bitcoin/pull/22876 makes an attempt at at least preserving testability until we know it is fully active by allowing to test the same transaction with flags as below:\r\n\r\n```\r\n// tests with DISCOURAGE_UPGRADABLE_NOPS must be unset, no flags required to be set, and the maximality check skipped\r\n...'DISCOURAGE_UPGRADABLE_NOPS', 'NONE', true]\r\n// tests with all flags ok, SOME_OPCODE_VERIFY flags required to be set, and the maximality check enforced\r\n...'NONE', 'SOME_OPCODE_VERIFY']\r\n```\r\n\r\nI think it's less clean than ideal, but allows cover both cases of soft fork succeeds and soft fork fails.\r\n\r\n",
      "created_at" : "2021-09-07T23:38:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-914696021",
      "id" : 914696021,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII5842hSdV",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-07T23:38:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/914696021",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think there's four interpretations we want; one pre CTV activation:\r\n\r\n - `x OP_NOP4` -- consensus valid, relay invalid, doesn't matter what x might be\r\n\r\nand three post CTV activation:\r\n\r\n - `goodhash OP_CTV` -- fully specced and enforced per BIP119, consensus valid, relay valid\r\n - `badhash OP_CTV` -- hash doesn't match tx, consensus invalid\r\n - `upgrade OP_CTV` -- part of upgradeability, consensus valid, relay invalid\r\n\r\nThe specific case causing a conflict is that you want `goodhash OP_CTV` to go from \"relay invalid\" prior to CTV activating to \"relay valid\" after it activates which is removing a restriction, but indicating CTV is active is adding a flag, and it would be nice if that made things more restrictive rather than less restrictive.\r\n\r\nPerhaps ideally we'd say `DISCOURAGE_CTV` prior to it being active?\r\n\r\nMaybe it would be better to explicitly add a flag like `DISCOURAGE_CTV` or `DISCOURAGE_TAPROOT` for preventing relay  when the softfork is not active; then remove that flag once the fork is active and buried? That would preserve the \"flags only restrict things\" and still get the full variety of behaviours, and only mean adding a two flags instead of one temporarily?\r\n\r\nIf we wanted to ensure new nodes didn't relay CTV transactions before they'd caught up to CTV activation even after `DISCOURAGE_CTV` was removed from the codebase,  we could keep that behaviour by making standardness logic be \"don't relay **anything** until your tip sees all the expected soft forks as active\".",
      "created_at" : "2022-05-12T19:56:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1125369926",
      "id" : 1125369926,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585DE8hG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125369926/reactions"
      },
      "updated_at" : "2022-05-12T19:56:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125369926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Would this approach work for anyprevout key types as well?",
      "created_at" : "2022-05-12T22:05:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1125462676",
      "id" : 1125462676,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585DFTKU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125462676/reactions"
      },
      "updated_at" : "2022-05-12T22:05:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125462676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I generally philosophically feel a bit funky about taking on more code complexity in consensus logic, where extending the testing logic complexity would do. But if it's a clear cut approach that works generally I might feel different.",
      "created_at" : "2022-05-12T22:06:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1125463467",
      "id" : 1125463467,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585DFTWr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125463467/reactions"
      },
      "updated_at" : "2022-05-12T22:06:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125463467",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Would this approach work for anyprevout key types as well?\r\n\r\nI think the idea is that current behaviour would be just:\r\n\r\n| key | sig | flags=nothing | DISCOURAGE |\r\n|---|---|---|---|\r\n| apo + future | * | valid | invalid |\r\n\r\nBut with APO support that would become:\r\n\r\n| key | sig | flags=nothing | DISCOURAGE | APO | DISCOURAGE_APO |\r\n|---|---|---|---|---|---|\r\n| apo | empty/valid | valid | valid | valid | invalid |\r\n| apo | badsig | valid | valid | invalid | invalid |\r\n| future | * | valid | invalid | valid | valid |\r\n\r\n(And when you combine flags, the result is valid iff all the individual results were valid)\r\n\r\nAnd you'd change `PolicyScriptChecks` to something like:\r\n\r\n```c++\r\n    const unsigned int discourageflags = DeploymentActiveAfter(Tip(), ANYPREVOUT) ? 0 : DISCOURAGE_APO;\r\n    const unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS | discourageflags;\r\n```\r\n\r\n(with `VERIFY_APO` included in `STANDARD_SCRIPT_VERIFY_FLAGS`)",
      "created_at" : "2022-05-13T15:55:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1126203110",
      "id" : 1126203110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585DIH7m",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126203110/reactions"
      },
      "updated_at" : "2022-05-13T15:55:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126203110",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd need to stew on this more and maybe see a PoC working. My brain hurts!\r\n\r\nThe issue I see is that we need to not only ensure the \"invariants\" hold for both tx_valid and tx_invalid checks, and it seems hard to ensure that these flags are valid for all the test patterns and combinations we try.\r\n\r\nFor tx_valid, we need to have that any additional flag set makes it invalid,right?\r\n\r\nAnd for tx_invalid, we need to have that any addtional flag unset makes it valid, right?\r\n\r\nSo if we had an invalid tx, it seems that *both* the APO and DISCOURAGE_APO flag being set, unsetting just one still yields and invalid transaction...",
      "created_at" : "2022-05-13T18:10:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1126311643",
      "id" : 1126311643,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585DIibb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126311643/reactions"
      },
      "updated_at" : "2022-05-13T18:10:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126311643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, fair: in my head I was thinking you'd set one of APO or DISCOURAGE_APO not both, but then when I looked at the code figured you'd want to have APO in STANDARD_SCRIPT_VERIFY_FLAGS, which would mean setting both. Having `DISCOURAGE_VALID_APO` instead avoids that inconsistency.\r\n\r\n```c++\r\n    } else if ((pubkey.size() == 1 || pubkey.size() == 33) && pubkey[0] == 0x01) {\r\n        if (flags & SCRIPT_VERIFY_ANYPREVOUT) != 0) {\r\n            // check valid APO\r\n            if (not valid APO) {\r\n                 return false; // serror is set\r\n            }\r\n            if (flags & SCRIPT_VERIFY_DISCOURAGE_VALIDANYPREVOUT) != 0) {\r\n                 return set_error(serror, TAPROOT_DISCOURAGE_VALIDANYPREVOUT);\r\n            }\r\n        }\r\n    } else { ... }\r\n```\r\n\r\n> For tx_valid, we need to have that any additional flag set makes it invalid,right?\r\n\r\nHmm. Yeah, the tests are:\r\n\r\n* tx_valid:\r\n  * we've specified the maximal set of flags, adding any will make it invalid \r\n  * removing any flags will not make it invalid\r\n* tx_invalid:\r\n  * removing any flags will make it valid\r\n  * adding any flags will not make it valid\r\n\r\nWith the caveat that the flags specified for tx_valid are inverted -- you specify the flags that would make it invalid, which is usually NONE.\r\n\r\n> So if we had an invalid tx, it seems that _both_ the APO and DISCOURAGE_APO flag being set, unsetting just one still yields and invalid transaction...\r\n\r\nThis just means you test it by having the same tx specified twice in tx_invalid, once with just the APO flag and once with just the DISCOURAGE_APO flag? I think doing DISCOURAGE_VALID_APO solves this though, since then you just have one test with both flags, and removing either makes it valid.",
      "created_at" : "2022-05-13T19:33:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1126379287",
      "id" : 1126379287,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585DIy8X",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126379287/reactions"
      },
      "updated_at" : "2022-05-13T19:33:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126379287",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "So we need the following:\r\n```\r\nDISCOURAGE_APO\r\nDISCOURAGE_VALID_APO\r\nDISCOURAGE_NEW_KEYTYPE\r\nVALIDATE_APO\r\n```\r\n\r\nand we do 2 copies of each transaction in tx_invalid? (Another option here would be to allow for lists of lists of flag combos, and re-run each test across a couple different rules.)\r\n\r\nAnd after activation, we bury it to be:\r\n```\r\nDISCOURAGE_NEW_KEYTYPE\r\nVALIDATE_APO\r\n```\r\n\r\nOverall this feels like a lot of complexity for reviewers on the consensus code v.s. just making the testing logic handle it.\r\n\r\nDo you think there are other ways we could clean up our testing strategies / flag passing strategy to make things more clean?\r\n\r\n",
      "created_at" : "2022-05-13T21:41:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1126529632",
      "id" : 1126529632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585DJXpg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126529632/reactions"
      },
      "updated_at" : "2022-05-13T21:41:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126529632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "We currently have `DISCOURAGE_UPGRADABLE_PUBKEYTYPE`.\r\n\r\nWhen adding APO, we'd add `SCRIPT_VERIFY_APO` and `SCRIPT_VERIFY_DISCOURAGE_VALID_APO`. \r\n\r\nTests of valid script path using APO would specify `DISCOURAGE_VALID_APO` in the tx_valid verify flags, rather than `NONE`.\r\n\r\nTests of invalid script path spends using APO would specify `VERIFY_APO` as the minimal flag to make them invalid, rather than `DISCOURAGE_UPGRADABLE_PUBKEYTYPE` (which no longer makes them invalid).\r\n\r\nWhen burying APO, we'd drop `SCRIPT_VERIFY_DISCOURAGE_VALID_APO` -- no longer specifying it for the tests, removing the `if () { return set_error(discouraged); }`, and no longer setting the flag for mempool entry when APO is not yet active.\r\n\r\n\r\nThat is, there's no `DISCOURAGE_APO` flag, just `DISCOURAGE_VALID_APO`, and no need to duplicate txs for testing. At least, I think that all works.",
      "created_at" : "2022-05-13T22:46:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1126559608",
      "id" : 1126559608,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585DJe94",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126559608/reactions"
      },
      "updated_at" : "2022-05-13T22:47:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126559608",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "E",
      "created_at" : "2022-05-18T00:31:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1129445632",
      "id" : 1129445632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585DUfkA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129445632/reactions"
      },
      "updated_at" : "2022-05-18T00:31:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129445632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/99515504?v=4",
         "events_url" : "https://api.github.com/users/Osusushue/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Osusushue/followers",
         "following_url" : "https://api.github.com/users/Osusushue/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Osusushue/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Osusushue",
         "id" : 99515504,
         "login" : "Osusushue",
         "node_id" : "U_kgDOBe58cA",
         "organizations_url" : "https://api.github.com/users/Osusushue/orgs",
         "received_events_url" : "https://api.github.com/users/Osusushue/received_events",
         "repos_url" : "https://api.github.com/users/Osusushue/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Osusushue/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Osusushue/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Osusushue"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Here's what I've ended up doing in https://github.com/bitcoin-inquisition/bitcoin/pull/4/files:\r\n\r\n * add `SCRIPT_VERIFY_ANYPREVOUT` and `SCRIPT_VERIFY_DISCOURAGE_ANYPREVOUT`\r\n * remove APO pubkeys (ie `0x01` and `0x01[32 bytes]`) from `SCRIPT_VERIFY_DISCOURAGE_UPGRADEABLE_PUBKEYTYPE`\r\n * if `DISCOURAGE_ANYPREVOUT` is set, invalid if an APO pubkey is attempted to be used\r\n * if `ANYPREVOUT` is set, invalidate if an APO pubkey is used and the signature doesn't comply with BIP 118\r\n * set `DISCOURAGE_ANYPREVOUT` in `MemPoolAccept::PolicyScriptChecks` when APO is not activated\r\n\r\nAfter activation, drop `DISCOURAGE_ANYPREVOUT` and remove code paths that set it, or that were only executed if it was set.\r\n\r\n(I ended up having `DISCOURAGE_APO` instead of `DISCOURAGE_VALID_APO` rather than the other way around; but either way, there's only one, not both)",
      "created_at" : "2022-09-16T08:36:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1249084246",
      "id" : 1249084246,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585Kc4NW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249084246/reactions"
      },
      "updated_at" : "2022-09-16T08:36:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1249084246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Possibly relevant https://github.com/bitcoin/bitcoin/pull/5253#issuecomment-67148736",
      "created_at" : "2022-10-11T04:02:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1274056299",
      "id" : 1274056299,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585L8I5r",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274056299/reactions"
      },
      "updated_at" : "2022-10-11T04:02:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274056299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "good find!",
      "created_at" : "2022-10-11T04:31:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-1274072527",
      "id" : 1274072527,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22865",
      "node_id" : "IC_kwDOABII585L8M3P",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274072527/reactions"
      },
      "updated_at" : "2022-10-11T04:31:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274072527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   }
]
