[
   {
      "author_association" : "OWNER",
      "body" : "@MeshCollider A question about this code - what is supposed to be the semantics of `LockDirectory` if it's called with the same directory multiple times? I understand that the map is just to hold on to the per-directory lock, but right now, if it happens to be called multiple times it will try to re-lock the same lock again\\*. We don't check if it already exists, and emplace will return the current object with that key.\r\n\r\nAccording to the documentation http://www.boost.org/doc/libs/master/doc/html/interprocess/synchronization_mechanisms.html#interprocess.synchronization_mechanisms.file_lock\r\n> Effects: The calling thread tries to acquire exclusive ownership of the file lock without waiting. If no other thread has exclusive or sharable ownership of the file lock, this succeeds.\r\n\r\nThe result of that will depend if the lock was taken in the same thread (? I'd expect process, in the case of interprocess locks).\r\n\r\nI think the intent of the function is to return `true` if the process acquired the lock, or already had it, and `false` if it didn't have the lock already and failed to acquire it? Correct?\r\n\r\n\\* Or will it? or will it first try to construct a new `boost::interprocess::file_lock>(pathLockFile.string().c_str())` with the directory, then discard it when it cannot be inserted? (will that constructor raise an exception if the lock already exists?)\r\n\r\n**Edit:** I've tested this, and it seems \r\n- a second `LockDirectory` with the same directory and lock file name, from the same thread, returns `true`.\r\n- a second `LockDirectory` with the same directory and lock file name, from another thread within the same process, returns `true`.",
      "created_at" : "2018-02-13T11:46:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365243439",
      "id" : 365243439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T12:14:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365243439",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Also (as noted by goatpig on IRC) this function is currently not thread-safe. That's no issue right now for 0.16, I think, as this is only used by the init thread at init time, but will be with dynamic loading of wallets.",
      "created_at" : "2018-02-13T11:53:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365245110",
      "id" : 365245110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T11:56:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365245110",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@MeshCollider I've added a unit test, test_LockDirectory. Can you please verify I'm testing the intended behavior of the function?",
      "created_at" : "2018-02-13T13:13:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365262878",
      "id" : 365262878,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T13:13:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365262878",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "So this is interesting: my test already found a divergence between the behavior on Linux and Windows. \r\n\r\nOn Linux, \r\n- Another lock on the directory from the same thread succeeds\r\n- Another lock on the directory from a different thread within the same process succeeds\r\n\r\nOn Windows, both cases fail:\r\n```\r\ntest/util_tests.cpp(655): error: in \"util_tests/test_LockDirectory\": check LockDirectory(dirname, LOCKNAME) == true has failed [false != true]\r\ntest/util_tests.cpp(661): error: in \"util_tests/test_LockDirectory\": check threadresult == true has failed [false != true]\r\n```",
      "created_at" : "2018-02-13T14:02:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365275126",
      "id" : 365275126,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T14:02:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365275126",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> On Windows, both cases fail:\r\n\r\nI guess this is due to inconsistent behavior of try_lock. Probably best not to rely on this behavior. Maybe we should replace:\r\n\r\n```c++\r\nlock = locks.emplace(...).first->second;\r\nif (!lock->try_lock()) {\r\n    return false;\r\n}\r\n```\r\n\r\nwith something like:\r\n\r\n```c++\r\nauto inserted = locks.emplace(...);\r\nif (inserted.second && !inserted.first.second->try_lock()) {\r\n    locks.erase(inserted.first)\r\n    return false;\r\n}\r\n```",
      "created_at" : "2018-02-13T15:17:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365297403",
      "id" : 365297403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T15:17:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365297403",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> I guess this is due to inconsistent behavior of try_lock. Probably best not to rely on this behavior. Maybe we should replace:\r\n\r\nI agree  - I think we shouldn't insert locks that aren't held into the map at all. This makes it possible to use 'already in map' as early-out.\r\n\r\nWhile implementing and testing this, I ran into something really frustrating, I found the `FILE* file = fsbridge::fopen(pathLockFile, \"a\");` destroys the lock if it already exists! (but apparently, only if the current process holds it, not if another does, so it wipes the 'we own this lock' administration)",
      "created_at" : "2018-02-13T15:25:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365299935",
      "id" : 365299935,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T15:47:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365299935",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Pushed a new commit, which hopefully fixes the tests on windows:\r\n\r\n### util: Fix multiple use of LockDirectory\r\n    \r\nThis commit fixes problems with calling LockDirectory multiple times on the same directory, or from multiple threads.\r\n    \r\n- Protect the locks map using a mutex\r\n- Make sure that only locks that are successfully acquired (and when not probing) are inserted in the map\r\n- Open the lock file for appending only if we know we don't have the lock yet - The `FILE* file = fsbridge::fopen(pathLockFile, \"a\");` (reopening the file) wipes the 'we own this lock' administration.\r\n",
      "created_at" : "2018-02-13T16:00:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365311724",
      "id" : 365311724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T16:05:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365311724",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r167914138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167914138"
         }
      },
      "author_association" : "OWNER",
      "body" : "It think this explicit unlock is unnecessary now, as the lock will fall out of scope when `locks.emplace` is not called to move it to the map.",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-13T16:08:47Z",
      "diff_hunk" : "@@ -375,18 +375,33 @@ int LogPrintStr(const std::string &str)\n \n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    // A map that contains all the currently held directory locks. After\n+    // successful locking, these will be held here until the global\n+    // destructor cleans them up and thus automatically unlocks them.\n+    static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> locks;\n+    // Protect the map with a mutex\n+    static std::mutex cs;\n+    std::unique_lock<std::mutex> ulock(cs);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {\n             return false;\n         }\n         if (probe_only) {\n-            lock.unlock();\n+            lock->unlock();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r167914138",
      "id" : 167914138,
      "original_commit_id" : "0a671a733c4a47cc97b3b4e62bda007c71921c11",
      "original_position" : 33,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 96199130,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167914138",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r167966315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167966315"
         }
      },
      "author_association" : "NONE",
      "body" : "std::lock_guard should suffice for this",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-13T18:58:14Z",
      "diff_hunk" : "@@ -375,18 +375,32 @@ int LogPrintStr(const std::string &str)\n \n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    // A map that contains all the currently held directory locks. After\n+    // successful locking, these will be held here until the global\n+    // destructor cleans them up and thus automatically unlocks them.\n+    static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> locks;\n+    // Protect the map with a mutex\n+    static std::mutex cs;\n+    std::unique_lock<std::mutex> ulock(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r167966315",
      "id" : 167966315,
      "original_commit_id" : "cb80237c757faaec394866636bea126a89b2562e",
      "original_position" : 10,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 96259486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167966315",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/8334203?v=4",
         "events_url" : "https://api.github.com/users/bpay/events{/privacy}",
         "followers_url" : "https://api.github.com/users/bpay/followers",
         "following_url" : "https://api.github.com/users/bpay/following{/other_user}",
         "gists_url" : "https://api.github.com/users/bpay/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/bpay",
         "id" : 8334203,
         "login" : "bpay",
         "organizations_url" : "https://api.github.com/users/bpay/orgs",
         "received_events_url" : "https://api.github.com/users/bpay/received_events",
         "repos_url" : "https://api.github.com/users/bpay/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/bpay/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/bpay/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/bpay"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168027391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168027391"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe define TestOtherThread as a lambda instead of an external function. TestOther code would seem easier to understand in the context where it launches instead of out here. Also this would allow test case to be self contained and not need external LOCKNAME/TestOther declarations.\r\n",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-13T22:46:25Z",
      "diff_hunk" : "@@ -603,4 +607,71 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static const std::string LOCKNAME = \".lock\";\n+\n+static void TestOtherThread(fs::path dirname, bool *result)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168027391",
      "id" : 168027391,
      "original_commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "original_position" : 17,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 96329108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168027391",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168091131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168091131"
         }
      },
      "author_association" : "OWNER",
      "body" : "Conceptually I do prefer (especially) the TestOtherProcess code to be in a self-contained function instead of in-line, because the stuff runs in a separate process. Also making the separate-process test work on windows (not going to do so in this pull) would involve some factoring in that direction anyhow.\r\nIf the LOCKNAME constant is a problem it could be passed in as parameter.\r\n",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-14T07:08:40Z",
      "diff_hunk" : "@@ -603,4 +607,71 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static const std::string LOCKNAME = \".lock\";\n+\n+static void TestOtherThread(fs::path dirname, bool *result)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168091131",
      "id" : 168091131,
      "in_reply_to_id" : 168027391,
      "original_commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "original_position" : 17,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 96400641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168091131",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168093502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168093502"
         }
      },
      "author_association" : "OWNER",
      "body" : "But yeah I do see the argument for making it self-contained, too. Really not sure here...\r\n\r\nEdit: however, unlike for the thread, inlining TestOtherProcess won't put the code in a context where it's easier to understand, but at the beginning of the function in ` fork()` else.",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-14T07:26:29Z",
      "diff_hunk" : "@@ -603,4 +607,71 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static const std::string LOCKNAME = \".lock\";\n+\n+static void TestOtherThread(fs::path dirname, bool *result)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168093502",
      "id" : 168093502,
      "in_reply_to_id" : 168027391,
      "original_commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "original_position" : 17,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 96403286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168093502",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "added commit:\r\n- e548d69: lockname is a parameter to inner functions instead of a constant\r\n\r\nsquashed e548d69 [2018_01_openbsd_util_fix_v0](https://github.com/laanwj/bitcoin/tree/2018_01_openbsd_util_fix_v0) -> 6a0a3d7",
      "created_at" : "2018-02-14T07:48:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365522517",
      "id" : 365522517,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-14T07:48:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365522517",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Hmm though it compiles, the new test is failing on OpenBSD, which was the original goal of this PR. Talking about scope drift. Will investigate :)\r\n```\r\nunknown location(0): fatal error in \"test_LockDirectory\": signal: generated by kill() (or family); uid=0; pid=0\r\ntest/util_tests.cpp(666): last checkpoint\r\n```\r\n\r\nFixed: this had to do with different handling of SIGCHLD on BSD versus Linux.",
      "created_at" : "2018-02-14T08:11:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365527136",
      "id" : 365527136,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-14T08:45:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365527136",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168311689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168311689"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe note that this just working around the lack of [std::map::try_emplace](http://en.cppreference.com/w/cpp/container/map/try_emplace), which was added in c++17.\r\n\r\nEdit: Heh, they even use this exact construction as an example:\r\n> Unlike insert or emplace, these functions do not move from rvalue arguments if the insertion does not happen, which makes it easy to manipulate maps whose values are move-only types, such as std::map<std::string, std::unique_ptr<foo>>.",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-14T21:14:54Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168311689",
      "id" : 168311689,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 19,
      "path" : "src/util.cpp",
      "position" : 19,
      "pull_request_review_id" : 96659203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168311689",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168360648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168360648"
         }
      },
      "author_association" : "MEMBER",
      "body" : "May as well bail early if the fopen fails, we're just going to end up in a boost exception.",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T01:16:14Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168360648",
      "id" : 168360648,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 26,
      "path" : "src/util.cpp",
      "position" : 26,
      "pull_request_review_id" : 96714490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168360648",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168360991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168360991"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I realize it isn't a regression, but this really needs to be logged.",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T01:18:42Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {\n             return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168360991",
      "id" : 168360991,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 34,
      "path" : "src/util.cpp",
      "position" : 34,
      "pull_request_review_id" : 96714490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168360991",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168361288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168361288"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In the probe_only case, this won't be unlocked when ```lock``` destructs, as interprocess::file_lock isn't RAII. Was it intended to work that way?",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T01:20:46Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168361288",
      "id" : 168361288,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 33,
      "path" : "src/util.cpp",
      "position" : 33,
      "pull_request_review_id" : 96714490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168361288",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I've added a unit test, test_LockDirectory. Can you please verify I'm testing the intended behavior of the function?\r\n\r\nLGTM, yep. Ugh OS inconsistencies make things like this so fun. Code changes look good though. cfields changes too, utACK",
      "created_at" : "2018-02-15T02:05:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365805878",
      "id" : 365805878,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-15T02:05:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365805878",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168415708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168415708"
         }
      },
      "author_association" : "OWNER",
      "body" : "Eh are you sure? the whole intent of keeping the things in a std::map is that they get unlocked when they are destructed. Anecdotally this seems to work on windows, at least, the call to `ReleaseDirectoryLocks()` seems to release the locks. I can try further.\r\n\r\nEdit: shouldn't `-daemon` be broken if true? It's what uses `probe_only` to probe (acquire and release) the lock from the parent process, before getting it in the child process. At least on Linux it seems to work...",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T09:17:29Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168415708",
      "id" : 168415708,
      "in_reply_to_id" : 168361288,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 33,
      "path" : "src/util.cpp",
      "position" : 33,
      "pull_request_review_id" : 96775964,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168415708",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168416118"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168416118"
         }
      },
      "author_association" : "OWNER",
      "body" : "In both cases it's used, it's logged in the caller function, so I think that is redundant?",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T09:19:10Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {\n             return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168416118",
      "id" : 168416118,
      "in_reply_to_id" : 168360991,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 34,
      "path" : "src/util.cpp",
      "position" : 34,
      "pull_request_review_id" : 96776437,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168416118",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168416619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168416619"
         }
      },
      "author_association" : "OWNER",
      "body" : "I played with that thought, but decided against it - that would just add extra code for an error case that is handled by boost, later?",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T09:21:15Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168416619",
      "id" : 168416619,
      "in_reply_to_id" : 168360648,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 26,
      "path" : "src/util.cpp",
      "position" : 26,
      "pull_request_review_id" : 96777008,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168416619",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Now that I had to add `ReleaseDirectoryLocks()` for testing anyhow, I'm going to extend the cross-process test to see if locks are given up as expected when the map is cleared, or when using probe-only.",
      "created_at" : "2018-02-15T09:49:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365875935",
      "id" : 365875935,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-15T10:24:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365875935",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "In the new commit I added unit tests for lock probing, to see if `ReleaseDirectoryLocks()` succesfully releases the lock, and whether exiting the child prices releases the lock. At least locally this all passes, let's see what Travis makes of it.\r\n",
      "created_at" : "2018-02-15T10:18:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365883346",
      "id" : 365883346,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-15T10:18:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365883346",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168435190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168435190"
         }
      },
      "author_association" : "OWNER",
      "body" : "The documentation is confusing here (http://www.boost.org/doc/libs/1_66_0/doc/html/interprocess/synchronization_mechanisms.html#interprocess.synchronization_mechanisms.file_lock):\r\n\r\n> A file locking is a class that has process lifetime. This means that if a process holding a file lock ends or crashes, the operating system will automatically unlock it. This feature is very useful in some situations where we want to assure automatic unlocking even when the process crashes and avoid leaving blocked resources in the system. A file lock is constructed using the name of the file as an argument:\r\n\r\nThis would suggest we don't even need to hold on to the `file_lock` after locking them, as the locks always have process lifetime. But the test outcomes seem to suggest RAII behavior.\r\n",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T10:31:19Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168435190",
      "id" : 168435190,
      "in_reply_to_id" : 168361288,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 33,
      "path" : "src/util.cpp",
      "position" : 33,
      "pull_request_review_id" : 96798642,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168435190",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168454821"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168454821"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Grr, the \"theuni requested changes\" is a bit overstated... There are a few fixes here and I can't produce any real-world issues, so utACK from me for 0.16 for the sake of not dragging it out.\r\n\r\n----\r\n\r\nFurther discussion for master, or 0.16 if you still feel like messing with it:\r\n\r\n\r\nStrange, your tests results (RAII behavior) don't line up with what I see from the docs/code. I'll play with tests.\r\n\r\nYou mentioned:\r\n> The `FILE* file = fsbridge::fopen(pathLockFile, \"a\");`  wipes the 'we own this lock' administration\r\n\r\nAnd from the Boost docs:\r\n> In POSIX, when two file descriptors are used to lock a file if a descriptor is closed, all file locks set by the calling process are cleared. \r\n\r\nIs it possible that it was the fclose rather than the fopen? Because that would explain everything neatly, I think. In the ```probe_only``` case, You create a lock, lock it, then destroy it. Then on the next invocation you fopen/fclose it, which basically gives a clean start before you create a new lock, lock again, etc.\r\n\r\nTo be clear, my concern is that in the near future we might adapt LockDirectory() and add UnlockDirectory() for some feature like multi-wallet-dirs, only to be hit with a hard-to-diagnose bug when UnlockDirectory() quietly doesnt' work as intended.\r\n\r\nThe [boost docs](http://www.boost.org/doc/libs/1_66_0/doc/html/interprocess/synchronization_mechanisms.html#interprocess.synchronization_mechanisms.file_lock.file_lock_scoped_locks) suggest using RAII generics here:\r\n> scoped_lock and sharable_lock can be used to make file locking easier in the presence of exceptions, just like with mutexes.\r\n\r\nAnd file_lock's destructor is pretty straightforward, I don't see how it could be doing any unlocking:\r\n```c++\r\n// m_file_hnd: typedef int (void* for win)\r\n// ipcdetail::close_file: ::close (CloseHandle() for win)\r\ninline file_lock::~file_lock()\r\n{\r\n   if(m_file_hnd != ipcdetail::invalid_file()){\r\n      ipcdetail::close_file(m_file_hnd);\r\n      m_file_hnd = ipcdetail::invalid_file();\r\n   }\r\n}\r\n```",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T11:58:21Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168454821",
      "id" : 168454821,
      "in_reply_to_id" : 168361288,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 33,
      "path" : "src/util.cpp",
      "position" : 33,
      "pull_request_review_id" : 96821589,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168454821",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168456466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168456466"
         }
      },
      "author_association" : "OWNER",
      "body" : "> Is it possible that it was the fclose rather than the fopen? Because that would explain everything neatly, I think. In the probe_only case, You create a lock, lock it, then destroy it. Then on the next invocation you fopen/fclose it, which basically gives a clean start before you create a new lock, lock again, etc.\r\n\r\nWhoa, sneaky. Yes, that's possible. Let's try the tests that by using an already-existing directory with an existing lock file, without that `fopen` part.",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T12:05:58Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168456466",
      "id" : 168456466,
      "in_reply_to_id" : 168361288,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 33,
      "path" : "src/util.cpp",
      "position" : 33,
      "pull_request_review_id" : 96823468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T15:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168456466",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> Whoa, sneaky. Yes, that's possible. Let's try the tests that by using an already-existing directory with an existing lock file, without that fopen part.\r\n\r\nTo check this, I applied the following patch, removing all manual file and directory handling:\r\n```patch\r\ndiff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp\r\nindex 4b2da3e..80d76e6 100644\r\n--- a/src/test/util_tests.cpp\r\n+++ b/src/test/util_tests.cpp\r\n@@ -647,7 +647,7 @@ static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\r\n \r\n BOOST_AUTO_TEST_CASE(test_LockDirectory)\r\n {\r\n-    fs::path dirname = fs::temp_directory_path() / fs::unique_path();\r\n+    fs::path dirname(\"/tmp/locktest\");\r\n     const std::string lockname = \".lock\";\r\n #ifndef WIN32\r\n     // Revert SIGCHLD to default, otherwise boost.test will catch and fail on\r\n@@ -667,10 +667,6 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\r\n     }\r\n     BOOST_CHECK_EQUAL(close(fd[0]), 0); // Parent: close child end\r\n #endif\r\n-    // Lock on non-existent directory should fail\r\n-    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), false);\r\n-\r\n-    fs::create_directories(dirname);\r\n \r\n     // Probing lock on new directory should succeed\r\n     BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\r\n@@ -730,7 +726,6 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\r\n #endif\r\n     // Clean up\r\n     ReleaseDirectoryLocks();\r\n-    fs::remove_all(dirname);\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\ndiff --git a/src/util.cpp b/src/util.cpp\r\nindex dcf7ed3..aa29a04 100644\r\n--- a/src/util.cpp\r\n+++ b/src/util.cpp\r\n@@ -392,10 +392,6 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\r\n         return true;\r\n     }\r\n \r\n-    // Create empty lock file if it doesn't exist.\r\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\r\n-    if (file) fclose(file);\r\n-\r\n     try {\r\n         auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\r\n         if (!lock->try_lock()) {\r\n```\r\nThen manually created the lock directory and file:\r\n```bash\r\nmkdir /tmp/locktest && touch /tmp/locktest/.lock\r\n```\r\nResult:\r\n```\r\n$ test/test_bitcoin --run_test=util_tests/test_LockDirectory\r\nRunning 1 test case...\r\n\r\n*** No errors detected\r\n```\r\n... yep, it just works. Curious.\r\n\r\n> There are a few fixes here and I can't produce any real-world issues, so utACK from me for 0.16 for the sake of not dragging it out.\r\n\r\nIf you can't find a problem with my methodology above, I agree, let's get back to this discussion after 0.16.",
      "created_at" : "2018-02-15T12:38:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365915178",
      "id" : 365915178,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-15T12:38:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365915178",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`make check` is still happy on MacOS (46d46323).",
      "created_at" : "2018-02-15T13:19:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365924663",
      "id" : 365924663,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-15T13:19:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365924663",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "squashed into two commits (one that makes the changes to LockDatadirectory, one that adds the unit test)\r\n46d4632 [2018_01_openbsd_util_fix_v1](https://github.com/laanwj/bitcoin/tree/2018_01_openbsd_util_fix_v1) Ã¢ÂÂ 1d4cbd2",
      "created_at" : "2018-02-15T15:27:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365961484",
      "id" : 365961484,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-15T15:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365961484",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168541842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168541842"
         }
      },
      "author_association" : "OWNER",
      "body" : "I'm a bit confused here, to be honest. Does `try_emplace` avoid constructing the object entirely if it already exists in the map?",
      "commit_id" : "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "created_at" : "2018-02-15T17:02:54Z",
      "diff_hunk" : "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168541842",
      "id" : 168541842,
      "in_reply_to_id" : 168311689,
      "original_commit_id" : "2207709e6ec18eaac3a3d14d0e00e428cbf79e2a",
      "original_position" : 19,
      "path" : "src/util.cpp",
      "position" : 19,
      "pull_request_review_id" : 96927280,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-15T17:02:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168541842",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
