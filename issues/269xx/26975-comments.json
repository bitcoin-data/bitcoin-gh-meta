[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [chinggg](https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1412201362) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n",
      "created_at" : "2023-01-26T16:57:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1405309040",
      "id" : 1405309040,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
      "node_id" : "IC_kwDOABII585Tw1Bw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1405309040/reactions"
      },
      "updated_at" : "2023-02-01T15:00:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1405309040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nice.\r\n\r\nRelated:\r\n* https://github.com/bitcoin/bitcoin/issues/17657\r\n* https://github.com/bitcoin/bitcoin/issues/20837\r\n\r\n\r\nQuestions:\r\n\r\n* The fuzz framework was designed to be agnostic of the underlying fuzz engine. Does libprotobuf require libfuzzer?\r\n* How does this integrate into the fuzzing farms (Oss-Fuzz, and the ones based on fuzz/test_runner.py --generate)? we'd likely have to duplicate all fuzzing infra (qa-assets, coverage, CPU farms, ...)?\r\n* How does this deal with fuzzing input that are impossible to represent in protbuf? For example I could imagine a target that uses CallOneOf and conditionally deserializes inside one of its branches to not be representable, at least trivially?\r\n* How does this deal where the target code and the proto format are mismatching?\r\n* What you expect from devs: Should they write a proto fuzz test or a \"normal\" one, or both?\r\n* Do you have real world data on two identical targets, where the protbuf one finds a bug earlier?",
      "created_at" : "2023-01-26T18:43:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1405442604",
      "id" : 1405442604,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
      "node_id" : "IC_kwDOABII585TxVos",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1405442604/reactions"
      },
      "updated_at" : "2023-01-26T18:45:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1405442604",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for linking the issues, i have not seen those before.\r\n\r\n---\r\n\r\n> The fuzz framework was designed to be agnostic of the underlying fuzz engine. Does libprotobuf require libfuzzer?\r\n\r\nNot necessarily, I think LPM should be compatible with any fuzzing engine that has support for something similar to libFuzzer's custom mutator API (e.g. afl++: https://aflplus.plus/docs/custom_mutators/, they even mention LPM in these docs). Writing a wrapper to make that work should be easy enough. Out of the box however, there is only support for libFuzzer.\r\n\r\n> How does this integrate into the fuzzing farms (Oss-Fuzz, and the ones based on fuzz/test_runner.py --generate)?\r\n\r\nI think technically, there should be no reason why this shouldn't just work(tm) on any of the fuzzing farms. As long as libFuzzer is used by the farm, it doesn't need to know about anything protobuf/LPM specific. There are multiple projects on oss-fuzz that make use of LPM (e.g. llvm, envoy). So integration should be quite straight forward, like our other fuzz targets.\r\n\r\n> we'd likely have to duplicate all fuzzing infra (qa-assets, coverage, CPU farms, ...)?\r\n\r\nI don't think so, the corpora could still live in qa-assets and creating coverage reports should still be the same. If the proto fuzzers end up being in separate binaries then all we need to do is tell our fuzzing infra about those binaries (that's at least my understanding, you know more about our infra). I am certainly happy to help make this work with our current infra, if we decide to go this route.\r\n\r\n> How does this deal with fuzzing input that are impossible to represent in protbuf? For example I could imagine a target that uses CallOneOf and conditionally deserializes inside one of its branches to not be representable, at least trivially?\r\n\r\nThe proto fuzzers are intended to only receive well formed protobufs as inputs (afaict it ignores any inputs that don't match the input grammar) and the custom mutator makes sure of that. You wouldn't use `CallOneOf` the way you are describing (at least if I am understanding what you mean correctly). You can use `FuzzedDataProvider` with in a proto fuzz target by having raw bytes in the grammar definition (see the version handshake example, it still uses the fuzzed sock).\r\n\r\n> How does this deal where the target code and the proto format are mismatching?\r\n\r\nI don't understand the question, could you give an example?\r\n\r\n> What you expect from devs: Should they write a proto fuzz test or a \"normal\" one, or both?\r\n\r\nDon't have a solid framework on this yet but some thoughts.\r\n\r\n- It can definitely make sense to do both in some cases. A non-bitcoin example would be fuzzing a json parser, just taking the raw bytes from the fuzzer and interpreting that as a json string has value (i.e malformed garbage shouldn't cause any bugs), however that rarely produces valid (complex) json objects which is where LPM could come in (creating a grammar for json as a protobuf definition is quite easy see: https://source.chromium.org/chromium/chromium/src/+/main:testing/libfuzzer/proto/json.proto).\r\n- For simple targets where non-complex and few inputs are required, input splitting with `FuzzedDataProvider` is probably preferable, however if we have other targets that consume the same/similar inputs it could make sense to use LPM instead (to make sharing of inputs easier).\r\n- Any target that requires complex inputs (e.g. blocks, transactions, sequences of p2p messages, etc.) is likely to be better suited for LPM. That being said, I do think that targets like `process_message(s)` still make sense even if we have LPM targets for the same code, as they are really simple.\r\n- Any target where we might want to evolve the input grammar could be a good usecase for LPM, so that previous inputs aren't invalidated.\r\n\r\n> Do you have real world data on two identical targets, where the protbuf one finds a bug earlier?\r\n\r\nNot yet, gonna try to code up an example.",
      "created_at" : "2023-01-27T14:15:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1406564847",
      "id" : 1406564847,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
      "node_id" : "IC_kwDOABII585T1nnv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406564847/reactions"
      },
      "updated_at" : "2023-01-27T14:15:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406564847",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't understand the question, could you give an example?\r\n\r\nAssuming the proto format is `message FuzzOptions { optional int64 max_size_bytes = 1; }`, but the code queries for `optional max_bytes`. I hope this will result in a compile failure and not a run-time `std::nullopt`?\r\n\r\n",
      "created_at" : "2023-01-27T14:36:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1406589419",
      "id" : 1406589419,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
      "node_id" : "IC_kwDOABII585T1tnr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406589419/reactions"
      },
      "updated_at" : "2023-01-27T14:36:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406589419",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Also, I don't see how this will make it easier to share inputs without more glue code. \r\n\r\nAssume one target is `message _ {required bool _; required Tx _;}` and another target doesn't have the `bool`, so it seems the two targets can't share the inputs, unless by accident or if some translator is written?",
      "created_at" : "2023-01-27T14:41:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1406595165",
      "id" : 1406595165,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
      "node_id" : "IC_kwDOABII585T1vBd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406595165/reactions"
      },
      "updated_at" : "2023-01-27T14:41:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406595165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Assuming the proto format is message FuzzOptions { optional int64 max_size_bytes = 1; }, but the code queries for optional max_bytes. I hope this will result in a compile failure and not a run-time std::nullopt?\r\n\r\nYes this would cause a compile failure. The proto definitions are compiled to c++, so you can only actually use what's defined in your proto.\r\n\r\n> Also, I don't see how this will make it easier to share inputs without more glue code.\r\n>\r\n> Assume one target is message _ {required bool _; required Tx _;} and another target doesn't have the bool, so it seems the two targets can't share the inputs, unless by accident or if some translator is written?\r\n\r\nYes for sharing we need some sort of glue code, but I think that could be a very generic script that takes two arbitrary proto definitions A and B and their corpora, and then copies values of compatible types from A's corpus into B's. LPM does something similar in its custom cross over function.",
      "created_at" : "2023-01-27T16:45:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1406763984",
      "id" : 1406763984,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
      "node_id" : "IC_kwDOABII585T2YPQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406763984/reactions"
      },
      "updated_at" : "2023-01-27T16:45:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406763984",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26975#discussion_r1089192274"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26975"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089192274"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Is it possible to de-duplicate proto sections (for example common stuff like a transaction)?",
      "commit_id" : "b85bb8a30bce814775e384a1878141181c625910",
      "created_at" : "2023-01-27T16:49:06Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+syntax = \"proto2\";\n+\n+package proto_fuzz;\n+\n+message PrevOut {\n+  // Since we fill in the txid on transactions via post processing, we enable\n+  // the fuzzer to copy those txids into PrevOuts.\n+  required string txid = 1;\n+  required uint32 n = 2;\n+}\n+\n+message Script {\n+  required bytes raw = 1;\n+}\n+\n+message TxInput {\n+  required PrevOut prev_out = 1;\n+  required Script script_sig = 2;\n+  required uint32 sequence = 3;\n+\n+  // scriptWitness\n+  repeated bytes witness_stack = 4;\n+}\n+\n+message TxOutput {\n+  required int64 value = 1;\n+  required Script script_pub_key = 2;\n+}\n+\n+message Transaction {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#discussion_r1089192274",
      "id" : 1089192274,
      "line" : 30,
      "node_id" : "PRRC_kwDOABII585A68FS",
      "original_commit_id" : "b85bb8a30bce814775e384a1878141181c625910",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/fuzz/proto/atmp.proto",
      "position" : 30,
      "pull_request_review_id" : 1273058024,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26975",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089192274/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-27T16:49:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089192274",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26975#discussion_r1089193008"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26975"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089193008"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Would be nice to only have one binary",
      "commit_id" : "b85bb8a30bce814775e384a1878141181c625910",
      "created_at" : "2023-01-27T16:49:52Z",
      "diff_hunk" : "@@ -13,6 +16,9 @@ endif\n TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n FUZZ_BINARY=test/fuzz/fuzz$(EXEEXT)\n+PROTO_FUZZ_ATMP_BINARY=test/fuzz/proto/atmp$(EXEEXT)\n+PROTO_FUZZ_VERSION_BINARY=test/fuzz/proto/version$(EXEEXT)\n+PROTO_FUZZ_VALIDATION_BINARY=test/fuzz/proto/validation$(EXEEXT)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#discussion_r1089193008",
      "id" : 1089193008,
      "line" : 21,
      "node_id" : "PRRC_kwDOABII585A68Qw",
      "original_commit_id" : "b85bb8a30bce814775e384a1878141181c625910",
      "original_line" : 21,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/Makefile.test.include",
      "position" : 16,
      "pull_request_review_id" : 1273058024,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26975",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089193008/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-27T16:49:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089193008",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26975#discussion_r1089194872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26975"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089194872"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, afaik you we could have a sort of library of proto definitions that can be reused.",
      "commit_id" : "b85bb8a30bce814775e384a1878141181c625910",
      "created_at" : "2023-01-27T16:51:37Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+syntax = \"proto2\";\n+\n+package proto_fuzz;\n+\n+message PrevOut {\n+  // Since we fill in the txid on transactions via post processing, we enable\n+  // the fuzzer to copy those txids into PrevOuts.\n+  required string txid = 1;\n+  required uint32 n = 2;\n+}\n+\n+message Script {\n+  required bytes raw = 1;\n+}\n+\n+message TxInput {\n+  required PrevOut prev_out = 1;\n+  required Script script_sig = 2;\n+  required uint32 sequence = 3;\n+\n+  // scriptWitness\n+  repeated bytes witness_stack = 4;\n+}\n+\n+message TxOutput {\n+  required int64 value = 1;\n+  required Script script_pub_key = 2;\n+}\n+\n+message Transaction {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#discussion_r1089194872",
      "id" : 1089194872,
      "in_reply_to_id" : 1089192274,
      "line" : 30,
      "node_id" : "PRRC_kwDOABII585A68t4",
      "original_commit_id" : "b85bb8a30bce814775e384a1878141181c625910",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/fuzz/proto/atmp.proto",
      "position" : 30,
      "pull_request_review_id" : 1273063041,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26975",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089194872/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-01-27T16:51:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089194872",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nIt's great to see a draft for structure-aware fuzzing. When I made fuzz targets for transaction handling, I heavily used APIs in `FuzzDataProvider` to create transactions with random inputs/outputs. I think it will be easier to create high-level objects with the help of `libprotobuf-mutator`.\r\n\r\nI have a question about the generation of `.proto` definitions. It seems that these definitions should exactly represent corresponding C++ class definitions. I don't know if there are robust ways to convert C++ class definition to protobuf definitions. If the `.proto` files are manually written, developers should pay attention to ensure their correctness and remember to maintain them when updating C++ code. Nevertheless, I think the protocol of Bitcoin may not change frequently so proto definitions of fundamental concepts like transaction don't require change.",
      "created_at" : "2023-02-01T15:00:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1412201362",
      "id" : 1412201362,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
      "node_id" : "IC_kwDOABII585ULHuS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412201362/reactions"
      },
      "updated_at" : "2023-02-01T15:11:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412201362",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24590067?v=4",
         "events_url" : "https://api.github.com/users/chinggg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/chinggg/followers",
         "following_url" : "https://api.github.com/users/chinggg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/chinggg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/chinggg",
         "id" : 24590067,
         "login" : "chinggg",
         "node_id" : "MDQ6VXNlcjI0NTkwMDY3",
         "organizations_url" : "https://api.github.com/users/chinggg/orgs",
         "received_events_url" : "https://api.github.com/users/chinggg/received_events",
         "repos_url" : "https://api.github.com/users/chinggg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/chinggg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/chinggg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/chinggg"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It seems that these definitions should exactly represent corresponding C++ class definitions. I don't know if there are robust ways to convert C++ class definition to protobuf definitions. If the .proto files are manually written, developers should pay attention to ensure their correctness and remember to maintain them when updating C++ code. \r\n\r\nThey do not need to represent the exact c++ classes, although that can make sense when you require the c++ types as input. For example, the `Script` message type in the proto definitions in this PR could be more expressive than a byte array. Even though the `CScript` c++ type is effectively just a byte array, it would be possible to express a grammar for Script (the language) (or just a subset thereof) as a proto.\r\n\r\nUsually these targets will have one or more conversion functions from protobuf to c++ types. Should the c++ types change, then the compiler would likely fail on the conversion functions, reminding the devs to update/change the proto definitions.",
      "created_at" : "2023-02-02T12:10:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1413639550",
      "id" : 1413639550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
      "node_id" : "IC_kwDOABII585UQm1-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1413639550/reactions"
      },
      "updated_at" : "2023-02-02T12:10:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1413639550",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added some rough build instructions to the PR description, LPM is no longer included as a subtree.",
      "created_at" : "2023-02-02T16:21:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#issuecomment-1414009495",
      "id" : 1414009495,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
      "node_id" : "IC_kwDOABII585USBKX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1414009495/reactions"
      },
      "updated_at" : "2023-02-02T16:21:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1414009495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26975#discussion_r1094761999"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26975"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094761999"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have de-duplicated the common definitions in the latest push.",
      "commit_id" : "90504f005dd15e7bfb6c3fae7d917eccb3b0f61a",
      "created_at" : "2023-02-02T16:21:33Z",
      "diff_hunk" : "@@ -0,0 +1,81 @@\n+syntax = \"proto2\";\n+\n+package proto_fuzz;\n+\n+message PrevOut {\n+  // Since we fill in the txid on transactions via post processing, we enable\n+  // the fuzzer to copy those txids into PrevOuts.\n+  required string txid = 1;\n+  required uint32 n = 2;\n+}\n+\n+message Script {\n+  required bytes raw = 1;\n+}\n+\n+message TxInput {\n+  required PrevOut prev_out = 1;\n+  required Script script_sig = 2;\n+  required uint32 sequence = 3;\n+\n+  // scriptWitness\n+  repeated bytes witness_stack = 4;\n+}\n+\n+message TxOutput {\n+  required int64 value = 1;\n+  required Script script_pub_key = 2;\n+}\n+\n+message Transaction {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975#discussion_r1094761999",
      "id" : 1094761999,
      "in_reply_to_id" : 1089192274,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585BQL4P",
      "original_commit_id" : "b85bb8a30bce814775e384a1878141181c625910",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/fuzz/proto/atmp.proto",
      "position" : null,
      "pull_request_review_id" : 1281401925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26975",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094761999/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-02T16:21:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094761999",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   }
]
