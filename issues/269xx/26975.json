{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "We currently use `FuzzedDataProvider` and a suite of `Consume*` functions for targets that require input formats other than a byte array. This approach is good for a lot of targets but has issues when it comes to more complex input formats.\r\n* The input corpora consist of custom input serialization formats, which means that the inputs have no meaning outside of the target itself. Seeding or sharing inputs is basically impossible when dealing with custom formats per target, however mutation based fuzzers are particularly effective when provided with an initial seed corpus (coverage guided fuzzers like libFuzzer are able to start from an empty corpus but that is less effective).\r\n* The fuzzer is not able to make useful mutations efficiently, because it only deals with raw bytes and is not aware of the input format. Fuzzers will still be able to create useful mutations, however only after many iterations.\r\n* Changing the target often leads to invalidation of the existing input corpus. For example, if the target is modified to interpret the input data in a more useful way, then the previous input corpus is invalidated, as the serialization format is modified.\r\n\r\nlibFuzzer provides an interface for dealing with structured input formats: `LLVMFuzzerCustomMutator` and `LLVMFuzzerCustomCrossOver`. Using this interface it is possible to curate input corpora with highly structured input formats (e.g. png files, json, encrypted, compressed, base64 encoded). This is described [here](https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md) in detail.\r\n\r\n[libprotobuf-mutator](https://github.com/google/libprotobuf-mutator) is a library for mutating protocol buffers, that also provides an interface around libFuzzer's custom mutator API. It allows us to specify input grammars using protobufs and exclusively provides useful mutations (i.e. mutations of the specified input format).\r\n\r\nUsing `libprofobuf-mutator` can address most of the issues of the  Â´FuzzedDataProvider` approach.\r\n* Input corpora exclusively consist of valid protobuf serializations. Meaning that seeding of corpora becomes quite easy, as all you need to do is provide your initial test cases in the protobuf format (i.e. have a script that produces useful initial test cases, similar to `feature_taproot --dumptests` except that it should spit out protobufs instead of json objects). Sharing inputs between targets becomes much easier (e.g. if two targets make use of transactions as inputs, then copying the transactions from one targets corpus to the other can easily be automated).\r\n* By default the protobufs are serialized into a human readable format, which makes debugging of crashes easier and also enables hand-rolling (initial) test cases.\r\n* IMO, writing protobuf definitions to define input grammars is very easy and maintainable. Looking at the protobuf definition gives an immediate overview of the input type a target takes (vs having to understand the combination `FuzzedDataProvider` and `Consume*` calls).\r\n* Modifying the target is possible without invalidating the existing inputs.\r\n* (We could likely get rid of quite a few of our `Consume*` functions meaning that there is less test only code to maintain.)\r\n\r\nI have provided three examples in this PR that make use of `libprotobuf-mutator`.\r\n- Fuzzing mempool acceptance\r\n- Fuzzing the version handshake\r\n- Fuzzing validation (ProcessNewBlock, ProcessNewBlockHeaders, ProcessTransaction)\r\n\r\nFurther reading/watching:\r\n- https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md\r\n- https://github.com/google/fuzzing/blob/master/docs/split-inputs.md\r\n-  https://www.youtube.com/watch?v=U60hC16HEDY \r\n- https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc.\r\n\r\n## Building this PR\r\n\r\nFirst clone and build [libprotobuf-mutator](https://github.com/google/libprotobuf-mutator), instruction can be found in their readme.\r\n\r\nThen compile the protobuf definitions in this PR to c++:\r\n```sh\r\ncd src/test/fuzz/proto/\r\nprotoc *.proto --cpp_out .\r\n```\r\n\r\nNext configure and build the proto fuzzer binaries:\r\n```sh\r\n./configure --enable-fuzz --enable-proto-fuzz --with-sanitizers=fuzzer && make\r\n```\r\nIf you did not install the libprotobuf-mutator libraries and headers onto your system, then you might have to set `LDFLAGS` and `CPPFLAGS` to point to your local LPM build.\r\n\r\nIf you manage to build and run the fuzzers, you can inspect the generated inputs with `cat` or any editor of your choosing.\r\n\r\n---\r\n\r\n*Looking for conceptual review*",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 9,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975/comments",
   "created_at" : "2023-01-26T16:57:19Z",
   "draft" : true,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975",
   "id" : 1558463688,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585Im6rP",
   "number" : 26975,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/26975.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26975",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/26975.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26975"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 1,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 1,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975/timeline",
   "title" : "[PoC] Structure aware fuzzing with libprotobuf-mutator",
   "updated_at" : "2023-02-02T16:21:34Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26975",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
      "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
      "followers_url" : "https://api.github.com/users/dergoegge/followers",
      "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/dergoegge",
      "id" : 8077169,
      "login" : "dergoegge",
      "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
      "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
      "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
      "repos_url" : "https://api.github.com/users/dergoegge/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/dergoegge"
   }
}
