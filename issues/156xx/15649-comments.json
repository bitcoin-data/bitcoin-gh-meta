[
   {
      "author_association" : "MEMBER",
      "body" : "Benchmark compared with dbl-SHA256 (Intel x86 and ARM64 both **with enabled and supported SHA256 asm**)\r\n\r\nEDIT: **Attention**, those benchmark test a decryption that fails the MAC test (that's why its faster).\r\n```\r\ni7-8700 CPU @ 3.20GHz\r\n# Benchmark, evals, iterations, total, min, max, median\r\nCHACHA20_POLY1305_AEAD_1MB_DECRYPT, 5, 340, 0.974806, 0.000571213, 0.000575483, 0.000573147\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT, 5, 340, 3.45589, 0.00200816, 0.00206032, 0.00203075\r\nCHACHA20_POLY1305_AEAD_256BYTES_DECRYPT, 5, 250000, 0.353133, 2.7904e-07, 2.87463e-07, 2.81879e-07\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT, 5, 250000, 0.844029, 6.69314e-07, 6.84823e-07, 6.73278e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_DECRYPT, 5, 500000, 0.445114, 1.74585e-07, 1.79382e-07, 1.79109e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT, 5, 500000, 0.756779, 3.02316e-07, 3.03721e-07, 3.02433e-07\r\nHASH_1MB, 5, 340, 4.05031, 0.00234962, 0.00239718, 0.00238811\r\nHASH_256BYTES, 5, 250000, 1.13878, 9.01793e-07, 9.20163e-07, 9.1145e-07\r\nHASH_64BYTES, 5, 500000, 1.19347, 4.71828e-07, 4.8229e-07, 4.76693e-07\r\n```\r\n\r\n```\r\nRK3399 64-bit Hexa Core A72/A53 CPU (aarch64)\r\nCPU Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32\r\nCHACHA20_POLY1305_AEAD_1MB_DECRYPT, 5, 340, 4.77829, 0.00277495, 0.00295277, 0.00277533\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT, 5, 340, 12.8776, 0.00757471, 0.00757529, 0.00757509\r\nCHACHA20_POLY1305_AEAD_256BYTES_DECRYPT, 5, 250000, 1.45431, 1.159e-06, 1.16777e-06, 1.16348e-06\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT, 5, 250000, 3.15133, 2.51743e-06, 2.5251e-06, 2.52047e-06\r\nCHACHA20_POLY1305_AEAD_64BYTES_DECRYPT, 5, 500000, 1.64303, 6.5714e-07, 6.57362e-07, 6.57166e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT, 5, 500000, 2.84952, 1.13826e-06, 1.14302e-06, 1.13909e-06\r\nHASH_1MB, 5, 340, 11.9929, 0.00705427, 0.00705483, 0.00705473\r\nHASH_256BYTES, 5, 250000, 3.44999, 2.75893e-06, 2.76146e-06, 2.75963e-06\r\nHASH_64BYTES, 5, 500000, 3.68293, 1.47287e-06, 1.47352e-06, 1.4732e-06",
      "created_at" : "2019-03-22T21:04:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-475782376",
      "id" : 475782376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NTc4MjM3Ng==",
      "updated_at" : "2019-03-26T21:19:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475782376",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14032](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14032.html) (Add p2p layer encryption with ECDH/ChaCha20Poly1305 by jonasschnelli)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-03-22T22:35:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-475804607",
      "id" : 475804607,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NTgwNDYwNw==",
      "updated_at" : "2019-06-11T12:13:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475804607",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r268407005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268407005"
         }
      },
      "author_association" : "NONE",
      "body" : "not sure if these magic numbers are supposed to be obvious, but some named constants might be nice for people who are new to this stuff",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-23T19:40:08Z",
      "diff_hunk" : "@@ -0,0 +1,91 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <limits>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool encrypt)\n+{\n+    std::vector<unsigned char> in(buffersize + 3 + 16, 0);\n+    std::vector<unsigned char> out(buffersize + 3 + 16, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r268407005",
      "id" : 268407005,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODQwNzAwNQ==",
      "original_commit_id" : "8dd9f11261194967e98e3991fd470fb9c7cc3016",
      "original_position" : 25,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 218053072,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268407005",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1731?v=4",
         "events_url" : "https://api.github.com/users/skwp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skwp/followers",
         "following_url" : "https://api.github.com/users/skwp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skwp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skwp",
         "id" : 1731,
         "login" : "skwp",
         "node_id" : "MDQ6VXNlcjE3MzE=",
         "organizations_url" : "https://api.github.com/users/skwp/orgs",
         "received_events_url" : "https://api.github.com/users/skwp/received_events",
         "repos_url" : "https://api.github.com/users/skwp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skwp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skwp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skwp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006034"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006034"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit:\r\n\r\nShadows existing `len_cmp` and also redundant initialization to zero?\r\n\r\nCould be just `uint64_t len_cmp_inner = XOR(ciphertext_buf[0], â¦`?",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-26T09:24:00Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Output(nullptr, cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;\n+    len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+              XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    len_cmp = le32toh(len_cmp);\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+        BOOST_CHECK(aead.GetLength(&out_len, seqnr_aad, aad_pos, ciphertext_buf.data()));\n+        BOOST_CHECK_EQUAL(out_len, expected_aad_length);\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, plaintext_buf_new.data(), plaintext_buf_new.size(), ciphertext_buf.data(), ciphertext_buf.size(), false);\n+        BOOST_CHECK_EQUAL(res, true);\n+\n+        // make sure we repetitive get the same plaintext\n+        BOOST_CHECK(memcmp(plaintext_buf.data(), plaintext_buf_new.data(), plaintext_buf.size()) == 0);\n+\n+        // compare sequence number 999 against the test vector\n+        if (seqnr_payload == 999) {\n+            BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac_sequence999.data(), expected_ciphertext_and_mac_sequence999.size()) == 0);\n+        }\n+        // set nonce and block counter, output the keystream\n+        cmp_ctx.SetIV(htole64(seqnr_aad));\n+        cmp_ctx.Seek(0);\n+        cmp_ctx.Output(nullptr, cmp_ctx_buffer.data(), 64);\n+\n+        // crypt the 3 length bytes and compare the length\n+        uint64_t len_cmp = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006034",
      "id" : 269006034,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAwNjAzNA==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 95,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 218770335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006034",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This `res` is never used. Should be checked?",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-26T09:25:11Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Output(nullptr, cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;\n+    len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+              XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    len_cmp = le32toh(len_cmp);\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006541",
      "id" : 269006541,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAwNjU0MQ==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 76,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 65,
      "pull_request_review_id" : 218770335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006541",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006819"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006819"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Scope can be reduced?",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-26T09:25:48Z",
      "diff_hunk" : "@@ -0,0 +1,131 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269006819",
      "id" : 269006819,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAwNjgxOQ==",
      "original_commit_id" : "68617154ecc0c0eb8634651e4e14f1c90975352b",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 54,
      "pull_request_review_id" : 218770335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269006819",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269007161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269007161"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be \"operation\" :-)",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-26T09:26:42Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269007161",
      "id" : 269007161,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTAwNzE2MQ==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 53,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 218771700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269007161",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Why is encrypting ~3 times slower than decrypting?",
      "created_at" : "2019-03-26T19:48:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476819283",
      "id" : 476819283,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NjgxOTI4Mw==",
      "updated_at" : "2019-03-26T19:49:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476819283",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Why is encrypting ~3 times slower than decrypting?\r\n\r\nBecause the decryption in the benchmark always fails the MAC check... *facepalm*. Currently fixing.",
      "created_at" : "2019-03-26T20:34:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476838884",
      "id" : 476838884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NjgzODg4NA==",
      "updated_at" : "2019-03-26T20:34:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476838884",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269318910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269318910"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You mean of `expected_tag`? Not sure it this makes things cleaner or more optimized.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-26T21:15:53Z",
      "diff_hunk" : "@@ -0,0 +1,131 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269318910",
      "id" : 269318910,
      "in_reply_to_id" : 269006819,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMxODkxMA==",
      "original_commit_id" : "68617154ecc0c0eb8634651e4e14f1c90975352b",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 54,
      "pull_request_review_id" : 219164907,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269318910",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319397"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319397"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-26T21:17:18Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319397",
      "id" : 269319397,
      "in_reply_to_id" : 269007161,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMxOTM5Nw==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 53,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 219165530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319397",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319459"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Fixed.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-26T21:17:28Z",
      "diff_hunk" : "@@ -621,6 +623,134 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"13000000000000000000000000000000\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the opperation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Output(nullptr, cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;\n+    len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+              XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    len_cmp = le32toh(len_cmp);\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319459",
      "id" : 269319459,
      "in_reply_to_id" : 269006541,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMxOTQ1OQ==",
      "original_commit_id" : "3f5a4c745d18977626ceff0e3719464d51e9dfc2",
      "original_position" : 76,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 65,
      "pull_request_review_id" : 219165609,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319459",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319725"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Using the available constantes now.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-26T21:18:17Z",
      "diff_hunk" : "@@ -0,0 +1,91 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <limits>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool encrypt)\n+{\n+    std::vector<unsigned char> in(buffersize + 3 + 16, 0);\n+    std::vector<unsigned char> out(buffersize + 3 + 16, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269319725",
      "id" : 269319725,
      "in_reply_to_id" : 268407005,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMxOTcyNQ==",
      "original_commit_id" : "8dd9f11261194967e98e3991fd470fb9c7cc3016",
      "original_position" : 25,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 219165973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269319725",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Overhauled the AEAD benchmark, now it measures:\r\n* only encryption of 64, 256 and 1MB\r\n* encryption and decryption (also including the previous-to-decryption `GetLength()` call)",
      "created_at" : "2019-03-26T21:23:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476858336",
      "id" : 476858336,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3Njg1ODMzNg==",
      "updated_at" : "2019-03-26T21:23:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476858336",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Feel like posting new numbers?",
      "created_at" : "2019-03-26T22:01:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476870170",
      "id" : 476870170,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3Njg3MDE3MA==",
      "updated_at" : "2019-03-26T22:01:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476870170",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\ni7-8700 CPU @ 3.20GHz\r\n# Benchmark, evals, iterations, total, min, max, median\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 5, 340, 6.89749, 0.00401996, 0.004089, 0.00405691\r\nCHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 5, 340, 3.42802, 0.00199702, 0.00206066, 0.00200356\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 5, 250000, 1.73244, 1.38097e-06, 1.39262e-06, 1.38631e-06\r\nCHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 5, 250000, 0.866814, 6.89058e-07, 6.98332e-07, 6.92555e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 5, 500000, 1.61924, 6.33995e-07, 6.61294e-07, 6.45421e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 5, 500000, 0.794098, 3.15846e-07, 3.22632e-07, 3.16612e-07\r\nHASH_1MB, 5, 340, 4.02255, 0.00233675, 0.00239431, 0.00236953\r\nHASH_256BYTES, 5, 250000, 1.14968, 9.16826e-07, 9.2569e-07, 9.17793e-07\r\nHASH_64BYTES, 5, 500000, 1.20545, 4.78177e-07, 4.87008e-07, 4.80163e-07\r\n```\r\n\r\n```\r\nRK3399 64-bit Hexa Core A72/A53 CPU (aarch64)\r\nCPU Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 5, 340, 25.8159, 0.0151542, 0.015309, 0.0151552\r\nCHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 5, 340, 12.8818, 0.00757678, 0.00757883, 0.00757744\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 5, 250000, 6.28925, 5.02614e-06, 5.0389e-06, 5.0307e-06\r\nCHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 5, 250000, 3.1574, 2.5177e-06, 2.53455e-06, 2.52181e-06\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 5, 500000, 5.67636, 2.26775e-06, 2.27397e-06, 2.26921e-06\r\nCHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 5, 500000, 2.85557, 1.13888e-06, 1.14831e-06, 1.14157e-06\r\nHASH_1MB, 5, 340, 11.9764, 0.00704443, 0.0070454, 0.00704505\r\nHASH_256BYTES, 5, 250000, 3.43234, 2.74542e-06, 2.74639e-06, 2.74585e-06\r\nHASH_64BYTES, 5, 500000, 3.6589, 1.4629e-06, 1.46428e-06, 1.46323e-06\r\n```",
      "created_at" : "2019-03-26T22:09:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-476872498",
      "id" : 476872498,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3Njg3MjQ5OA==",
      "updated_at" : "2019-03-26T22:09:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/476872498",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269469109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269469109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be `bool ok = aead.Crypt(â¦); assert(ok);` to guarantee side-effect free use of `assert(...);`?",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-27T09:28:12Z",
      "diff_hunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+#include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n+\n+#include <limits>\n+#include <assert.h>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool include_decryption)\n+{\n+    std::vector<unsigned char> in(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> out(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    uint64_t seqnr_payload = 0;\n+    uint64_t seqnr_aad = 0;\n+    int aad_pos = 0;\n+    uint32_t len = 0;\n+    while (state.KeepRunning()) {\n+        // encrypt or decrypt the buffer with a static key\n+        assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269469109",
      "id" : 269469109,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTQ2OTEwOQ==",
      "original_commit_id" : "a07f18c62c3d681bb4c64d567fccce15f53b95eb",
      "original_position" : 34,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : 35,
      "pull_request_review_id" : 219346467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269469109",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269469947"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269469947"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here :-)",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-03-27T09:30:26Z",
      "diff_hunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+#include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n+\n+#include <limits>\n+#include <assert.h>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool include_decryption)\n+{\n+    std::vector<unsigned char> in(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> out(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    uint64_t seqnr_payload = 0;\n+    uint64_t seqnr_aad = 0;\n+    int aad_pos = 0;\n+    uint32_t len = 0;\n+    while (state.KeepRunning()) {\n+        // encrypt or decrypt the buffer with a static key\n+        assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\n+\n+        if (include_decryption) {\n+            // if we decrypt, include the GetLength\n+            assert(aead.GetLength(&len, seqnr_aad, aad_pos, in.data()));\n+            assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r269469947",
      "id" : 269469947,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTQ2OTk0Nw==",
      "original_commit_id" : "a07f18c62c3d681bb4c64d567fccce15f53b95eb",
      "original_position" : 39,
      "path" : "src/bench/chacha_poly_aead.cpp",
      "position" : 40,
      "pull_request_review_id" : 219347591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269469947",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-03-27T11:34:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-477109803",
      "id" : 477109803,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NzEwOTgwMw==",
      "updated_at" : "2019-03-27T11:34:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/477109803",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased",
      "created_at" : "2019-03-27T16:40:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-477244965",
      "id" : 477244965,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NzI0NDk2NQ==",
      "updated_at" : "2019-03-27T16:40:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/477244965",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r271168248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271168248"
         }
      },
      "author_association" : "MEMBER",
      "body" : "` *len24_out = 0;` here serves no purpose AFAICT since assigned on the next line?",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-04-02T07:40:52Z",
      "diff_hunk" : "@@ -0,0 +1,131 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Output(poly_key, poly_key, sizeof(poly_key));\n+\n+    // if decrypting, verify the tag prior to decryption\n+    if (!is_encrypt) {\n+        const unsigned char* tag = src + src_len - POLY1305_TAGLEN;\n+        poly1305_auth(expected_tag, src, src_len - POLY1305_TAGLEN, poly_key);\n+\n+        // constant time compare the calculated MAC with the provided MAC\n+        if (timingsafe_bcmp(expected_tag, tag, POLY1305_TAGLEN) != 0) {\n+            memory_cleanse(expected_tag, sizeof(expected_tag));\n+            memory_cleanse(poly_key, sizeof(poly_key));\n+            return false;\n+        }\n+        memory_cleanse(expected_tag, sizeof(expected_tag));\n+        // MAC has been successfully verified, make sure we don't covert it in decryption\n+        src_len -= POLY1305_TAGLEN;\n+    }\n+\n+    // calculate and cache the next 64byte keystream block if requested sequence number is not yet the cache\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(htole64(seqnr_aad));\n+        m_chacha_header.Seek(0);\n+        m_chacha_header.Output(nullptr, m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT);\n+    }\n+    // crypt the AAD (3 bytes message length) with given position in AAD cipher instance keystream\n+    dest[0] = XOR(src[0], m_aad_keystream_buffer[aad_pos]);\n+    dest[1] = XOR(src[1], m_aad_keystream_buffer[aad_pos + 1]);\n+    dest[2] = XOR(src[2], m_aad_keystream_buffer[aad_pos + 2]);\n+\n+    // Set the playload ChaCha instance block counter to 1 and crypt the payload\n+    m_chacha_main.Seek(htole64(1));\n+    m_chacha_main.Output(src + CHACHA20_POLY1305_AEAD_AAD_LEN, dest + CHACHA20_POLY1305_AEAD_AAD_LEN, src_len - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+\n+    // If encrypting, calculate and append tag\n+    if (is_encrypt) {\n+        // the poly1305 tag expands over the AAD (3 bytes length) & encrypted payload\n+        poly1305_auth(dest + src_len, dest, src_len, poly_key);\n+    }\n+\n+    // cleanse no longer required MAC and polykey\n+    memory_cleanse(poly_key, sizeof(poly_key));\n+    return true;\n+}\n+\n+bool ChaCha20Poly1305AEAD::GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext)\n+{\n+    // enforce valid aad position to avoid accessing outside of the 64byte keystream cache\n+    // (there is space for 21 times 3 bytes)\n+    assert(aad_pos >= 0 && aad_pos < CHACHA20_ROUND_OUTPUT - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        // we need to calculate the 64 keystream bytes since we reached a new aad sequence number\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(htole64(seqnr_aad));                                      // use LE for the nonce\n+        m_chacha_header.Seek(0);                                                        // block counter 0\n+        m_chacha_header.Output(nullptr, m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT); // write keystream to the cache\n+    }\n+\n+    // decrypt the ciphertext length by XORing the right position of the 64byte keystream cache with the ciphertext\n+    *len24_out = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r271168248",
      "id" : 271168248,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTE2ODI0OA==",
      "original_commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "original_position" : 123,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 221491666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/271168248",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2019-05-10T07:53:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-491195230",
      "id" : 491195230,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MTE5NTIzMA==",
      "updated_at" : "2019-05-10T07:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/491195230",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r282781242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/282781242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-05-10T07:54:19Z",
      "diff_hunk" : "@@ -0,0 +1,131 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Output(poly_key, poly_key, sizeof(poly_key));\n+\n+    // if decrypting, verify the tag prior to decryption\n+    if (!is_encrypt) {\n+        const unsigned char* tag = src + src_len - POLY1305_TAGLEN;\n+        poly1305_auth(expected_tag, src, src_len - POLY1305_TAGLEN, poly_key);\n+\n+        // constant time compare the calculated MAC with the provided MAC\n+        if (timingsafe_bcmp(expected_tag, tag, POLY1305_TAGLEN) != 0) {\n+            memory_cleanse(expected_tag, sizeof(expected_tag));\n+            memory_cleanse(poly_key, sizeof(poly_key));\n+            return false;\n+        }\n+        memory_cleanse(expected_tag, sizeof(expected_tag));\n+        // MAC has been successfully verified, make sure we don't covert it in decryption\n+        src_len -= POLY1305_TAGLEN;\n+    }\n+\n+    // calculate and cache the next 64byte keystream block if requested sequence number is not yet the cache\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(htole64(seqnr_aad));\n+        m_chacha_header.Seek(0);\n+        m_chacha_header.Output(nullptr, m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT);\n+    }\n+    // crypt the AAD (3 bytes message length) with given position in AAD cipher instance keystream\n+    dest[0] = XOR(src[0], m_aad_keystream_buffer[aad_pos]);\n+    dest[1] = XOR(src[1], m_aad_keystream_buffer[aad_pos + 1]);\n+    dest[2] = XOR(src[2], m_aad_keystream_buffer[aad_pos + 2]);\n+\n+    // Set the playload ChaCha instance block counter to 1 and crypt the payload\n+    m_chacha_main.Seek(htole64(1));\n+    m_chacha_main.Output(src + CHACHA20_POLY1305_AEAD_AAD_LEN, dest + CHACHA20_POLY1305_AEAD_AAD_LEN, src_len - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+\n+    // If encrypting, calculate and append tag\n+    if (is_encrypt) {\n+        // the poly1305 tag expands over the AAD (3 bytes length) & encrypted payload\n+        poly1305_auth(dest + src_len, dest, src_len, poly_key);\n+    }\n+\n+    // cleanse no longer required MAC and polykey\n+    memory_cleanse(poly_key, sizeof(poly_key));\n+    return true;\n+}\n+\n+bool ChaCha20Poly1305AEAD::GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext)\n+{\n+    // enforce valid aad position to avoid accessing outside of the 64byte keystream cache\n+    // (there is space for 21 times 3 bytes)\n+    assert(aad_pos >= 0 && aad_pos < CHACHA20_ROUND_OUTPUT - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        // we need to calculate the 64 keystream bytes since we reached a new aad sequence number\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(htole64(seqnr_aad));                                      // use LE for the nonce\n+        m_chacha_header.Seek(0);                                                        // block counter 0\n+        m_chacha_header.Output(nullptr, m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT); // write keystream to the cache\n+    }\n+\n+    // decrypt the ciphertext length by XORing the right position of the 64byte keystream cache with the ciphertext\n+    *len24_out = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r282781242",
      "id" : 282781242,
      "in_reply_to_id" : 271168248,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4Mjc4MTI0Mg==",
      "original_commit_id" : "63851d38e5173a1357e5334862f15e2ba4378f66",
      "original_position" : 123,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 235969424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/282781242",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Here are some number of the comparison against the @openSSH form of the AEAD (quick implementation is [here](https://github.com/jonasschnelli/bitcoin/commit/48e7f5bd1ba55dd9648befcd160d495a5fabd274)) on Intel i7 and RK [arm64])\r\n\r\nThere are moderate gains with our @Bitcoin AEAD construct especially for 64byte messages (~1.4 times faster)\r\n\r\nI also added HASH (dbl sha256) with no asm (to compare apples with apples since ChaCha20 is also not NI accelerated).\r\n\r\n ```shell\r\ni7-8700 CPU @ 3.20GHz\r\n\r\nChaCha20Poly1305AEAD@Bitcoin\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 5, 340, 6.96947, 0.00405818, 0.00418744, 0.00407654\r\nCHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 5, 340, 3.483, 0.00202816, 0.00208079, 0.00204615\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 5, 250000, 1.72781, 1.35975e-06, 1.44466e-06, 1.36874e-06\r\nCHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 5, 250000, 0.883109, 6.80501e-07, 7.98644e-07, 6.83484e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 5, 500000, 1.58456, 6.14057e-07, 6.57714e-07, 6.38866e-07\r\nCHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 5, 500000, 0.791489, 3.05361e-07, 3.57775e-07, 3.062e-07\r\n\r\nChaCha20Poly1305AEAD@OpenSSH\r\nCHACHA20_POLY1305_OPENSSH_AEAD_1MB_ENCRYPT_DECRYPT, 5, 340, 7.0763, 0.00410207, 0.00423358, 0.00416736\r\nCHACHA20_POLY1305_OPENSSH_AEAD_1MB_ONLY_ENCRYPT, 5, 340, 3.50153, 0.00202787, 0.00211423, 0.00204805\r\nCHACHA20_POLY1305_OPENSSH_AEAD_256BYTES_ENCRYPT_DECRYPT, 5, 250000, 2.10268, 1.64571e-06, 1.76881e-06, 1.66784e-06\r\nCHACHA20_POLY1305_OPENSSH_AEAD_256BYTES_ONLY_ENCRYPT, 5, 250000, 0.990221, 7.72714e-07, 8.65131e-07, 7.74143e-07\r\nCHACHA20_POLY1305_OPENSSH_AEAD_64BYTES_ENCRYPT_DECRYPT, 5, 500000, 2.29661, 9.06308e-07, 9.4192e-07, 9.1748e-07\r\nCHACHA20_POLY1305_OPENSSH_AEAD_64BYTES_ONLY_ENCRYPT, 5, 500000, 1.03205, 4.03511e-07, 4.38993e-07, 4.05953e-07\r\n\r\n(NO ASM DBL-SHA256)\r\nHASH_1MB, 5, 340, 6.18416, 0.003603, 0.0036835, 0.00363839\r\nHASH_256BYTES, 5, 250000, 1.84485, 1.45055e-06, 1.53387e-06, 1.46062e-06\r\nHASH_64BYTES, 5, 500000, 1.81658, 7.14499e-07, 7.56105e-07, 7.21112e-07\r\n```\r\n\r\n```\r\nRK3399 64-bit Hexa Core A72/A53 CPU (aarch64)\r\nCHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 5, 340, 25.8472, 0.015143, 0.0153498, 0.0151757\r\nCHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 5, 340, 12.8757, 0.00756406, 0.00758074, 0.00757862\r\nCHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 5, 250000, 6.44229, 5.15237e-06, 5.1555e-06, 5.15375e-06\r\nCHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 5, 250000, 3.22662, 2.57975e-06, 2.58201e-06, 2.5817e-06\r\nCHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 5, 500000, 5.96034, 2.37337e-06, 2.38984e-06, 2.38668e-06\r\nCHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 5, 500000, 2.97761, 1.18648e-06, 1.19878e-06, 1.18715e-06\r\n\r\nCHACHA20_POLY1305_OPENSSH_AEAD_1MB_ENCRYPT_DECRYPT, 5, 340, 25.7817, 0.0151531, 0.0151865, 0.0151633\r\nCHACHA20_POLY1305_OPENSSH_AEAD_1MB_ONLY_ENCRYPT, 5, 340, 12.8959, 0.00757261, 0.00759154, 0.00758821\r\nCHACHA20_POLY1305_OPENSSH_AEAD_256BYTES_ENCRYPT_DECRYPT, 5, 250000, 7.6112, 6.08182e-06, 6.10197e-06, 6.08393e-06\r\nCHACHA20_POLY1305_OPENSSH_AEAD_256BYTES_ONLY_ENCRYPT, 5, 250000, 3.59548, 2.87162e-06, 2.87949e-06, 2.87783e-06\r\nCHACHA20_POLY1305_OPENSSH_AEAD_64BYTES_ENCRYPT_DECRYPT, 5, 500000, 8.39425, 3.3108e-06, 3.53569e-06, 3.31353e-06\r\nCHACHA20_POLY1305_OPENSSH_AEAD_64BYTES_ONLY_ENCRYPT, 5, 500000, 3.73337, 1.48799e-06, 1.49965e-06, 1.49489e-06\r\n```",
      "created_at" : "2019-05-11T13:45:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-491512397",
      "id" : 491512397,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MTUxMjM5Nw==",
      "updated_at" : "2019-05-11T13:45:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/491512397",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-05-16T18:05:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-493173037",
      "id" : 493173037,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MzE3MzAzNw==",
      "updated_at" : "2019-05-16T18:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/493173037",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r287879764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/287879764"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would say it makes things cleaner by virtue of narrower scope. ð¤·ââ ",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-05-27T20:48:06Z",
      "diff_hunk" : "@@ -0,0 +1,131 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r287879764",
      "id" : 287879764,
      "in_reply_to_id" : 269006819,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4Nzg3OTc2NA==",
      "original_commit_id" : "68617154ecc0c0eb8634651e4e14f1c90975352b",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 54,
      "pull_request_review_id" : 242387047,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/287879764",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r287882789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/287882789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: `BOOST_CHECK()`",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-05-27T21:14:18Z",
      "diff_hunk" : "@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;\n+    len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+              XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    len_cmp = le32toh(len_cmp);\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+        BOOST_CHECK_EQUAL(res, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r287882789",
      "id" : 287882789,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4Nzg4Mjc4OQ==",
      "original_commit_id" : "02a73a8a0089e77e43598091f51153914c556c21",
      "original_position" : 69,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 242390720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/287882789",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r287883196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/287883196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "How about splitting out `TestChaCha20Poly1305AEADFails`, rather than passing `must_succeed`?",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-05-27T21:18:03Z",
      "diff_hunk" : "@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r287883196",
      "id" : 287883196,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4Nzg4MzE5Ng==",
      "original_commit_id" : "02a73a8a0089e77e43598091f51153914c556c21",
      "original_position" : 47,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 45,
      "pull_request_review_id" : 242391217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/287883196",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I compared the implementation to http://bxr.su/OpenBSD/usr.bin/ssh/cipher-chachapoly.c and did not find any notable incongruities.\r\n\r\nDisclaimer: I am not a cryptographer.",
      "created_at" : "2019-05-27T21:19:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-496307505",
      "id" : 496307505,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5NjMwNzUwNQ==",
      "updated_at" : "2019-05-27T21:19:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/496307505",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r290723084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/290723084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is the advantage of defining `XOR` as a macro here ?\r\n(same in `chacha_poly_aead.cpp`)",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-05T12:56:17Z",
      "diff_hunk" : "@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r290723084",
      "id" : 290723084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MDcyMzA4NA==",
      "original_commit_id" : "9985e3c87b843dd73f8393bc0a3a5e0a4f84422f",
      "original_position" : 12,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 245986519,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/290723084",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r291114182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291114182"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I thought it improves readability (got inspired by DJBs code). But happy to remove it since it saves space.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-06T10:14:55Z",
      "diff_hunk" : "@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r291114182",
      "id" : 291114182,
      "in_reply_to_id" : 290723084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MTExNDE4Mg==",
      "original_commit_id" : "9985e3c87b843dd73f8393bc0a3a5e0a4f84422f",
      "original_position" : 12,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 246479866,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291114182",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r291128105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291128105"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It doesn't make the code more readable to me, at least. I recognize the C operator but the macro I had to look up. But I don't feel strongly about it.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-06T10:56:13Z",
      "diff_hunk" : "@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r291128105",
      "id" : 291128105,
      "in_reply_to_id" : 290723084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MTEyODEwNQ==",
      "original_commit_id" : "9985e3c87b843dd73f8393bc0a3a5e0a4f84422f",
      "original_position" : 12,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 246497677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291128105",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292326579"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292326579"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Fixed.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-11T08:07:15Z",
      "diff_hunk" : "@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;\n+    len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+              XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    len_cmp = le32toh(len_cmp);\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+        BOOST_CHECK_EQUAL(res, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292326579",
      "id" : 292326579,
      "in_reply_to_id" : 287882789,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjMyNjU3OQ==",
      "original_commit_id" : "02a73a8a0089e77e43598091f51153914c556c21",
      "original_position" : 69,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 248011905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292326579",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292326837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292326837"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think passing the `must_succeed` argument is fine and simpler.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-11T08:07:43Z",
      "diff_hunk" : "@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292326837",
      "id" : 292326837,
      "in_reply_to_id" : 287883196,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjMyNjgzNw==",
      "original_commit_id" : "02a73a8a0089e77e43598091f51153914c556c21",
      "original_position" : 47,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 45,
      "pull_request_review_id" : 248012161,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292326837",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292331959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292331959"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the extra XOR macro.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-11T08:19:42Z",
      "diff_hunk" : "@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292331959",
      "id" : 292331959,
      "in_reply_to_id" : 290723084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjMzMTk1OQ==",
      "original_commit_id" : "9985e3c87b843dd73f8393bc0a3a5e0a4f84422f",
      "original_position" : 12,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 248018336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292331959",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292462148"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292462148"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could add a auxiliary function at the top like:\r\n```cpp\r\ntemplate <typename T>\r\nvoid memory_cleanse(T v) {\r\n    memory_cleanse(v, sizeof(T));\r\n}\r\n```\r\nto prevent an invalid 2nd argument?",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-11T13:44:02Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));\n+\n+    // if decrypting, verify the tag prior to decryption\n+    if (!is_encrypt) {\n+        const unsigned char* tag = src + src_len - POLY1305_TAGLEN;\n+        poly1305_auth(expected_tag, src, src_len - POLY1305_TAGLEN, poly_key);\n+\n+        // constant time compare the calculated MAC with the provided MAC\n+        if (timingsafe_bcmp(expected_tag, tag, POLY1305_TAGLEN) != 0) {\n+            memory_cleanse(expected_tag, sizeof(expected_tag));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292462148",
      "id" : 292462148,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjQ2MjE0OA==",
      "original_commit_id" : "95d24be0c489717f47a3308c10744ce062473eb7",
      "original_position" : 71,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 71,
      "pull_request_review_id" : 248184915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292462148",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292463262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292463262"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ð¤  there are still 6 `XOR` usages, is this intended?",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-11T13:46:11Z",
      "diff_hunk" : "@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292463262",
      "id" : 292463262,
      "in_reply_to_id" : 290723084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MjQ2MzI2Mg==",
      "original_commit_id" : "9985e3c87b843dd73f8393bc0a3a5e0a4f84422f",
      "original_position" : 12,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 248184915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292463262",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292768095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292768095"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Both cleansed values can only be `POLY1305_TAGLEN` and I think it's fine using the default `memory_cleanse`.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-12T06:54:42Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));\n+\n+    // if decrypting, verify the tag prior to decryption\n+    if (!is_encrypt) {\n+        const unsigned char* tag = src + src_len - POLY1305_TAGLEN;\n+        poly1305_auth(expected_tag, src, src_len - POLY1305_TAGLEN, poly_key);\n+\n+        // constant time compare the calculated MAC with the provided MAC\n+        if (timingsafe_bcmp(expected_tag, tag, POLY1305_TAGLEN) != 0) {\n+            memory_cleanse(expected_tag, sizeof(expected_tag));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292768095",
      "id" : 292768095,
      "in_reply_to_id" : 292462148,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5Mjc2ODA5NQ==",
      "original_commit_id" : "95d24be0c489717f47a3308c10744ce062473eb7",
      "original_position" : 71,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 71,
      "pull_request_review_id" : 248574099,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292768095",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Removed the XOR macro in the test as well.",
      "created_at" : "2019-06-12T07:00:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-501146704",
      "id" : 501146704,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMTE0NjcwNA==",
      "updated_at" : "2019-06-12T07:00:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/501146704",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292771439"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292771439"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's fine as it is.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-12T07:07:51Z",
      "diff_hunk" : "@@ -0,0 +1,131 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r292771439",
      "id" : 292771439,
      "in_reply_to_id" : 269006819,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5Mjc3MTQzOQ==",
      "original_commit_id" : "68617154ecc0c0eb8634651e4e14f1c90975352b",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 54,
      "pull_request_review_id" : 248578647,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/292771439",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294111372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294111372"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is the \"message sequence number\" randomly generate or is it a counter?\r\n\r\nCould it be reseted while the key will still be in use?",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-17T01:15:04Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+\n+#include <crypto/chacha20.h>\n+\n+#include <cmath>\n+\n+static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n+static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_ROUND_OUTPUT = 64;         /* 64 bytes per round */\n+static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n+\n+/* A AEAD class for ChaCha20-Poly1305@bitcoin.\n+ *\n+ * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n+ * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n+ * bit counter into 64 bytes of output. This output is used as a keystream, with\n+ * any unused bytes simply discarded.\n+ *\n+ * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n+ * integrity tag given a message and a single-use 256 bit secret key.\n+ *\n+ * The chacha20-poly1305@bitcoin combines these two primitives into an\n+ * authenticated encryption mode. The construction used is based on that proposed\n+ * for TLS by Adam Langley in\n+ * <ref>[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 \"ChaCha20\n+ * and Poly1305 based Cipher Suites for TLS\", Adam Langley]</ref>, but differs in\n+ * the layout of data passed to the MAC and in the addition of encryption of the\n+ * packet lengths.\n+ *\n+ * ==== Detailed Construction ====\n+ *\n+ * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+ * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+ * instances of chacha20.\n+ *\n+ * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n+ * byte packet length field and has its own sequence number. The second instance,\n+ * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n+ * (Authenticated Encryption with Associated Data) that is used to encrypt and\n+ * authenticate the entire packet.\n+ *\n+ * Two separate cipher instances are used here so as to keep the packet lengths\n+ * confidential but not create an oracle for the packet payload cipher by\n+ * decrypting and using the packet length prior to checking the MAC. By using an\n+ * independently-keyed cipher instance to encrypt the length, an active attacker\n+ * seeking to exploit the packet input handling as a decryption oracle can learn\n+ * nothing about the payload contents or its MAC (assuming key derivation,\n+ * ChaCha20 and Poly1305 are secure).\n+ *\n+ * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n+ * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n+ * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n+ * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n+ * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n+ * is used for encryption of the packet payload.\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they may be decrypted.\n+ *\n+ * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n+ * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n+ * thus be used 21 times (keystream caching).\n+ *\n+ * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n+ * K_1 defined by block counter 0, the length field sequence number in little\n+ * endian and a keystream position from 0 to 60.\n+ *\n+ * Once the entire packet has been received, the MAC MUST be checked before\n+ * decryption. A per-packet Poly1305 key is generated as described above and the\n+ * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * packet length and the payload together. The calculated MAC is then compared in\n+ * constant time with the one appended to the packet and the packet decrypted\n+ * using ChaCha20 as described above (with K_2, the packet sequence number as\n+ * nonce and a starting block counter of 1).\n+ *\n+ * Detection of an invalid MAC MUST lead to immediate connection termination.\n+ *\n+ * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n+ * described above. Encrypt the packet payload (using K_2) and append it to the\n+ * encrypted length. Finally, calculate a MAC tag and append it.\n+ *\n+ * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n+ * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n+ * the receive channel.\n+ *\n+ * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n+ * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n+ * on the send channel.\n+ *\n+ * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n+ * general, therefore it is very likely that encrypted messages require not more\n+ * CPU cycles per bytes then the current unencrypted p2p message format\n+ * (ChaCha20/Poly1305 versus double SHA256).\n+ *\n+ * The initial packet sequence numbers are 0.\n+ *\n+ * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n+ * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n+ * {key, nonce}.\n+ *\n+ * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n+ * position-in-keystream} for encryption nor may it be used to encrypt more than\n+ * 2^70 bytes under the same {key, nonce}.\n+ *\n+ * We use message sequence numbers for both communication directions.\n+ */\n+\n+class ChaCha20Poly1305AEAD\n+{\n+private:\n+    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n+    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n+    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+\n+public:\n+    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+\n+    /** Encrypts/decrypts a packet\n+        seqnr_payload, the message sequence number",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294111372",
      "id" : 294111372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDExMTM3Mg==",
      "original_commit_id" : "21d07ab4fe49158b567d18dbaf79c9f2a3cdda85",
      "original_position" : 129,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 131,
      "pull_request_review_id" : 250261220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294111372",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294111551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294111551"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A. If it could get reseted without getting rid of the key this is not a good source for the nonce.\r\n\r\nB. If it's randomly generated then 64bit isn't secure enough. We should either move to the chacha20 from the RFC which has 96bit nonce and 32bit counter or increment it manually every time.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-17T01:16:48Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+\n+#include <crypto/chacha20.h>\n+\n+#include <cmath>\n+\n+static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n+static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_ROUND_OUTPUT = 64;         /* 64 bytes per round */\n+static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n+\n+/* A AEAD class for ChaCha20-Poly1305@bitcoin.\n+ *\n+ * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n+ * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n+ * bit counter into 64 bytes of output. This output is used as a keystream, with\n+ * any unused bytes simply discarded.\n+ *\n+ * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n+ * integrity tag given a message and a single-use 256 bit secret key.\n+ *\n+ * The chacha20-poly1305@bitcoin combines these two primitives into an\n+ * authenticated encryption mode. The construction used is based on that proposed\n+ * for TLS by Adam Langley in\n+ * <ref>[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 \"ChaCha20\n+ * and Poly1305 based Cipher Suites for TLS\", Adam Langley]</ref>, but differs in\n+ * the layout of data passed to the MAC and in the addition of encryption of the\n+ * packet lengths.\n+ *\n+ * ==== Detailed Construction ====\n+ *\n+ * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+ * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+ * instances of chacha20.\n+ *\n+ * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n+ * byte packet length field and has its own sequence number. The second instance,\n+ * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n+ * (Authenticated Encryption with Associated Data) that is used to encrypt and\n+ * authenticate the entire packet.\n+ *\n+ * Two separate cipher instances are used here so as to keep the packet lengths\n+ * confidential but not create an oracle for the packet payload cipher by\n+ * decrypting and using the packet length prior to checking the MAC. By using an\n+ * independently-keyed cipher instance to encrypt the length, an active attacker\n+ * seeking to exploit the packet input handling as a decryption oracle can learn\n+ * nothing about the payload contents or its MAC (assuming key derivation,\n+ * ChaCha20 and Poly1305 are secure).\n+ *\n+ * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n+ * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n+ * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n+ * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n+ * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n+ * is used for encryption of the packet payload.\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they may be decrypted.\n+ *\n+ * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n+ * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n+ * thus be used 21 times (keystream caching).\n+ *\n+ * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n+ * K_1 defined by block counter 0, the length field sequence number in little\n+ * endian and a keystream position from 0 to 60.\n+ *\n+ * Once the entire packet has been received, the MAC MUST be checked before\n+ * decryption. A per-packet Poly1305 key is generated as described above and the\n+ * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * packet length and the payload together. The calculated MAC is then compared in\n+ * constant time with the one appended to the packet and the packet decrypted\n+ * using ChaCha20 as described above (with K_2, the packet sequence number as\n+ * nonce and a starting block counter of 1).\n+ *\n+ * Detection of an invalid MAC MUST lead to immediate connection termination.\n+ *\n+ * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n+ * described above. Encrypt the packet payload (using K_2) and append it to the\n+ * encrypted length. Finally, calculate a MAC tag and append it.\n+ *\n+ * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n+ * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n+ * the receive channel.\n+ *\n+ * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n+ * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n+ * on the send channel.\n+ *\n+ * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n+ * general, therefore it is very likely that encrypted messages require not more\n+ * CPU cycles per bytes then the current unencrypted p2p message format\n+ * (ChaCha20/Poly1305 versus double SHA256).\n+ *\n+ * The initial packet sequence numbers are 0.\n+ *\n+ * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n+ * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n+ * {key, nonce}.\n+ *\n+ * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n+ * position-in-keystream} for encryption nor may it be used to encrypt more than\n+ * 2^70 bytes under the same {key, nonce}.\n+ *\n+ * We use message sequence numbers for both communication directions.\n+ */\n+\n+class ChaCha20Poly1305AEAD\n+{\n+private:\n+    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n+    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n+    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+\n+public:\n+    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+\n+    /** Encrypts/decrypts a packet\n+        seqnr_payload, the message sequence number",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294111551",
      "id" : 294111551,
      "in_reply_to_id" : 294111372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDExMTU1MQ==",
      "original_commit_id" : "21d07ab4fe49158b567d18dbaf79c9f2a3cdda85",
      "original_position" : 129,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 131,
      "pull_request_review_id" : 250261434,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294111551",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294114487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294114487"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@elichai I think discussion of the proposed AEAD should probably go on the mailing list discussing the BIP (https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016806.html). Comments here should probably be just about implementation, or on discrepancies between the implementation and the BIP.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-17T01:47:36Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+\n+#include <crypto/chacha20.h>\n+\n+#include <cmath>\n+\n+static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n+static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_ROUND_OUTPUT = 64;         /* 64 bytes per round */\n+static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n+\n+/* A AEAD class for ChaCha20-Poly1305@bitcoin.\n+ *\n+ * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n+ * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n+ * bit counter into 64 bytes of output. This output is used as a keystream, with\n+ * any unused bytes simply discarded.\n+ *\n+ * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n+ * integrity tag given a message and a single-use 256 bit secret key.\n+ *\n+ * The chacha20-poly1305@bitcoin combines these two primitives into an\n+ * authenticated encryption mode. The construction used is based on that proposed\n+ * for TLS by Adam Langley in\n+ * <ref>[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 \"ChaCha20\n+ * and Poly1305 based Cipher Suites for TLS\", Adam Langley]</ref>, but differs in\n+ * the layout of data passed to the MAC and in the addition of encryption of the\n+ * packet lengths.\n+ *\n+ * ==== Detailed Construction ====\n+ *\n+ * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+ * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+ * instances of chacha20.\n+ *\n+ * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n+ * byte packet length field and has its own sequence number. The second instance,\n+ * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n+ * (Authenticated Encryption with Associated Data) that is used to encrypt and\n+ * authenticate the entire packet.\n+ *\n+ * Two separate cipher instances are used here so as to keep the packet lengths\n+ * confidential but not create an oracle for the packet payload cipher by\n+ * decrypting and using the packet length prior to checking the MAC. By using an\n+ * independently-keyed cipher instance to encrypt the length, an active attacker\n+ * seeking to exploit the packet input handling as a decryption oracle can learn\n+ * nothing about the payload contents or its MAC (assuming key derivation,\n+ * ChaCha20 and Poly1305 are secure).\n+ *\n+ * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n+ * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n+ * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n+ * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n+ * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n+ * is used for encryption of the packet payload.\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they may be decrypted.\n+ *\n+ * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n+ * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n+ * thus be used 21 times (keystream caching).\n+ *\n+ * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n+ * K_1 defined by block counter 0, the length field sequence number in little\n+ * endian and a keystream position from 0 to 60.\n+ *\n+ * Once the entire packet has been received, the MAC MUST be checked before\n+ * decryption. A per-packet Poly1305 key is generated as described above and the\n+ * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * packet length and the payload together. The calculated MAC is then compared in\n+ * constant time with the one appended to the packet and the packet decrypted\n+ * using ChaCha20 as described above (with K_2, the packet sequence number as\n+ * nonce and a starting block counter of 1).\n+ *\n+ * Detection of an invalid MAC MUST lead to immediate connection termination.\n+ *\n+ * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n+ * described above. Encrypt the packet payload (using K_2) and append it to the\n+ * encrypted length. Finally, calculate a MAC tag and append it.\n+ *\n+ * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n+ * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n+ * the receive channel.\n+ *\n+ * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n+ * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n+ * on the send channel.\n+ *\n+ * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n+ * general, therefore it is very likely that encrypted messages require not more\n+ * CPU cycles per bytes then the current unencrypted p2p message format\n+ * (ChaCha20/Poly1305 versus double SHA256).\n+ *\n+ * The initial packet sequence numbers are 0.\n+ *\n+ * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n+ * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n+ * {key, nonce}.\n+ *\n+ * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n+ * position-in-keystream} for encryption nor may it be used to encrypt more than\n+ * 2^70 bytes under the same {key, nonce}.\n+ *\n+ * We use message sequence numbers for both communication directions.\n+ */\n+\n+class ChaCha20Poly1305AEAD\n+{\n+private:\n+    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n+    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n+    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+\n+public:\n+    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+\n+    /** Encrypts/decrypts a packet\n+        seqnr_payload, the message sequence number",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294114487",
      "id" : 294114487,
      "in_reply_to_id" : 294111372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDExNDQ4Nw==",
      "original_commit_id" : "21d07ab4fe49158b567d18dbaf79c9f2a3cdda85",
      "original_position" : 129,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 131,
      "pull_request_review_id" : 250265127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294114487",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294114671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294114671"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That said, I believe the sequence number is a simple counter, counting up from 0, incrementing by one for every message. It will get reset only when rekeying. Note that the security of ChaCha20 does not rely on the nonce being unpredictable, just on not reusing one, so it doesn't need any entropy.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-17T01:49:26Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+\n+#include <crypto/chacha20.h>\n+\n+#include <cmath>\n+\n+static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n+static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_ROUND_OUTPUT = 64;         /* 64 bytes per round */\n+static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n+\n+/* A AEAD class for ChaCha20-Poly1305@bitcoin.\n+ *\n+ * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n+ * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n+ * bit counter into 64 bytes of output. This output is used as a keystream, with\n+ * any unused bytes simply discarded.\n+ *\n+ * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n+ * integrity tag given a message and a single-use 256 bit secret key.\n+ *\n+ * The chacha20-poly1305@bitcoin combines these two primitives into an\n+ * authenticated encryption mode. The construction used is based on that proposed\n+ * for TLS by Adam Langley in\n+ * <ref>[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 \"ChaCha20\n+ * and Poly1305 based Cipher Suites for TLS\", Adam Langley]</ref>, but differs in\n+ * the layout of data passed to the MAC and in the addition of encryption of the\n+ * packet lengths.\n+ *\n+ * ==== Detailed Construction ====\n+ *\n+ * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+ * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+ * instances of chacha20.\n+ *\n+ * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n+ * byte packet length field and has its own sequence number. The second instance,\n+ * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n+ * (Authenticated Encryption with Associated Data) that is used to encrypt and\n+ * authenticate the entire packet.\n+ *\n+ * Two separate cipher instances are used here so as to keep the packet lengths\n+ * confidential but not create an oracle for the packet payload cipher by\n+ * decrypting and using the packet length prior to checking the MAC. By using an\n+ * independently-keyed cipher instance to encrypt the length, an active attacker\n+ * seeking to exploit the packet input handling as a decryption oracle can learn\n+ * nothing about the payload contents or its MAC (assuming key derivation,\n+ * ChaCha20 and Poly1305 are secure).\n+ *\n+ * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n+ * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n+ * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n+ * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n+ * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n+ * is used for encryption of the packet payload.\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they may be decrypted.\n+ *\n+ * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n+ * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n+ * thus be used 21 times (keystream caching).\n+ *\n+ * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n+ * K_1 defined by block counter 0, the length field sequence number in little\n+ * endian and a keystream position from 0 to 60.\n+ *\n+ * Once the entire packet has been received, the MAC MUST be checked before\n+ * decryption. A per-packet Poly1305 key is generated as described above and the\n+ * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * packet length and the payload together. The calculated MAC is then compared in\n+ * constant time with the one appended to the packet and the packet decrypted\n+ * using ChaCha20 as described above (with K_2, the packet sequence number as\n+ * nonce and a starting block counter of 1).\n+ *\n+ * Detection of an invalid MAC MUST lead to immediate connection termination.\n+ *\n+ * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n+ * described above. Encrypt the packet payload (using K_2) and append it to the\n+ * encrypted length. Finally, calculate a MAC tag and append it.\n+ *\n+ * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n+ * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n+ * the receive channel.\n+ *\n+ * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n+ * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n+ * on the send channel.\n+ *\n+ * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n+ * general, therefore it is very likely that encrypted messages require not more\n+ * CPU cycles per bytes then the current unencrypted p2p message format\n+ * (ChaCha20/Poly1305 versus double SHA256).\n+ *\n+ * The initial packet sequence numbers are 0.\n+ *\n+ * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n+ * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n+ * {key, nonce}.\n+ *\n+ * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n+ * position-in-keystream} for encryption nor may it be used to encrypt more than\n+ * 2^70 bytes under the same {key, nonce}.\n+ *\n+ * We use message sequence numbers for both communication directions.\n+ */\n+\n+class ChaCha20Poly1305AEAD\n+{\n+private:\n+    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n+    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n+    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+\n+public:\n+    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+\n+    /** Encrypts/decrypts a packet\n+        seqnr_payload, the message sequence number",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294114671",
      "id" : 294114671,
      "in_reply_to_id" : 294111372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDExNDY3MQ==",
      "original_commit_id" : "21d07ab4fe49158b567d18dbaf79c9f2a3cdda85",
      "original_position" : 129,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 131,
      "pull_request_review_id" : 250265373,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294114671",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294115900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294115900"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'll move it to the mailing list thanks.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-17T02:00:35Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+\n+#include <crypto/chacha20.h>\n+\n+#include <cmath>\n+\n+static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n+static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_ROUND_OUTPUT = 64;         /* 64 bytes per round */\n+static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n+\n+/* A AEAD class for ChaCha20-Poly1305@bitcoin.\n+ *\n+ * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n+ * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n+ * bit counter into 64 bytes of output. This output is used as a keystream, with\n+ * any unused bytes simply discarded.\n+ *\n+ * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n+ * integrity tag given a message and a single-use 256 bit secret key.\n+ *\n+ * The chacha20-poly1305@bitcoin combines these two primitives into an\n+ * authenticated encryption mode. The construction used is based on that proposed\n+ * for TLS by Adam Langley in\n+ * <ref>[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 \"ChaCha20\n+ * and Poly1305 based Cipher Suites for TLS\", Adam Langley]</ref>, but differs in\n+ * the layout of data passed to the MAC and in the addition of encryption of the\n+ * packet lengths.\n+ *\n+ * ==== Detailed Construction ====\n+ *\n+ * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+ * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+ * instances of chacha20.\n+ *\n+ * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n+ * byte packet length field and has its own sequence number. The second instance,\n+ * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n+ * (Authenticated Encryption with Associated Data) that is used to encrypt and\n+ * authenticate the entire packet.\n+ *\n+ * Two separate cipher instances are used here so as to keep the packet lengths\n+ * confidential but not create an oracle for the packet payload cipher by\n+ * decrypting and using the packet length prior to checking the MAC. By using an\n+ * independently-keyed cipher instance to encrypt the length, an active attacker\n+ * seeking to exploit the packet input handling as a decryption oracle can learn\n+ * nothing about the payload contents or its MAC (assuming key derivation,\n+ * ChaCha20 and Poly1305 are secure).\n+ *\n+ * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n+ * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n+ * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n+ * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n+ * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n+ * is used for encryption of the packet payload.\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they may be decrypted.\n+ *\n+ * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n+ * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n+ * thus be used 21 times (keystream caching).\n+ *\n+ * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n+ * K_1 defined by block counter 0, the length field sequence number in little\n+ * endian and a keystream position from 0 to 60.\n+ *\n+ * Once the entire packet has been received, the MAC MUST be checked before\n+ * decryption. A per-packet Poly1305 key is generated as described above and the\n+ * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * packet length and the payload together. The calculated MAC is then compared in\n+ * constant time with the one appended to the packet and the packet decrypted\n+ * using ChaCha20 as described above (with K_2, the packet sequence number as\n+ * nonce and a starting block counter of 1).\n+ *\n+ * Detection of an invalid MAC MUST lead to immediate connection termination.\n+ *\n+ * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n+ * described above. Encrypt the packet payload (using K_2) and append it to the\n+ * encrypted length. Finally, calculate a MAC tag and append it.\n+ *\n+ * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n+ * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n+ * the receive channel.\n+ *\n+ * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n+ * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n+ * on the send channel.\n+ *\n+ * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n+ * general, therefore it is very likely that encrypted messages require not more\n+ * CPU cycles per bytes then the current unencrypted p2p message format\n+ * (ChaCha20/Poly1305 versus double SHA256).\n+ *\n+ * The initial packet sequence numbers are 0.\n+ *\n+ * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n+ * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n+ * {key, nonce}.\n+ *\n+ * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n+ * position-in-keystream} for encryption nor may it be used to encrypt more than\n+ * 2^70 bytes under the same {key, nonce}.\n+ *\n+ * We use message sequence numbers for both communication directions.\n+ */\n+\n+class ChaCha20Poly1305AEAD\n+{\n+private:\n+    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n+    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n+    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+\n+public:\n+    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+\n+    /** Encrypts/decrypts a packet\n+        seqnr_payload, the message sequence number",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294115900",
      "id" : 294115900,
      "in_reply_to_id" : 294111372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDExNTkwMA==",
      "original_commit_id" : "21d07ab4fe49158b567d18dbaf79c9f2a3cdda85",
      "original_position" : 129,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 131,
      "pull_request_review_id" : 250266912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294115900",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294865581"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294865581"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This has been resolved on the mailing list: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017034.html",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-18T14:50:15Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+\n+#include <crypto/chacha20.h>\n+\n+#include <cmath>\n+\n+static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n+static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_ROUND_OUTPUT = 64;         /* 64 bytes per round */\n+static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n+\n+/* A AEAD class for ChaCha20-Poly1305@bitcoin.\n+ *\n+ * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n+ * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n+ * bit counter into 64 bytes of output. This output is used as a keystream, with\n+ * any unused bytes simply discarded.\n+ *\n+ * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n+ * integrity tag given a message and a single-use 256 bit secret key.\n+ *\n+ * The chacha20-poly1305@bitcoin combines these two primitives into an\n+ * authenticated encryption mode. The construction used is based on that proposed\n+ * for TLS by Adam Langley in\n+ * <ref>[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 \"ChaCha20\n+ * and Poly1305 based Cipher Suites for TLS\", Adam Langley]</ref>, but differs in\n+ * the layout of data passed to the MAC and in the addition of encryption of the\n+ * packet lengths.\n+ *\n+ * ==== Detailed Construction ====\n+ *\n+ * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+ * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+ * instances of chacha20.\n+ *\n+ * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n+ * byte packet length field and has its own sequence number. The second instance,\n+ * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n+ * (Authenticated Encryption with Associated Data) that is used to encrypt and\n+ * authenticate the entire packet.\n+ *\n+ * Two separate cipher instances are used here so as to keep the packet lengths\n+ * confidential but not create an oracle for the packet payload cipher by\n+ * decrypting and using the packet length prior to checking the MAC. By using an\n+ * independently-keyed cipher instance to encrypt the length, an active attacker\n+ * seeking to exploit the packet input handling as a decryption oracle can learn\n+ * nothing about the payload contents or its MAC (assuming key derivation,\n+ * ChaCha20 and Poly1305 are secure).\n+ *\n+ * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n+ * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n+ * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n+ * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n+ * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n+ * is used for encryption of the packet payload.\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they may be decrypted.\n+ *\n+ * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n+ * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n+ * thus be used 21 times (keystream caching).\n+ *\n+ * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n+ * K_1 defined by block counter 0, the length field sequence number in little\n+ * endian and a keystream position from 0 to 60.\n+ *\n+ * Once the entire packet has been received, the MAC MUST be checked before\n+ * decryption. A per-packet Poly1305 key is generated as described above and the\n+ * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * packet length and the payload together. The calculated MAC is then compared in\n+ * constant time with the one appended to the packet and the packet decrypted\n+ * using ChaCha20 as described above (with K_2, the packet sequence number as\n+ * nonce and a starting block counter of 1).\n+ *\n+ * Detection of an invalid MAC MUST lead to immediate connection termination.\n+ *\n+ * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n+ * described above. Encrypt the packet payload (using K_2) and append it to the\n+ * encrypted length. Finally, calculate a MAC tag and append it.\n+ *\n+ * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n+ * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n+ * the receive channel.\n+ *\n+ * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n+ * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n+ * on the send channel.\n+ *\n+ * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n+ * general, therefore it is very likely that encrypted messages require not more\n+ * CPU cycles per bytes then the current unencrypted p2p message format\n+ * (ChaCha20/Poly1305 versus double SHA256).\n+ *\n+ * The initial packet sequence numbers are 0.\n+ *\n+ * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n+ * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n+ * {key, nonce}.\n+ *\n+ * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n+ * position-in-keystream} for encryption nor may it be used to encrypt more than\n+ * 2^70 bytes under the same {key, nonce}.\n+ *\n+ * We use message sequence numbers for both communication directions.\n+ */\n+\n+class ChaCha20Poly1305AEAD\n+{\n+private:\n+    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n+    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n+    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+\n+public:\n+    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+\n+    /** Encrypts/decrypts a packet\n+        seqnr_payload, the message sequence number",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r294865581",
      "id" : 294865581,
      "in_reply_to_id" : 294111372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDg2NTU4MQ==",
      "original_commit_id" : "21d07ab4fe49158b567d18dbaf79c9f2a3cdda85",
      "original_position" : 129,
      "path" : "src/crypto/chacha_poly_aead.h",
      "position" : 131,
      "pull_request_review_id" : 251152928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/294865581",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Followed the advice by @promag and added default constructor avoidance.",
      "created_at" : "2019-06-18T15:50:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-503197017",
      "id" : 503197017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMzE5NzAxNw==",
      "updated_at" : "2019-06-18T15:50:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/503197017",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295857986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295857986"
         }
      },
      "author_association" : "MEMBER",
      "body" : "are you sure the `htole64` is correct here? `SetIV` is implemented as\r\n```c++\r\nvoid ChaCha20::SetIV(uint64_t iv)\r\n{\r\n    input[14] = iv;\r\n    input[15] = iv >> 32;\r\n}\r\n```\r\nwhere `input` is an array of 32-bit unsigned integers that are (afaik) always used in LE fashion with `ReadLE32` / `WriteLE32` when doing byte operations.\r\n`htole64` flips the bytes of an integer on a big-endian platform\r\nso on LE, the output looks like\r\n```\r\n0      1       2        3        4        5        6        7\r\niv0..7 iv8..15 iv16..23 iv24..31 iv32..39 iv40..47 iv48..55 iv56.63\r\n```\r\non BE, however you'd get\r\n```\r\n0       1         2        3        4        5        6       7      \r\niv56.63 iv48..55  iv40..47 iv32..39 iv24..31 iv16..23 iv8..15 iv0..7\r\n```\r\nI might be wrong, but this needs testing on a big-endian platform.\r\n\r\nIf it is necessary: as you always use `SetIV` with `htole64`, might make sense to move it into it.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-20T15:15:48Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295857986",
      "id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NTg1Nzk4Ng==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 252357606,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295857986",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295899078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295899078"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it is necessary, because even though `input` is always used with `ReadLE32`/`WriteLE32` when you shift the iv and split it into `input[14]` and `input[15]` you'll get different results in BE or LE platforms.\r\n(unless you use `htole64` or something equivalent to make sure that the bits are sorted the same way)\r\n\r\nBut I do agree that this should be part of the chacha20 implementation. because this is what requires that everything will be LE.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-20T16:49:43Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295899078",
      "id" : 295899078,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NTg5OTA3OA==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 252410152,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295899078",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295906236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295906236"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "shouldn't that be a 32bit number? (because of `le32toh` and that you later compare with `expected_aad_length` which is `unsigned int`(so either 32 or 64))",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-20T17:06:28Z",
      "diff_hunk" : "@@ -585,6 +586,133 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295906236",
      "id" : 295906236,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NTkwNjIzNg==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 57,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 252418727,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295906236",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295912711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295912711"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There should not be any need for byteswapping. The IV is specified as an integer _before serialization_. The ChaCha20 implementation uses the LE serialization of that number, even on BE platforms.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-20T17:22:42Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295912711",
      "id" : 295912711,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NTkxMjcxMQ==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 252426856,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295912711",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295932468"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295932468"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I think it is necessary, because even though input is always used with \r\n\r\nIf this is true, I still think it's done in the wrong way if the goal is to be consistent between LE and BE, you'd need a different kind of word-level swap. But I think @sipa is right here.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-20T18:12:18Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r295932468",
      "id" : 295932468,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NTkzMjQ2OA==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 252451693,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/295932468",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r296011894"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/296011894"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The only thing that bothers me is the split using r/l shift.\r\nChacha20 defines everything as LE serialized/deserialized and if you shift than you bypass this requirement on BE platforms.\r\n\r\n(unless `seqnr_payload` is somehow already LE and not the host native endianess)",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-20T21:09:26Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r296011894",
      "id" : 296011894,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NjAxMTg5NA==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 252540621,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/296011894",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r296014552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/296014552"
         }
      },
      "author_association" : "MEMBER",
      "body" : "seqnr_payload is an integer. The IV argument to ChaCha20 is an integer. Byte orders are only relevant when byte arrays are encoded as integers; that's not the case here. This is a pointless discussion. The `htole` call needs to go away.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-20T21:12:28Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r296014552",
      "id" : 296014552,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NjAxNDU1Mg==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 252541913,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/296014552",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r296017351"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/296017351"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, I went back to look at the definitions and tested, and right/left shifts work the same in all platforms (which actually is the sane thing, otherwise it will be a bit UB). you and Wladimir are right, the `htole64` isn't needed here. Sorry.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-20T21:16:51Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r296017351",
      "id" : 296017351,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NjAxNzM1MQ==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 252543735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/296017351",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297071752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297071752"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for looking into this...\r\nI'm actually unsure also by comparing against openSSH's implementation:\r\n* https://github.com/openssh/openssh-portable/blob/master/chacha.c#L85\r\n* https://github.com/openssh/openssh-portable/blob/master/cipher-chachapoly.c#L65\r\n\r\nGoing to setup a BE machine to test against various test vectors.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-25T08:41:16Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297071752",
      "id" : 297071752,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzA3MTc1Mg==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 253853511,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297071752",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297156191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297156191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> and right/left shifts work the same in all platforms \r\n\r\nC++ has plenty of cruel and unusual cases of UB and IDB, but this luckily isn't one\r\n\r\n> I'm actually unsure also by comparing against openSSH's implementation:\r\n\r\nLooking at these, they have `POKE_U64` which pokes a unsigned 64-bit integer into memory (big-endian byte order, see https://github.com/openssh/openssh-portable/blob/master/sshbuf.h#L266). This is used to poke the IV to a byte buffer `iv`. e.g.\r\n```c++\r\niv[0] = (seqnr >> 56) & 0xff;\r\niv[1] = (seqnr >> 48) & 0xff;\r\niv[2] = (seqnr >> 40) & 0xff;\r\niv[3] = (seqnr >> 32) & 0xff;\r\niv[4] = (seqnr >> 24) & 0xff;\r\niv[5] = (seqnr >> 16) & 0xff;\r\niv[6] = (seqnr >> 8) & 0xff;\r\niv[7] = seqnr & 0xff;\r\n```\r\nThen, in `chacha_ivsetup` (`U8TO32_LITTLE` is defined here: https://github.com/openssh/openssh-portable/blob/master/chacha.c#L27)\r\n```c++\r\nx->input[14] = U8TO32_LITTLE(iv + 0);\r\nx->input[15] = U8TO32_LITTLE(iv + 4);\r\n```\r\nSo if I get this right, this is equivalent to:\r\n```\r\nx->input[14] = (((seqnr >> 56) & 0xff)      ) |\r\n               (((seqnr >> 48) & 0xff) <<  8) |\r\n               (((seqnr >> 40) & 0xff) << 16) |\r\n               (((seqnr >> 32) & 0xff) << 24);\r\n\r\nx->input[15] = (((seqnr >> 24) & 0xff)      ) |\r\n               (((seqnr >> 16) & 0xff) <<  8) |\r\n               (((seqnr >>  8) & 0xff) << 16) |\r\n               (( seqnr        & 0xff) << 24);\r\n```\r\nWhich is weird in some sense, but not dependent on platform.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-25T12:18:14Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297156191",
      "id" : 297156191,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzE1NjE5MQ==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 253962746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297156191",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297172692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297172692"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed. Fixed.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-25T12:57:05Z",
      "diff_hunk" : "@@ -585,6 +586,133 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297172692",
      "id" : 297172692,
      "in_reply_to_id" : 295906236,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzE3MjY5Mg==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 57,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 253984115,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297172692",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297180256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297180256"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for clearing up.\r\n@sipa and @laanwj are def. correct. \r\nRemoved all byteswappings.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-25T13:13:44Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297180256",
      "id" : 297180256,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzE4MDI1Ng==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 253993925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297180256",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297184142"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297184142"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The only important part is, that \"producers\" or the AEAD stream (which is not part of this PR, we only intend to test against already produced test vectors) need to make sure that the 3 byte length is correctly in LE order (which is easy to screw up because htole32 won't work in the 24bit case).",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-06-25T13:21:39Z",
      "diff_hunk" : "@@ -0,0 +1,128 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r297184142",
      "id" : 297184142,
      "in_reply_to_id" : 295857986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzE4NDE0Mg==",
      "original_commit_id" : "a6397f15a86e25335a9cb0dfbcf31ac709186ac6",
      "original_position" : 56,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : null,
      "pull_request_review_id" : 253998966,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/297184142",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r299047516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299047516"
         }
      },
      "author_association" : "MEMBER",
      "body" : "there's still IV byte swapping here (another one below)",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-07-01T13:40:20Z",
      "diff_hunk" : "@@ -585,6 +586,133 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r299047516",
      "id" : 299047516,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTA0NzUxNg==",
      "original_commit_id" : "4f534064444c7d5246da938c13de839bb7b30ea1",
      "original_position" : 52,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 256343337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299047516",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Is the construct [RFC7539](https://tools.ietf.org/html/rfc7539) compliant?\r\n\r\n",
      "created_at" : "2019-07-02T12:48:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-507661811",
      "id" : 507661811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNzY2MTgxMQ==",
      "updated_at" : "2019-07-03T15:41:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/507661811",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/42201?v=4",
         "events_url" : "https://api.github.com/users/prusnak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prusnak/followers",
         "following_url" : "https://api.github.com/users/prusnak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prusnak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prusnak",
         "id" : 42201,
         "login" : "prusnak",
         "node_id" : "MDQ6VXNlcjQyMjAx",
         "organizations_url" : "https://api.github.com/users/prusnak/orgs",
         "received_events_url" : "https://api.github.com/users/prusnak/received_events",
         "repos_url" : "https://api.github.com/users/prusnak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prusnak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prusnak"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r299663126"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299663126"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Missed the ones in test. Will fix asap.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2019-07-02T20:08:21Z",
      "diff_hunk" : "@@ -585,6 +586,133 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r299663126",
      "id" : 299663126,
      "in_reply_to_id" : 299047516,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5OTY2MzEyNg==",
      "original_commit_id" : "4f534064444c7d5246da938c13de839bb7b30ea1",
      "original_position" : 52,
      "path" : "src/test/crypto_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 257121972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "updated_at" : "2019-07-03T09:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/299663126",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@prusnak \r\n\r\nThanks for asking. It probably belongs more to the mailing list discussion (here we discuss the actual implementation). However:\r\n\r\nInitially, the plan was to use the [OpenSSH version](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.chacha20poly1305) of the AEAD construct over the IETF one because encrypting the length field seems desirable in our case (would allow new message types that could pad arbitrary data to make packet inspection harder).\r\n\r\nSince the OpenSSH version is not very efficient for small messages, and, most nodes in synced state deal with around 40% of messages below 64 bytes, we decided to further optimize the AEAD construct to require less ChaCha20 operations, thus making it faster. Even faster than the current non-encrypted packet transport on most systems (hence the dbl-sha256 cpu cost).\r\n\r\nAgain, this discussion doesn't belong here so please move further questions regarding the concept  to the mailing list.\r\nThe details are described in the BIP: https://gist.github.com/jonasschnelli/c530ea8421b8d0e80c51486325587c52",
      "created_at" : "2019-07-02T20:19:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-507829497",
      "id" : 507829497,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNzgyOTQ5Nw==",
      "updated_at" : "2019-07-02T20:19:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/507829497",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "* Removed the invalid byte swapping in `crypto_tests`\r\n* Followed @practicalswift recommondation to not directly check and execute in `assert()` in the `chacha_poly_aead` bench",
      "created_at" : "2019-07-03T09:54:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-508026366",
      "id" : 508026366,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwODAyNjM2Ng==",
      "updated_at" : "2019-07-03T09:54:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508026366",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "code review ACK bb326add9f38f2a8e5ce5ee29d98ce08038200d8\r\n\r\nthere's nothing to test yet (besides running the unit tests), as this is the first step and the code here is currently unused",
      "created_at" : "2019-07-11T19:48:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#issuecomment-510628307",
      "id" : 510628307,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15649",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMDYyODMwNw==",
      "updated_at" : "2019-07-11T19:48:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510628307",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440779294"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440779294"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "BIP324 says the following on poly1305 key. \r\n> The AEAD is constructed as follows: for each packet, generate a Poly1305 key by taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20 block counter of zero.\r\n\r\nHere to me, it seems the key is being derived by encrypting a vector of zeros with `m_chacha_main` instead of simply taking the keystream of `m_chacha_main`? Are they the same thing? if not, then should the bip draft be changed to reflect this?  ",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2020-06-16T11:28:11Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(seqnr_payload);\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440779294",
      "id" : 440779294,
      "line" : 62,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc3OTI5NA==",
      "original_commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "original_line" : 62,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 62,
      "pull_request_review_id" : 431408950,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-16T11:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440779294",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440780669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440780669"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: \r\nFrom BIP draft\r\n>The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3 byte packet length field and has its own sequence number. The second instance, keyed by K_2, is used in conjunction with poly1305 to build an AEAD (Authenticated Encryption with Associated Data) that is used to encrypt and authenticate the entire packet.\r\n\r\nTo keep parity with the BIP should `K_1` and `K_2` be interchanged (either in BIP or in code)? ",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2020-06-16T11:31:00Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440780669",
      "id" : 440780669,
      "line" : 36,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDY2OQ==",
      "original_commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : 35,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 36,
      "pull_request_review_id" : 431408950,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "side" : "RIGHT",
      "start_line" : 35,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-16T11:33:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440780669",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440922076"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440922076"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "encrypting in chacha means generating a random string and XORing with the plaintext, so yes taking a stream is equal to encrypting zeros.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2020-06-16T15:03:06Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(seqnr_payload);\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440922076",
      "id" : 440922076,
      "in_reply_to_id" : 440779294,
      "line" : 62,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyMjA3Ng==",
      "original_commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "original_line" : 62,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 62,
      "pull_request_review_id" : 431600181,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-16T15:03:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440922076",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440927978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440927978"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for clarifying. ",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2020-06-16T15:11:06Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(seqnr_payload);\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440927978",
      "id" : 440927978,
      "in_reply_to_id" : 440779294,
      "line" : 62,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyNzk3OA==",
      "original_commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "original_line" : 62,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 62,
      "pull_request_review_id" : 431608861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-16T15:11:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440927978",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440931014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440931014"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. It's technically not wrong but confusing. Code update would probably be better.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2020-06-16T15:15:09Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r440931014",
      "id" : 440931014,
      "in_reply_to_id" : 440780669,
      "line" : 36,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTAxNA==",
      "original_commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : 35,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 36,
      "pull_request_review_id" : 431615519,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "side" : "RIGHT",
      "start_line" : 35,
      "start_side" : "RIGHT",
      "updated_at" : "2020-06-16T15:15:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440931014",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r657297517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657297517"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If it's helpful, I've created #22331 to fix this.",
      "commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "created_at" : "2021-06-23T17:00:53Z",
      "diff_hunk" : "@@ -0,0 +1,126 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15649#discussion_r657297517",
      "id" : 657297517,
      "in_reply_to_id" : 440780669,
      "line" : 36,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzI5NzUxNw==",
      "original_commit_id" : "bb326add9f38f2a8e5ce5ee29d98ce08038200d8",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : 35,
      "path" : "src/crypto/chacha_poly_aead.cpp",
      "position" : 36,
      "pull_request_review_id" : 690924162,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15649",
      "side" : "RIGHT",
      "start_line" : 35,
      "start_side" : "RIGHT",
      "updated_at" : "2021-06-23T17:00:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657297517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   }
]
