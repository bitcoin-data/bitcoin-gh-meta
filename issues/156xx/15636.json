{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "I've seen this error in appveyor on #15629:\r\n```\r\n68/118 - example_test.py failed, Duration: 12 s\r\nstdout:\r\n2019-03-21T18:12:43.380000Z TestFramework (INFO): Initializing test directory C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\test_runner_â¿_ð_20190321_180343\\example_test_50\r\n2019-03-21T18:12:48.510000Z TestFramework (INFO): Starting test!\r\n2019-03-21T18:12:48.511000Z TestFramework (INFO): Calling a custom function\r\n2019-03-21T18:12:48.511000Z TestFramework (INFO): Calling a custom method\r\n2019-03-21T18:12:48.511000Z TestFramework (INFO): Running custom_method\r\n2019-03-21T18:12:48.511000Z TestFramework (INFO): Create some blocks\r\n2019-03-21T18:12:48.528000Z TestFramework (INFO): Wait for node1 to reach current tip (height 11) using RPC\r\n2019-03-21T18:12:48.582000Z TestFramework (INFO): Connect node2 and node1\r\n2019-03-21T18:12:48.792000Z TestFramework (INFO): Add P2P connection to node2\r\n2019-03-21T18:12:48.847000Z TestFramework (INFO): Wait for node2 reach current tip. Test that it has propagated all the blocks to us\r\n2019-03-21T18:12:53.987000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: (['        wait_until(lambda: sorted(blocks) == sorted(list(self.nodes[2].p2p.block_receive_map.keys())), timeout=5, lock=mininode_lock)\\n'], 203)\r\n2019-03-21T18:12:53.988000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"C:\\projects\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 175, in main\r\n    self.run_test()\r\n  File \"C:\\projects\\bitcoin/test/functional/example_test.py\", line 203, in run_test\r\n    wait_until(lambda: sorted(blocks) == sorted(list(self.nodes[2].p2p.block_receive_map.keys())), timeout=5, lock=mininode_lock)\r\n  File \"C:\\projects\\bitcoin\\test\\functional\\test_framework\\util.py\", line 224, in wait_until\r\n    raise AssertionError(\"Predicate {} not true after {} seconds\".format(predicate_source, timeout))\r\nAssertionError: Predicate (['        wait_until(lambda: sorted(blocks) == sorted(list(self.nodes[2].p2p.block_receive_map.keys())), timeout=5, lock=mininode_lock)\\n'], 203) not true after 5 seconds\r\n2019-03-21T18:12:54.174000Z TestFramework (INFO): Stopping nodes\r\n2019-03-21T18:12:55.024000Z TestFramework (WARNING): Not cleaning up dir C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\test_runner_â¿_ð_20190321_180343\\example_test_50\r\n2019-03-21T18:12:55.101000Z TestFramework (ERROR): Test failed. Test logging available at C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\test_runner_â¿_ð_20190321_180343\\example_test_50/test_framework.log\r\n2019-03-21T18:12:55.101000Z TestFramework (ERROR): Hint: Call C:\\projects\\bitcoin\\test\\functional\\combine_logs.py 'C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\test_runner_â¿_ð_20190321_180343\\example_test_50' to consolidate all logs\r\n```",
   "closed_at" : "2020-04-26T15:49:06Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15636/comments",
   "created_at" : "2019-03-21T18:56:43Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15636/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/15636",
   "id" : 423891342,
   "labels" : [
      {
         "color" : "d4c5f9",
         "default" : false,
         "description" : null,
         "id" : 62963516,
         "name" : "Tests",
         "node_id" : "MDU6TGFiZWw2Mjk2MzUxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15636/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU0MjM4OTEzNDI=",
   "number" : 15636,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Sporadic example_test.py failure",
   "updated_at" : "2020-04-26T15:49:06Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15636",
   "user" : {
      "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
      "events_url" : "https://api.github.com/users/promag/events{/privacy}",
      "followers_url" : "https://api.github.com/users/promag/followers",
      "following_url" : "https://api.github.com/users/promag/following{/other_user}",
      "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/promag",
      "id" : 3534524,
      "login" : "promag",
      "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
      "organizations_url" : "https://api.github.com/users/promag/orgs",
      "received_events_url" : "https://api.github.com/users/promag/received_events",
      "repos_url" : "https://api.github.com/users/promag/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/promag"
   }
}
