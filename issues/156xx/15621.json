{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "I had a recent chat with @sipa about an idea I had to reimplement the CheckMultiSig operations to use public key recovery without altering their semantics.\r\n\r\nNew new proposed implementation would proceed as follows.\r\n\r\n   1. For each signature in a `k`-of-`n` CheckMultiSig operation, the message hash is computed (calling find-and-delete if required).\r\n   1. For each of `k` signature and message hash pairs, public key recovery is run to produce a list of sets of points in Jacobin coordinates.  This requires at least one modular square root operation (and very rarely two), similar in cost to a pubkey decompression, per signature.  The resulting list has `k` sets and each set has 2 points (or very rarely 4 points).\r\n  1. All of the recovered points are batch converted from Jacobian coordinates to affine coordinates at the cost of one modular inverse operation for the entire batch.\r\n  1. The list of sets of recovered points are compared, in order, to the list of serialized pubkeys passed to CheckMultiSig, using a new \"compare affine point to serialized pubkey\" function.   No pubkey decompression need be done.\r\n\r\nThe advantage of this proposed method over the current \"try-and-fail\" method is that the number of elliptic curve operations is now roughly proportional to `k`, the number of signatures, rather than `n` the number of pubkeys.\r\n\r\nFor non-`n`-of-`n` CheckMultiSig operations, I expect this method should be faster than the current implementation.  For `n`-of-`n` CheckMultiSig operations, the proposed method is not likely to be faster than local (`n` signature) batch verification and certainly not faster than global batch verification (for `OP_CHECKMULTISIGVERIFY`).\r\n\r\nUnfortunately, I don't have time to pursue a PR to implement this proposal at the moment, and maybe someone else would like to pick up this issue.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15621/comments",
   "created_at" : "2019-03-18T20:06:35Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15621/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/15621",
   "id" : 422410646,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15621/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU0MjI0MTA2NDY=",
   "number" : 15621,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Optimize CheckMultiSig by using public key recovery.",
   "updated_at" : "2019-03-18T20:06:35Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15621",
   "user" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/21371712?v=4",
      "events_url" : "https://api.github.com/users/roconnor-blockstream/events{/privacy}",
      "followers_url" : "https://api.github.com/users/roconnor-blockstream/followers",
      "following_url" : "https://api.github.com/users/roconnor-blockstream/following{/other_user}",
      "gists_url" : "https://api.github.com/users/roconnor-blockstream/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/roconnor-blockstream",
      "id" : 21371712,
      "login" : "roconnor-blockstream",
      "node_id" : "MDQ6VXNlcjIxMzcxNzEy",
      "organizations_url" : "https://api.github.com/users/roconnor-blockstream/orgs",
      "received_events_url" : "https://api.github.com/users/roconnor-blockstream/received_events",
      "repos_url" : "https://api.github.com/users/roconnor-blockstream/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/roconnor-blockstream/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/roconnor-blockstream/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/roconnor-blockstream"
   }
}
